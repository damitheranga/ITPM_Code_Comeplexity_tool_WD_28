-- phpMyAdmin SQL Dump
-- version 4.1.14
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: May 22, 2020 at 03:43 PM
-- Server version: 5.6.17
-- PHP Version: 5.5.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `demo`
--

-- --------------------------------------------------------

--
-- Table structure for table `csweight`
--

CREATE TABLE IF NOT EXISTS `csweight` (
  `cd_id` int(11) NOT NULL AUTO_INCREMENT,
  `conditionalCS` int(11) NOT NULL,
  `iterativeCS` int(11) NOT NULL,
  `switchCS` int(11) NOT NULL,
  `caseCS` int(11) NOT NULL,
  PRIMARY KEY (`cd_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=6 ;

--
-- Dumping data for table `csweight`
--

INSERT INTO `csweight` (`cd_id`, `conditionalCS`, `iterativeCS`, `switchCS`, `caseCS`) VALUES
(1, 1, 1, 1, 1),
(2, 5, 4, 1, 1),
(3, 3, 2, 4, 5),
(4, 5, 2, 6, 8),
(5, 1, 7, 8, 9);

-- --------------------------------------------------------

--
-- Table structure for table `inheritanceweights`
--

CREATE TABLE IF NOT EXISTS `inheritanceweights` (
  `inheri_id` int(11) NOT NULL AUTO_INCREMENT,
  `no_inheri` int(11) NOT NULL,
  `one_class` int(11) NOT NULL,
  `two_class` int(11) NOT NULL,
  `three_class` int(11) NOT NULL,
  `four_class` int(11) NOT NULL,
  PRIMARY KEY (`inheri_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=33 ;

--
-- Dumping data for table `inheritanceweights`
--

INSERT INTO `inheritanceweights` (`inheri_id`, `no_inheri`, `one_class`, `two_class`, `three_class`, `four_class`) VALUES
(1, 0, 1, 2, 3, 4),
(2, 1, 2, 3, 4, 5),
(3, 5, 3, 7, 5, 1),
(4, 0, 1, 2, 3, 4),
(5, 0, 1, 2, 3, 4),
(6, 3, 1, 2, 3, 4),
(7, 3, 8, 2, 3, 4),
(8, 0, 1, 2, 3, 4),
(9, 5, 2, 2, 3, 4),
(10, 0, 1, 2, 3, 4),
(11, 4, 9, 2, 3, 4),
(12, 0, 1, 2, 3, 4),
(13, 3, 7, 2, 3, 4),
(14, 0, 1, 2, 3, 4),
(15, 0, 1, 2, 3, 4),
(16, 3, 2, 2, 3, 4),
(17, 0, 1, 2, 3, 4),
(18, 0, 2, 2, 3, 4),
(19, 0, 1, 2, 3, 4),
(20, 6, 2, 2, 3, 5),
(21, 0, 1, 2, 3, 4),
(22, 7, 4, 2, 3, 4),
(23, 0, 1, 2, 3, 4),
(24, 6, 3, 2, 3, 4),
(25, 0, 1, 2, 3, 4),
(26, 7, 3, 2, 3, 4),
(27, 0, 1, 2, 3, 4),
(28, 9, 7, 2, 3, 4),
(29, 1, 5, 10, 15, 20),
(30, 7, 5, 2, 3, 4),
(31, 5, 8, 2, 3, 4),
(32, 1, 1, 2, 6, 5);

-- --------------------------------------------------------

--
-- Table structure for table `methodweigths`
--

CREATE TABLE IF NOT EXISTS `methodweigths` (
  `m_id` int(11) NOT NULL AUTO_INCREMENT,
  `p_return_type` int(11) NOT NULL,
  `c_return_type` int(11) NOT NULL,
  `v_return_type` int(11) NOT NULL,
  `p_para` int(11) NOT NULL,
  `c_para` int(11) NOT NULL,
  PRIMARY KEY (`m_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=4 ;

--
-- Dumping data for table `methodweigths`
--

INSERT INTO `methodweigths` (`m_id`, `p_return_type`, `c_return_type`, `v_return_type`, `p_para`, `c_para`) VALUES
(1, 2, 3, 4, 5, 6),
(2, 2, 4, 1, 1, 2),
(3, 2, 3, 4, 5, 6);

-- --------------------------------------------------------

--
-- Table structure for table `size`
--

CREATE TABLE IF NOT EXISTS `size` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `line_num` int(11) NOT NULL,
  `line` varchar(255) NOT NULL,
  `cs` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=13620 ;

--
-- Dumping data for table `size`
--

INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(1, 0, 'import java.util.Scanner;\r\n', 0),
(2, 1, ' class Years{\r\n', 2),
(3, 2, '   public int getYear(){\r\n', 4),
(4, 3, '	int year;\r\n', 0),
(5, 4, '	String enteredYear;\r\n', 0),
(6, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(7, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(8, 7, '	enteredYear = sc.next();\r\n', 8),
(9, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(10, 9, '	return year;\r\n', 2),
(11, 10, '   }\r\n', 0),
(12, 11, ' }\r\n', 0),
(13, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(14, 13, ' class Months extends Years{\r\n', 4),
(15, 14, '   public int getMonth(){\r\n', 4),
(16, 15, '	int month;\r\n', 0),
(17, 16, '	String enteredMonthNumber;\r\n', 0),
(18, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(19, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(20, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(21, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(22, 21, '	return month;\r\n', 2),
(23, 22, '   }\r\n', 0),
(24, 23, ' }\r\n', 0),
(25, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(26, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(27, 26, ' static int numDays = 0;\r\n', 6),
(28, 27, ' public static void main(String[] args) {\r\n', 8),
(29, 28, '   int year;\r\n', 0),
(30, 29, '   Months m = new Months();\r\n', 4),
(31, 30, '   int month = m.getMonth();\r\n', 8),
(32, 31, '   \r\n', 0),
(33, 32, '   if((month < 1) || (month > 12)){ \r\n', 10),
(34, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 8),
(35, 34, '   }\r\n', 0),
(36, 35, '   else {\r\n', 2),
(37, 36, '    switch (month) {\r\n', 2),
(38, 37, '      case 1:\r\n', 4),
(39, 38, '      case 3:\r\n', 4),
(40, 39, '      case 5:\r\n', 4),
(41, 40, '      case 7:\r\n', 4),
(42, 41, '      case 8:\r\n', 4),
(43, 42, '      case 10:\r\n', 4),
(44, 43, '      case 12:\r\n', 4),
(45, 44, '        numDays = 31;\r\n', 4),
(46, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(47, 46, '        break;\r\n', 2),
(48, 47, '      case 4:\r\n', 4),
(49, 48, '      case 6:\r\n', 4),
(50, 49, '      case 9:\r\n', 4),
(51, 50, '      case 11:\r\n', 4),
(52, 51, '       numDays = 30;\r\n', 4),
(53, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(54, 53, '       break;\r\n', 2),
(55, 54, '      case 2:\r\n', 4),
(56, 55, '       year = m.getYear();\r\n', 8),
(57, 56, '       if(year < 1) {\r\n', 4),
(58, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(59, 58, '       }\r\n', 0),
(60, 59, '       else{\r\n', 2),
(61, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 18),
(62, 61, '         numDays = 29;\r\n', 4),
(63, 62, '		 if(year > 2020){\r\n', 6),
(64, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(65, 64, '         }\r\n', 0),
(66, 65, '         else{\r\n', 2),
(67, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(68, 67, '         }\r\n', 0),
(69, 68, '        }//if at line 61\r\n', 0),
(70, 69, '        else{\r\n', 2),
(71, 70, '         numDays = 28;\r\n', 4),
(72, 71, '         if (year > 2020){\r\n', 6),
(73, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(74, 73, '         }\r\n', 0),
(75, 74, '         else{\r\n', 2),
(76, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(77, 76, '         }\r\n', 0),
(78, 77, '         break;  \r\n', 2),
(79, 78, '        }//else at line 70\r\n', 2),
(80, 79, '       }//else at line 60\r\n', 2),
(81, 80, '    }//switch at line 37\r\n', 2),
(82, 81, '   }//else at line 36\r\n', 2),
(83, 82, '  }//method\r\n', 2),
(84, 83, ' }//class', 2),
(85, 0, 'public class RecursionExample2 {  \r\n', 8),
(86, 1, 'static int count=0;  \r\n', 6),
(87, 2, 'public int p(){  \r\n', 4),
(88, 3, 'count++;  \r\n', 2),
(89, 4, 'if(count<=5){  \r\n', 8),
(90, 5, 'System.out.println("hello "+count);  \r\n', 8),
(91, 6, 'public int p();  \r\n', 4),
(92, 7, '}  \r\n', 0),
(93, 8, '}  \r\n', 0),
(94, 9, 'public static void main(String[] args) {  \r\n', 8),
(95, 10, 'p();  \r\n', 0),
(96, 11, '}  \r\n', 0),
(97, 12, '}  ', 0),
(98, 0, 'import java.awt.event.*;\n', 0),
(99, 1, 'import java.awt.*;\n', 0),
(100, 2, '\n', 0),
(101, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(102, 4, '\n', 0),
(103, 5, '    private int mx, my;\n', 4),
(104, 6, '    private Dimension size;\n', 2),
(105, 7, '    private int onaroll;\n', 2),
(106, 8, '\n', 0),
(107, 9, '    public void init() {\n', 6),
(108, 10, '        onaroll = 0;\n', 4),
(109, 11, '        setSize(500, 500);\n', 4),
(110, 12, '        size = getSize();\n', 2),
(111, 13, '        addMouseListener(this);\n', 2),
(112, 14, '        addMouseMotionListener(this);\n', 2),
(113, 15, '        addComponentListener(this);\n', 4),
(114, 16, '    }\n', 0),
(115, 17, '\n', 0),
(116, 18, '    public void update(Graphics g) {\n', 6),
(117, 19, '        Dimension newSize = getSize();\n', 4),
(118, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(119, 21, '            g.setColor(getBackground());\n', 6),
(120, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 16),
(121, 23, '        } else {\n', 2),
(122, 24, '            size = newSize;\n', 4),
(123, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 10),
(124, 26, '        } // Calculate new position\n', 10),
(125, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 22),
(126, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 22),
(127, 29, '        paint(g);\n', 0),
(128, 30, '    }\n', 0),
(129, 31, '  \n', 0),
(130, 32, '    public void paint(Graphics g) {\n', 6),
(131, 33, '        g.setColor(Color.black);\n', 6),
(132, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 14),
(133, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 16),
(134, 36, '    }\n', 0),
(135, 37, '\n', 0),
(136, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(137, 39, '\n', 0),
(138, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(139, 41, '        e.consume();\n', 6),
(140, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 18),
(141, 43, '            repaint();\n', 0),
(142, 44, '        }\n', 0),
(143, 45, '    }\n', 0),
(144, 46, '\n', 0),
(145, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(146, 48, '        int x = e.getX();\n', 8),
(147, 49, '        int y = e.getY();\n', 8),
(148, 50, '        e.consume();\n', 6),
(149, 51, '        requestFocus();\n', 0),
(150, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(151, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(152, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(153, 55, '                case 0:\n', 4),
(154, 56, '                    play(getCodeBase(), \n', 2),
(155, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(156, 58, '                    break;\n', 2),
(157, 59, '                case 1:\n', 4),
(158, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(159, 61, '                    break;\n', 2),
(160, 62, '                case 2:\n', 4),
(161, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(162, 64, '                    break;\n', 2),
(163, 65, '                case 3:\n', 4),
(164, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(165, 67, '                    break;\n', 2),
(166, 68, '                }\n', 0),
(167, 69, '                onaroll++;\n', 2),
(168, 70, '                if (onaroll > 5) {\n', 6),
(169, 72, '                } else {\n', 2),
(170, 74, '                }\n', 0),
(171, 75, '            } else {   //first hit\n', 0),
(172, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(173, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(174, 78, '                onaroll = 1;\n', 4),
(175, 79, '            }\n', 0),
(176, 80, '        } else {   //miss\n', 0),
(177, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(178, 82, '			\n', 0),
(179, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(180, 84, '            onaroll = 0;\n', 4),
(181, 85, '        }\n', 0),
(182, 86, '        repaint();\n', 0),
(183, 87, '    }\n', 0),
(184, 88, '\n', 0),
(185, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(186, 90, '\n', 0),
(187, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(188, 92, '        repaint();\n', 0),
(189, 93, '    }\n', 0),
(190, 94, '\n', 0),
(191, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(192, 96, '        repaint();\n', 0),
(193, 97, '    }\n', 0),
(194, 98, '\n', 0),
(195, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(196, 100, '\n', 0),
(197, 101, '    public void componentHidden(ComponentEvent e) {}\n', 8),
(198, 102, ' \n', 0),
(199, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(200, 104, ' \n', 0),
(201, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(202, 106, '        repaint();\n', 0),
(203, 107, '    }\n', 0),
(204, 108, ' \n', 0),
(205, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(206, 110, '        repaint();\n', 0),
(207, 111, '    }\n', 0),
(208, 112, '  \n', 0),
(209, 113, '    public void destroy() {\n', 6),
(210, 114, '        removeMouseListener(this);\n', 2),
(211, 115, '        removeMouseMotionListener(this);\n', 2),
(212, 116, '    }\n', 0),
(213, 117, '\n', 0),
(214, 118, '    public String getAppletInfo() {\n', 4),
(215, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(216, 120, '    }\n', 0),
(217, 121, '}\n', 0),
(218, 0, 'import java.awt.event.*;\n', 0),
(219, 1, 'import java.awt.*;\n', 0),
(220, 2, '\n', 0),
(221, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(222, 4, '\n', 0),
(223, 5, '    private int mx, my;\n', 4),
(224, 6, '    private Dimension size;\n', 2),
(225, 7, '    private int onaroll;\n', 2),
(226, 8, '\n', 0),
(227, 9, '    public void init() {\n', 6),
(228, 10, '        onaroll = 0;\n', 4),
(229, 11, '        setSize(500, 500);\n', 4),
(230, 12, '        size = getSize();\n', 2),
(231, 13, '        addMouseListener(this);\n', 2),
(232, 14, '        addMouseMotionListener(this);\n', 2),
(233, 15, '        addComponentListener(this);\n', 4),
(234, 16, '    }\n', 0),
(235, 17, '\n', 0),
(236, 18, '    public void update(Graphics g) {\n', 6),
(237, 19, '        Dimension newSize = getSize();\n', 4),
(238, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(239, 21, '            g.setColor(getBackground());\n', 6),
(240, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 16),
(241, 23, '        } else {\n', 2),
(242, 24, '            size = newSize;\n', 4),
(243, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 10),
(244, 26, '        } // Calculate new position\n', 10),
(245, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 22),
(246, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 22),
(247, 29, '        paint(g);\n', 0),
(248, 30, '    }\n', 0),
(249, 31, '  \n', 0),
(250, 32, '    public void paint(Graphics g) {\n', 6),
(251, 33, '        g.setColor(Color.black);\n', 6),
(252, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 14),
(253, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 16),
(254, 36, '    }\n', 0),
(255, 37, '\n', 0),
(256, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(257, 39, '\n', 0),
(258, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(259, 41, '        e.consume();\n', 6),
(260, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 18),
(261, 43, '            repaint();\n', 0),
(262, 44, '        }\n', 0),
(263, 45, '    }\n', 0),
(264, 46, '\n', 0),
(265, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(266, 48, '        int x = e.getX();\n', 8),
(267, 49, '        int y = e.getY();\n', 8),
(268, 50, '        e.consume();\n', 6),
(269, 51, '        requestFocus();\n', 0),
(270, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(271, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(272, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(273, 55, '                case 0:\n', 4),
(274, 56, '                    play(getCodeBase(), \n', 2),
(275, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(276, 58, '                    break;\n', 2),
(277, 59, '                case 1:\n', 4),
(278, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(279, 61, '                    break;\n', 2),
(280, 62, '                case 2:\n', 4),
(281, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(282, 64, '                    break;\n', 2),
(283, 65, '                case 3:\n', 4),
(284, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(285, 67, '                    break;\n', 2),
(286, 68, '                }\n', 0),
(287, 69, '                onaroll++;\n', 2),
(288, 70, '                if (onaroll > 5) {\n', 6),
(289, 72, '                } else {\n', 2),
(290, 74, '                }\n', 0),
(291, 75, '            } else {   //first hit\n', 0),
(292, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(293, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(294, 78, '                onaroll = 1;\n', 4),
(295, 79, '            }\n', 0),
(296, 80, '        } else {   //miss\n', 0),
(297, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(298, 82, '			\n', 0),
(299, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(300, 84, '            onaroll = 0;\n', 4),
(301, 85, '        }\n', 0),
(302, 86, '        repaint();\n', 0),
(303, 87, '    }\n', 0),
(304, 88, '\n', 0),
(305, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(306, 90, '\n', 0),
(307, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(308, 92, '        repaint();\n', 0),
(309, 93, '    }\n', 0),
(310, 94, '\n', 0),
(311, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(312, 96, '        repaint();\n', 0),
(313, 97, '    }\n', 0),
(314, 98, '\n', 0),
(315, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(316, 100, '\n', 0),
(317, 101, '    public void componentHidden(ComponentEvent e) {}\n', 8),
(318, 102, ' \n', 0),
(319, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(320, 104, ' \n', 0),
(321, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(322, 106, '        repaint();\n', 0),
(323, 107, '    }\n', 0),
(324, 108, ' \n', 0),
(325, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(326, 110, '        repaint();\n', 0),
(327, 111, '    }\n', 0),
(328, 112, '  \n', 0),
(329, 113, '    public void destroy() {\n', 6),
(330, 114, '        removeMouseListener(this);\n', 2),
(331, 115, '        removeMouseMotionListener(this);\n', 2),
(332, 116, '    }\n', 0),
(333, 117, '\n', 0),
(334, 118, '    public String getAppletInfo() {\n', 4),
(335, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(336, 120, '    }\n', 0),
(337, 121, '}\n', 0),
(338, 0, 'import java.util.Scanner;\r\n', 0),
(339, 1, ' class Years{\r\n', 2),
(340, 2, '   public int getYear(){\r\n', 4),
(341, 3, '	int year;\r\n', 0),
(342, 4, '	String enteredYear;\r\n', 0),
(343, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(344, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(345, 7, '	enteredYear = sc.next();\r\n', 8),
(346, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(347, 9, '	return year;\r\n', 2),
(348, 10, '   }\r\n', 0),
(349, 11, ' }\r\n', 0),
(350, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(351, 13, ' class Months extends Years{\r\n', 4),
(352, 14, '   public int getMonth(){\r\n', 4),
(353, 15, '	int month;\r\n', 0),
(354, 16, '	String enteredMonthNumber;\r\n', 0),
(355, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(356, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(357, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(358, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(359, 21, '	return month;\r\n', 2),
(360, 22, '   }\r\n', 0),
(361, 23, ' }\r\n', 0),
(362, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(363, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(364, 26, ' static int numDays = 0;\r\n', 6),
(365, 27, ' public static void main(String[] args) {\r\n', 8),
(366, 28, '   int year;\r\n', 0),
(367, 29, '   Months m = new Months();\r\n', 4),
(368, 30, '   int month = m.getMonth();\r\n', 8),
(369, 31, '   \r\n', 0),
(370, 32, '   if((month < 1) || (month > 12)){ \r\n', 10),
(371, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 8),
(372, 34, '   }\r\n', 0),
(373, 35, '   else {\r\n', 2),
(374, 36, '    switch (month) {\r\n', 2),
(375, 37, '      case 1:\r\n', 4),
(376, 38, '      case 3:\r\n', 4),
(377, 39, '      case 5:\r\n', 4),
(378, 40, '      case 7:\r\n', 4),
(379, 41, '      case 8:\r\n', 4),
(380, 42, '      case 10:\r\n', 4),
(381, 43, '      case 12:\r\n', 4),
(382, 44, '        numDays = 31;\r\n', 4),
(383, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(384, 46, '        break;\r\n', 2),
(385, 47, '      case 4:\r\n', 4),
(386, 48, '      case 6:\r\n', 4),
(387, 49, '      case 9:\r\n', 4),
(388, 50, '      case 11:\r\n', 4),
(389, 51, '       numDays = 30;\r\n', 4),
(390, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(391, 53, '       break;\r\n', 2),
(392, 54, '      case 2:\r\n', 4),
(393, 55, '       year = m.getYear();\r\n', 8),
(394, 56, '       if(year < 1) {\r\n', 4),
(395, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(396, 58, '       }\r\n', 0),
(397, 59, '       else{\r\n', 2),
(398, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 18),
(399, 61, '         numDays = 29;\r\n', 4),
(400, 62, '		 if(year > 2020){\r\n', 6),
(401, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(402, 64, '         }\r\n', 0),
(403, 65, '         else{\r\n', 2),
(404, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(405, 67, '         }\r\n', 0),
(406, 68, '        }//if at line 61\r\n', 0),
(407, 69, '        else{\r\n', 2),
(408, 70, '         numDays = 28;\r\n', 4),
(409, 71, '         if (year > 2020){\r\n', 6),
(410, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(411, 73, '         }\r\n', 0),
(412, 74, '         else{\r\n', 2),
(413, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(414, 76, '         }\r\n', 0),
(415, 77, '         break;  \r\n', 2),
(416, 78, '        }//else at line 70\r\n', 2),
(417, 79, '       }//else at line 60\r\n', 2),
(418, 80, '    }//switch at line 37\r\n', 2),
(419, 81, '   }//else at line 36\r\n', 2),
(420, 82, '  }//method\r\n', 2),
(421, 83, ' }//class', 2),
(422, 0, 'class Pattern{ \r\n', 2),
(423, 1, 'public static void main(String[] args) { \r\n', 8),
(424, 2, '	 int rows = 5;\r\n', 4),
(425, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 8),
(426, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 8),
(427, 5, '	 System.out.print(j + " "); \r\n', 10),
(428, 6, '	 } \r\n', 0),
(429, 7, '	 System.out.println(""); \r\n', 8),
(430, 8, ' 	} \r\n', 0),
(431, 9, ' 	} \r\n', 0),
(432, 10, '} ', 0),
(433, 0, 'import java.util.Scanner;\r\n', 0),
(434, 1, ' class Years{\r\n', 2),
(435, 2, '   public int getYear(){\r\n', 4),
(436, 3, '	int year;\r\n', 0),
(437, 4, '	String enteredYear;\r\n', 0),
(438, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(439, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(440, 7, '	enteredYear = sc.next();\r\n', 8),
(441, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(442, 9, '	return year;\r\n', 2),
(443, 10, '   }\r\n', 0),
(444, 11, ' }\r\n', 0),
(445, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(446, 13, ' class Months extends Years{\r\n', 4),
(447, 14, '   public int getMonth(){\r\n', 4),
(448, 15, '	int month;\r\n', 0),
(449, 16, '	String enteredMonthNumber;\r\n', 0),
(450, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(451, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(452, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(453, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(454, 21, '	return month;\r\n', 2),
(455, 22, '   }\r\n', 0),
(456, 23, ' }\r\n', 0),
(457, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(458, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(459, 26, ' static int numDays = 0;\r\n', 6),
(460, 27, ' public static void main(String[] args) {\r\n', 8),
(461, 28, '   int year;\r\n', 0),
(462, 29, '   Months m = new Months();\r\n', 4),
(463, 30, '   int month = m.getMonth();\r\n', 8),
(464, 31, '   \r\n', 0),
(465, 32, '   if((month < 1) || (month > 12)){ \r\n', 10),
(466, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 8),
(467, 34, '   }\r\n', 0),
(468, 35, '   else {\r\n', 2),
(469, 36, '    switch (month) {\r\n', 2),
(470, 37, '      case 1:\r\n', 4),
(471, 38, '      case 3:\r\n', 4),
(472, 39, '      case 5:\r\n', 4),
(473, 40, '      case 7:\r\n', 4),
(474, 41, '      case 8:\r\n', 4),
(475, 42, '      case 10:\r\n', 4),
(476, 43, '      case 12:\r\n', 4),
(477, 44, '        numDays = 31;\r\n', 4),
(478, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(479, 46, '        break;\r\n', 2),
(480, 47, '      case 4:\r\n', 4),
(481, 48, '      case 6:\r\n', 4),
(482, 49, '      case 9:\r\n', 4),
(483, 50, '      case 11:\r\n', 4),
(484, 51, '       numDays = 30;\r\n', 4),
(485, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(486, 53, '       break;\r\n', 2),
(487, 54, '      case 2:\r\n', 4),
(488, 55, '       year = m.getYear();\r\n', 8),
(489, 56, '       if(year < 1) {\r\n', 4),
(490, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(491, 58, '       }\r\n', 0),
(492, 59, '       else{\r\n', 2),
(493, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 18),
(494, 61, '         numDays = 29;\r\n', 4),
(495, 62, '		 if(year > 2020){\r\n', 6),
(496, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(497, 64, '         }\r\n', 0),
(498, 65, '         else{\r\n', 2),
(499, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(500, 67, '         }\r\n', 0),
(501, 68, '        }//if at line 61\r\n', 0),
(502, 69, '        else{\r\n', 2),
(503, 70, '         numDays = 28;\r\n', 4),
(504, 71, '         if (year > 2020){\r\n', 6),
(505, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(506, 73, '         }\r\n', 0),
(507, 74, '         else{\r\n', 2),
(508, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(509, 76, '         }\r\n', 0),
(510, 77, '         break;  \r\n', 2),
(511, 78, '        }//else at line 70\r\n', 2),
(512, 79, '       }//else at line 60\r\n', 2),
(513, 80, '    }//switch at line 37\r\n', 2),
(514, 81, '   }//else at line 36\r\n', 2),
(515, 82, '  }//method\r\n', 2),
(516, 83, ' }//class', 2),
(517, 0, 'public class RecursionExample2 {  \r\n', 8),
(518, 1, 'static int count=0;  \r\n', 6),
(519, 2, 'public int p(){  \r\n', 4),
(520, 3, 'count++;  \r\n', 2),
(521, 4, 'if(count<=5){  \r\n', 8),
(522, 5, 'System.out.println("hello "+count);  \r\n', 8),
(523, 6, 'public int p();  \r\n', 4),
(524, 7, '}  \r\n', 0),
(525, 8, '}  \r\n', 0),
(526, 9, 'public static void main(String[] args) {  \r\n', 8),
(527, 10, 'p();  \r\n', 0),
(528, 11, '}  \r\n', 0),
(529, 12, '}  ', 0),
(530, 0, 'import java.awt.event.*;\n', 0),
(531, 1, 'import java.awt.*;\n', 0),
(532, 2, '\n', 0),
(533, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(534, 4, '\n', 0),
(535, 5, '    private int mx, my;\n', 4),
(536, 6, '    private Dimension size;\n', 2),
(537, 7, '    private int onaroll;\n', 2),
(538, 8, '\n', 0),
(539, 9, '    public void init() {\n', 6),
(540, 10, '        onaroll = 0;\n', 4),
(541, 11, '        setSize(500, 500);\n', 4),
(542, 12, '        size = getSize();\n', 2),
(543, 13, '        addMouseListener(this);\n', 2),
(544, 14, '        addMouseMotionListener(this);\n', 2),
(545, 15, '        addComponentListener(this);\n', 4),
(546, 16, '    }\n', 0),
(547, 17, '\n', 0),
(548, 18, '    public void update(Graphics g) {\n', 6),
(549, 19, '        Dimension newSize = getSize();\n', 4),
(550, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(551, 21, '            g.setColor(getBackground());\n', 6),
(552, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 16),
(553, 23, '        } else {\n', 2),
(554, 24, '            size = newSize;\n', 4),
(555, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 10),
(556, 26, '        } // Calculate new position\n', 10),
(557, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 22),
(558, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 22),
(559, 29, '        paint(g);\n', 0),
(560, 30, '    }\n', 0),
(561, 31, '  \n', 0),
(562, 32, '    public void paint(Graphics g) {\n', 6),
(563, 33, '        g.setColor(Color.black);\n', 6),
(564, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 14),
(565, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 16),
(566, 36, '    }\n', 0),
(567, 37, '\n', 0),
(568, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(569, 39, '\n', 0),
(570, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(571, 41, '        e.consume();\n', 6),
(572, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 18),
(573, 43, '            repaint();\n', 0),
(574, 44, '        }\n', 0),
(575, 45, '    }\n', 0),
(576, 46, '\n', 0),
(577, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(578, 48, '        int x = e.getX();\n', 8),
(579, 49, '        int y = e.getY();\n', 8),
(580, 50, '        e.consume();\n', 6),
(581, 51, '        requestFocus();\n', 0),
(582, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(583, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(584, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(585, 55, '                case 0:\n', 4),
(586, 56, '                    play(getCodeBase(), \n', 2),
(587, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(588, 58, '                    break;\n', 2),
(589, 59, '                case 1:\n', 4),
(590, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(591, 61, '                    break;\n', 2),
(592, 62, '                case 2:\n', 4),
(593, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(594, 64, '                    break;\n', 2),
(595, 65, '                case 3:\n', 4),
(596, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(597, 67, '                    break;\n', 2),
(598, 68, '                }\n', 0),
(599, 69, '                onaroll++;\n', 2),
(600, 70, '                if (onaroll > 5) {\n', 6),
(601, 72, '                } else {\n', 2),
(602, 74, '                }\n', 0),
(603, 75, '            } else {   //first hit\n', 0),
(604, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(605, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(606, 78, '                onaroll = 1;\n', 4),
(607, 79, '            }\n', 0),
(608, 80, '        } else {   //miss\n', 0),
(609, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(610, 82, '			\n', 0),
(611, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(612, 84, '            onaroll = 0;\n', 4),
(613, 85, '        }\n', 0),
(614, 86, '        repaint();\n', 0),
(615, 87, '    }\n', 0),
(616, 88, '\n', 0),
(617, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(618, 90, '\n', 0),
(619, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(620, 92, '        repaint();\n', 0),
(621, 93, '    }\n', 0),
(622, 94, '\n', 0),
(623, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(624, 96, '        repaint();\n', 0),
(625, 97, '    }\n', 0),
(626, 98, '\n', 0),
(627, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(628, 100, '\n', 0),
(629, 101, '    public void componentHidden(ComponentEvent e) {}\n', 8),
(630, 102, ' \n', 0),
(631, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(632, 104, ' \n', 0),
(633, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(634, 106, '        repaint();\n', 0),
(635, 107, '    }\n', 0),
(636, 108, ' \n', 0),
(637, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(638, 110, '        repaint();\n', 0),
(639, 111, '    }\n', 0),
(640, 112, '  \n', 0),
(641, 113, '    public void destroy() {\n', 6),
(642, 114, '        removeMouseListener(this);\n', 2),
(643, 115, '        removeMouseMotionListener(this);\n', 2),
(644, 116, '    }\n', 0),
(645, 117, '\n', 0),
(646, 118, '    public String getAppletInfo() {\n', 4),
(647, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(648, 120, '    }\n', 0),
(649, 121, '}\n', 0),
(650, 0, 'import java.awt.event.*;\n', 0),
(651, 1, 'import java.awt.*;\n', 0),
(652, 2, '\n', 0),
(653, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(654, 4, '\n', 0),
(655, 5, '    private int mx, my;\n', 4),
(656, 6, '    private Dimension size;\n', 2),
(657, 7, '    private int onaroll;\n', 2),
(658, 8, '\n', 0),
(659, 9, '    public void init() {\n', 6),
(660, 10, '        onaroll = 0;\n', 4),
(661, 11, '        setSize(500, 500);\n', 4),
(662, 12, '        size = getSize();\n', 2),
(663, 13, '        addMouseListener(this);\n', 2),
(664, 14, '        addMouseMotionListener(this);\n', 2),
(665, 15, '        addComponentListener(this);\n', 4),
(666, 16, '    }\n', 0),
(667, 17, '\n', 0),
(668, 18, '    public void update(Graphics g) {\n', 6),
(669, 19, '        Dimension newSize = getSize();\n', 4),
(670, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(671, 21, '            g.setColor(getBackground());\n', 6),
(672, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 16),
(673, 23, '        } else {\n', 2),
(674, 24, '            size = newSize;\n', 4),
(675, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 10),
(676, 26, '        } // Calculate new position\n', 10),
(677, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 22),
(678, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 22),
(679, 29, '        paint(g);\n', 0),
(680, 30, '    }\n', 0),
(681, 31, '  \n', 0),
(682, 32, '    public void paint(Graphics g) {\n', 6),
(683, 33, '        g.setColor(Color.black);\n', 6),
(684, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 14),
(685, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 16),
(686, 36, '    }\n', 0),
(687, 0, 'import java.util.Scanner;\r\n', 0),
(688, 1, ' class Years{\r\n', 2),
(689, 2, '   public int getYear(){\r\n', 5),
(690, 3, '	int year;\r\n', 0),
(691, 4, '	String enteredYear;\r\n', 0),
(692, 5, '	Scanner sc = new Scanner(System.in);\r\n', 18),
(693, 6, '	System.out.println("Enter the year as a number :");\r\n', 12),
(694, 7, '	enteredYear = sc.next();\r\n', 16),
(695, 8, '	year = Integer.parseInt(enteredYear);\r\n', 16),
(696, 9, '	return year;\r\n', 2),
(697, 10, '   }\r\n', 0),
(698, 11, ' }\r\n', 0),
(699, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(700, 13, ' class Months extends Years{\r\n', 4),
(701, 14, '   public int getMonth(){\r\n', 5),
(702, 15, '	int month;\r\n', 0),
(703, 16, '	String enteredMonthNumber;\r\n', 0),
(704, 17, '	Scanner sc = new Scanner(System.in);\r\n', 18),
(705, 18, '	System.out.println("Enter the month number :");\r\n', 12),
(706, 19, '	enteredMonthNumber = sc.next();\r\n', 16),
(707, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 16),
(708, 21, '	return month;\r\n', 2),
(709, 22, '   }\r\n', 0),
(710, 23, ' }\r\n', 0),
(711, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(712, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(713, 26, ' static int numDays = 0;\r\n', 11),
(714, 27, ' public static void main(String[] args) {\r\n', 9),
(715, 28, '   int year;\r\n', 0),
(716, 29, '   Months m = new Months();\r\n', 6),
(717, 30, '   int month = m.getMonth();\r\n', 16),
(718, 31, '   \r\n', 0),
(719, 32, '   if((month < 1) || (month > 12)){ \r\n', 19),
(720, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 17),
(721, 34, '   }\r\n', 0),
(722, 35, '   else {\r\n', 2),
(723, 36, '    switch (month) {\r\n', 2),
(724, 37, '      case 1:\r\n', 7),
(725, 38, '      case 3:\r\n', 7),
(726, 39, '      case 5:\r\n', 7),
(727, 40, '      case 7:\r\n', 7),
(728, 41, '      case 8:\r\n', 7),
(729, 42, '      case 10:\r\n', 7),
(730, 43, '      case 12:\r\n', 7),
(731, 44, '        numDays = 31;\r\n', 9),
(732, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 16),
(733, 46, '        break;\r\n', 2),
(734, 47, '      case 4:\r\n', 7),
(735, 48, '      case 6:\r\n', 7),
(736, 49, '      case 9:\r\n', 7),
(737, 50, '      case 11:\r\n', 7),
(738, 51, '       numDays = 30;\r\n', 9),
(739, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 16),
(740, 53, '       break;\r\n', 2),
(741, 54, '      case 2:\r\n', 7),
(742, 55, '       year = m.getYear();\r\n', 16),
(743, 56, '       if(year < 1) {\r\n', 7),
(744, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 12),
(745, 58, '       }\r\n', 0),
(746, 59, '       else{\r\n', 2),
(747, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 35),
(748, 61, '         numDays = 29;\r\n', 9),
(749, 62, '		 if(year > 2020){\r\n', 11),
(750, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 16),
(751, 64, '         }\r\n', 0),
(752, 65, '         else{\r\n', 2),
(753, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 16),
(754, 67, '         }\r\n', 0),
(755, 68, '        }//if at line 61\r\n', 0),
(756, 69, '        else{\r\n', 2),
(757, 70, '         numDays = 28;\r\n', 9),
(758, 71, '         if (year > 2020){\r\n', 11),
(759, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 16),
(760, 73, '         }\r\n', 0),
(761, 74, '         else{\r\n', 2),
(762, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 16),
(763, 76, '         }\r\n', 0),
(764, 77, '         break;  \r\n', 2),
(765, 78, '        }//else at line 70\r\n', 2),
(766, 79, '       }//else at line 60\r\n', 2),
(767, 80, '    }//switch at line 37\r\n', 2),
(768, 81, '   }//else at line 36\r\n', 2),
(769, 82, '  }//method\r\n', 2),
(770, 83, ' }//class', 2),
(771, 0, 'public class RecursionExample2 {  \r\n', 12),
(772, 1, 'static int count=0;  \r\n', 11),
(773, 2, 'public int p(){  \r\n', 5),
(774, 3, 'count++;  \r\n', 4),
(775, 4, 'if(count<=5){  \r\n', 15),
(776, 5, 'System.out.println("hello "+count);  \r\n', 16),
(777, 6, 'public int p();  \r\n', 5),
(778, 7, '}  \r\n', 0),
(779, 8, '}  \r\n', 0),
(780, 9, 'public static void main(String[] args) {  \r\n', 9),
(781, 10, 'p();  \r\n', 0),
(782, 11, '}  \r\n', 0),
(783, 12, '}  ', 0),
(784, 0, 'import java.awt.event.*;\n', 0),
(785, 1, 'import java.awt.*;\n', 0),
(786, 2, '\n', 0),
(787, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 45),
(788, 4, '\n', 0),
(789, 5, '    private int mx, my;\n', 6),
(790, 6, '    private Dimension size;\n', 2),
(791, 7, '    private int onaroll;\n', 2),
(792, 8, '\n', 0),
(793, 9, '    public void init() {\n', 7),
(794, 10, '        onaroll = 0;\n', 9),
(795, 11, '        setSize(500, 500);\n', 9),
(796, 12, '        size = getSize();\n', 4),
(797, 13, '        addMouseListener(this);\n', 2),
(798, 14, '        addMouseMotionListener(this);\n', 2),
(799, 15, '        addComponentListener(this);\n', 5),
(800, 16, '    }\n', 0),
(801, 17, '\n', 0),
(802, 18, '    public void update(Graphics g) {\n', 7),
(803, 19, '        Dimension newSize = getSize();\n', 6),
(804, 20, '        if (size.equals(newSize)) { // Erase old box\n', 6),
(805, 21, '            g.setColor(getBackground());\n', 12),
(806, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 33),
(807, 23, '        } else {\n', 2),
(808, 24, '            size = newSize;\n', 6),
(809, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 21),
(810, 26, '        } // Calculate new position\n', 21),
(811, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 43),
(812, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 43),
(813, 29, '        paint(g);\n', 0),
(814, 30, '    }\n', 0),
(815, 31, '  \n', 0),
(816, 32, '    public void paint(Graphics g) {\n', 7),
(817, 33, '        g.setColor(Color.black);\n', 12),
(818, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 29),
(819, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 33),
(820, 36, '    }\n', 0),
(821, 37, '\n', 0),
(822, 38, '    public void mouseDragged(MouseEvent e) {}\n', 7),
(823, 39, '\n', 0),
(824, 40, '    public void mouseMoved(MouseEvent e) {\n', 7),
(825, 41, '        e.consume();\n', 12),
(826, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 35),
(827, 43, '            repaint();\n', 0),
(828, 44, '        }\n', 0),
(829, 45, '    }\n', 0),
(830, 46, '\n', 0),
(831, 47, '    public void mousePressed(MouseEvent e) {\n', 7),
(832, 48, '        int x = e.getX();\n', 16),
(833, 49, '        int y = e.getY();\n', 16),
(834, 50, '        e.consume();\n', 12),
(835, 51, '        requestFocus();\n', 0),
(836, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(837, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(838, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(839, 55, '                case 0:\n', 7),
(840, 56, '                    play(getCodeBase(), \n', 4),
(841, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 16),
(842, 58, '                    break;\n', 2),
(843, 59, '                case 1:\n', 7),
(844, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 20),
(845, 61, '                    break;\n', 2),
(846, 62, '                case 2:\n', 7),
(847, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 28),
(848, 64, '                    break;\n', 2),
(849, 65, '                case 3:\n', 7),
(850, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 20),
(851, 67, '                    break;\n', 2),
(852, 68, '                }\n', 0),
(853, 69, '                onaroll++;\n', 4),
(854, 70, '                if (onaroll > 5) {\n', 11),
(855, 72, '                } else {\n', 2),
(856, 74, '                }\n', 0),
(857, 75, '            } else {   //first hit\n', 0),
(858, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 16),
(859, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 20),
(860, 78, '                onaroll = 1;\n', 9),
(861, 79, '            }\n', 0),
(862, 80, '        } else {   //miss\n', 0),
(863, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 20),
(864, 82, '			\n', 0),
(865, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 20),
(866, 84, '            onaroll = 0;\n', 9),
(867, 85, '        }\n', 0),
(868, 86, '        repaint();\n', 0),
(869, 87, '    }\n', 0),
(870, 88, '\n', 0),
(871, 89, '    public void mouseReleased(MouseEvent e) {}\n', 7),
(872, 90, '\n', 0),
(873, 91, '    public void mouseEntered(MouseEvent e) {\n', 7),
(874, 92, '        repaint();\n', 0),
(875, 93, '    }\n', 0),
(876, 94, '\n', 0),
(877, 95, '    public void mouseExited(MouseEvent e) {\n', 7),
(878, 96, '        repaint();\n', 0),
(879, 97, '    }\n', 0),
(880, 98, '\n', 0),
(881, 99, '    public void mouseClicked(MouseEvent e) {}\n', 7),
(882, 100, '\n', 0),
(883, 101, '    public void componentHidden(ComponentEvent e) {}\n', 13),
(884, 102, ' \n', 0),
(885, 103, '    public void componentMoved(ComponentEvent e) {}\n', 7),
(886, 104, ' \n', 0),
(887, 105, '    public void componentResized(ComponentEvent e) {\n', 7),
(888, 106, '        repaint();\n', 0),
(889, 107, '    }\n', 0),
(890, 108, ' \n', 0),
(891, 109, '    public void componentShown(ComponentEvent e) {\n', 7),
(892, 110, '        repaint();\n', 0),
(893, 111, '    }\n', 0),
(894, 112, '  \n', 0),
(895, 113, '    public void destroy() {\n', 7),
(896, 114, '        removeMouseListener(this);\n', 2),
(897, 115, '        removeMouseMotionListener(this);\n', 2),
(898, 116, '    }\n', 0),
(899, 117, '\n', 0),
(900, 118, '    public String getAppletInfo() {\n', 5),
(901, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 6),
(902, 120, '    }\n', 0),
(903, 121, '}\n', 0),
(904, 0, 'import java.awt.event.*;\n', 0),
(905, 1, 'import java.awt.*;\n', 0),
(906, 2, '\n', 0),
(907, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 45),
(908, 4, '\n', 0),
(909, 5, '    private int mx, my;\n', 6),
(910, 6, '    private Dimension size;\n', 2),
(911, 7, '    private int onaroll;\n', 2),
(912, 8, '\n', 0),
(913, 9, '    public void init() {\n', 7),
(914, 10, '        onaroll = 0;\n', 9),
(915, 11, '        setSize(500, 500);\n', 9),
(916, 12, '        size = getSize();\n', 4),
(917, 13, '        addMouseListener(this);\n', 2),
(918, 14, '        addMouseMotionListener(this);\n', 2),
(919, 15, '        addComponentListener(this);\n', 5),
(920, 16, '    }\n', 0),
(921, 17, '\n', 0),
(922, 18, '    public void update(Graphics g) {\n', 7),
(923, 19, '        Dimension newSize = getSize();\n', 6),
(924, 20, '        if (size.equals(newSize)) { // Erase old box\n', 6),
(925, 21, '            g.setColor(getBackground());\n', 12),
(926, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 33),
(927, 23, '        } else {\n', 2),
(928, 24, '            size = newSize;\n', 6),
(929, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 21),
(930, 26, '        } // Calculate new position\n', 21),
(931, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 43),
(932, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 43),
(933, 29, '        paint(g);\n', 0),
(934, 30, '    }\n', 0),
(935, 31, '  \n', 0),
(936, 32, '    public void paint(Graphics g) {\n', 7),
(937, 33, '        g.setColor(Color.black);\n', 12),
(938, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 29),
(939, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 33),
(940, 36, '    }\n', 0),
(941, 37, '\n', 0),
(942, 38, '    public void mouseDragged(MouseEvent e) {}\n', 7),
(943, 39, '\n', 0),
(944, 40, '    public void mouseMoved(MouseEvent e) {\n', 7),
(945, 41, '        e.consume();\n', 12),
(946, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 35),
(947, 43, '            repaint();\n', 0),
(948, 44, '        }\n', 0),
(949, 45, '    }\n', 0),
(950, 46, '\n', 0),
(951, 47, '    public void mousePressed(MouseEvent e) {\n', 7),
(952, 48, '        int x = e.getX();\n', 16),
(953, 49, '        int y = e.getY();\n', 16),
(954, 50, '        e.consume();\n', 12),
(955, 51, '        requestFocus();\n', 0),
(956, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(957, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(958, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(959, 55, '                case 0:\n', 7),
(960, 56, '                    play(getCodeBase(), \n', 4),
(961, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 16),
(962, 58, '                    break;\n', 2),
(963, 59, '                case 1:\n', 7),
(964, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 20),
(965, 61, '                    break;\n', 2),
(966, 62, '                case 2:\n', 7),
(967, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 28),
(968, 64, '                    break;\n', 2),
(969, 65, '                case 3:\n', 7),
(970, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 20),
(971, 67, '                    break;\n', 2),
(972, 68, '                }\n', 0),
(973, 69, '                onaroll++;\n', 4),
(974, 70, '                if (onaroll > 5) {\n', 11),
(975, 72, '                } else {\n', 2),
(976, 74, '                }\n', 0),
(977, 75, '            } else {   //first hit\n', 0),
(978, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 16),
(979, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 20),
(980, 78, '                onaroll = 1;\n', 9),
(981, 79, '            }\n', 0),
(982, 80, '        } else {   //miss\n', 0),
(983, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 20),
(984, 82, '			\n', 0),
(985, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 20),
(986, 84, '            onaroll = 0;\n', 9),
(987, 85, '        }\n', 0),
(988, 86, '        repaint();\n', 0),
(989, 87, '    }\n', 0),
(990, 88, '\n', 0),
(991, 89, '    public void mouseReleased(MouseEvent e) {}\n', 7),
(992, 90, '\n', 0),
(993, 91, '    public void mouseEntered(MouseEvent e) {\n', 7),
(994, 92, '        repaint();\n', 0),
(995, 93, '    }\n', 0),
(996, 94, '\n', 0),
(997, 95, '    public void mouseExited(MouseEvent e) {\n', 7),
(998, 96, '        repaint();\n', 0),
(999, 97, '    }\n', 0),
(1000, 98, '\n', 0),
(1001, 99, '    public void mouseClicked(MouseEvent e) {}\n', 7),
(1002, 100, '\n', 0),
(1003, 101, '    public void componentHidden(ComponentEvent e) {}\n', 13),
(1004, 102, ' \n', 0),
(1005, 103, '    public void componentMoved(ComponentEvent e) {}\n', 7),
(1006, 104, ' \n', 0),
(1007, 105, '    public void componentResized(ComponentEvent e) {\n', 7),
(1008, 106, '        repaint();\n', 0),
(1009, 107, '    }\n', 0),
(1010, 108, ' \n', 0),
(1011, 109, '    public void componentShown(ComponentEvent e) {\n', 7),
(1012, 110, '        repaint();\n', 0),
(1013, 111, '    }\n', 0),
(1014, 112, '  \n', 0),
(1015, 113, '    public void destroy() {\n', 7),
(1016, 114, '        removeMouseListener(this);\n', 2),
(1017, 115, '        removeMouseMotionListener(this);\n', 2),
(1018, 116, '    }\n', 0),
(1019, 117, '\n', 0),
(1020, 118, '    public String getAppletInfo() {\n', 5),
(1021, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 6),
(1022, 120, '    }\n', 0),
(1023, 121, '}\n', 0),
(1024, 0, 'import java.util.Scanner;\r\n', 0),
(1025, 1, ' class Years{\r\n', 2),
(1026, 2, '   public int getYear(){\r\n', 5),
(1027, 3, '	int year;\r\n', 0),
(1028, 4, '	String enteredYear;\r\n', 0),
(1029, 5, '	Scanner sc = new Scanner(System.in);\r\n', 18),
(1030, 6, '	System.out.println("Enter the year as a number :");\r\n', 12),
(1031, 7, '	enteredYear = sc.next();\r\n', 16),
(1032, 8, '	year = Integer.parseInt(enteredYear);\r\n', 16),
(1033, 9, '	return year;\r\n', 2),
(1034, 10, '   }\r\n', 0),
(1035, 11, ' }\r\n', 0),
(1036, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1037, 13, ' class Months extends Years{\r\n', 4),
(1038, 14, '   public int getMonth(){\r\n', 5),
(1039, 15, '	int month;\r\n', 0),
(1040, 16, '	String enteredMonthNumber;\r\n', 0),
(1041, 17, '	Scanner sc = new Scanner(System.in);\r\n', 18),
(1042, 18, '	System.out.println("Enter the month number :");\r\n', 12),
(1043, 19, '	enteredMonthNumber = sc.next();\r\n', 16),
(1044, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 16),
(1045, 21, '	return month;\r\n', 2),
(1046, 22, '   }\r\n', 0),
(1047, 23, ' }\r\n', 0),
(1048, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0);
INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(1049, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(1050, 26, ' static int numDays = 0;\r\n', 11),
(1051, 27, ' public static void main(String[] args) {\r\n', 9),
(1052, 28, '   int year;\r\n', 0),
(1053, 29, '   Months m = new Months();\r\n', 6),
(1054, 30, '   int month = m.getMonth();\r\n', 16),
(1055, 31, '   \r\n', 0),
(1056, 32, '   if((month < 1) || (month > 12)){ \r\n', 19),
(1057, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 17),
(1058, 34, '   }\r\n', 0),
(1059, 35, '   else {\r\n', 2),
(1060, 36, '    switch (month) {\r\n', 2),
(1061, 37, '      case 1:\r\n', 7),
(1062, 38, '      case 3:\r\n', 7),
(1063, 39, '      case 5:\r\n', 7),
(1064, 40, '      case 7:\r\n', 7),
(1065, 41, '      case 8:\r\n', 7),
(1066, 42, '      case 10:\r\n', 7),
(1067, 43, '      case 12:\r\n', 7),
(1068, 44, '        numDays = 31;\r\n', 9),
(1069, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 16),
(1070, 46, '        break;\r\n', 2),
(1071, 47, '      case 4:\r\n', 7),
(1072, 48, '      case 6:\r\n', 7),
(1073, 49, '      case 9:\r\n', 7),
(1074, 50, '      case 11:\r\n', 7),
(1075, 51, '       numDays = 30;\r\n', 9),
(1076, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 16),
(1077, 53, '       break;\r\n', 2),
(1078, 54, '      case 2:\r\n', 7),
(1079, 55, '       year = m.getYear();\r\n', 16),
(1080, 56, '       if(year < 1) {\r\n', 7),
(1081, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 12),
(1082, 58, '       }\r\n', 0),
(1083, 59, '       else{\r\n', 2),
(1084, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 35),
(1085, 61, '         numDays = 29;\r\n', 9),
(1086, 62, '		 if(year > 2020){\r\n', 11),
(1087, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 16),
(1088, 64, '         }\r\n', 0),
(1089, 65, '         else{\r\n', 2),
(1090, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 16),
(1091, 67, '         }\r\n', 0),
(1092, 68, '        }//if at line 61\r\n', 0),
(1093, 69, '        else{\r\n', 2),
(1094, 70, '         numDays = 28;\r\n', 9),
(1095, 71, '         if (year > 2020){\r\n', 11),
(1096, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 16),
(1097, 73, '         }\r\n', 0),
(1098, 74, '         else{\r\n', 2),
(1099, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 16),
(1100, 76, '         }\r\n', 0),
(1101, 77, '         break;  \r\n', 2),
(1102, 78, '        }//else at line 70\r\n', 2),
(1103, 79, '       }//else at line 60\r\n', 2),
(1104, 80, '    }//switch at line 37\r\n', 2),
(1105, 81, '   }//else at line 36\r\n', 2),
(1106, 82, '  }//method\r\n', 2),
(1107, 83, ' }//class', 2),
(1108, 0, 'class Pattern{ \r\n', 2),
(1109, 1, 'public static void main(String[] args) { \r\n', 9),
(1110, 2, '	 int rows = 5;\r\n', 9),
(1111, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 17),
(1112, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 17),
(1113, 5, '	 System.out.print(j + " "); \r\n', 22),
(1114, 6, '	 } \r\n', 0),
(1115, 7, '	 System.out.println(""); \r\n', 18),
(1116, 8, ' 	} \r\n', 0),
(1117, 9, ' 	} \r\n', 0),
(1118, 10, '} ', 0),
(1119, 0, 'import java.util.Scanner;\r\n', 0),
(1120, 1, ' class Years{\r\n', 2),
(1121, 2, '   public int getYear(){\r\n', 5),
(1122, 3, '	int year;\r\n', 0),
(1123, 4, '	String enteredYear;\r\n', 0),
(1124, 5, '	Scanner sc = new Scanner(System.in);\r\n', 18),
(1125, 6, '	System.out.println("Enter the year as a number :");\r\n', 12),
(1126, 7, '	enteredYear = sc.next();\r\n', 16),
(1127, 8, '	year = Integer.parseInt(enteredYear);\r\n', 16),
(1128, 9, '	return year;\r\n', 2),
(1129, 10, '   }\r\n', 0),
(1130, 11, ' }\r\n', 0),
(1131, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1132, 13, ' class Months extends Years{\r\n', 4),
(1133, 14, '   public int getMonth(){\r\n', 5),
(1134, 15, '	int month;\r\n', 0),
(1135, 16, '	String enteredMonthNumber;\r\n', 0),
(1136, 17, '	Scanner sc = new Scanner(System.in);\r\n', 18),
(1137, 18, '	System.out.println("Enter the month number :");\r\n', 12),
(1138, 19, '	enteredMonthNumber = sc.next();\r\n', 16),
(1139, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 16),
(1140, 21, '	return month;\r\n', 2),
(1141, 22, '   }\r\n', 0),
(1142, 23, ' }\r\n', 0),
(1143, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1144, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(1145, 26, ' static int numDays = 0;\r\n', 11),
(1146, 27, ' public static void main(String[] args) {\r\n', 9),
(1147, 28, '   int year;\r\n', 0),
(1148, 29, '   Months m = new Months();\r\n', 6),
(1149, 30, '   int month = m.getMonth();\r\n', 16),
(1150, 31, '   \r\n', 0),
(1151, 32, '   if((month < 1) || (month > 12)){ \r\n', 19),
(1152, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 17),
(1153, 34, '   }\r\n', 0),
(1154, 35, '   else {\r\n', 2),
(1155, 36, '    switch (month) {\r\n', 2),
(1156, 37, '      case 1:\r\n', 7),
(1157, 38, '      case 3:\r\n', 7),
(1158, 39, '      case 5:\r\n', 7),
(1159, 40, '      case 7:\r\n', 7),
(1160, 41, '      case 8:\r\n', 7),
(1161, 42, '      case 10:\r\n', 7),
(1162, 43, '      case 12:\r\n', 7),
(1163, 44, '        numDays = 31;\r\n', 9),
(1164, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 16),
(1165, 46, '        break;\r\n', 2),
(1166, 47, '      case 4:\r\n', 7),
(1167, 48, '      case 6:\r\n', 7),
(1168, 49, '      case 9:\r\n', 7),
(1169, 50, '      case 11:\r\n', 7),
(1170, 51, '       numDays = 30;\r\n', 9),
(1171, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 16),
(1172, 53, '       break;\r\n', 2),
(1173, 54, '      case 2:\r\n', 7),
(1174, 55, '       year = m.getYear();\r\n', 16),
(1175, 56, '       if(year < 1) {\r\n', 7),
(1176, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 12),
(1177, 58, '       }\r\n', 0),
(1178, 59, '       else{\r\n', 2),
(1179, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 35),
(1180, 61, '         numDays = 29;\r\n', 9),
(1181, 62, '		 if(year > 2020){\r\n', 11),
(1182, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 16),
(1183, 64, '         }\r\n', 0),
(1184, 65, '         else{\r\n', 2),
(1185, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 16),
(1186, 67, '         }\r\n', 0),
(1187, 68, '        }//if at line 61\r\n', 0),
(1188, 69, '        else{\r\n', 2),
(1189, 70, '         numDays = 28;\r\n', 9),
(1190, 71, '         if (year > 2020){\r\n', 11),
(1191, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 16),
(1192, 73, '         }\r\n', 0),
(1193, 74, '         else{\r\n', 2),
(1194, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 16),
(1195, 76, '         }\r\n', 0),
(1196, 77, '         break;  \r\n', 2),
(1197, 78, '        }//else at line 70\r\n', 2),
(1198, 79, '       }//else at line 60\r\n', 2),
(1199, 80, '    }//switch at line 37\r\n', 2),
(1200, 81, '   }//else at line 36\r\n', 2),
(1201, 82, '  }//method\r\n', 2),
(1202, 83, ' }//class', 2),
(1203, 0, 'import java.util.Scanner;\r\n', 0),
(1204, 1, ' class Years{\r\n', 2),
(1205, 2, '   public int getYear(){\r\n', 5),
(1206, 3, '	int year;\r\n', 0),
(1207, 4, '	String enteredYear;\r\n', 0),
(1208, 5, '	Scanner sc = new Scanner(System.in);\r\n', 18),
(1209, 6, '	System.out.println("Enter the year as a number :");\r\n', 12),
(1210, 7, '	enteredYear = sc.next();\r\n', 16),
(1211, 8, '	year = Integer.parseInt(enteredYear);\r\n', 16),
(1212, 9, '	return year;\r\n', 2),
(1213, 10, '   }\r\n', 0),
(1214, 11, ' }\r\n', 0),
(1215, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1216, 13, ' class Months extends Years{\r\n', 4),
(1217, 14, '   public int getMonth(){\r\n', 5),
(1218, 15, '	int month;\r\n', 0),
(1219, 16, '	String enteredMonthNumber;\r\n', 0),
(1220, 17, '	Scanner sc = new Scanner(System.in);\r\n', 18),
(1221, 18, '	System.out.println("Enter the month number :");\r\n', 12),
(1222, 19, '	enteredMonthNumber = sc.next();\r\n', 16),
(1223, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 16),
(1224, 21, '	return month;\r\n', 2),
(1225, 22, '   }\r\n', 0),
(1226, 23, ' }\r\n', 0),
(1227, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1228, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(1229, 26, ' static int numDays = 0;\r\n', 11),
(1230, 27, ' public static void main(String[] args) {\r\n', 9),
(1231, 28, '   int year;\r\n', 0),
(1232, 29, '   Months m = new Months();\r\n', 6),
(1233, 30, '   int month = m.getMonth();\r\n', 16),
(1234, 31, '   \r\n', 0),
(1235, 32, '   if((month < 1) || (month > 12)){ \r\n', 19),
(1236, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 17),
(1237, 34, '   }\r\n', 0),
(1238, 35, '   else {\r\n', 2),
(1239, 36, '    switch (month) {\r\n', 2),
(1240, 37, '      case 1:\r\n', 7),
(1241, 38, '      case 3:\r\n', 7),
(1242, 39, '      case 5:\r\n', 7),
(1243, 40, '      case 7:\r\n', 7),
(1244, 41, '      case 8:\r\n', 7),
(1245, 42, '      case 10:\r\n', 7),
(1246, 43, '      case 12:\r\n', 7),
(1247, 44, '        numDays = 31;\r\n', 9),
(1248, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 16),
(1249, 46, '        break;\r\n', 2),
(1250, 47, '      case 4:\r\n', 7),
(1251, 48, '      case 6:\r\n', 7),
(1252, 49, '      case 9:\r\n', 7),
(1253, 50, '      case 11:\r\n', 7),
(1254, 51, '       numDays = 30;\r\n', 9),
(1255, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 16),
(1256, 53, '       break;\r\n', 2),
(1257, 54, '      case 2:\r\n', 7),
(1258, 55, '       year = m.getYear();\r\n', 16),
(1259, 56, '       if(year < 1) {\r\n', 7),
(1260, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 12),
(1261, 58, '       }\r\n', 0),
(1262, 59, '       else{\r\n', 2),
(1263, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 35),
(1264, 61, '         numDays = 29;\r\n', 9),
(1265, 62, '		 if(year > 2020){\r\n', 11),
(1266, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 16),
(1267, 64, '         }\r\n', 0),
(1268, 65, '         else{\r\n', 2),
(1269, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 16),
(1270, 67, '         }\r\n', 0),
(1271, 68, '        }//if at line 61\r\n', 0),
(1272, 69, '        else{\r\n', 2),
(1273, 70, '         numDays = 28;\r\n', 9),
(1274, 71, '         if (year > 2020){\r\n', 11),
(1275, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 16),
(1276, 73, '         }\r\n', 0),
(1277, 74, '         else{\r\n', 2),
(1278, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 16),
(1279, 76, '         }\r\n', 0),
(1280, 77, '         break;  \r\n', 2),
(1281, 78, '        }//else at line 70\r\n', 2),
(1282, 79, '       }//else at line 60\r\n', 2),
(1283, 80, '    }//switch at line 37\r\n', 2),
(1284, 81, '   }//else at line 36\r\n', 2),
(1285, 82, '  }//method\r\n', 2),
(1286, 83, ' }//class', 2),
(1287, 0, 'public class RecursionExample2 {  \r\n', 12),
(1288, 1, 'static int count=0;  \r\n', 11),
(1289, 2, 'public int p(){  \r\n', 5),
(1290, 3, 'count++;  \r\n', 4),
(1291, 4, 'if(count<=5){  \r\n', 15),
(1292, 5, 'System.out.println("hello "+count);  \r\n', 16),
(1293, 6, 'public int p();  \r\n', 5),
(1294, 7, '}  \r\n', 0),
(1295, 8, '}  \r\n', 0),
(1296, 9, 'public static void main(String[] args) {  \r\n', 9),
(1297, 10, 'p();  \r\n', 0),
(1298, 11, '}  \r\n', 0),
(1299, 12, '}  ', 0),
(1300, 0, 'import java.awt.event.*;\n', 0),
(1301, 1, 'import java.awt.*;\n', 0),
(1302, 2, '\n', 0),
(1303, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 45),
(1304, 4, '\n', 0),
(1305, 5, '    private int mx, my;\n', 6),
(1306, 6, '    private Dimension size;\n', 2),
(1307, 7, '    private int onaroll;\n', 2),
(1308, 8, '\n', 0),
(1309, 9, '    public void init() {\n', 7),
(1310, 10, '        onaroll = 0;\n', 9),
(1311, 11, '        setSize(500, 500);\n', 9),
(1312, 12, '        size = getSize();\n', 4),
(1313, 13, '        addMouseListener(this);\n', 2),
(1314, 14, '        addMouseMotionListener(this);\n', 2),
(1315, 15, '        addComponentListener(this);\n', 5),
(1316, 16, '    }\n', 0),
(1317, 17, '\n', 0),
(1318, 18, '    public void update(Graphics g) {\n', 7),
(1319, 19, '        Dimension newSize = getSize();\n', 6),
(1320, 20, '        if (size.equals(newSize)) { // Erase old box\n', 6),
(1321, 21, '            g.setColor(getBackground());\n', 12),
(1322, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 33),
(1323, 23, '        } else {\n', 2),
(1324, 24, '            size = newSize;\n', 6),
(1325, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 21),
(1326, 26, '        } // Calculate new position\n', 21),
(1327, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 43),
(1328, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 43),
(1329, 29, '        paint(g);\n', 0),
(1330, 30, '    }\n', 0),
(1331, 31, '  \n', 0),
(1332, 32, '    public void paint(Graphics g) {\n', 7),
(1333, 33, '        g.setColor(Color.black);\n', 12),
(1334, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 29),
(1335, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 33),
(1336, 36, '    }\n', 0),
(1337, 37, '\n', 0),
(1338, 38, '    public void mouseDragged(MouseEvent e) {}\n', 7),
(1339, 39, '\n', 0),
(1340, 40, '    public void mouseMoved(MouseEvent e) {\n', 7),
(1341, 41, '        e.consume();\n', 12),
(1342, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 35),
(1343, 43, '            repaint();\n', 0),
(1344, 44, '        }\n', 0),
(1345, 45, '    }\n', 0),
(1346, 46, '\n', 0),
(1347, 47, '    public void mousePressed(MouseEvent e) {\n', 7),
(1348, 48, '        int x = e.getX();\n', 16),
(1349, 49, '        int y = e.getY();\n', 16),
(1350, 50, '        e.consume();\n', 12),
(1351, 51, '        requestFocus();\n', 0),
(1352, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(1353, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(1354, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(1355, 55, '                case 0:\n', 7),
(1356, 56, '                    play(getCodeBase(), \n', 4),
(1357, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 16),
(1358, 58, '                    break;\n', 2),
(1359, 59, '                case 1:\n', 7),
(1360, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 20),
(1361, 61, '                    break;\n', 2),
(1362, 62, '                case 2:\n', 7),
(1363, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 28),
(1364, 64, '                    break;\n', 2),
(1365, 65, '                case 3:\n', 7),
(1366, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 20),
(1367, 67, '                    break;\n', 2),
(1368, 68, '                }\n', 0),
(1369, 69, '                onaroll++;\n', 4),
(1370, 70, '                if (onaroll > 5) {\n', 11),
(1371, 72, '                } else {\n', 2),
(1372, 74, '                }\n', 0),
(1373, 75, '            } else {   //first hit\n', 0),
(1374, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 16),
(1375, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 20),
(1376, 78, '                onaroll = 1;\n', 9),
(1377, 79, '            }\n', 0),
(1378, 80, '        } else {   //miss\n', 0),
(1379, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 20),
(1380, 82, '			\n', 0),
(1381, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 20),
(1382, 84, '            onaroll = 0;\n', 9),
(1383, 85, '        }\n', 0),
(1384, 86, '        repaint();\n', 0),
(1385, 87, '    }\n', 0),
(1386, 88, '\n', 0),
(1387, 89, '    public void mouseReleased(MouseEvent e) {}\n', 7),
(1388, 90, '\n', 0),
(1389, 91, '    public void mouseEntered(MouseEvent e) {\n', 7),
(1390, 92, '        repaint();\n', 0),
(1391, 93, '    }\n', 0),
(1392, 94, '\n', 0),
(1393, 95, '    public void mouseExited(MouseEvent e) {\n', 7),
(1394, 96, '        repaint();\n', 0),
(1395, 97, '    }\n', 0),
(1396, 98, '\n', 0),
(1397, 99, '    public void mouseClicked(MouseEvent e) {}\n', 7),
(1398, 100, '\n', 0),
(1399, 101, '    public void componentHidden(ComponentEvent e) {}\n', 13),
(1400, 102, ' \n', 0),
(1401, 103, '    public void componentMoved(ComponentEvent e) {}\n', 7),
(1402, 104, ' \n', 0),
(1403, 105, '    public void componentResized(ComponentEvent e) {\n', 7),
(1404, 106, '        repaint();\n', 0),
(1405, 107, '    }\n', 0),
(1406, 108, ' \n', 0),
(1407, 109, '    public void componentShown(ComponentEvent e) {\n', 7),
(1408, 110, '        repaint();\n', 0),
(1409, 111, '    }\n', 0),
(1410, 112, '  \n', 0),
(1411, 113, '    public void destroy() {\n', 7),
(1412, 114, '        removeMouseListener(this);\n', 2),
(1413, 115, '        removeMouseMotionListener(this);\n', 2),
(1414, 116, '    }\n', 0),
(1415, 117, '\n', 0),
(1416, 118, '    public String getAppletInfo() {\n', 5),
(1417, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 6),
(1418, 120, '    }\n', 0),
(1419, 121, '}\n', 0),
(1420, 0, 'import java.awt.event.*;\n', 0),
(1421, 1, 'import java.awt.*;\n', 0),
(1422, 2, '\n', 0),
(1423, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 45),
(1424, 4, '\n', 0),
(1425, 5, '    private int mx, my;\n', 6),
(1426, 6, '    private Dimension size;\n', 2),
(1427, 7, '    private int onaroll;\n', 2),
(1428, 8, '\n', 0),
(1429, 9, '    public void init() {\n', 7),
(1430, 10, '        onaroll = 0;\n', 9),
(1431, 11, '        setSize(500, 500);\n', 9),
(1432, 12, '        size = getSize();\n', 4),
(1433, 13, '        addMouseListener(this);\n', 2),
(1434, 14, '        addMouseMotionListener(this);\n', 2),
(1435, 15, '        addComponentListener(this);\n', 5),
(1436, 16, '    }\n', 0),
(1437, 17, '\n', 0),
(1438, 18, '    public void update(Graphics g) {\n', 7),
(1439, 19, '        Dimension newSize = getSize();\n', 6),
(1440, 20, '        if (size.equals(newSize)) { // Erase old box\n', 6),
(1441, 21, '            g.setColor(getBackground());\n', 12),
(1442, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 33),
(1443, 23, '        } else {\n', 2),
(1444, 24, '            size = newSize;\n', 6),
(1445, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 21),
(1446, 26, '        } // Calculate new position\n', 21),
(1447, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 43),
(1448, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 43),
(1449, 29, '        paint(g);\n', 0),
(1450, 30, '    }\n', 0),
(1451, 31, '  \n', 0),
(1452, 32, '    public void paint(Graphics g) {\n', 7),
(1453, 33, '        g.setColor(Color.black);\n', 12),
(1454, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 29),
(1455, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 33),
(1456, 36, '    }\n', 0),
(1457, 37, '\n', 0),
(1458, 38, '    public void mouseDragged(MouseEvent e) {}\n', 7),
(1459, 39, '\n', 0),
(1460, 40, '    public void mouseMoved(MouseEvent e) {\n', 7),
(1461, 41, '        e.consume();\n', 12),
(1462, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 35),
(1463, 43, '            repaint();\n', 0),
(1464, 44, '        }\n', 0),
(1465, 45, '    }\n', 0),
(1466, 46, '\n', 0),
(1467, 47, '    public void mousePressed(MouseEvent e) {\n', 7),
(1468, 48, '        int x = e.getX();\n', 16),
(1469, 49, '        int y = e.getY();\n', 16),
(1470, 50, '        e.consume();\n', 12),
(1471, 51, '        requestFocus();\n', 0),
(1472, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(1473, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(1474, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(1475, 55, '                case 0:\n', 7),
(1476, 56, '                    play(getCodeBase(), \n', 4),
(1477, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 16),
(1478, 58, '                    break;\n', 2),
(1479, 59, '                case 1:\n', 7),
(1480, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 20),
(1481, 61, '                    break;\n', 2),
(1482, 62, '                case 2:\n', 7),
(1483, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 28),
(1484, 64, '                    break;\n', 2),
(1485, 65, '                case 3:\n', 7),
(1486, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 20),
(1487, 67, '                    break;\n', 2),
(1488, 68, '                }\n', 0),
(1489, 69, '                onaroll++;\n', 4),
(1490, 70, '                if (onaroll > 5) {\n', 11),
(1491, 72, '                } else {\n', 2),
(1492, 74, '                }\n', 0),
(1493, 75, '            } else {   //first hit\n', 0),
(1494, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 16),
(1495, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 20),
(1496, 78, '                onaroll = 1;\n', 9),
(1497, 79, '            }\n', 0),
(1498, 80, '        } else {   //miss\n', 0),
(1499, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 20),
(1500, 82, '			\n', 0),
(1501, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 20),
(1502, 84, '            onaroll = 0;\n', 9),
(1503, 85, '        }\n', 0),
(1504, 86, '        repaint();\n', 0),
(1505, 87, '    }\n', 0),
(1506, 88, '\n', 0),
(1507, 89, '    public void mouseReleased(MouseEvent e) {}\n', 7),
(1508, 90, '\n', 0),
(1509, 91, '    public void mouseEntered(MouseEvent e) {\n', 7),
(1510, 92, '        repaint();\n', 0),
(1511, 93, '    }\n', 0),
(1512, 94, '\n', 0),
(1513, 95, '    public void mouseExited(MouseEvent e) {\n', 7),
(1514, 96, '        repaint();\n', 0),
(1515, 97, '    }\n', 0),
(1516, 98, '\n', 0),
(1517, 99, '    public void mouseClicked(MouseEvent e) {}\n', 7),
(1518, 100, '\n', 0),
(1519, 101, '    public void componentHidden(ComponentEvent e) {}\n', 13),
(1520, 102, ' \n', 0),
(1521, 103, '    public void componentMoved(ComponentEvent e) {}\n', 7),
(1522, 104, ' \n', 0),
(1523, 105, '    public void componentResized(ComponentEvent e) {\n', 7),
(1524, 106, '        repaint();\n', 0),
(1525, 107, '    }\n', 0),
(1526, 108, ' \n', 0),
(1527, 109, '    public void componentShown(ComponentEvent e) {\n', 7),
(1528, 110, '        repaint();\n', 0),
(1529, 111, '    }\n', 0),
(1530, 112, '  \n', 0),
(1531, 113, '    public void destroy() {\n', 7),
(1532, 114, '        removeMouseListener(this);\n', 2),
(1533, 115, '        removeMouseMotionListener(this);\n', 2),
(1534, 116, '    }\n', 0),
(1535, 117, '\n', 0),
(1536, 118, '    public String getAppletInfo() {\n', 5),
(1537, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 6),
(1538, 120, '    }\n', 0),
(1539, 121, '}\n', 0),
(1540, 0, 'import java.util.Scanner;\r\n', 0),
(1541, 1, ' class Years{\r\n', 2),
(1542, 2, '   public int getYear(){\r\n', 5),
(1543, 3, '	int year;\r\n', 0),
(1544, 4, '	String enteredYear;\r\n', 0),
(1545, 5, '	Scanner sc = new Scanner(System.in);\r\n', 18),
(1546, 6, '	System.out.println("Enter the year as a number :");\r\n', 12),
(1547, 7, '	enteredYear = sc.next();\r\n', 16),
(1548, 8, '	year = Integer.parseInt(enteredYear);\r\n', 16),
(1549, 9, '	return year;\r\n', 2),
(1550, 10, '   }\r\n', 0),
(1551, 11, ' }\r\n', 0),
(1552, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1553, 13, ' class Months extends Years{\r\n', 4),
(1554, 14, '   public int getMonth(){\r\n', 5),
(1555, 15, '	int month;\r\n', 0),
(1556, 16, '	String enteredMonthNumber;\r\n', 0),
(1557, 17, '	Scanner sc = new Scanner(System.in);\r\n', 18),
(1558, 18, '	System.out.println("Enter the month number :");\r\n', 12),
(1559, 19, '	enteredMonthNumber = sc.next();\r\n', 16),
(1560, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 16),
(1561, 21, '	return month;\r\n', 2),
(1562, 22, '   }\r\n', 0),
(1563, 23, ' }\r\n', 0),
(1564, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1565, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(1566, 26, ' static int numDays = 0;\r\n', 11),
(1567, 27, ' public static void main(String[] args) {\r\n', 9),
(1568, 28, '   int year;\r\n', 0),
(1569, 29, '   Months m = new Months();\r\n', 6),
(1570, 30, '   int month = m.getMonth();\r\n', 16),
(1571, 31, '   \r\n', 0),
(1572, 32, '   if((month < 1) || (month > 12)){ \r\n', 19),
(1573, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 17),
(1574, 34, '   }\r\n', 0),
(1575, 35, '   else {\r\n', 2),
(1576, 36, '    switch (month) {\r\n', 2),
(1577, 37, '      case 1:\r\n', 7),
(1578, 38, '      case 3:\r\n', 7),
(1579, 39, '      case 5:\r\n', 7),
(1580, 40, '      case 7:\r\n', 7),
(1581, 41, '      case 8:\r\n', 7),
(1582, 42, '      case 10:\r\n', 7),
(1583, 43, '      case 12:\r\n', 7),
(1584, 44, '        numDays = 31;\r\n', 9),
(1585, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 16),
(1586, 46, '        break;\r\n', 2),
(1587, 47, '      case 4:\r\n', 7),
(1588, 48, '      case 6:\r\n', 7),
(1589, 49, '      case 9:\r\n', 7),
(1590, 50, '      case 11:\r\n', 7),
(1591, 51, '       numDays = 30;\r\n', 9),
(1592, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 16),
(1593, 53, '       break;\r\n', 2),
(1594, 54, '      case 2:\r\n', 7),
(1595, 55, '       year = m.getYear();\r\n', 16),
(1596, 56, '       if(year < 1) {\r\n', 7),
(1597, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 12),
(1598, 58, '       }\r\n', 0),
(1599, 59, '       else{\r\n', 2),
(1600, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 35),
(1601, 61, '         numDays = 29;\r\n', 9),
(1602, 62, '		 if(year > 2020){\r\n', 11),
(1603, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 16),
(1604, 64, '         }\r\n', 0),
(1605, 65, '         else{\r\n', 2),
(1606, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 16),
(1607, 67, '         }\r\n', 0),
(1608, 68, '        }//if at line 61\r\n', 0),
(1609, 69, '        else{\r\n', 2),
(1610, 70, '         numDays = 28;\r\n', 9),
(1611, 71, '         if (year > 2020){\r\n', 11),
(1612, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 16),
(1613, 73, '         }\r\n', 0),
(1614, 74, '         else{\r\n', 2),
(1615, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 16),
(1616, 76, '         }\r\n', 0),
(1617, 77, '         break;  \r\n', 2),
(1618, 78, '        }//else at line 70\r\n', 2),
(1619, 79, '       }//else at line 60\r\n', 2),
(1620, 80, '    }//switch at line 37\r\n', 2),
(1621, 81, '   }//else at line 36\r\n', 2),
(1622, 82, '  }//method\r\n', 2),
(1623, 83, ' }//class', 2),
(1624, 0, 'class Pattern{ \r\n', 2),
(1625, 1, 'public static void main(String[] args) { \r\n', 9),
(1626, 2, '	 int rows = 5;\r\n', 9),
(1627, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 17),
(1628, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 17),
(1629, 5, '	 System.out.print(j + " "); \r\n', 22),
(1630, 6, '	 } \r\n', 0),
(1631, 7, '	 System.out.println(""); \r\n', 18),
(1632, 8, ' 	} \r\n', 0),
(1633, 9, ' 	} \r\n', 0),
(1634, 10, '} ', 0),
(1635, 0, 'import java.util.Scanner;\r\n', 0),
(1636, 1, ' class Years{\r\n', 2),
(1637, 2, '   public int getYear(){\r\n', 5),
(1638, 3, '	int year;\r\n', 0),
(1639, 4, '	String enteredYear;\r\n', 0),
(1640, 5, '	Scanner sc = new Scanner(System.in);\r\n', 18),
(1641, 6, '	System.out.println("Enter the year as a number :");\r\n', 12),
(1642, 7, '	enteredYear = sc.next();\r\n', 16),
(1643, 8, '	year = Integer.parseInt(enteredYear);\r\n', 16),
(1644, 9, '	return year;\r\n', 2),
(1645, 10, '   }\r\n', 0),
(1646, 11, ' }\r\n', 0),
(1647, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1648, 13, ' class Months extends Years{\r\n', 4),
(1649, 14, '   public int getMonth(){\r\n', 5),
(1650, 15, '	int month;\r\n', 0),
(1651, 16, '	String enteredMonthNumber;\r\n', 0),
(1652, 17, '	Scanner sc = new Scanner(System.in);\r\n', 18),
(1653, 18, '	System.out.println("Enter the month number :");\r\n', 12),
(1654, 19, '	enteredMonthNumber = sc.next();\r\n', 16),
(1655, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 16),
(1656, 21, '	return month;\r\n', 2),
(1657, 22, '   }\r\n', 0),
(1658, 23, ' }\r\n', 0),
(1659, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1660, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(1661, 26, ' static int numDays = 0;\r\n', 11),
(1662, 27, ' public static void main(String[] args) {\r\n', 9),
(1663, 28, '   int year;\r\n', 0),
(1664, 29, '   Months m = new Months();\r\n', 6),
(1665, 30, '   int month = m.getMonth();\r\n', 16),
(1666, 31, '   \r\n', 0),
(1667, 32, '   if((month < 1) || (month > 12)){ \r\n', 19),
(1668, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 17),
(1669, 34, '   }\r\n', 0),
(1670, 35, '   else {\r\n', 2),
(1671, 36, '    switch (month) {\r\n', 2),
(1672, 37, '      case 1:\r\n', 7),
(1673, 38, '      case 3:\r\n', 7),
(1674, 39, '      case 5:\r\n', 7),
(1675, 40, '      case 7:\r\n', 7),
(1676, 41, '      case 8:\r\n', 7),
(1677, 42, '      case 10:\r\n', 7),
(1678, 43, '      case 12:\r\n', 7),
(1679, 44, '        numDays = 31;\r\n', 9),
(1680, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 16),
(1681, 46, '        break;\r\n', 2),
(1682, 47, '      case 4:\r\n', 7),
(1683, 48, '      case 6:\r\n', 7),
(1684, 49, '      case 9:\r\n', 7),
(1685, 50, '      case 11:\r\n', 7),
(1686, 51, '       numDays = 30;\r\n', 9),
(1687, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 16),
(1688, 53, '       break;\r\n', 2),
(1689, 54, '      case 2:\r\n', 7),
(1690, 55, '       year = m.getYear();\r\n', 16),
(1691, 56, '       if(year < 1) {\r\n', 7),
(1692, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 12),
(1693, 58, '       }\r\n', 0),
(1694, 59, '       else{\r\n', 2),
(1695, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 35),
(1696, 61, '         numDays = 29;\r\n', 9),
(1697, 62, '		 if(year > 2020){\r\n', 11),
(1698, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 16),
(1699, 64, '         }\r\n', 0),
(1700, 65, '         else{\r\n', 2),
(1701, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 16),
(1702, 67, '         }\r\n', 0),
(1703, 68, '        }//if at line 61\r\n', 0),
(1704, 69, '        else{\r\n', 2),
(1705, 70, '         numDays = 28;\r\n', 9),
(1706, 71, '         if (year > 2020){\r\n', 11),
(1707, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 16),
(1708, 73, '         }\r\n', 0),
(1709, 74, '         else{\r\n', 2),
(1710, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 16),
(1711, 76, '         }\r\n', 0),
(1712, 77, '         break;  \r\n', 2),
(1713, 78, '        }//else at line 70\r\n', 2),
(1714, 79, '       }//else at line 60\r\n', 2),
(1715, 80, '    }//switch at line 37\r\n', 2),
(1716, 81, '   }//else at line 36\r\n', 2),
(1717, 82, '  }//method\r\n', 2),
(1718, 83, ' }//class', 2),
(1719, 0, 'import java.util.Scanner;\r\n', 0),
(1720, 1, ' class Years{\r\n', 2),
(1721, 2, '   public int getYear(){\r\n', 5),
(1722, 3, '	int year;\r\n', 0),
(1723, 4, '	String enteredYear;\r\n', 0),
(1724, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(1725, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(1726, 7, '	enteredYear = sc.next();\r\n', 8),
(1727, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(1728, 9, '	return year;\r\n', 2),
(1729, 10, '   }\r\n', 0),
(1730, 11, ' }\r\n', 0),
(1731, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1732, 13, ' class Months extends Years{\r\n', 4),
(1733, 14, '   public int getMonth(){\r\n', 5),
(1734, 15, '	int month;\r\n', 0),
(1735, 16, '	String enteredMonthNumber;\r\n', 0),
(1736, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(1737, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(1738, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(1739, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(1740, 21, '	return month;\r\n', 2),
(1741, 22, '   }\r\n', 0),
(1742, 23, ' }\r\n', 0),
(1743, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1744, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(1745, 26, ' static int numDays = 0;\r\n', 7),
(1746, 27, ' public static void main(String[] args) {\r\n', 9),
(1747, 28, '   int year;\r\n', 0),
(1748, 29, '   Months m = new Months();\r\n', 4),
(1749, 30, '   int month = m.getMonth();\r\n', 8),
(1750, 31, '   \r\n', 0),
(1751, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(1752, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(1753, 34, '   }\r\n', 0),
(1754, 35, '   else {\r\n', 2),
(1755, 36, '    switch (month) {\r\n', 2),
(1756, 37, '      case 1:\r\n', 5),
(1757, 38, '      case 3:\r\n', 5),
(1758, 39, '      case 5:\r\n', 5),
(1759, 40, '      case 7:\r\n', 5),
(1760, 41, '      case 8:\r\n', 5),
(1761, 42, '      case 10:\r\n', 5),
(1762, 43, '      case 12:\r\n', 5),
(1763, 44, '        numDays = 31;\r\n', 5),
(1764, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(1765, 46, '        break;\r\n', 2),
(1766, 47, '      case 4:\r\n', 5),
(1767, 48, '      case 6:\r\n', 5),
(1768, 49, '      case 9:\r\n', 5),
(1769, 50, '      case 11:\r\n', 5),
(1770, 51, '       numDays = 30;\r\n', 5),
(1771, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(1772, 53, '       break;\r\n', 2),
(1773, 54, '      case 2:\r\n', 5),
(1774, 55, '       year = m.getYear();\r\n', 8),
(1775, 56, '       if(year < 1) {\r\n', 5),
(1776, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(1777, 58, '       }\r\n', 0),
(1778, 59, '       else{\r\n', 2),
(1779, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(1780, 61, '         numDays = 29;\r\n', 5),
(1781, 62, '		 if(year > 2020){\r\n', 7),
(1782, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(1783, 64, '         }\r\n', 0),
(1784, 65, '         else{\r\n', 2),
(1785, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(1786, 67, '         }\r\n', 0),
(1787, 68, '        }//if at line 61\r\n', 0),
(1788, 69, '        else{\r\n', 2),
(1789, 70, '         numDays = 28;\r\n', 5),
(1790, 71, '         if (year > 2020){\r\n', 7),
(1791, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(1792, 73, '         }\r\n', 0),
(1793, 74, '         else{\r\n', 2),
(1794, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(1795, 76, '         }\r\n', 0),
(1796, 77, '         break;  \r\n', 2),
(1797, 78, '        }//else at line 70\r\n', 2),
(1798, 79, '       }//else at line 60\r\n', 2),
(1799, 80, '    }//switch at line 37\r\n', 2),
(1800, 81, '   }//else at line 36\r\n', 2),
(1801, 82, '  }//method\r\n', 2),
(1802, 83, ' }//class', 2),
(1803, 0, 'public class RecursionExample2 {  \r\n', 10),
(1804, 1, 'static int count=0;  \r\n', 7),
(1805, 2, 'public int p(){  \r\n', 5),
(1806, 3, 'count++;  \r\n', 2),
(1807, 4, 'if(count<=5){  \r\n', 9),
(1808, 5, 'System.out.println("hello "+count);  \r\n', 8),
(1809, 6, 'public int p();  \r\n', 5),
(1810, 7, '}  \r\n', 0),
(1811, 8, '}  \r\n', 0),
(1812, 9, 'public static void main(String[] args) {  \r\n', 9),
(1813, 10, 'p();  \r\n', 0),
(1814, 11, '}  \r\n', 0),
(1815, 12, '}  ', 0),
(1816, 0, 'import java.awt.event.*;\n', 0),
(1817, 1, 'import java.awt.*;\n', 0),
(1818, 2, '\n', 0),
(1819, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 37),
(1820, 4, '\n', 0),
(1821, 5, '    private int mx, my;\n', 4),
(1822, 6, '    private Dimension size;\n', 2),
(1823, 7, '    private int onaroll;\n', 2),
(1824, 8, '\n', 0),
(1825, 9, '    public void init() {\n', 7),
(1826, 10, '        onaroll = 0;\n', 5),
(1827, 11, '        setSize(500, 500);\n', 5),
(1828, 12, '        size = getSize();\n', 2),
(1829, 13, '        addMouseListener(this);\n', 2),
(1830, 14, '        addMouseMotionListener(this);\n', 2),
(1831, 15, '        addComponentListener(this);\n', 5),
(1832, 16, '    }\n', 0),
(1833, 17, '\n', 0),
(1834, 18, '    public void update(Graphics g) {\n', 7),
(1835, 19, '        Dimension newSize = getSize();\n', 4),
(1836, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(1837, 21, '            g.setColor(getBackground());\n', 6),
(1838, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(1839, 23, '        } else {\n', 2),
(1840, 24, '            size = newSize;\n', 4),
(1841, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(1842, 26, '        } // Calculate new position\n', 11),
(1843, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(1844, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(1845, 29, '        paint(g);\n', 0),
(1846, 30, '    }\n', 0),
(1847, 31, '  \n', 0),
(1848, 32, '    public void paint(Graphics g) {\n', 7),
(1849, 33, '        g.setColor(Color.black);\n', 6),
(1850, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(1851, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(1852, 36, '    }\n', 0),
(1853, 37, '\n', 0),
(1854, 38, '    public void mouseDragged(MouseEvent e) {}\n', 7),
(1855, 39, '\n', 0),
(1856, 40, '    public void mouseMoved(MouseEvent e) {\n', 7),
(1857, 41, '        e.consume();\n', 6),
(1858, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(1859, 43, '            repaint();\n', 0),
(1860, 44, '        }\n', 0),
(1861, 45, '    }\n', 0),
(1862, 46, '\n', 0),
(1863, 47, '    public void mousePressed(MouseEvent e) {\n', 7),
(1864, 48, '        int x = e.getX();\n', 8),
(1865, 49, '        int y = e.getY();\n', 8),
(1866, 50, '        e.consume();\n', 6),
(1867, 51, '        requestFocus();\n', 0),
(1868, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(1869, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(1870, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(1871, 55, '                case 0:\n', 5),
(1872, 56, '                    play(getCodeBase(), \n', 2),
(1873, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(1874, 58, '                    break;\n', 2),
(1875, 59, '                case 1:\n', 5),
(1876, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(1877, 61, '                    break;\n', 2),
(1878, 62, '                case 2:\n', 5),
(1879, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(1880, 64, '                    break;\n', 2),
(1881, 65, '                case 3:\n', 5),
(1882, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(1883, 67, '                    break;\n', 2),
(1884, 68, '                }\n', 0),
(1885, 69, '                onaroll++;\n', 2),
(1886, 70, '                if (onaroll > 5) {\n', 7),
(1887, 72, '                } else {\n', 2),
(1888, 74, '                }\n', 0),
(1889, 75, '            } else {   //first hit\n', 0),
(1890, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(1891, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(1892, 78, '                onaroll = 1;\n', 5),
(1893, 79, '            }\n', 0),
(1894, 80, '        } else {   //miss\n', 0),
(1895, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(1896, 82, '			\n', 0),
(1897, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(1898, 84, '            onaroll = 0;\n', 5),
(1899, 85, '        }\n', 0),
(1900, 86, '        repaint();\n', 0),
(1901, 87, '    }\n', 0),
(1902, 88, '\n', 0),
(1903, 89, '    public void mouseReleased(MouseEvent e) {}\n', 7),
(1904, 90, '\n', 0),
(1905, 91, '    public void mouseEntered(MouseEvent e) {\n', 7),
(1906, 92, '        repaint();\n', 0),
(1907, 93, '    }\n', 0),
(1908, 94, '\n', 0),
(1909, 95, '    public void mouseExited(MouseEvent e) {\n', 7),
(1910, 96, '        repaint();\n', 0),
(1911, 97, '    }\n', 0),
(1912, 98, '\n', 0),
(1913, 99, '    public void mouseClicked(MouseEvent e) {}\n', 7),
(1914, 100, '\n', 0),
(1915, 101, '    public void componentHidden(ComponentEvent e) {}\n', 9),
(1916, 102, ' \n', 0),
(1917, 103, '    public void componentMoved(ComponentEvent e) {}\n', 7),
(1918, 104, ' \n', 0),
(1919, 105, '    public void componentResized(ComponentEvent e) {\n', 7),
(1920, 106, '        repaint();\n', 0),
(1921, 107, '    }\n', 0),
(1922, 108, ' \n', 0),
(1923, 109, '    public void componentShown(ComponentEvent e) {\n', 7),
(1924, 110, '        repaint();\n', 0),
(1925, 111, '    }\n', 0),
(1926, 112, '  \n', 0),
(1927, 113, '    public void destroy() {\n', 7),
(1928, 114, '        removeMouseListener(this);\n', 2),
(1929, 115, '        removeMouseMotionListener(this);\n', 2),
(1930, 116, '    }\n', 0),
(1931, 117, '\n', 0),
(1932, 118, '    public String getAppletInfo() {\n', 5),
(1933, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(1934, 120, '    }\n', 0),
(1935, 121, '}\n', 0),
(1936, 0, 'import java.awt.event.*;\n', 0),
(1937, 1, 'import java.awt.*;\n', 0),
(1938, 2, '\n', 0),
(1939, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 37),
(1940, 4, '\n', 0),
(1941, 5, '    private int mx, my;\n', 4),
(1942, 6, '    private Dimension size;\n', 2),
(1943, 7, '    private int onaroll;\n', 2),
(1944, 8, '\n', 0),
(1945, 9, '    public void init() {\n', 7),
(1946, 10, '        onaroll = 0;\n', 5),
(1947, 11, '        setSize(500, 500);\n', 5),
(1948, 12, '        size = getSize();\n', 2),
(1949, 13, '        addMouseListener(this);\n', 2),
(1950, 14, '        addMouseMotionListener(this);\n', 2),
(1951, 15, '        addComponentListener(this);\n', 5),
(1952, 16, '    }\n', 0),
(1953, 17, '\n', 0),
(1954, 18, '    public void update(Graphics g) {\n', 7),
(1955, 19, '        Dimension newSize = getSize();\n', 4),
(1956, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(1957, 21, '            g.setColor(getBackground());\n', 6),
(1958, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(1959, 23, '        } else {\n', 2),
(1960, 24, '            size = newSize;\n', 4),
(1961, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(1962, 26, '        } // Calculate new position\n', 11),
(1963, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(1964, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(1965, 29, '        paint(g);\n', 0),
(1966, 30, '    }\n', 0),
(1967, 31, '  \n', 0),
(1968, 32, '    public void paint(Graphics g) {\n', 7),
(1969, 33, '        g.setColor(Color.black);\n', 6),
(1970, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(1971, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(1972, 36, '    }\n', 0),
(1973, 37, '\n', 0),
(1974, 38, '    public void mouseDragged(MouseEvent e) {}\n', 7),
(1975, 39, '\n', 0),
(1976, 40, '    public void mouseMoved(MouseEvent e) {\n', 7),
(1977, 41, '        e.consume();\n', 6),
(1978, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(1979, 43, '            repaint();\n', 0),
(1980, 44, '        }\n', 0),
(1981, 45, '    }\n', 0),
(1982, 46, '\n', 0),
(1983, 47, '    public void mousePressed(MouseEvent e) {\n', 7),
(1984, 48, '        int x = e.getX();\n', 8),
(1985, 49, '        int y = e.getY();\n', 8),
(1986, 50, '        e.consume();\n', 6),
(1987, 51, '        requestFocus();\n', 0),
(1988, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(1989, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(1990, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(1991, 55, '                case 0:\n', 5),
(1992, 56, '                    play(getCodeBase(), \n', 2),
(1993, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(1994, 58, '                    break;\n', 2),
(1995, 59, '                case 1:\n', 5),
(1996, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(1997, 61, '                    break;\n', 2),
(1998, 62, '                case 2:\n', 5),
(1999, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(2000, 64, '                    break;\n', 2),
(2001, 65, '                case 3:\n', 5),
(2002, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(2003, 67, '                    break;\n', 2),
(2004, 68, '                }\n', 0),
(2005, 69, '                onaroll++;\n', 2),
(2006, 70, '                if (onaroll > 5) {\n', 7),
(2007, 72, '                } else {\n', 2),
(2008, 74, '                }\n', 0),
(2009, 75, '            } else {   //first hit\n', 0),
(2010, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(2011, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(2012, 78, '                onaroll = 1;\n', 5),
(2013, 79, '            }\n', 0),
(2014, 80, '        } else {   //miss\n', 0),
(2015, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(2016, 82, '			\n', 0),
(2017, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(2018, 84, '            onaroll = 0;\n', 5),
(2019, 85, '        }\n', 0),
(2020, 86, '        repaint();\n', 0),
(2021, 87, '    }\n', 0),
(2022, 88, '\n', 0),
(2023, 89, '    public void mouseReleased(MouseEvent e) {}\n', 7),
(2024, 90, '\n', 0),
(2025, 91, '    public void mouseEntered(MouseEvent e) {\n', 7),
(2026, 92, '        repaint();\n', 0),
(2027, 93, '    }\n', 0),
(2028, 94, '\n', 0),
(2029, 95, '    public void mouseExited(MouseEvent e) {\n', 7),
(2030, 96, '        repaint();\n', 0),
(2031, 97, '    }\n', 0),
(2032, 98, '\n', 0),
(2033, 99, '    public void mouseClicked(MouseEvent e) {}\n', 7),
(2034, 100, '\n', 0),
(2035, 101, '    public void componentHidden(ComponentEvent e) {}\n', 9),
(2036, 102, ' \n', 0),
(2037, 103, '    public void componentMoved(ComponentEvent e) {}\n', 7),
(2038, 104, ' \n', 0),
(2039, 105, '    public void componentResized(ComponentEvent e) {\n', 7),
(2040, 106, '        repaint();\n', 0),
(2041, 107, '    }\n', 0),
(2042, 108, ' \n', 0),
(2043, 109, '    public void componentShown(ComponentEvent e) {\n', 7),
(2044, 110, '        repaint();\n', 0),
(2045, 111, '    }\n', 0),
(2046, 112, '  \n', 0),
(2047, 113, '    public void destroy() {\n', 7),
(2048, 114, '        removeMouseListener(this);\n', 2),
(2049, 115, '        removeMouseMotionListener(this);\n', 2),
(2050, 116, '    }\n', 0),
(2051, 117, '\n', 0),
(2052, 118, '    public String getAppletInfo() {\n', 5),
(2053, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(2054, 120, '    }\n', 0),
(2055, 121, '}\n', 0),
(2056, 0, 'import java.util.Scanner;\r\n', 0),
(2057, 1, ' class Years{\r\n', 2),
(2058, 2, '   public int getYear(){\r\n', 5),
(2059, 3, '	int year;\r\n', 0),
(2060, 4, '	String enteredYear;\r\n', 0),
(2061, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(2062, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(2063, 7, '	enteredYear = sc.next();\r\n', 8),
(2064, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(2065, 9, '	return year;\r\n', 2),
(2066, 10, '   }\r\n', 0),
(2067, 11, ' }\r\n', 0),
(2068, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2069, 13, ' class Months extends Years{\r\n', 4),
(2070, 14, '   public int getMonth(){\r\n', 5),
(2071, 15, '	int month;\r\n', 0);
INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(2072, 16, '	String enteredMonthNumber;\r\n', 0),
(2073, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(2074, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(2075, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(2076, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(2077, 21, '	return month;\r\n', 2),
(2078, 22, '   }\r\n', 0),
(2079, 23, ' }\r\n', 0),
(2080, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2081, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(2082, 26, ' static int numDays = 0;\r\n', 7),
(2083, 27, ' public static void main(String[] args) {\r\n', 9),
(2084, 28, '   int year;\r\n', 0),
(2085, 29, '   Months m = new Months();\r\n', 4),
(2086, 30, '   int month = m.getMonth();\r\n', 8),
(2087, 31, '   \r\n', 0),
(2088, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(2089, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(2090, 34, '   }\r\n', 0),
(2091, 35, '   else {\r\n', 2),
(2092, 36, '    switch (month) {\r\n', 2),
(2093, 37, '      case 1:\r\n', 5),
(2094, 38, '      case 3:\r\n', 5),
(2095, 39, '      case 5:\r\n', 5),
(2096, 40, '      case 7:\r\n', 5),
(2097, 41, '      case 8:\r\n', 5),
(2098, 42, '      case 10:\r\n', 5),
(2099, 43, '      case 12:\r\n', 5),
(2100, 44, '        numDays = 31;\r\n', 5),
(2101, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(2102, 46, '        break;\r\n', 2),
(2103, 47, '      case 4:\r\n', 5),
(2104, 48, '      case 6:\r\n', 5),
(2105, 49, '      case 9:\r\n', 5),
(2106, 50, '      case 11:\r\n', 5),
(2107, 51, '       numDays = 30;\r\n', 5),
(2108, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(2109, 53, '       break;\r\n', 2),
(2110, 54, '      case 2:\r\n', 5),
(2111, 55, '       year = m.getYear();\r\n', 8),
(2112, 56, '       if(year < 1) {\r\n', 5),
(2113, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(2114, 58, '       }\r\n', 0),
(2115, 59, '       else{\r\n', 2),
(2116, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(2117, 61, '         numDays = 29;\r\n', 5),
(2118, 62, '		 if(year > 2020){\r\n', 7),
(2119, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(2120, 64, '         }\r\n', 0),
(2121, 65, '         else{\r\n', 2),
(2122, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(2123, 67, '         }\r\n', 0),
(2124, 68, '        }//if at line 61\r\n', 0),
(2125, 69, '        else{\r\n', 2),
(2126, 70, '         numDays = 28;\r\n', 5),
(2127, 71, '         if (year > 2020){\r\n', 7),
(2128, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(2129, 73, '         }\r\n', 0),
(2130, 74, '         else{\r\n', 2),
(2131, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(2132, 76, '         }\r\n', 0),
(2133, 77, '         break;  \r\n', 2),
(2134, 78, '        }//else at line 70\r\n', 2),
(2135, 79, '       }//else at line 60\r\n', 2),
(2136, 80, '    }//switch at line 37\r\n', 2),
(2137, 81, '   }//else at line 36\r\n', 2),
(2138, 82, '  }//method\r\n', 2),
(2139, 83, ' }//class', 2),
(2140, 0, 'class Pattern{ \r\n', 2),
(2141, 1, 'public static void main(String[] args) { \r\n', 9),
(2142, 2, '	 int rows = 5;\r\n', 5),
(2143, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(2144, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(2145, 5, '	 System.out.print(j + " "); \r\n', 10),
(2146, 6, '	 } \r\n', 0),
(2147, 7, '	 System.out.println(""); \r\n', 8),
(2148, 8, ' 	} \r\n', 0),
(2149, 9, ' 	} \r\n', 0),
(2150, 10, '} ', 0),
(2151, 0, 'import java.util.Scanner;\r\n', 0),
(2152, 1, ' class Years{\r\n', 2),
(2153, 2, '   public int getYear(){\r\n', 5),
(2154, 3, '	int year;\r\n', 0),
(2155, 4, '	String enteredYear;\r\n', 0),
(2156, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(2157, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(2158, 7, '	enteredYear = sc.next();\r\n', 8),
(2159, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(2160, 9, '	return year;\r\n', 2),
(2161, 10, '   }\r\n', 0),
(2162, 11, ' }\r\n', 0),
(2163, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2164, 13, ' class Months extends Years{\r\n', 4),
(2165, 14, '   public int getMonth(){\r\n', 5),
(2166, 15, '	int month;\r\n', 0),
(2167, 16, '	String enteredMonthNumber;\r\n', 0),
(2168, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(2169, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(2170, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(2171, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(2172, 21, '	return month;\r\n', 2),
(2173, 22, '   }\r\n', 0),
(2174, 23, ' }\r\n', 0),
(2175, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2176, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(2177, 26, ' static int numDays = 0;\r\n', 7),
(2178, 27, ' public static void main(String[] args) {\r\n', 9),
(2179, 28, '   int year;\r\n', 0),
(2180, 29, '   Months m = new Months();\r\n', 4),
(2181, 30, '   int month = m.getMonth();\r\n', 8),
(2182, 31, '   \r\n', 0),
(2183, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(2184, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(2185, 34, '   }\r\n', 0),
(2186, 35, '   else {\r\n', 2),
(2187, 36, '    switch (month) {\r\n', 2),
(2188, 37, '      case 1:\r\n', 5),
(2189, 38, '      case 3:\r\n', 5),
(2190, 39, '      case 5:\r\n', 5),
(2191, 40, '      case 7:\r\n', 5),
(2192, 41, '      case 8:\r\n', 5),
(2193, 42, '      case 10:\r\n', 5),
(2194, 43, '      case 12:\r\n', 5),
(2195, 44, '        numDays = 31;\r\n', 5),
(2196, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(2197, 46, '        break;\r\n', 2),
(2198, 47, '      case 4:\r\n', 5),
(2199, 48, '      case 6:\r\n', 5),
(2200, 49, '      case 9:\r\n', 5),
(2201, 50, '      case 11:\r\n', 5),
(2202, 51, '       numDays = 30;\r\n', 5),
(2203, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(2204, 53, '       break;\r\n', 2),
(2205, 54, '      case 2:\r\n', 5),
(2206, 55, '       year = m.getYear();\r\n', 8),
(2207, 56, '       if(year < 1) {\r\n', 5),
(2208, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(2209, 58, '       }\r\n', 0),
(2210, 59, '       else{\r\n', 2),
(2211, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(2212, 61, '         numDays = 29;\r\n', 5),
(2213, 62, '		 if(year > 2020){\r\n', 7),
(2214, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(2215, 64, '         }\r\n', 0),
(2216, 65, '         else{\r\n', 2),
(2217, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(2218, 67, '         }\r\n', 0),
(2219, 68, '        }//if at line 61\r\n', 0),
(2220, 69, '        else{\r\n', 2),
(2221, 70, '         numDays = 28;\r\n', 5),
(2222, 71, '         if (year > 2020){\r\n', 7),
(2223, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(2224, 73, '         }\r\n', 0),
(2225, 74, '         else{\r\n', 2),
(2226, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(2227, 76, '         }\r\n', 0),
(2228, 77, '         break;  \r\n', 2),
(2229, 78, '        }//else at line 70\r\n', 2),
(2230, 79, '       }//else at line 60\r\n', 2),
(2231, 80, '    }//switch at line 37\r\n', 2),
(2232, 81, '   }//else at line 36\r\n', 2),
(2233, 82, '  }//method\r\n', 2),
(2234, 83, ' }//class', 2),
(2235, 0, 'class HelloWorld { \r\n', 2),
(2236, 1, '	public static void main(String args[]) \r\n', 9),
(2237, 2, '	{ \r\n', 0),
(2238, 3, '		System.out.println("Hello World"); \r\n', 8),
(2239, 4, '	} \r\n', 0),
(2240, 5, '} \r\n', 0),
(2241, 0, 'import java.awt.event.*;\n', 0),
(2242, 1, 'import java.awt.*;\n', 0),
(2243, 2, '\n', 0),
(2244, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 37),
(2245, 4, '\n', 0),
(2246, 5, '    private int mx, my;\n', 4),
(2247, 6, '    private Dimension size;\n', 2),
(2248, 7, '    private int onaroll;\n', 2),
(2249, 8, '\n', 0),
(2250, 9, '    public void init() {\n', 7),
(2251, 10, '        onaroll = 0;\n', 5),
(2252, 11, '        setSize(500, 500);\n', 5),
(2253, 12, '        size = getSize();\n', 2),
(2254, 13, '        addMouseListener(this);\n', 2),
(2255, 14, '        addMouseMotionListener(this);\n', 2),
(2256, 15, '        addComponentListener(this);\n', 5),
(2257, 16, '    }\n', 0),
(2258, 17, '\n', 0),
(2259, 18, '    public void update(Graphics g) {\n', 7),
(2260, 19, '        Dimension newSize = getSize();\n', 4),
(2261, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(2262, 21, '            g.setColor(getBackground());\n', 6),
(2263, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(2264, 23, '        } else {\n', 2),
(2265, 24, '            size = newSize;\n', 4),
(2266, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(2267, 26, '        } // Calculate new position\n', 11),
(2268, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(2269, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(2270, 29, '        paint(g);\n', 0),
(2271, 30, '    }\n', 0),
(2272, 31, '  \n', 0),
(2273, 32, '    public void paint(Graphics g) {\n', 7),
(2274, 33, '        g.setColor(Color.black);\n', 6),
(2275, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(2276, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(2277, 36, '    }\n', 0),
(2278, 37, '\n', 0),
(2279, 38, '    public void mouseDragged(MouseEvent e) {}\n', 7),
(2280, 39, '\n', 0),
(2281, 40, '    public void mouseMoved(MouseEvent e) {\n', 7),
(2282, 41, '        e.consume();\n', 6),
(2283, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(2284, 43, '            repaint();\n', 0),
(2285, 44, '        }\n', 0),
(2286, 45, '    }\n', 0),
(2287, 46, '\n', 0),
(2288, 47, '    public void mousePressed(MouseEvent e) {\n', 7),
(2289, 48, '        int x = e.getX();\n', 8),
(2290, 49, '        int y = e.getY();\n', 8),
(2291, 50, '        e.consume();\n', 6),
(2292, 51, '        requestFocus();\n', 0),
(2293, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(2294, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(2295, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(2296, 55, '                case 0:\n', 5),
(2297, 56, '                    play(getCodeBase(), \n', 2),
(2298, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(2299, 58, '                    break;\n', 2),
(2300, 59, '                case 1:\n', 5),
(2301, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(2302, 61, '                    break;\n', 2),
(2303, 62, '                case 2:\n', 5),
(2304, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(2305, 64, '                    break;\n', 2),
(2306, 65, '                case 3:\n', 5),
(2307, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(2308, 67, '                    break;\n', 2),
(2309, 68, '                }\n', 0),
(2310, 69, '                onaroll++;\n', 2),
(2311, 70, '                if (onaroll > 5) {\n', 7),
(2312, 72, '                } else {\n', 2),
(2313, 74, '                }\n', 0),
(2314, 75, '            } else {   //first hit\n', 0),
(2315, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(2316, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(2317, 78, '                onaroll = 1;\n', 5),
(2318, 79, '            }\n', 0),
(2319, 80, '        } else {   //miss\n', 0),
(2320, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(2321, 82, '			\n', 0),
(2322, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(2323, 84, '            onaroll = 0;\n', 5),
(2324, 85, '        }\n', 0),
(2325, 86, '        repaint();\n', 0),
(2326, 87, '    }\n', 0),
(2327, 88, '\n', 0),
(2328, 89, '    public void mouseReleased(MouseEvent e) {}\n', 7),
(2329, 90, '\n', 0),
(2330, 91, '    public void mouseEntered(MouseEvent e) {\n', 7),
(2331, 92, '        repaint();\n', 0),
(2332, 93, '    }\n', 0),
(2333, 94, '\n', 0),
(2334, 95, '    public void mouseExited(MouseEvent e) {\n', 7),
(2335, 96, '        repaint();\n', 0),
(2336, 97, '    }\n', 0),
(2337, 98, '\n', 0),
(2338, 99, '    public void mouseClicked(MouseEvent e) {}\n', 7),
(2339, 100, '\n', 0),
(2340, 101, '    public void componentHidden(ComponentEvent e) {}\n', 9),
(2341, 102, ' \n', 0),
(2342, 103, '    public void componentMoved(ComponentEvent e) {}\n', 7),
(2343, 104, ' \n', 0),
(2344, 105, '    public void componentResized(ComponentEvent e) {\n', 7),
(2345, 106, '        repaint();\n', 0),
(2346, 107, '    }\n', 0),
(2347, 108, ' \n', 0),
(2348, 109, '    public void componentShown(ComponentEvent e) {\n', 7),
(2349, 110, '        repaint();\n', 0),
(2350, 111, '    }\n', 0),
(2351, 112, '  \n', 0),
(2352, 113, '    public void destroy() {\n', 7),
(2353, 114, '        removeMouseListener(this);\n', 2),
(2354, 115, '        removeMouseMotionListener(this);\n', 2),
(2355, 116, '    }\n', 0),
(2356, 117, '\n', 0),
(2357, 118, '    public String getAppletInfo() {\n', 5),
(2358, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(2359, 120, '    }\n', 0),
(2360, 121, '}\n', 0),
(2361, 0, 'import java.util.Scanner;\r\n', 0),
(2362, 1, ' class Years{\r\n', 2),
(2363, 2, '   public int getYear(){\r\n', 4),
(2364, 3, '	int year;\r\n', 0),
(2365, 4, '	String enteredYear;\r\n', 0),
(2366, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(2367, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(2368, 7, '	enteredYear = sc.next();\r\n', 8),
(2369, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(2370, 9, '	return year;\r\n', 2),
(2371, 10, '   }\r\n', 0),
(2372, 11, ' }\r\n', 0),
(2373, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2374, 13, ' class Months extends Years{\r\n', 4),
(2375, 14, '   public int getMonth(){\r\n', 4),
(2376, 15, '	int month;\r\n', 0),
(2377, 16, '	String enteredMonthNumber;\r\n', 0),
(2378, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(2379, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(2380, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(2381, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(2382, 21, '	return month;\r\n', 2),
(2383, 22, '   }\r\n', 0),
(2384, 23, ' }\r\n', 0),
(2385, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2386, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(2387, 26, ' static int numDays = 0;\r\n', 7),
(2388, 27, ' public static void main(String[] args) {\r\n', 8),
(2389, 28, '   int year;\r\n', 0),
(2390, 29, '   Months m = new Months();\r\n', 4),
(2391, 30, '   int month = m.getMonth();\r\n', 8),
(2392, 31, '   \r\n', 0),
(2393, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(2394, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(2395, 34, '   }\r\n', 0),
(2396, 35, '   else {\r\n', 2),
(2397, 36, '    switch (month) {\r\n', 2),
(2398, 37, '      case 1:\r\n', 5),
(2399, 38, '      case 3:\r\n', 5),
(2400, 39, '      case 5:\r\n', 5),
(2401, 40, '      case 7:\r\n', 5),
(2402, 41, '      case 8:\r\n', 5),
(2403, 42, '      case 10:\r\n', 5),
(2404, 43, '      case 12:\r\n', 5),
(2405, 44, '        numDays = 31;\r\n', 5),
(2406, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(2407, 46, '        break;\r\n', 2),
(2408, 47, '      case 4:\r\n', 5),
(2409, 48, '      case 6:\r\n', 5),
(2410, 49, '      case 9:\r\n', 5),
(2411, 50, '      case 11:\r\n', 5),
(2412, 51, '       numDays = 30;\r\n', 5),
(2413, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(2414, 53, '       break;\r\n', 2),
(2415, 54, '      case 2:\r\n', 5),
(2416, 55, '       year = m.getYear();\r\n', 8),
(2417, 56, '       if(year < 1) {\r\n', 5),
(2418, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(2419, 58, '       }\r\n', 0),
(2420, 59, '       else{\r\n', 2),
(2421, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(2422, 61, '         numDays = 29;\r\n', 5),
(2423, 62, '		 if(year > 2020){\r\n', 7),
(2424, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(2425, 64, '         }\r\n', 0),
(2426, 65, '         else{\r\n', 2),
(2427, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(2428, 67, '         }\r\n', 0),
(2429, 68, '        }//if at line 61\r\n', 0),
(2430, 69, '        else{\r\n', 2),
(2431, 70, '         numDays = 28;\r\n', 5),
(2432, 71, '         if (year > 2020){\r\n', 7),
(2433, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(2434, 73, '         }\r\n', 0),
(2435, 74, '         else{\r\n', 2),
(2436, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(2437, 76, '         }\r\n', 0),
(2438, 77, '         break;  \r\n', 2),
(2439, 78, '        }//else at line 70\r\n', 2),
(2440, 79, '       }//else at line 60\r\n', 2),
(2441, 80, '    }//switch at line 37\r\n', 2),
(2442, 81, '   }//else at line 36\r\n', 2),
(2443, 82, '  }//method\r\n', 2),
(2444, 83, ' }//class', 2),
(2445, 0, 'public class RecursionExample2 {  \r\n', 9),
(2446, 1, 'static int count=0;  \r\n', 7),
(2447, 2, 'public int p(){  \r\n', 4),
(2448, 3, 'count++;  \r\n', 2),
(2449, 4, 'if(count<=5){  \r\n', 9),
(2450, 5, 'System.out.println("hello "+count);  \r\n', 8),
(2451, 6, 'public int p();  \r\n', 4),
(2452, 7, '}  \r\n', 0),
(2453, 8, '}  \r\n', 0),
(2454, 9, 'public static void main(String[] args) {  \r\n', 8),
(2455, 10, 'p();  \r\n', 0),
(2456, 11, '}  \r\n', 0),
(2457, 12, '}  ', 0),
(2458, 0, 'import java.awt.event.*;\n', 0),
(2459, 1, 'import java.awt.*;\n', 0),
(2460, 2, '\n', 0),
(2461, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(2462, 4, '\n', 0),
(2463, 5, '    private int mx, my;\n', 4),
(2464, 6, '    private Dimension size;\n', 2),
(2465, 7, '    private int onaroll;\n', 2),
(2466, 8, '\n', 0),
(2467, 9, '    public void init() {\n', 6),
(2468, 10, '        onaroll = 0;\n', 5),
(2469, 11, '        setSize(500, 500);\n', 5),
(2470, 12, '        size = getSize();\n', 2),
(2471, 13, '        addMouseListener(this);\n', 2),
(2472, 14, '        addMouseMotionListener(this);\n', 2),
(2473, 15, '        addComponentListener(this);\n', 4),
(2474, 16, '    }\n', 0),
(2475, 17, '\n', 0),
(2476, 18, '    public void update(Graphics g) {\n', 6),
(2477, 19, '        Dimension newSize = getSize();\n', 4),
(2478, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(2479, 21, '            g.setColor(getBackground());\n', 6),
(2480, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(2481, 23, '        } else {\n', 2),
(2482, 24, '            size = newSize;\n', 4),
(2483, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(2484, 26, '        } // Calculate new position\n', 11),
(2485, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(2486, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(2487, 29, '        paint(g);\n', 0),
(2488, 30, '    }\n', 0),
(2489, 31, '  \n', 0),
(2490, 32, '    public void paint(Graphics g) {\n', 6),
(2491, 33, '        g.setColor(Color.black);\n', 6),
(2492, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(2493, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(2494, 36, '    }\n', 0),
(2495, 37, '\n', 0),
(2496, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(2497, 39, '\n', 0),
(2498, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(2499, 41, '        e.consume();\n', 6),
(2500, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(2501, 43, '            repaint();\n', 0),
(2502, 44, '        }\n', 0),
(2503, 45, '    }\n', 0),
(2504, 46, '\n', 0),
(2505, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(2506, 48, '        int x = e.getX();\n', 8),
(2507, 49, '        int y = e.getY();\n', 8),
(2508, 50, '        e.consume();\n', 6),
(2509, 51, '        requestFocus();\n', 0),
(2510, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(2511, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(2512, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(2513, 55, '                case 0:\n', 5),
(2514, 56, '                    play(getCodeBase(), \n', 2),
(2515, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(2516, 58, '                    break;\n', 2),
(2517, 59, '                case 1:\n', 5),
(2518, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(2519, 61, '                    break;\n', 2),
(2520, 62, '                case 2:\n', 5),
(2521, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(2522, 64, '                    break;\n', 2),
(2523, 65, '                case 3:\n', 5),
(2524, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(2525, 67, '                    break;\n', 2),
(2526, 68, '                }\n', 0),
(2527, 69, '                onaroll++;\n', 2),
(2528, 70, '                if (onaroll > 5) {\n', 7),
(2529, 72, '                } else {\n', 2),
(2530, 74, '                }\n', 0),
(2531, 75, '            } else {   //first hit\n', 0),
(2532, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(2533, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(2534, 78, '                onaroll = 1;\n', 5),
(2535, 79, '            }\n', 0),
(2536, 80, '        } else {   //miss\n', 0),
(2537, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(2538, 82, '			\n', 0),
(2539, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(2540, 84, '            onaroll = 0;\n', 5),
(2541, 85, '        }\n', 0),
(2542, 86, '        repaint();\n', 0),
(2543, 87, '    }\n', 0),
(2544, 88, '\n', 0),
(2545, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(2546, 90, '\n', 0),
(2547, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(2548, 92, '        repaint();\n', 0),
(2549, 93, '    }\n', 0),
(2550, 94, '\n', 0),
(2551, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(2552, 96, '        repaint();\n', 0),
(2553, 97, '    }\n', 0),
(2554, 98, '\n', 0),
(2555, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(2556, 100, '\n', 0),
(2557, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(2558, 102, ' \n', 0),
(2559, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(2560, 104, ' \n', 0),
(2561, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(2562, 106, '        repaint();\n', 0),
(2563, 107, '    }\n', 0),
(2564, 108, ' \n', 0),
(2565, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(2566, 110, '        repaint();\n', 0),
(2567, 111, '    }\n', 0),
(2568, 112, '  \n', 0),
(2569, 113, '    public void destroy() {\n', 6),
(2570, 114, '        removeMouseListener(this);\n', 2),
(2571, 115, '        removeMouseMotionListener(this);\n', 2),
(2572, 116, '    }\n', 0),
(2573, 117, '\n', 0),
(2574, 118, '    public String getAppletInfo() {\n', 4),
(2575, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(2576, 120, '    }\n', 0),
(2577, 121, '}\n', 0),
(2578, 0, 'import java.awt.event.*;\n', 0),
(2579, 1, 'import java.awt.*;\n', 0),
(2580, 2, '\n', 0),
(2581, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(2582, 4, '\n', 0),
(2583, 5, '    private int mx, my;\n', 4),
(2584, 6, '    private Dimension size;\n', 2),
(2585, 7, '    private int onaroll;\n', 2),
(2586, 8, '\n', 0),
(2587, 9, '    public void init() {\n', 6),
(2588, 10, '        onaroll = 0;\n', 5),
(2589, 11, '        setSize(500, 500);\n', 5),
(2590, 12, '        size = getSize();\n', 2),
(2591, 13, '        addMouseListener(this);\n', 2),
(2592, 14, '        addMouseMotionListener(this);\n', 2),
(2593, 15, '        addComponentListener(this);\n', 4),
(2594, 16, '    }\n', 0),
(2595, 17, '\n', 0),
(2596, 18, '    public void update(Graphics g) {\n', 6),
(2597, 19, '        Dimension newSize = getSize();\n', 4),
(2598, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(2599, 21, '            g.setColor(getBackground());\n', 6),
(2600, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(2601, 23, '        } else {\n', 2),
(2602, 24, '            size = newSize;\n', 4),
(2603, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(2604, 26, '        } // Calculate new position\n', 11),
(2605, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(2606, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(2607, 29, '        paint(g);\n', 0),
(2608, 30, '    }\n', 0),
(2609, 31, '  \n', 0),
(2610, 32, '    public void paint(Graphics g) {\n', 6),
(2611, 33, '        g.setColor(Color.black);\n', 6),
(2612, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(2613, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(2614, 36, '    }\n', 0),
(2615, 37, '\n', 0),
(2616, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(2617, 39, '\n', 0),
(2618, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(2619, 41, '        e.consume();\n', 6),
(2620, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(2621, 43, '            repaint();\n', 0),
(2622, 44, '        }\n', 0),
(2623, 45, '    }\n', 0),
(2624, 46, '\n', 0),
(2625, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(2626, 48, '        int x = e.getX();\n', 8),
(2627, 49, '        int y = e.getY();\n', 8),
(2628, 50, '        e.consume();\n', 6),
(2629, 51, '        requestFocus();\n', 0),
(2630, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(2631, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(2632, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(2633, 55, '                case 0:\n', 5),
(2634, 56, '                    play(getCodeBase(), \n', 2),
(2635, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(2636, 58, '                    break;\n', 2),
(2637, 59, '                case 1:\n', 5),
(2638, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(2639, 61, '                    break;\n', 2),
(2640, 62, '                case 2:\n', 5),
(2641, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(2642, 64, '                    break;\n', 2),
(2643, 65, '                case 3:\n', 5),
(2644, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(2645, 67, '                    break;\n', 2),
(2646, 68, '                }\n', 0),
(2647, 69, '                onaroll++;\n', 2),
(2648, 70, '                if (onaroll > 5) {\n', 7),
(2649, 72, '                } else {\n', 2),
(2650, 74, '                }\n', 0),
(2651, 75, '            } else {   //first hit\n', 0),
(2652, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(2653, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(2654, 78, '                onaroll = 1;\n', 5),
(2655, 79, '            }\n', 0),
(2656, 80, '        } else {   //miss\n', 0),
(2657, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(2658, 82, '			\n', 0),
(2659, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(2660, 84, '            onaroll = 0;\n', 5),
(2661, 85, '        }\n', 0),
(2662, 86, '        repaint();\n', 0),
(2663, 87, '    }\n', 0),
(2664, 88, '\n', 0),
(2665, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(2666, 90, '\n', 0),
(2667, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(2668, 92, '        repaint();\n', 0),
(2669, 93, '    }\n', 0),
(2670, 94, '\n', 0),
(2671, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(2672, 96, '        repaint();\n', 0),
(2673, 97, '    }\n', 0),
(2674, 98, '\n', 0),
(2675, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(2676, 100, '\n', 0),
(2677, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(2678, 102, ' \n', 0),
(2679, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(2680, 104, ' \n', 0),
(2681, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(2682, 106, '        repaint();\n', 0),
(2683, 107, '    }\n', 0),
(2684, 108, ' \n', 0),
(2685, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(2686, 110, '        repaint();\n', 0),
(2687, 111, '    }\n', 0),
(2688, 112, '  \n', 0),
(2689, 113, '    public void destroy() {\n', 6),
(2690, 114, '        removeMouseListener(this);\n', 2),
(2691, 115, '        removeMouseMotionListener(this);\n', 2),
(2692, 116, '    }\n', 0),
(2693, 117, '\n', 0),
(2694, 118, '    public String getAppletInfo() {\n', 4),
(2695, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(2696, 120, '    }\n', 0),
(2697, 121, '}\n', 0),
(2698, 0, 'import java.util.Scanner;\r\n', 0),
(2699, 1, ' class Years{\r\n', 2),
(2700, 2, '   public int getYear(){\r\n', 4),
(2701, 3, '	int year;\r\n', 0),
(2702, 4, '	String enteredYear;\r\n', 0),
(2703, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(2704, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(2705, 7, '	enteredYear = sc.next();\r\n', 8),
(2706, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(2707, 9, '	return year;\r\n', 2),
(2708, 10, '   }\r\n', 0),
(2709, 11, ' }\r\n', 0),
(2710, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2711, 13, ' class Months extends Years{\r\n', 4),
(2712, 14, '   public int getMonth(){\r\n', 4),
(2713, 15, '	int month;\r\n', 0),
(2714, 16, '	String enteredMonthNumber;\r\n', 0),
(2715, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(2716, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(2717, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(2718, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(2719, 21, '	return month;\r\n', 2),
(2720, 22, '   }\r\n', 0),
(2721, 23, ' }\r\n', 0),
(2722, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2723, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(2724, 26, ' static int numDays = 0;\r\n', 7),
(2725, 27, ' public static void main(String[] args) {\r\n', 8),
(2726, 28, '   int year;\r\n', 0),
(2727, 29, '   Months m = new Months();\r\n', 4),
(2728, 30, '   int month = m.getMonth();\r\n', 8),
(2729, 31, '   \r\n', 0),
(2730, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(2731, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(2732, 34, '   }\r\n', 0),
(2733, 35, '   else {\r\n', 2),
(2734, 36, '    switch (month) {\r\n', 2),
(2735, 37, '      case 1:\r\n', 5),
(2736, 38, '      case 3:\r\n', 5),
(2737, 39, '      case 5:\r\n', 5),
(2738, 40, '      case 7:\r\n', 5),
(2739, 41, '      case 8:\r\n', 5),
(2740, 42, '      case 10:\r\n', 5),
(2741, 43, '      case 12:\r\n', 5),
(2742, 44, '        numDays = 31;\r\n', 5),
(2743, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(2744, 46, '        break;\r\n', 2),
(2745, 47, '      case 4:\r\n', 5),
(2746, 48, '      case 6:\r\n', 5),
(2747, 49, '      case 9:\r\n', 5),
(2748, 50, '      case 11:\r\n', 5),
(2749, 51, '       numDays = 30;\r\n', 5),
(2750, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(2751, 53, '       break;\r\n', 2),
(2752, 54, '      case 2:\r\n', 5),
(2753, 55, '       year = m.getYear();\r\n', 8),
(2754, 56, '       if(year < 1) {\r\n', 5),
(2755, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(2756, 58, '       }\r\n', 0),
(2757, 59, '       else{\r\n', 2),
(2758, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(2759, 61, '         numDays = 29;\r\n', 5),
(2760, 62, '		 if(year > 2020){\r\n', 7),
(2761, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(2762, 64, '         }\r\n', 0),
(2763, 65, '         else{\r\n', 2),
(2764, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(2765, 67, '         }\r\n', 0),
(2766, 68, '        }//if at line 61\r\n', 0),
(2767, 69, '        else{\r\n', 2),
(2768, 70, '         numDays = 28;\r\n', 5),
(2769, 71, '         if (year > 2020){\r\n', 7),
(2770, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(2771, 73, '         }\r\n', 0),
(2772, 74, '         else{\r\n', 2),
(2773, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(2774, 76, '         }\r\n', 0),
(2775, 77, '         break;  \r\n', 2),
(2776, 78, '        }//else at line 70\r\n', 2),
(2777, 79, '       }//else at line 60\r\n', 2),
(2778, 80, '    }//switch at line 37\r\n', 2),
(2779, 81, '   }//else at line 36\r\n', 2),
(2780, 82, '  }//method\r\n', 2),
(2781, 83, ' }//class', 2),
(2782, 0, 'class Pattern{ \r\n', 2),
(2783, 1, 'public static void main(String[] args) { \r\n', 8),
(2784, 2, '	 int rows = 5;\r\n', 5),
(2785, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(2786, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(2787, 5, '	 System.out.print(j + " "); \r\n', 13),
(2788, 6, '	 } \r\n', 0),
(2789, 7, '	 System.out.println(""); \r\n', 11),
(2790, 8, ' 	} \r\n', 0),
(2791, 9, ' 	} \r\n', 0),
(2792, 10, '} ', 0),
(2793, 0, 'import java.util.Scanner;\r\n', 0),
(2794, 1, ' class Years{\r\n', 2),
(2795, 2, '   public int getYear(){\r\n', 4),
(2796, 3, '	int year;\r\n', 0),
(2797, 4, '	String enteredYear;\r\n', 0),
(2798, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(2799, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(2800, 7, '	enteredYear = sc.next();\r\n', 8),
(2801, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(2802, 9, '	return year;\r\n', 2),
(2803, 10, '   }\r\n', 0),
(2804, 11, ' }\r\n', 0),
(2805, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2806, 13, ' class Months extends Years{\r\n', 4),
(2807, 14, '   public int getMonth(){\r\n', 4),
(2808, 15, '	int month;\r\n', 0),
(2809, 16, '	String enteredMonthNumber;\r\n', 0),
(2810, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(2811, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(2812, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(2813, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(2814, 21, '	return month;\r\n', 2),
(2815, 22, '   }\r\n', 0),
(2816, 23, ' }\r\n', 0),
(2817, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2818, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(2819, 26, ' static int numDays = 0;\r\n', 7),
(2820, 27, ' public static void main(String[] args) {\r\n', 8),
(2821, 28, '   int year;\r\n', 0),
(2822, 29, '   Months m = new Months();\r\n', 4),
(2823, 30, '   int month = m.getMonth();\r\n', 8),
(2824, 31, '   \r\n', 0),
(2825, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(2826, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(2827, 34, '   }\r\n', 0),
(2828, 35, '   else {\r\n', 2),
(2829, 36, '    switch (month) {\r\n', 2),
(2830, 37, '      case 1:\r\n', 5),
(2831, 38, '      case 3:\r\n', 5),
(2832, 39, '      case 5:\r\n', 5),
(2833, 40, '      case 7:\r\n', 5),
(2834, 41, '      case 8:\r\n', 5),
(2835, 42, '      case 10:\r\n', 5),
(2836, 43, '      case 12:\r\n', 5),
(2837, 44, '        numDays = 31;\r\n', 5),
(2838, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(2839, 46, '        break;\r\n', 2),
(2840, 47, '      case 4:\r\n', 5),
(2841, 48, '      case 6:\r\n', 5),
(2842, 49, '      case 9:\r\n', 5),
(2843, 50, '      case 11:\r\n', 5),
(2844, 51, '       numDays = 30;\r\n', 5),
(2845, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(2846, 53, '       break;\r\n', 2),
(2847, 54, '      case 2:\r\n', 5),
(2848, 55, '       year = m.getYear();\r\n', 8),
(2849, 56, '       if(year < 1) {\r\n', 5),
(2850, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(2851, 58, '       }\r\n', 0),
(2852, 59, '       else{\r\n', 2),
(2853, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(2854, 61, '         numDays = 29;\r\n', 5),
(2855, 62, '		 if(year > 2020){\r\n', 7),
(2856, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(2857, 64, '         }\r\n', 0),
(2858, 65, '         else{\r\n', 2),
(2859, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(2860, 67, '         }\r\n', 0),
(2861, 68, '        }//if at line 61\r\n', 0),
(2862, 69, '        else{\r\n', 2),
(2863, 70, '         numDays = 28;\r\n', 5),
(2864, 71, '         if (year > 2020){\r\n', 7),
(2865, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(2866, 73, '         }\r\n', 0),
(2867, 74, '         else{\r\n', 2),
(2868, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(2869, 76, '         }\r\n', 0),
(2870, 77, '         break;  \r\n', 2),
(2871, 78, '        }//else at line 70\r\n', 2),
(2872, 79, '       }//else at line 60\r\n', 2),
(2873, 80, '    }//switch at line 37\r\n', 2),
(2874, 81, '   }//else at line 36\r\n', 2),
(2875, 82, '  }//method\r\n', 2),
(2876, 83, ' }//class', 2),
(2877, 0, 'class HelloWorld { \r\n', 2),
(2878, 1, '	public static void main(String args[]) \r\n', 8),
(2879, 2, '	{ \r\n', 0),
(2880, 3, '		System.out.println("Hello World"); \r\n', 11),
(2881, 4, '	} \r\n', 0),
(2882, 5, '} \r\n', 0),
(2883, 0, 'import java.awt.event.*;\n', 0),
(2884, 1, 'import java.awt.*;\n', 0),
(2885, 2, '\n', 0),
(2886, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(2887, 4, '\n', 0),
(2888, 5, '    private int mx, my;\n', 4),
(2889, 6, '    private Dimension size;\n', 2),
(2890, 7, '    private int onaroll;\n', 2),
(2891, 8, '\n', 0),
(2892, 9, '    public void init() {\n', 6),
(2893, 10, '        onaroll = 0;\n', 5),
(2894, 11, '        setSize(500, 500);\n', 5),
(2895, 12, '        size = getSize();\n', 2),
(2896, 13, '        addMouseListener(this);\n', 2),
(2897, 14, '        addMouseMotionListener(this);\n', 2),
(2898, 15, '        addComponentListener(this);\n', 4),
(2899, 16, '    }\n', 0),
(2900, 17, '\n', 0),
(2901, 18, '    public void update(Graphics g) {\n', 6),
(2902, 19, '        Dimension newSize = getSize();\n', 4),
(2903, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(2904, 21, '            g.setColor(getBackground());\n', 6),
(2905, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(2906, 23, '        } else {\n', 2),
(2907, 24, '            size = newSize;\n', 4),
(2908, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(2909, 26, '        } // Calculate new position\n', 11),
(2910, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(2911, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(2912, 29, '        paint(g);\n', 0),
(2913, 30, '    }\n', 0),
(2914, 31, '  \n', 0),
(2915, 32, '    public void paint(Graphics g) {\n', 6),
(2916, 33, '        g.setColor(Color.black);\n', 6),
(2917, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(2918, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(2919, 36, '    }\n', 0),
(2920, 37, '\n', 0),
(2921, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(2922, 39, '\n', 0),
(2923, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(2924, 41, '        e.consume();\n', 6),
(2925, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(2926, 43, '            repaint();\n', 0),
(2927, 44, '        }\n', 0),
(2928, 45, '    }\n', 0),
(2929, 46, '\n', 0),
(2930, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(2931, 48, '        int x = e.getX();\n', 8),
(2932, 49, '        int y = e.getY();\n', 8),
(2933, 50, '        e.consume();\n', 6),
(2934, 51, '        requestFocus();\n', 0),
(2935, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(2936, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(2937, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(2938, 55, '                case 0:\n', 5),
(2939, 56, '                    play(getCodeBase(), \n', 2),
(2940, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(2941, 58, '                    break;\n', 2),
(2942, 59, '                case 1:\n', 5),
(2943, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(2944, 61, '                    break;\n', 2),
(2945, 62, '                case 2:\n', 5),
(2946, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(2947, 64, '                    break;\n', 2),
(2948, 65, '                case 3:\n', 5),
(2949, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(2950, 67, '                    break;\n', 2),
(2951, 68, '                }\n', 0),
(2952, 69, '                onaroll++;\n', 2),
(2953, 70, '                if (onaroll > 5) {\n', 7),
(2954, 72, '                } else {\n', 2),
(2955, 74, '                }\n', 0),
(2956, 75, '            } else {   //first hit\n', 0),
(2957, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(2958, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(2959, 78, '                onaroll = 1;\n', 5),
(2960, 79, '            }\n', 0),
(2961, 80, '        } else {   //miss\n', 0),
(2962, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(2963, 82, '			\n', 0),
(2964, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(2965, 84, '            onaroll = 0;\n', 5),
(2966, 85, '        }\n', 0),
(2967, 86, '        repaint();\n', 0),
(2968, 87, '    }\n', 0),
(2969, 88, '\n', 0),
(2970, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(2971, 90, '\n', 0),
(2972, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(2973, 92, '        repaint();\n', 0),
(2974, 93, '    }\n', 0),
(2975, 94, '\n', 0),
(2976, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(2977, 96, '        repaint();\n', 0),
(2978, 97, '    }\n', 0),
(2979, 98, '\n', 0),
(2980, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(2981, 100, '\n', 0),
(2982, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(2983, 102, ' \n', 0),
(2984, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(2985, 104, ' \n', 0),
(2986, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(2987, 106, '        repaint();\n', 0),
(2988, 107, '    }\n', 0),
(2989, 108, ' \n', 0),
(2990, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(2991, 110, '        repaint();\n', 0),
(2992, 111, '    }\n', 0),
(2993, 112, '  \n', 0),
(2994, 113, '    public void destroy() {\n', 6),
(2995, 114, '        removeMouseListener(this);\n', 2),
(2996, 115, '        removeMouseMotionListener(this);\n', 2),
(2997, 116, '    }\n', 0),
(2998, 117, '\n', 0),
(2999, 118, '    public String getAppletInfo() {\n', 4),
(3000, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(3001, 120, '    }\n', 0),
(3002, 121, '}\n', 0),
(3003, 0, 'import java.util.Scanner;\r\n', 0),
(3004, 1, ' class Years{\r\n', 2),
(3005, 2, '   public int getYear(){\r\n', 4),
(3006, 3, '	int year;\r\n', 0),
(3007, 4, '	String enteredYear;\r\n', 0),
(3008, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(3009, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(3010, 7, '	enteredYear = sc.next();\r\n', 8),
(3011, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(3012, 9, '	return year;\r\n', 2),
(3013, 10, '   }\r\n', 0),
(3014, 11, ' }\r\n', 0),
(3015, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3016, 13, ' class Months extends Years{\r\n', 4),
(3017, 14, '   public int getMonth(){\r\n', 4),
(3018, 15, '	int month;\r\n', 0),
(3019, 16, '	String enteredMonthNumber;\r\n', 0),
(3020, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(3021, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(3022, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(3023, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(3024, 21, '	return month;\r\n', 2),
(3025, 22, '   }\r\n', 0),
(3026, 23, ' }\r\n', 0),
(3027, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3028, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(3029, 26, ' static int numDays = 0;\r\n', 7),
(3030, 27, ' public static void main(String[] args) {\r\n', 8),
(3031, 28, '   int year;\r\n', 0),
(3032, 29, '   Months m = new Months();\r\n', 4),
(3033, 30, '   int month = m.getMonth();\r\n', 8),
(3034, 31, '   \r\n', 0),
(3035, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(3036, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(3037, 34, '   }\r\n', 0),
(3038, 35, '   else {\r\n', 2),
(3039, 36, '    switch (month) {\r\n', 2),
(3040, 37, '      case 1:\r\n', 5),
(3041, 38, '      case 3:\r\n', 5),
(3042, 39, '      case 5:\r\n', 5),
(3043, 40, '      case 7:\r\n', 5),
(3044, 41, '      case 8:\r\n', 5),
(3045, 42, '      case 10:\r\n', 5),
(3046, 43, '      case 12:\r\n', 5),
(3047, 44, '        numDays = 31;\r\n', 5),
(3048, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(3049, 46, '        break;\r\n', 2),
(3050, 47, '      case 4:\r\n', 5),
(3051, 48, '      case 6:\r\n', 5),
(3052, 49, '      case 9:\r\n', 5),
(3053, 50, '      case 11:\r\n', 5),
(3054, 51, '       numDays = 30;\r\n', 5),
(3055, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(3056, 53, '       break;\r\n', 2),
(3057, 54, '      case 2:\r\n', 5),
(3058, 55, '       year = m.getYear();\r\n', 8),
(3059, 56, '       if(year < 1) {\r\n', 5),
(3060, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(3061, 58, '       }\r\n', 0),
(3062, 59, '       else{\r\n', 2),
(3063, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(3064, 61, '         numDays = 29;\r\n', 5),
(3065, 62, '		 if(year > 2020){\r\n', 7),
(3066, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(3067, 64, '         }\r\n', 0),
(3068, 65, '         else{\r\n', 2),
(3069, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(3070, 67, '         }\r\n', 0),
(3071, 68, '        }//if at line 61\r\n', 0),
(3072, 69, '        else{\r\n', 2),
(3073, 70, '         numDays = 28;\r\n', 5),
(3074, 71, '         if (year > 2020){\r\n', 7),
(3075, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(3076, 73, '         }\r\n', 0),
(3077, 74, '         else{\r\n', 2),
(3078, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(3079, 76, '         }\r\n', 0),
(3080, 77, '         break;  \r\n', 2),
(3081, 78, '        }//else at line 70\r\n', 2),
(3082, 79, '       }//else at line 60\r\n', 2),
(3083, 80, '    }//switch at line 37\r\n', 2),
(3084, 81, '   }//else at line 36\r\n', 2),
(3085, 82, '  }//method\r\n', 2),
(3086, 83, ' }//class', 2),
(3087, 0, 'public class RecursionExample2 {  \r\n', 9),
(3088, 1, 'static int count=0;  \r\n', 7),
(3089, 2, 'public int p(){  \r\n', 4),
(3090, 3, 'count++;  \r\n', 2),
(3091, 4, 'if(count<=5){  \r\n', 9),
(3092, 5, 'System.out.println("hello "+count);  \r\n', 8),
(3093, 6, 'public int p();  \r\n', 4),
(3094, 7, '}  \r\n', 0),
(3095, 8, '}  \r\n', 0);
INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(3096, 9, 'public static void main(String[] args) {  \r\n', 8),
(3097, 10, 'p();  \r\n', 0),
(3098, 11, '}  \r\n', 0),
(3099, 12, '}  ', 0),
(3100, 0, 'import java.awt.event.*;\n', 0),
(3101, 1, 'import java.awt.*;\n', 0),
(3102, 2, '\n', 0),
(3103, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(3104, 4, '\n', 0),
(3105, 5, '    private int mx, my;\n', 4),
(3106, 6, '    private Dimension size;\n', 2),
(3107, 7, '    private int onaroll;\n', 2),
(3108, 8, '\n', 0),
(3109, 9, '    public void init() {\n', 6),
(3110, 10, '        onaroll = 0;\n', 5),
(3111, 11, '        setSize(500, 500);\n', 5),
(3112, 12, '        size = getSize();\n', 2),
(3113, 13, '        addMouseListener(this);\n', 2),
(3114, 14, '        addMouseMotionListener(this);\n', 2),
(3115, 15, '        addComponentListener(this);\n', 4),
(3116, 16, '    }\n', 0),
(3117, 17, '\n', 0),
(3118, 18, '    public void update(Graphics g) {\n', 6),
(3119, 19, '        Dimension newSize = getSize();\n', 4),
(3120, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(3121, 21, '            g.setColor(getBackground());\n', 6),
(3122, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(3123, 23, '        } else {\n', 2),
(3124, 24, '            size = newSize;\n', 4),
(3125, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(3126, 26, '        } // Calculate new position\n', 11),
(3127, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(3128, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(3129, 29, '        paint(g);\n', 0),
(3130, 30, '    }\n', 0),
(3131, 31, '  \n', 0),
(3132, 32, '    public void paint(Graphics g) {\n', 6),
(3133, 33, '        g.setColor(Color.black);\n', 6),
(3134, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(3135, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(3136, 36, '    }\n', 0),
(3137, 37, '\n', 0),
(3138, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(3139, 39, '\n', 0),
(3140, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(3141, 41, '        e.consume();\n', 6),
(3142, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(3143, 43, '            repaint();\n', 0),
(3144, 44, '        }\n', 0),
(3145, 45, '    }\n', 0),
(3146, 46, '\n', 0),
(3147, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(3148, 48, '        int x = e.getX();\n', 8),
(3149, 49, '        int y = e.getY();\n', 8),
(3150, 50, '        e.consume();\n', 6),
(3151, 51, '        requestFocus();\n', 0),
(3152, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(3153, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(3154, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(3155, 55, '                case 0:\n', 5),
(3156, 56, '                    play(getCodeBase(), \n', 2),
(3157, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(3158, 58, '                    break;\n', 2),
(3159, 59, '                case 1:\n', 5),
(3160, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(3161, 61, '                    break;\n', 2),
(3162, 62, '                case 2:\n', 5),
(3163, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(3164, 64, '                    break;\n', 2),
(3165, 65, '                case 3:\n', 5),
(3166, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(3167, 67, '                    break;\n', 2),
(3168, 68, '                }\n', 0),
(3169, 69, '                onaroll++;\n', 2),
(3170, 70, '                if (onaroll > 5) {\n', 7),
(3171, 72, '                } else {\n', 2),
(3172, 74, '                }\n', 0),
(3173, 75, '            } else {   //first hit\n', 0),
(3174, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(3175, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(3176, 78, '                onaroll = 1;\n', 5),
(3177, 79, '            }\n', 0),
(3178, 80, '        } else {   //miss\n', 0),
(3179, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(3180, 82, '			\n', 0),
(3181, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(3182, 84, '            onaroll = 0;\n', 5),
(3183, 85, '        }\n', 0),
(3184, 86, '        repaint();\n', 0),
(3185, 87, '    }\n', 0),
(3186, 88, '\n', 0),
(3187, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(3188, 90, '\n', 0),
(3189, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(3190, 92, '        repaint();\n', 0),
(3191, 93, '    }\n', 0),
(3192, 94, '\n', 0),
(3193, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(3194, 96, '        repaint();\n', 0),
(3195, 97, '    }\n', 0),
(3196, 98, '\n', 0),
(3197, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(3198, 100, '\n', 0),
(3199, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(3200, 102, ' \n', 0),
(3201, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(3202, 104, ' \n', 0),
(3203, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(3204, 106, '        repaint();\n', 0),
(3205, 107, '    }\n', 0),
(3206, 108, ' \n', 0),
(3207, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(3208, 110, '        repaint();\n', 0),
(3209, 111, '    }\n', 0),
(3210, 112, '  \n', 0),
(3211, 113, '    public void destroy() {\n', 6),
(3212, 114, '        removeMouseListener(this);\n', 2),
(3213, 115, '        removeMouseMotionListener(this);\n', 2),
(3214, 116, '    }\n', 0),
(3215, 117, '\n', 0),
(3216, 118, '    public String getAppletInfo() {\n', 4),
(3217, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(3218, 120, '    }\n', 0),
(3219, 121, '}\n', 0),
(3220, 0, 'import java.awt.event.*;\n', 0),
(3221, 1, 'import java.awt.*;\n', 0),
(3222, 2, '\n', 0),
(3223, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(3224, 4, '\n', 0),
(3225, 5, '    private int mx, my;\n', 4),
(3226, 6, '    private Dimension size;\n', 2),
(3227, 7, '    private int onaroll;\n', 2),
(3228, 8, '\n', 0),
(3229, 9, '    public void init() {\n', 6),
(3230, 10, '        onaroll = 0;\n', 5),
(3231, 11, '        setSize(500, 500);\n', 5),
(3232, 12, '        size = getSize();\n', 2),
(3233, 13, '        addMouseListener(this);\n', 2),
(3234, 14, '        addMouseMotionListener(this);\n', 2),
(3235, 15, '        addComponentListener(this);\n', 4),
(3236, 16, '    }\n', 0),
(3237, 17, '\n', 0),
(3238, 18, '    public void update(Graphics g) {\n', 6),
(3239, 19, '        Dimension newSize = getSize();\n', 4),
(3240, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(3241, 21, '            g.setColor(getBackground());\n', 6),
(3242, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(3243, 23, '        } else {\n', 2),
(3244, 24, '            size = newSize;\n', 4),
(3245, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(3246, 26, '        } // Calculate new position\n', 11),
(3247, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(3248, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(3249, 29, '        paint(g);\n', 0),
(3250, 30, '    }\n', 0),
(3251, 31, '  \n', 0),
(3252, 32, '    public void paint(Graphics g) {\n', 6),
(3253, 33, '        g.setColor(Color.black);\n', 6),
(3254, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(3255, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(3256, 36, '    }\n', 0),
(3257, 37, '\n', 0),
(3258, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(3259, 39, '\n', 0),
(3260, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(3261, 41, '        e.consume();\n', 6),
(3262, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(3263, 43, '            repaint();\n', 0),
(3264, 44, '        }\n', 0),
(3265, 45, '    }\n', 0),
(3266, 46, '\n', 0),
(3267, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(3268, 48, '        int x = e.getX();\n', 8),
(3269, 49, '        int y = e.getY();\n', 8),
(3270, 50, '        e.consume();\n', 6),
(3271, 51, '        requestFocus();\n', 0),
(3272, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(3273, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(3274, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(3275, 55, '                case 0:\n', 5),
(3276, 56, '                    play(getCodeBase(), \n', 2),
(3277, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(3278, 58, '                    break;\n', 2),
(3279, 59, '                case 1:\n', 5),
(3280, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(3281, 61, '                    break;\n', 2),
(3282, 62, '                case 2:\n', 5),
(3283, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(3284, 64, '                    break;\n', 2),
(3285, 65, '                case 3:\n', 5),
(3286, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(3287, 67, '                    break;\n', 2),
(3288, 68, '                }\n', 0),
(3289, 69, '                onaroll++;\n', 2),
(3290, 70, '                if (onaroll > 5) {\n', 7),
(3291, 72, '                } else {\n', 2),
(3292, 74, '                }\n', 0),
(3293, 75, '            } else {   //first hit\n', 0),
(3294, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(3295, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(3296, 78, '                onaroll = 1;\n', 5),
(3297, 79, '            }\n', 0),
(3298, 80, '        } else {   //miss\n', 0),
(3299, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(3300, 82, '			\n', 0),
(3301, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(3302, 84, '            onaroll = 0;\n', 5),
(3303, 85, '        }\n', 0),
(3304, 86, '        repaint();\n', 0),
(3305, 87, '    }\n', 0),
(3306, 88, '\n', 0),
(3307, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(3308, 90, '\n', 0),
(3309, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(3310, 92, '        repaint();\n', 0),
(3311, 93, '    }\n', 0),
(3312, 94, '\n', 0),
(3313, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(3314, 96, '        repaint();\n', 0),
(3315, 97, '    }\n', 0),
(3316, 98, '\n', 0),
(3317, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(3318, 100, '\n', 0),
(3319, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(3320, 102, ' \n', 0),
(3321, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(3322, 104, ' \n', 0),
(3323, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(3324, 106, '        repaint();\n', 0),
(3325, 107, '    }\n', 0),
(3326, 108, ' \n', 0),
(3327, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(3328, 110, '        repaint();\n', 0),
(3329, 111, '    }\n', 0),
(3330, 112, '  \n', 0),
(3331, 113, '    public void destroy() {\n', 6),
(3332, 114, '        removeMouseListener(this);\n', 2),
(3333, 115, '        removeMouseMotionListener(this);\n', 2),
(3334, 116, '    }\n', 0),
(3335, 117, '\n', 0),
(3336, 118, '    public String getAppletInfo() {\n', 4),
(3337, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(3338, 120, '    }\n', 0),
(3339, 121, '}\n', 0),
(3340, 0, 'import java.util.Scanner;\r\n', 0),
(3341, 1, ' class Years{\r\n', 2),
(3342, 2, '   public int getYear(){\r\n', 4),
(3343, 3, '	int year;\r\n', 0),
(3344, 4, '	String enteredYear;\r\n', 0),
(3345, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(3346, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(3347, 7, '	enteredYear = sc.next();\r\n', 8),
(3348, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(3349, 9, '	return year;\r\n', 2),
(3350, 10, '   }\r\n', 0),
(3351, 11, ' }\r\n', 0),
(3352, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3353, 13, ' class Months extends Years{\r\n', 4),
(3354, 14, '   public int getMonth(){\r\n', 4),
(3355, 15, '	int month;\r\n', 0),
(3356, 16, '	String enteredMonthNumber;\r\n', 0),
(3357, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(3358, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(3359, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(3360, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(3361, 21, '	return month;\r\n', 2),
(3362, 22, '   }\r\n', 0),
(3363, 23, ' }\r\n', 0),
(3364, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3365, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(3366, 26, ' static int numDays = 0;\r\n', 7),
(3367, 27, ' public static void main(String[] args) {\r\n', 8),
(3368, 28, '   int year;\r\n', 0),
(3369, 29, '   Months m = new Months();\r\n', 4),
(3370, 30, '   int month = m.getMonth();\r\n', 8),
(3371, 31, '   \r\n', 0),
(3372, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(3373, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(3374, 34, '   }\r\n', 0),
(3375, 35, '   else {\r\n', 2),
(3376, 36, '    switch (month) {\r\n', 2),
(3377, 37, '      case 1:\r\n', 5),
(3378, 38, '      case 3:\r\n', 5),
(3379, 39, '      case 5:\r\n', 5),
(3380, 40, '      case 7:\r\n', 5),
(3381, 41, '      case 8:\r\n', 5),
(3382, 42, '      case 10:\r\n', 5),
(3383, 43, '      case 12:\r\n', 5),
(3384, 44, '        numDays = 31;\r\n', 5),
(3385, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(3386, 46, '        break;\r\n', 2),
(3387, 47, '      case 4:\r\n', 5),
(3388, 48, '      case 6:\r\n', 5),
(3389, 49, '      case 9:\r\n', 5),
(3390, 50, '      case 11:\r\n', 5),
(3391, 51, '       numDays = 30;\r\n', 5),
(3392, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(3393, 53, '       break;\r\n', 2),
(3394, 54, '      case 2:\r\n', 5),
(3395, 55, '       year = m.getYear();\r\n', 8),
(3396, 56, '       if(year < 1) {\r\n', 5),
(3397, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(3398, 58, '       }\r\n', 0),
(3399, 59, '       else{\r\n', 2),
(3400, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(3401, 61, '         numDays = 29;\r\n', 5),
(3402, 62, '		 if(year > 2020){\r\n', 7),
(3403, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(3404, 64, '         }\r\n', 0),
(3405, 65, '         else{\r\n', 2),
(3406, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(3407, 67, '         }\r\n', 0),
(3408, 68, '        }//if at line 61\r\n', 0),
(3409, 69, '        else{\r\n', 2),
(3410, 70, '         numDays = 28;\r\n', 5),
(3411, 71, '         if (year > 2020){\r\n', 7),
(3412, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(3413, 73, '         }\r\n', 0),
(3414, 74, '         else{\r\n', 2),
(3415, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(3416, 76, '         }\r\n', 0),
(3417, 77, '         break;  \r\n', 2),
(3418, 78, '        }//else at line 70\r\n', 2),
(3419, 79, '       }//else at line 60\r\n', 2),
(3420, 80, '    }//switch at line 37\r\n', 2),
(3421, 81, '   }//else at line 36\r\n', 2),
(3422, 82, '  }//method\r\n', 2),
(3423, 83, ' }//class', 2),
(3424, 0, 'class Pattern{ \r\n', 2),
(3425, 1, 'public static void main(String[] args) { \r\n', 8),
(3426, 2, '	 int rows = 5;\r\n', 5),
(3427, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(3428, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(3429, 5, '	 System.out.print(j + " "); \r\n', 13),
(3430, 6, '	 } \r\n', 0),
(3431, 7, '	 System.out.println(""); \r\n', 11),
(3432, 8, ' 	} \r\n', 0),
(3433, 9, ' 	} \r\n', 0),
(3434, 10, '} ', 0),
(3435, 0, 'import java.util.Scanner;\r\n', 0),
(3436, 1, ' class Years{\r\n', 2),
(3437, 2, '   public int getYear(){\r\n', 4),
(3438, 3, '	int year;\r\n', 0),
(3439, 4, '	String enteredYear;\r\n', 0),
(3440, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(3441, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(3442, 7, '	enteredYear = sc.next();\r\n', 8),
(3443, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(3444, 9, '	return year;\r\n', 2),
(3445, 10, '   }\r\n', 0),
(3446, 11, ' }\r\n', 0),
(3447, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3448, 13, ' class Months extends Years{\r\n', 4),
(3449, 14, '   public int getMonth(){\r\n', 4),
(3450, 15, '	int month;\r\n', 0),
(3451, 16, '	String enteredMonthNumber;\r\n', 0),
(3452, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(3453, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(3454, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(3455, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(3456, 21, '	return month;\r\n', 2),
(3457, 22, '   }\r\n', 0),
(3458, 23, ' }\r\n', 0),
(3459, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3460, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(3461, 26, ' static int numDays = 0;\r\n', 7),
(3462, 27, ' public static void main(String[] args) {\r\n', 8),
(3463, 28, '   int year;\r\n', 0),
(3464, 29, '   Months m = new Months();\r\n', 4),
(3465, 30, '   int month = m.getMonth();\r\n', 8),
(3466, 31, '   \r\n', 0),
(3467, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(3468, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(3469, 34, '   }\r\n', 0),
(3470, 35, '   else {\r\n', 2),
(3471, 36, '    switch (month) {\r\n', 2),
(3472, 37, '      case 1:\r\n', 5),
(3473, 38, '      case 3:\r\n', 5),
(3474, 39, '      case 5:\r\n', 5),
(3475, 40, '      case 7:\r\n', 5),
(3476, 41, '      case 8:\r\n', 5),
(3477, 42, '      case 10:\r\n', 5),
(3478, 43, '      case 12:\r\n', 5),
(3479, 44, '        numDays = 31;\r\n', 5),
(3480, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(3481, 46, '        break;\r\n', 2),
(3482, 47, '      case 4:\r\n', 5),
(3483, 48, '      case 6:\r\n', 5),
(3484, 49, '      case 9:\r\n', 5),
(3485, 50, '      case 11:\r\n', 5),
(3486, 51, '       numDays = 30;\r\n', 5),
(3487, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(3488, 53, '       break;\r\n', 2),
(3489, 54, '      case 2:\r\n', 5),
(3490, 55, '       year = m.getYear();\r\n', 8),
(3491, 56, '       if(year < 1) {\r\n', 5),
(3492, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(3493, 58, '       }\r\n', 0),
(3494, 59, '       else{\r\n', 2),
(3495, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(3496, 61, '         numDays = 29;\r\n', 5),
(3497, 62, '		 if(year > 2020){\r\n', 7),
(3498, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(3499, 64, '         }\r\n', 0),
(3500, 65, '         else{\r\n', 2),
(3501, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(3502, 67, '         }\r\n', 0),
(3503, 68, '        }//if at line 61\r\n', 0),
(3504, 69, '        else{\r\n', 2),
(3505, 70, '         numDays = 28;\r\n', 5),
(3506, 71, '         if (year > 2020){\r\n', 7),
(3507, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(3508, 73, '         }\r\n', 0),
(3509, 74, '         else{\r\n', 2),
(3510, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(3511, 76, '         }\r\n', 0),
(3512, 77, '         break;  \r\n', 2),
(3513, 78, '        }//else at line 70\r\n', 2),
(3514, 79, '       }//else at line 60\r\n', 2),
(3515, 80, '    }//switch at line 37\r\n', 2),
(3516, 81, '   }//else at line 36\r\n', 2),
(3517, 82, '  }//method\r\n', 2),
(3518, 83, ' }//class', 2),
(3519, 0, 'class HelloWorld { \r\n', 2),
(3520, 1, '	public static void main(String args[]) \r\n', 8),
(3521, 2, '	{ \r\n', 0),
(3522, 3, '		System.out.println("Hello World"); \r\n', 11),
(3523, 4, '	} \r\n', 0),
(3524, 5, '} \r\n', 0),
(3525, 0, 'import java.awt.event.*;\n', 0),
(3526, 1, 'import java.awt.*;\n', 0),
(3527, 2, '\n', 0),
(3528, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(3529, 4, '\n', 0),
(3530, 5, '    private int mx, my;\n', 4),
(3531, 6, '    private Dimension size;\n', 2),
(3532, 7, '    private int onaroll;\n', 2),
(3533, 8, '\n', 0),
(3534, 9, '    public void init() {\n', 6),
(3535, 10, '        onaroll = 0;\n', 5),
(3536, 11, '        setSize(500, 500);\n', 5),
(3537, 12, '        size = getSize();\n', 2),
(3538, 13, '        addMouseListener(this);\n', 2),
(3539, 14, '        addMouseMotionListener(this);\n', 2),
(3540, 15, '        addComponentListener(this);\n', 4),
(3541, 16, '    }\n', 0),
(3542, 17, '\n', 0),
(3543, 18, '    public void update(Graphics g) {\n', 6),
(3544, 19, '        Dimension newSize = getSize();\n', 4),
(3545, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(3546, 21, '            g.setColor(getBackground());\n', 6),
(3547, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(3548, 23, '        } else {\n', 2),
(3549, 24, '            size = newSize;\n', 4),
(3550, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(3551, 26, '        } // Calculate new position\n', 11),
(3552, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(3553, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(3554, 29, '        paint(g);\n', 0),
(3555, 30, '    }\n', 0),
(3556, 31, '  \n', 0),
(3557, 32, '    public void paint(Graphics g) {\n', 6),
(3558, 33, '        g.setColor(Color.black);\n', 6),
(3559, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(3560, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(3561, 36, '    }\n', 0),
(3562, 37, '\n', 0),
(3563, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(3564, 39, '\n', 0),
(3565, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(3566, 41, '        e.consume();\n', 6),
(3567, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(3568, 43, '            repaint();\n', 0),
(3569, 44, '        }\n', 0),
(3570, 45, '    }\n', 0),
(3571, 46, '\n', 0),
(3572, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(3573, 48, '        int x = e.getX();\n', 8),
(3574, 49, '        int y = e.getY();\n', 8),
(3575, 50, '        e.consume();\n', 6),
(3576, 51, '        requestFocus();\n', 0),
(3577, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(3578, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(3579, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(3580, 55, '                case 0:\n', 5),
(3581, 56, '                    play(getCodeBase(), \n', 2),
(3582, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(3583, 58, '                    break;\n', 2),
(3584, 59, '                case 1:\n', 5),
(3585, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(3586, 61, '                    break;\n', 2),
(3587, 62, '                case 2:\n', 5),
(3588, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(3589, 64, '                    break;\n', 2),
(3590, 65, '                case 3:\n', 5),
(3591, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(3592, 67, '                    break;\n', 2),
(3593, 68, '                }\n', 0),
(3594, 69, '                onaroll++;\n', 2),
(3595, 70, '                if (onaroll > 5) {\n', 7),
(3596, 72, '                } else {\n', 2),
(3597, 74, '                }\n', 0),
(3598, 75, '            } else {   //first hit\n', 0),
(3599, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(3600, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(3601, 78, '                onaroll = 1;\n', 5),
(3602, 79, '            }\n', 0),
(3603, 80, '        } else {   //miss\n', 0),
(3604, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(3605, 82, '			\n', 0),
(3606, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(3607, 84, '            onaroll = 0;\n', 5),
(3608, 85, '        }\n', 0),
(3609, 86, '        repaint();\n', 0),
(3610, 87, '    }\n', 0),
(3611, 88, '\n', 0),
(3612, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(3613, 90, '\n', 0),
(3614, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(3615, 92, '        repaint();\n', 0),
(3616, 93, '    }\n', 0),
(3617, 94, '\n', 0),
(3618, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(3619, 96, '        repaint();\n', 0),
(3620, 97, '    }\n', 0),
(3621, 98, '\n', 0),
(3622, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(3623, 100, '\n', 0),
(3624, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(3625, 102, ' \n', 0),
(3626, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(3627, 104, ' \n', 0),
(3628, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(3629, 106, '        repaint();\n', 0),
(3630, 107, '    }\n', 0),
(3631, 108, ' \n', 0),
(3632, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(3633, 110, '        repaint();\n', 0),
(3634, 111, '    }\n', 0),
(3635, 112, '  \n', 0),
(3636, 113, '    public void destroy() {\n', 6),
(3637, 114, '        removeMouseListener(this);\n', 2),
(3638, 115, '        removeMouseMotionListener(this);\n', 2),
(3639, 116, '    }\n', 0),
(3640, 117, '\n', 0),
(3641, 118, '    public String getAppletInfo() {\n', 4),
(3642, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(3643, 120, '    }\n', 0),
(3644, 121, '}\n', 0),
(3645, 0, 'import java.awt.event.*;\n', 0),
(3646, 1, 'import java.awt.*;\n', 0),
(3647, 2, '\n', 0),
(3648, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(3649, 4, '\n', 0),
(3650, 5, '    private int mx, my;\n', 4),
(3651, 6, '    private Dimension size;\n', 2),
(3652, 7, '    private int onaroll;\n', 2),
(3653, 8, '\n', 0),
(3654, 9, '    public void init() {\n', 6),
(3655, 10, '        onaroll = 0;\n', 5),
(3656, 11, '        setSize(500, 500);\n', 5),
(3657, 12, '        size = getSize();\n', 2),
(3658, 13, '        addMouseListener(this);\n', 2),
(3659, 14, '        addMouseMotionListener(this);\n', 2),
(3660, 15, '        addComponentListener(this);\n', 4),
(3661, 16, '    }\n', 0),
(3662, 17, '\n', 0),
(3663, 18, '    public void update(Graphics g) {\n', 6),
(3664, 19, '        Dimension newSize = getSize();\n', 4),
(3665, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(3666, 21, '            g.setColor(getBackground());\n', 6),
(3667, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(3668, 23, '        } else {\n', 2),
(3669, 24, '            size = newSize;\n', 4),
(3670, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(3671, 26, '        } // Calculate new position\n', 11),
(3672, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(3673, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(3674, 29, '        paint(g);\n', 0),
(3675, 30, '    }\n', 0),
(3676, 31, '  \n', 0),
(3677, 32, '    public void paint(Graphics g) {\n', 6),
(3678, 33, '        g.setColor(Color.black);\n', 6),
(3679, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(3680, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(3681, 36, '    }\n', 0),
(3682, 37, '\n', 0),
(3683, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(3684, 39, '\n', 0),
(3685, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(3686, 41, '        e.consume();\n', 6),
(3687, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(3688, 43, '            repaint();\n', 0),
(3689, 44, '        }\n', 0),
(3690, 45, '    }\n', 0),
(3691, 46, '\n', 0),
(3692, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(3693, 48, '        int x = e.getX();\n', 8),
(3694, 49, '        int y = e.getY();\n', 8),
(3695, 50, '        e.consume();\n', 6),
(3696, 51, '        requestFocus();\n', 0),
(3697, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(3698, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(3699, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(3700, 55, '                case 0:\n', 5),
(3701, 56, '                    play(getCodeBase(), \n', 2),
(3702, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(3703, 58, '                    break;\n', 2),
(3704, 59, '                case 1:\n', 5),
(3705, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(3706, 61, '                    break;\n', 2),
(3707, 62, '                case 2:\n', 5),
(3708, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(3709, 64, '                    break;\n', 2),
(3710, 65, '                case 3:\n', 5),
(3711, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(3712, 67, '                    break;\n', 2),
(3713, 68, '                }\n', 0),
(3714, 69, '                onaroll++;\n', 2),
(3715, 70, '                if (onaroll > 5) {\n', 7),
(3716, 72, '                } else {\n', 2),
(3717, 74, '                }\n', 0),
(3718, 75, '            } else {   //first hit\n', 0),
(3719, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(3720, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(3721, 78, '                onaroll = 1;\n', 5),
(3722, 79, '            }\n', 0),
(3723, 80, '        } else {   //miss\n', 0),
(3724, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(3725, 82, '			\n', 0),
(3726, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(3727, 84, '            onaroll = 0;\n', 5),
(3728, 85, '        }\n', 0),
(3729, 86, '        repaint();\n', 0),
(3730, 87, '    }\n', 0),
(3731, 88, '\n', 0),
(3732, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(3733, 90, '\n', 0),
(3734, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(3735, 92, '        repaint();\n', 0),
(3736, 93, '    }\n', 0),
(3737, 94, '\n', 0),
(3738, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(3739, 96, '        repaint();\n', 0),
(3740, 97, '    }\n', 0),
(3741, 98, '\n', 0),
(3742, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(3743, 100, '\n', 0),
(3744, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(3745, 102, ' \n', 0),
(3746, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(3747, 104, ' \n', 0),
(3748, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(3749, 106, '        repaint();\n', 0),
(3750, 107, '    }\n', 0),
(3751, 108, ' \n', 0),
(3752, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(3753, 110, '        repaint();\n', 0),
(3754, 111, '    }\n', 0),
(3755, 112, '  \n', 0),
(3756, 113, '    public void destroy() {\n', 6),
(3757, 114, '        removeMouseListener(this);\n', 2),
(3758, 115, '        removeMouseMotionListener(this);\n', 2),
(3759, 116, '    }\n', 0),
(3760, 117, '\n', 0),
(3761, 118, '    public String getAppletInfo() {\n', 4),
(3762, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(3763, 120, '    }\n', 0),
(3764, 121, '}\n', 0),
(3765, 0, 'import java.util.Scanner;\r\n', 0),
(3766, 1, ' class Years{\r\n', 2),
(3767, 2, '   public int getYear(){\r\n', 4),
(3768, 3, '	int year;\r\n', 0),
(3769, 4, '	String enteredYear;\r\n', 0),
(3770, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(3771, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(3772, 7, '	enteredYear = sc.next();\r\n', 8),
(3773, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(3774, 9, '	return year;\r\n', 2),
(3775, 10, '   }\r\n', 0),
(3776, 11, ' }\r\n', 0),
(3777, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3778, 13, ' class Months extends Years{\r\n', 4),
(3779, 14, '   public int getMonth(){\r\n', 4),
(3780, 15, '	int month;\r\n', 0),
(3781, 16, '	String enteredMonthNumber;\r\n', 0),
(3782, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(3783, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(3784, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(3785, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(3786, 21, '	return month;\r\n', 2),
(3787, 22, '   }\r\n', 0),
(3788, 23, ' }\r\n', 0),
(3789, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3790, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(3791, 26, ' static int numDays = 0;\r\n', 7),
(3792, 27, ' public static void main(String[] args) {\r\n', 8),
(3793, 28, '   int year;\r\n', 0),
(3794, 29, '   Months m = new Months();\r\n', 4),
(3795, 30, '   int month = m.getMonth();\r\n', 8),
(3796, 31, '   \r\n', 0),
(3797, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(3798, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(3799, 34, '   }\r\n', 0),
(3800, 35, '   else {\r\n', 2),
(3801, 36, '    switch (month) {\r\n', 2),
(3802, 37, '      case 1:\r\n', 5),
(3803, 38, '      case 3:\r\n', 5),
(3804, 39, '      case 5:\r\n', 5),
(3805, 40, '      case 7:\r\n', 5),
(3806, 41, '      case 8:\r\n', 5),
(3807, 42, '      case 10:\r\n', 5),
(3808, 43, '      case 12:\r\n', 5),
(3809, 44, '        numDays = 31;\r\n', 5),
(3810, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(3811, 46, '        break;\r\n', 2),
(3812, 47, '      case 4:\r\n', 5),
(3813, 48, '      case 6:\r\n', 5),
(3814, 49, '      case 9:\r\n', 5),
(3815, 50, '      case 11:\r\n', 5),
(3816, 51, '       numDays = 30;\r\n', 5),
(3817, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(3818, 53, '       break;\r\n', 2),
(3819, 54, '      case 2:\r\n', 5),
(3820, 55, '       year = m.getYear();\r\n', 8),
(3821, 56, '       if(year < 1) {\r\n', 5),
(3822, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(3823, 58, '       }\r\n', 0),
(3824, 59, '       else{\r\n', 2),
(3825, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(3826, 61, '         numDays = 29;\r\n', 5),
(3827, 62, '		 if(year > 2020){\r\n', 7),
(3828, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(3829, 64, '         }\r\n', 0),
(3830, 65, '         else{\r\n', 2),
(3831, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(3832, 67, '         }\r\n', 0),
(3833, 68, '        }//if at line 61\r\n', 0),
(3834, 69, '        else{\r\n', 2),
(3835, 70, '         numDays = 28;\r\n', 5),
(3836, 71, '         if (year > 2020){\r\n', 7),
(3837, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(3838, 73, '         }\r\n', 0),
(3839, 74, '         else{\r\n', 2),
(3840, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(3841, 76, '         }\r\n', 0),
(3842, 77, '         break;  \r\n', 2),
(3843, 78, '        }//else at line 70\r\n', 2),
(3844, 79, '       }//else at line 60\r\n', 2),
(3845, 80, '    }//switch at line 37\r\n', 2),
(3846, 81, '   }//else at line 36\r\n', 2),
(3847, 82, '  }//method\r\n', 2),
(3848, 83, ' }//class', 2),
(3849, 0, 'public class RecursionExample2 {  \r\n', 9),
(3850, 1, 'static int count=0;  \r\n', 7),
(3851, 2, 'public int p(){  \r\n', 4),
(3852, 3, 'count++;  \r\n', 2),
(3853, 4, 'if(count<=5){  \r\n', 9),
(3854, 5, 'System.out.println("hello "+count);  \r\n', 8),
(3855, 6, 'public int p();  \r\n', 4),
(3856, 7, '}  \r\n', 0),
(3857, 8, '}  \r\n', 0),
(3858, 9, 'public static void main(String[] args) {  \r\n', 8),
(3859, 10, 'p();  \r\n', 0),
(3860, 11, '}  \r\n', 0),
(3861, 12, '}  ', 0),
(3862, 0, 'import java.awt.event.*;\n', 0),
(3863, 1, 'import java.awt.*;\n', 0),
(3864, 2, '\n', 0),
(3865, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(3866, 4, '\n', 0),
(3867, 5, '    private int mx, my;\n', 4),
(3868, 6, '    private Dimension size;\n', 2),
(3869, 7, '    private int onaroll;\n', 2),
(3870, 8, '\n', 0),
(3871, 9, '    public void init() {\n', 6),
(3872, 10, '        onaroll = 0;\n', 5),
(3873, 11, '        setSize(500, 500);\n', 5),
(3874, 12, '        size = getSize();\n', 2),
(3875, 13, '        addMouseListener(this);\n', 2),
(3876, 14, '        addMouseMotionListener(this);\n', 2),
(3877, 15, '        addComponentListener(this);\n', 4),
(3878, 16, '    }\n', 0),
(3879, 17, '\n', 0),
(3880, 18, '    public void update(Graphics g) {\n', 6),
(3881, 19, '        Dimension newSize = getSize();\n', 4),
(3882, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(3883, 21, '            g.setColor(getBackground());\n', 6),
(3884, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(3885, 23, '        } else {\n', 2),
(3886, 24, '            size = newSize;\n', 4),
(3887, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(3888, 26, '        } // Calculate new position\n', 11),
(3889, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(3890, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(3891, 29, '        paint(g);\n', 0),
(3892, 30, '    }\n', 0),
(3893, 31, '  \n', 0),
(3894, 32, '    public void paint(Graphics g) {\n', 6),
(3895, 33, '        g.setColor(Color.black);\n', 6),
(3896, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(3897, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(3898, 36, '    }\n', 0),
(3899, 37, '\n', 0),
(3900, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(3901, 39, '\n', 0),
(3902, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(3903, 41, '        e.consume();\n', 6),
(3904, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(3905, 43, '            repaint();\n', 0),
(3906, 44, '        }\n', 0),
(3907, 45, '    }\n', 0),
(3908, 46, '\n', 0),
(3909, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(3910, 48, '        int x = e.getX();\n', 8),
(3911, 49, '        int y = e.getY();\n', 8),
(3912, 50, '        e.consume();\n', 6),
(3913, 51, '        requestFocus();\n', 0),
(3914, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(3915, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(3916, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(3917, 55, '                case 0:\n', 5),
(3918, 56, '                    play(getCodeBase(), \n', 2),
(3919, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(3920, 58, '                    break;\n', 2),
(3921, 59, '                case 1:\n', 5),
(3922, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(3923, 61, '                    break;\n', 2),
(3924, 62, '                case 2:\n', 5),
(3925, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(3926, 64, '                    break;\n', 2),
(3927, 65, '                case 3:\n', 5),
(3928, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(3929, 67, '                    break;\n', 2),
(3930, 68, '                }\n', 0),
(3931, 69, '                onaroll++;\n', 2),
(3932, 70, '                if (onaroll > 5) {\n', 7),
(3933, 72, '                } else {\n', 2),
(3934, 74, '                }\n', 0),
(3935, 75, '            } else {   //first hit\n', 0),
(3936, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(3937, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(3938, 78, '                onaroll = 1;\n', 5),
(3939, 79, '            }\n', 0),
(3940, 80, '        } else {   //miss\n', 0),
(3941, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(3942, 82, '			\n', 0),
(3943, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(3944, 84, '            onaroll = 0;\n', 5),
(3945, 85, '        }\n', 0),
(3946, 86, '        repaint();\n', 0),
(3947, 87, '    }\n', 0),
(3948, 88, '\n', 0),
(3949, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(3950, 90, '\n', 0),
(3951, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(3952, 92, '        repaint();\n', 0),
(3953, 93, '    }\n', 0),
(3954, 94, '\n', 0),
(3955, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(3956, 96, '        repaint();\n', 0),
(3957, 97, '    }\n', 0),
(3958, 98, '\n', 0),
(3959, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(3960, 100, '\n', 0),
(3961, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(3962, 102, ' \n', 0),
(3963, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(3964, 104, ' \n', 0),
(3965, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(3966, 106, '        repaint();\n', 0),
(3967, 107, '    }\n', 0),
(3968, 108, ' \n', 0),
(3969, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(3970, 110, '        repaint();\n', 0),
(3971, 111, '    }\n', 0),
(3972, 112, '  \n', 0),
(3973, 113, '    public void destroy() {\n', 6),
(3974, 114, '        removeMouseListener(this);\n', 2),
(3975, 115, '        removeMouseMotionListener(this);\n', 2),
(3976, 116, '    }\n', 0),
(3977, 117, '\n', 0),
(3978, 118, '    public String getAppletInfo() {\n', 4),
(3979, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(3980, 120, '    }\n', 0),
(3981, 121, '}\n', 0),
(3982, 0, 'import java.awt.event.*;\n', 0),
(3983, 1, 'import java.awt.*;\n', 0),
(3984, 2, '\n', 0),
(3985, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(3986, 4, '\n', 0),
(3987, 5, '    private int mx, my;\n', 4),
(3988, 6, '    private Dimension size;\n', 2),
(3989, 7, '    private int onaroll;\n', 2),
(3990, 8, '\n', 0),
(3991, 9, '    public void init() {\n', 6),
(3992, 10, '        onaroll = 0;\n', 5),
(3993, 11, '        setSize(500, 500);\n', 5),
(3994, 12, '        size = getSize();\n', 2),
(3995, 13, '        addMouseListener(this);\n', 2),
(3996, 14, '        addMouseMotionListener(this);\n', 2),
(3997, 15, '        addComponentListener(this);\n', 4),
(3998, 16, '    }\n', 0),
(3999, 17, '\n', 0),
(4000, 18, '    public void update(Graphics g) {\n', 6),
(4001, 19, '        Dimension newSize = getSize();\n', 4),
(4002, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(4003, 21, '            g.setColor(getBackground());\n', 6),
(4004, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(4005, 23, '        } else {\n', 2),
(4006, 24, '            size = newSize;\n', 4),
(4007, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(4008, 26, '        } // Calculate new position\n', 11),
(4009, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(4010, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(4011, 29, '        paint(g);\n', 0),
(4012, 30, '    }\n', 0),
(4013, 31, '  \n', 0),
(4014, 32, '    public void paint(Graphics g) {\n', 6),
(4015, 33, '        g.setColor(Color.black);\n', 6),
(4016, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(4017, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(4018, 36, '    }\n', 0),
(4019, 37, '\n', 0),
(4020, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(4021, 39, '\n', 0),
(4022, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(4023, 41, '        e.consume();\n', 6),
(4024, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(4025, 43, '            repaint();\n', 0),
(4026, 44, '        }\n', 0),
(4027, 45, '    }\n', 0),
(4028, 46, '\n', 0),
(4029, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(4030, 48, '        int x = e.getX();\n', 8),
(4031, 49, '        int y = e.getY();\n', 8),
(4032, 50, '        e.consume();\n', 6),
(4033, 51, '        requestFocus();\n', 0),
(4034, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(4035, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(4036, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(4037, 55, '                case 0:\n', 5),
(4038, 56, '                    play(getCodeBase(), \n', 2),
(4039, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(4040, 58, '                    break;\n', 2),
(4041, 59, '                case 1:\n', 5),
(4042, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(4043, 61, '                    break;\n', 2),
(4044, 62, '                case 2:\n', 5),
(4045, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(4046, 64, '                    break;\n', 2),
(4047, 65, '                case 3:\n', 5),
(4048, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(4049, 67, '                    break;\n', 2),
(4050, 68, '                }\n', 0),
(4051, 69, '                onaroll++;\n', 2),
(4052, 70, '                if (onaroll > 5) {\n', 7),
(4053, 72, '                } else {\n', 2),
(4054, 74, '                }\n', 0),
(4055, 75, '            } else {   //first hit\n', 0),
(4056, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(4057, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(4058, 78, '                onaroll = 1;\n', 5),
(4059, 79, '            }\n', 0),
(4060, 80, '        } else {   //miss\n', 0),
(4061, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(4062, 82, '			\n', 0),
(4063, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(4064, 84, '            onaroll = 0;\n', 5),
(4065, 85, '        }\n', 0),
(4066, 86, '        repaint();\n', 0),
(4067, 87, '    }\n', 0),
(4068, 88, '\n', 0),
(4069, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(4070, 90, '\n', 0),
(4071, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(4072, 92, '        repaint();\n', 0),
(4073, 93, '    }\n', 0),
(4074, 94, '\n', 0),
(4075, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(4076, 96, '        repaint();\n', 0),
(4077, 97, '    }\n', 0),
(4078, 98, '\n', 0),
(4079, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(4080, 100, '\n', 0),
(4081, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(4082, 102, ' \n', 0),
(4083, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(4084, 104, ' \n', 0),
(4085, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(4086, 106, '        repaint();\n', 0),
(4087, 107, '    }\n', 0),
(4088, 108, ' \n', 0),
(4089, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(4090, 110, '        repaint();\n', 0),
(4091, 111, '    }\n', 0),
(4092, 112, '  \n', 0),
(4093, 113, '    public void destroy() {\n', 6),
(4094, 114, '        removeMouseListener(this);\n', 2),
(4095, 115, '        removeMouseMotionListener(this);\n', 2),
(4096, 116, '    }\n', 0),
(4097, 117, '\n', 0),
(4098, 118, '    public String getAppletInfo() {\n', 4),
(4099, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(4100, 120, '    }\n', 0),
(4101, 121, '}\n', 0),
(4102, 0, 'import java.util.Scanner;\r\n', 0),
(4103, 1, ' class Years{\r\n', 2),
(4104, 2, '   public int getYear(){\r\n', 4),
(4105, 3, '	int year;\r\n', 0),
(4106, 4, '	String enteredYear;\r\n', 0),
(4107, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(4108, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(4109, 7, '	enteredYear = sc.next();\r\n', 8),
(4110, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(4111, 9, '	return year;\r\n', 2),
(4112, 10, '   }\r\n', 0),
(4113, 11, ' }\r\n', 0),
(4114, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4115, 13, ' class Months extends Years{\r\n', 4),
(4116, 14, '   public int getMonth(){\r\n', 4),
(4117, 15, '	int month;\r\n', 0),
(4118, 16, '	String enteredMonthNumber;\r\n', 0),
(4119, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(4120, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(4121, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(4122, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(4123, 21, '	return month;\r\n', 2),
(4124, 22, '   }\r\n', 0),
(4125, 23, ' }\r\n', 0);
INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(4126, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4127, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(4128, 26, ' static int numDays = 0;\r\n', 7),
(4129, 27, ' public static void main(String[] args) {\r\n', 8),
(4130, 28, '   int year;\r\n', 0),
(4131, 29, '   Months m = new Months();\r\n', 4),
(4132, 30, '   int month = m.getMonth();\r\n', 8),
(4133, 31, '   \r\n', 0),
(4134, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(4135, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(4136, 34, '   }\r\n', 0),
(4137, 35, '   else {\r\n', 2),
(4138, 36, '    switch (month) {\r\n', 2),
(4139, 37, '      case 1:\r\n', 5),
(4140, 38, '      case 3:\r\n', 5),
(4141, 39, '      case 5:\r\n', 5),
(4142, 40, '      case 7:\r\n', 5),
(4143, 41, '      case 8:\r\n', 5),
(4144, 42, '      case 10:\r\n', 5),
(4145, 43, '      case 12:\r\n', 5),
(4146, 44, '        numDays = 31;\r\n', 5),
(4147, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(4148, 46, '        break;\r\n', 2),
(4149, 47, '      case 4:\r\n', 5),
(4150, 48, '      case 6:\r\n', 5),
(4151, 49, '      case 9:\r\n', 5),
(4152, 50, '      case 11:\r\n', 5),
(4153, 51, '       numDays = 30;\r\n', 5),
(4154, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(4155, 53, '       break;\r\n', 2),
(4156, 54, '      case 2:\r\n', 5),
(4157, 55, '       year = m.getYear();\r\n', 8),
(4158, 56, '       if(year < 1) {\r\n', 5),
(4159, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(4160, 58, '       }\r\n', 0),
(4161, 59, '       else{\r\n', 2),
(4162, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(4163, 61, '         numDays = 29;\r\n', 5),
(4164, 62, '		 if(year > 2020){\r\n', 7),
(4165, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(4166, 64, '         }\r\n', 0),
(4167, 65, '         else{\r\n', 2),
(4168, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(4169, 67, '         }\r\n', 0),
(4170, 68, '        }//if at line 61\r\n', 0),
(4171, 69, '        else{\r\n', 2),
(4172, 70, '         numDays = 28;\r\n', 5),
(4173, 71, '         if (year > 2020){\r\n', 7),
(4174, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(4175, 73, '         }\r\n', 0),
(4176, 74, '         else{\r\n', 2),
(4177, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(4178, 76, '         }\r\n', 0),
(4179, 77, '         break;  \r\n', 2),
(4180, 78, '        }//else at line 70\r\n', 2),
(4181, 79, '       }//else at line 60\r\n', 2),
(4182, 80, '    }//switch at line 37\r\n', 2),
(4183, 81, '   }//else at line 36\r\n', 2),
(4184, 82, '  }//method\r\n', 2),
(4185, 83, ' }//class', 2),
(4186, 0, 'class Pattern{ \r\n', 2),
(4187, 1, 'public static void main(String[] args) { \r\n', 8),
(4188, 2, '	 int rows = 5;\r\n', 5),
(4189, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(4190, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(4191, 5, '	 System.out.print(j + " "); \r\n', 13),
(4192, 6, '	 } \r\n', 0),
(4193, 7, '	 System.out.println(""); \r\n', 11),
(4194, 8, ' 	} \r\n', 0),
(4195, 9, ' 	} \r\n', 0),
(4196, 10, '} ', 0),
(4197, 0, 'import java.util.Scanner;\r\n', 0),
(4198, 1, ' class Years{\r\n', 2),
(4199, 2, '   public int getYear(){\r\n', 4),
(4200, 3, '	int year;\r\n', 0),
(4201, 4, '	String enteredYear;\r\n', 0),
(4202, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(4203, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(4204, 7, '	enteredYear = sc.next();\r\n', 8),
(4205, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(4206, 9, '	return year;\r\n', 2),
(4207, 10, '   }\r\n', 0),
(4208, 11, ' }\r\n', 0),
(4209, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4210, 13, ' class Months extends Years{\r\n', 4),
(4211, 14, '   public int getMonth(){\r\n', 4),
(4212, 15, '	int month;\r\n', 0),
(4213, 16, '	String enteredMonthNumber;\r\n', 0),
(4214, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(4215, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(4216, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(4217, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(4218, 21, '	return month;\r\n', 2),
(4219, 22, '   }\r\n', 0),
(4220, 23, ' }\r\n', 0),
(4221, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4222, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(4223, 26, ' static int numDays = 0;\r\n', 7),
(4224, 27, ' public static void main(String[] args) {\r\n', 8),
(4225, 0, 'import java.util.Scanner;\r\n', 0),
(4226, 1, ' class Years{\r\n', 2),
(4227, 2, '   public int getYear(){\r\n', 4),
(4228, 3, '	int year;\r\n', 0),
(4229, 4, '	String enteredYear;\r\n', 0),
(4230, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(4231, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(4232, 7, '	enteredYear = sc.next();\r\n', 8),
(4233, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(4234, 9, '	return year;\r\n', 2),
(4235, 10, '   }\r\n', 0),
(4236, 11, ' }\r\n', 0),
(4237, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4238, 13, ' class Months extends Years{\r\n', 4),
(4239, 14, '   public int getMonth(){\r\n', 4),
(4240, 15, '	int month;\r\n', 0),
(4241, 16, '	String enteredMonthNumber;\r\n', 0),
(4242, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(4243, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(4244, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(4245, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(4246, 21, '	return month;\r\n', 2),
(4247, 22, '   }\r\n', 0),
(4248, 23, ' }\r\n', 0),
(4249, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4250, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(4251, 26, ' static int numDays = 0;\r\n', 7),
(4252, 27, ' public static void main(String[] args) {\r\n', 8),
(4253, 28, '   int year;\r\n', 0),
(4254, 29, '   Months m = new Months();\r\n', 4),
(4255, 30, '   int month = m.getMonth();\r\n', 8),
(4256, 31, '   \r\n', 0),
(4257, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(4258, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(4259, 34, '   }\r\n', 0),
(4260, 35, '   else {\r\n', 2),
(4261, 36, '    switch (month) {\r\n', 2),
(4262, 37, '      case 1:\r\n', 5),
(4263, 38, '      case 3:\r\n', 5),
(4264, 39, '      case 5:\r\n', 5),
(4265, 40, '      case 7:\r\n', 5),
(4266, 41, '      case 8:\r\n', 5),
(4267, 42, '      case 10:\r\n', 5),
(4268, 43, '      case 12:\r\n', 5),
(4269, 44, '        numDays = 31;\r\n', 5),
(4270, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(4271, 46, '        break;\r\n', 2),
(4272, 47, '      case 4:\r\n', 5),
(4273, 48, '      case 6:\r\n', 5),
(4274, 49, '      case 9:\r\n', 5),
(4275, 50, '      case 11:\r\n', 5),
(4276, 51, '       numDays = 30;\r\n', 5),
(4277, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(4278, 53, '       break;\r\n', 2),
(4279, 54, '      case 2:\r\n', 5),
(4280, 55, '       year = m.getYear();\r\n', 8),
(4281, 56, '       if(year < 1) {\r\n', 5),
(4282, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(4283, 58, '       }\r\n', 0),
(4284, 59, '       else{\r\n', 2),
(4285, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(4286, 61, '         numDays = 29;\r\n', 5),
(4287, 62, '		 if(year > 2020){\r\n', 7),
(4288, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(4289, 64, '         }\r\n', 0),
(4290, 65, '         else{\r\n', 2),
(4291, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(4292, 67, '         }\r\n', 0),
(4293, 68, '        }//if at line 61\r\n', 0),
(4294, 69, '        else{\r\n', 2),
(4295, 70, '         numDays = 28;\r\n', 5),
(4296, 71, '         if (year > 2020){\r\n', 7),
(4297, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(4298, 73, '         }\r\n', 0),
(4299, 74, '         else{\r\n', 2),
(4300, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(4301, 76, '         }\r\n', 0),
(4302, 77, '         break;  \r\n', 2),
(4303, 78, '        }//else at line 70\r\n', 2),
(4304, 79, '       }//else at line 60\r\n', 2),
(4305, 80, '    }//switch at line 37\r\n', 2),
(4306, 81, '   }//else at line 36\r\n', 2),
(4307, 82, '  }//method\r\n', 2),
(4308, 83, ' }//class', 2),
(4309, 0, 'public class RecursionExample2 {  \r\n', 9),
(4310, 1, 'static int count=0;  \r\n', 7),
(4311, 2, 'public int p(){  \r\n', 4),
(4312, 3, 'count++;  \r\n', 2),
(4313, 4, 'if(count<=5){  \r\n', 9),
(4314, 5, 'System.out.println("hello "+count);  \r\n', 8),
(4315, 6, 'public int p();  \r\n', 4),
(4316, 7, '}  \r\n', 0),
(4317, 8, '}  \r\n', 0),
(4318, 9, 'public static void main(String[] args) {  \r\n', 8),
(4319, 10, 'p();  \r\n', 0),
(4320, 11, '}  \r\n', 0),
(4321, 12, '}  ', 0),
(4322, 0, 'import java.awt.event.*;\n', 0),
(4323, 1, 'import java.awt.*;\n', 0),
(4324, 2, '\n', 0),
(4325, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(4326, 4, '\n', 0),
(4327, 5, '    private int mx, my;\n', 4),
(4328, 6, '    private Dimension size;\n', 2),
(4329, 7, '    private int onaroll;\n', 2),
(4330, 8, '\n', 0),
(4331, 9, '    public void init() {\n', 6),
(4332, 10, '        onaroll = 0;\n', 5),
(4333, 11, '        setSize(500, 500);\n', 5),
(4334, 12, '        size = getSize();\n', 2),
(4335, 13, '        addMouseListener(this);\n', 2),
(4336, 14, '        addMouseMotionListener(this);\n', 2),
(4337, 15, '        addComponentListener(this);\n', 4),
(4338, 16, '    }\n', 0),
(4339, 17, '\n', 0),
(4340, 18, '    public void update(Graphics g) {\n', 6),
(4341, 19, '        Dimension newSize = getSize();\n', 4),
(4342, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(4343, 21, '            g.setColor(getBackground());\n', 6),
(4344, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(4345, 23, '        } else {\n', 2),
(4346, 24, '            size = newSize;\n', 4),
(4347, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(4348, 26, '        } // Calculate new position\n', 11),
(4349, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(4350, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(4351, 29, '        paint(g);\n', 0),
(4352, 30, '    }\n', 0),
(4353, 31, '  \n', 0),
(4354, 32, '    public void paint(Graphics g) {\n', 6),
(4355, 33, '        g.setColor(Color.black);\n', 6),
(4356, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(4357, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(4358, 36, '    }\n', 0),
(4359, 37, '\n', 0),
(4360, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(4361, 39, '\n', 0),
(4362, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(4363, 41, '        e.consume();\n', 6),
(4364, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(4365, 43, '            repaint();\n', 0),
(4366, 44, '        }\n', 0),
(4367, 45, '    }\n', 0),
(4368, 46, '\n', 0),
(4369, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(4370, 48, '        int x = e.getX();\n', 8),
(4371, 49, '        int y = e.getY();\n', 8),
(4372, 50, '        e.consume();\n', 6),
(4373, 51, '        requestFocus();\n', 0),
(4374, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(4375, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(4376, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(4377, 55, '                case 0:\n', 5),
(4378, 56, '                    play(getCodeBase(), \n', 2),
(4379, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(4380, 58, '                    break;\n', 2),
(4381, 59, '                case 1:\n', 5),
(4382, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(4383, 61, '                    break;\n', 2),
(4384, 62, '                case 2:\n', 5),
(4385, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(4386, 64, '                    break;\n', 2),
(4387, 65, '                case 3:\n', 5),
(4388, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(4389, 67, '                    break;\n', 2),
(4390, 68, '                }\n', 0),
(4391, 69, '                onaroll++;\n', 2),
(4392, 70, '                if (onaroll > 5) {\n', 7),
(4393, 72, '                } else {\n', 2),
(4394, 74, '                }\n', 0),
(4395, 75, '            } else {   //first hit\n', 0),
(4396, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(4397, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(4398, 78, '                onaroll = 1;\n', 5),
(4399, 79, '            }\n', 0),
(4400, 80, '        } else {   //miss\n', 0),
(4401, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(4402, 82, '			\n', 0),
(4403, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(4404, 84, '            onaroll = 0;\n', 5),
(4405, 85, '        }\n', 0),
(4406, 86, '        repaint();\n', 0),
(4407, 87, '    }\n', 0),
(4408, 88, '\n', 0),
(4409, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(4410, 90, '\n', 0),
(4411, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(4412, 92, '        repaint();\n', 0),
(4413, 93, '    }\n', 0),
(4414, 94, '\n', 0),
(4415, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(4416, 96, '        repaint();\n', 0),
(4417, 97, '    }\n', 0),
(4418, 98, '\n', 0),
(4419, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(4420, 100, '\n', 0),
(4421, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(4422, 102, ' \n', 0),
(4423, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(4424, 104, ' \n', 0),
(4425, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(4426, 106, '        repaint();\n', 0),
(4427, 107, '    }\n', 0),
(4428, 108, ' \n', 0),
(4429, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(4430, 110, '        repaint();\n', 0),
(4431, 111, '    }\n', 0),
(4432, 112, '  \n', 0),
(4433, 113, '    public void destroy() {\n', 6),
(4434, 114, '        removeMouseListener(this);\n', 2),
(4435, 115, '        removeMouseMotionListener(this);\n', 2),
(4436, 116, '    }\n', 0),
(4437, 117, '\n', 0),
(4438, 118, '    public String getAppletInfo() {\n', 4),
(4439, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(4440, 120, '    }\n', 0),
(4441, 121, '}\n', 0),
(4442, 0, 'import java.awt.event.*;\n', 0),
(4443, 1, 'import java.awt.*;\n', 0),
(4444, 2, '\n', 0),
(4445, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(4446, 4, '\n', 0),
(4447, 5, '    private int mx, my;\n', 4),
(4448, 6, '    private Dimension size;\n', 2),
(4449, 7, '    private int onaroll;\n', 2),
(4450, 8, '\n', 0),
(4451, 9, '    public void init() {\n', 6),
(4452, 10, '        onaroll = 0;\n', 5),
(4453, 11, '        setSize(500, 500);\n', 5),
(4454, 12, '        size = getSize();\n', 2),
(4455, 13, '        addMouseListener(this);\n', 2),
(4456, 14, '        addMouseMotionListener(this);\n', 2),
(4457, 15, '        addComponentListener(this);\n', 4),
(4458, 16, '    }\n', 0),
(4459, 17, '\n', 0),
(4460, 18, '    public void update(Graphics g) {\n', 6),
(4461, 19, '        Dimension newSize = getSize();\n', 4),
(4462, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(4463, 21, '            g.setColor(getBackground());\n', 6),
(4464, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(4465, 23, '        } else {\n', 2),
(4466, 24, '            size = newSize;\n', 4),
(4467, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(4468, 26, '        } // Calculate new position\n', 11),
(4469, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(4470, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(4471, 29, '        paint(g);\n', 0),
(4472, 30, '    }\n', 0),
(4473, 31, '  \n', 0),
(4474, 32, '    public void paint(Graphics g) {\n', 6),
(4475, 33, '        g.setColor(Color.black);\n', 6),
(4476, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(4477, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(4478, 36, '    }\n', 0),
(4479, 37, '\n', 0),
(4480, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(4481, 39, '\n', 0),
(4482, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(4483, 41, '        e.consume();\n', 6),
(4484, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(4485, 43, '            repaint();\n', 0),
(4486, 44, '        }\n', 0),
(4487, 45, '    }\n', 0),
(4488, 46, '\n', 0),
(4489, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(4490, 48, '        int x = e.getX();\n', 8),
(4491, 49, '        int y = e.getY();\n', 8),
(4492, 50, '        e.consume();\n', 6),
(4493, 51, '        requestFocus();\n', 0),
(4494, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(4495, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(4496, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(4497, 55, '                case 0:\n', 5),
(4498, 56, '                    play(getCodeBase(), \n', 2),
(4499, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(4500, 58, '                    break;\n', 2),
(4501, 59, '                case 1:\n', 5),
(4502, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(4503, 61, '                    break;\n', 2),
(4504, 62, '                case 2:\n', 5),
(4505, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(4506, 64, '                    break;\n', 2),
(4507, 65, '                case 3:\n', 5),
(4508, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(4509, 67, '                    break;\n', 2),
(4510, 68, '                }\n', 0),
(4511, 69, '                onaroll++;\n', 2),
(4512, 70, '                if (onaroll > 5) {\n', 7),
(4513, 72, '                } else {\n', 2),
(4514, 74, '                }\n', 0),
(4515, 75, '            } else {   //first hit\n', 0),
(4516, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(4517, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(4518, 78, '                onaroll = 1;\n', 5),
(4519, 79, '            }\n', 0),
(4520, 80, '        } else {   //miss\n', 0),
(4521, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(4522, 82, '			\n', 0),
(4523, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(4524, 84, '            onaroll = 0;\n', 5),
(4525, 85, '        }\n', 0),
(4526, 86, '        repaint();\n', 0),
(4527, 87, '    }\n', 0),
(4528, 88, '\n', 0),
(4529, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(4530, 90, '\n', 0),
(4531, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(4532, 92, '        repaint();\n', 0),
(4533, 93, '    }\n', 0),
(4534, 94, '\n', 0),
(4535, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(4536, 96, '        repaint();\n', 0),
(4537, 97, '    }\n', 0),
(4538, 0, 'import java.util.Scanner;\r\n', 0),
(4539, 1, ' class Years{\r\n', 2),
(4540, 2, '   public int getYear(){\r\n', 4),
(4541, 3, '	int year;\r\n', 0),
(4542, 4, '	String enteredYear;\r\n', 0),
(4543, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(4544, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(4545, 7, '	enteredYear = sc.next();\r\n', 8),
(4546, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(4547, 9, '	return year;\r\n', 2),
(4548, 10, '   }\r\n', 0),
(4549, 11, ' }\r\n', 0),
(4550, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4551, 13, ' class Months extends Years{\r\n', 4),
(4552, 14, '   public int getMonth(){\r\n', 4),
(4553, 15, '	int month;\r\n', 0),
(4554, 16, '	String enteredMonthNumber;\r\n', 0),
(4555, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(4556, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(4557, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(4558, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(4559, 21, '	return month;\r\n', 2),
(4560, 22, '   }\r\n', 0),
(4561, 23, ' }\r\n', 0),
(4562, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4563, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(4564, 26, ' static int numDays = 0;\r\n', 7),
(4565, 27, ' public static void main(String[] args) {\r\n', 8),
(4566, 28, '   int year;\r\n', 0),
(4567, 29, '   Months m = new Months();\r\n', 4),
(4568, 30, '   int month = m.getMonth();\r\n', 8),
(4569, 31, '   \r\n', 0),
(4570, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(4571, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(4572, 34, '   }\r\n', 0),
(4573, 35, '   else {\r\n', 2),
(4574, 36, '    switch (month) {\r\n', 2),
(4575, 37, '      case 1:\r\n', 5),
(4576, 38, '      case 3:\r\n', 5),
(4577, 39, '      case 5:\r\n', 5),
(4578, 40, '      case 7:\r\n', 5),
(4579, 41, '      case 8:\r\n', 5),
(4580, 42, '      case 10:\r\n', 5),
(4581, 43, '      case 12:\r\n', 5),
(4582, 44, '        numDays = 31;\r\n', 5),
(4583, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(4584, 46, '        break;\r\n', 2),
(4585, 47, '      case 4:\r\n', 5),
(4586, 48, '      case 6:\r\n', 5),
(4587, 49, '      case 9:\r\n', 5),
(4588, 50, '      case 11:\r\n', 5),
(4589, 51, '       numDays = 30;\r\n', 5),
(4590, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(4591, 53, '       break;\r\n', 2),
(4592, 54, '      case 2:\r\n', 5),
(4593, 55, '       year = m.getYear();\r\n', 8),
(4594, 56, '       if(year < 1) {\r\n', 5),
(4595, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(4596, 58, '       }\r\n', 0),
(4597, 59, '       else{\r\n', 2),
(4598, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(4599, 61, '         numDays = 29;\r\n', 5),
(4600, 62, '		 if(year > 2020){\r\n', 7),
(4601, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(4602, 64, '         }\r\n', 0),
(4603, 65, '         else{\r\n', 2),
(4604, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(4605, 67, '         }\r\n', 0),
(4606, 68, '        }//if at line 61\r\n', 0),
(4607, 69, '        else{\r\n', 2),
(4608, 70, '         numDays = 28;\r\n', 5),
(4609, 71, '         if (year > 2020){\r\n', 7),
(4610, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(4611, 73, '         }\r\n', 0),
(4612, 74, '         else{\r\n', 2),
(4613, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(4614, 76, '         }\r\n', 0),
(4615, 77, '         break;  \r\n', 2),
(4616, 78, '        }//else at line 70\r\n', 2),
(4617, 79, '       }//else at line 60\r\n', 2),
(4618, 80, '    }//switch at line 37\r\n', 2),
(4619, 81, '   }//else at line 36\r\n', 2),
(4620, 82, '  }//method\r\n', 2),
(4621, 83, ' }//class', 2),
(4622, 0, 'public class RecursionExample2 {  \r\n', 9),
(4623, 1, 'static int count=0;  \r\n', 7),
(4624, 2, 'public int p(){  \r\n', 4),
(4625, 3, 'count++;  \r\n', 2),
(4626, 4, 'if(count<=5){  \r\n', 9),
(4627, 5, 'System.out.println("hello "+count);  \r\n', 8),
(4628, 6, 'public int p();  \r\n', 4),
(4629, 7, '}  \r\n', 0),
(4630, 8, '}  \r\n', 0),
(4631, 9, 'public static void main(String[] args) {  \r\n', 8),
(4632, 10, 'p();  \r\n', 0),
(4633, 11, '}  \r\n', 0),
(4634, 12, '}  ', 0),
(4635, 0, 'import java.awt.event.*;\n', 0),
(4636, 1, 'import java.awt.*;\n', 0),
(4637, 2, '\n', 0),
(4638, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(4639, 4, '\n', 0),
(4640, 5, '    private int mx, my;\n', 4),
(4641, 6, '    private Dimension size;\n', 2),
(4642, 7, '    private int onaroll;\n', 2),
(4643, 8, '\n', 0),
(4644, 9, '    public void init() {\n', 6),
(4645, 10, '        onaroll = 0;\n', 5),
(4646, 11, '        setSize(500, 500);\n', 5),
(4647, 12, '        size = getSize();\n', 2),
(4648, 13, '        addMouseListener(this);\n', 2),
(4649, 14, '        addMouseMotionListener(this);\n', 2),
(4650, 15, '        addComponentListener(this);\n', 4),
(4651, 16, '    }\n', 0),
(4652, 17, '\n', 0),
(4653, 18, '    public void update(Graphics g) {\n', 6),
(4654, 19, '        Dimension newSize = getSize();\n', 4),
(4655, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(4656, 21, '            g.setColor(getBackground());\n', 6),
(4657, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(4658, 23, '        } else {\n', 2),
(4659, 24, '            size = newSize;\n', 4),
(4660, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(4661, 26, '        } // Calculate new position\n', 11),
(4662, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(4663, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(4664, 29, '        paint(g);\n', 0),
(4665, 30, '    }\n', 0),
(4666, 31, '  \n', 0),
(4667, 32, '    public void paint(Graphics g) {\n', 6),
(4668, 33, '        g.setColor(Color.black);\n', 6),
(4669, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(4670, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(4671, 36, '    }\n', 0),
(4672, 37, '\n', 0),
(4673, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(4674, 39, '\n', 0),
(4675, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(4676, 41, '        e.consume();\n', 6),
(4677, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(4678, 43, '            repaint();\n', 0),
(4679, 44, '        }\n', 0),
(4680, 45, '    }\n', 0),
(4681, 46, '\n', 0),
(4682, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(4683, 48, '        int x = e.getX();\n', 8),
(4684, 49, '        int y = e.getY();\n', 8),
(4685, 50, '        e.consume();\n', 6),
(4686, 51, '        requestFocus();\n', 0),
(4687, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(4688, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(4689, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(4690, 55, '                case 0:\n', 5),
(4691, 56, '                    play(getCodeBase(), \n', 2),
(4692, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(4693, 58, '                    break;\n', 2),
(4694, 59, '                case 1:\n', 5),
(4695, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(4696, 61, '                    break;\n', 2),
(4697, 62, '                case 2:\n', 5),
(4698, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(4699, 64, '                    break;\n', 2),
(4700, 65, '                case 3:\n', 5),
(4701, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(4702, 67, '                    break;\n', 2),
(4703, 68, '                }\n', 0),
(4704, 69, '                onaroll++;\n', 2),
(4705, 70, '                if (onaroll > 5) {\n', 7),
(4706, 72, '                } else {\n', 2),
(4707, 74, '                }\n', 0),
(4708, 75, '            } else {   //first hit\n', 0),
(4709, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(4710, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(4711, 78, '                onaroll = 1;\n', 5),
(4712, 79, '            }\n', 0),
(4713, 80, '        } else {   //miss\n', 0),
(4714, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(4715, 82, '			\n', 0),
(4716, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(4717, 84, '            onaroll = 0;\n', 5),
(4718, 85, '        }\n', 0),
(4719, 86, '        repaint();\n', 0),
(4720, 87, '    }\n', 0),
(4721, 88, '\n', 0),
(4722, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(4723, 90, '\n', 0),
(4724, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(4725, 92, '        repaint();\n', 0),
(4726, 93, '    }\n', 0),
(4727, 94, '\n', 0),
(4728, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(4729, 96, '        repaint();\n', 0),
(4730, 97, '    }\n', 0),
(4731, 98, '\n', 0),
(4732, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(4733, 100, '\n', 0),
(4734, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(4735, 102, ' \n', 0),
(4736, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(4737, 104, ' \n', 0),
(4738, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(4739, 106, '        repaint();\n', 0),
(4740, 107, '    }\n', 0),
(4741, 108, ' \n', 0),
(4742, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(4743, 110, '        repaint();\n', 0),
(4744, 111, '    }\n', 0),
(4745, 112, '  \n', 0),
(4746, 113, '    public void destroy() {\n', 6),
(4747, 114, '        removeMouseListener(this);\n', 2),
(4748, 115, '        removeMouseMotionListener(this);\n', 2),
(4749, 116, '    }\n', 0),
(4750, 117, '\n', 0),
(4751, 118, '    public String getAppletInfo() {\n', 4),
(4752, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(4753, 120, '    }\n', 0),
(4754, 121, '}\n', 0),
(4755, 0, 'import java.awt.event.*;\n', 0),
(4756, 1, 'import java.awt.*;\n', 0),
(4757, 2, '\n', 0),
(4758, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(4759, 4, '\n', 0),
(4760, 5, '    private int mx, my;\n', 4),
(4761, 6, '    private Dimension size;\n', 2),
(4762, 7, '    private int onaroll;\n', 2),
(4763, 8, '\n', 0),
(4764, 9, '    public void init() {\n', 6),
(4765, 10, '        onaroll = 0;\n', 5),
(4766, 11, '        setSize(500, 500);\n', 5),
(4767, 12, '        size = getSize();\n', 2),
(4768, 13, '        addMouseListener(this);\n', 2),
(4769, 14, '        addMouseMotionListener(this);\n', 2),
(4770, 15, '        addComponentListener(this);\n', 4),
(4771, 16, '    }\n', 0),
(4772, 17, '\n', 0),
(4773, 18, '    public void update(Graphics g) {\n', 6),
(4774, 19, '        Dimension newSize = getSize();\n', 4),
(4775, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(4776, 21, '            g.setColor(getBackground());\n', 6),
(4777, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(4778, 23, '        } else {\n', 2),
(4779, 24, '            size = newSize;\n', 4),
(4780, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(4781, 26, '        } // Calculate new position\n', 11),
(4782, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(4783, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(4784, 29, '        paint(g);\n', 0),
(4785, 30, '    }\n', 0),
(4786, 31, '  \n', 0),
(4787, 32, '    public void paint(Graphics g) {\n', 6),
(4788, 33, '        g.setColor(Color.black);\n', 6),
(4789, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(4790, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(4791, 36, '    }\n', 0),
(4792, 37, '\n', 0),
(4793, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(4794, 39, '\n', 0),
(4795, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(4796, 41, '        e.consume();\n', 6),
(4797, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(4798, 43, '            repaint();\n', 0),
(4799, 44, '        }\n', 0),
(4800, 45, '    }\n', 0),
(4801, 46, '\n', 0),
(4802, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(4803, 48, '        int x = e.getX();\n', 8),
(4804, 49, '        int y = e.getY();\n', 8),
(4805, 50, '        e.consume();\n', 6),
(4806, 51, '        requestFocus();\n', 0),
(4807, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(4808, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(4809, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(4810, 55, '                case 0:\n', 5),
(4811, 56, '                    play(getCodeBase(), \n', 2),
(4812, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(4813, 58, '                    break;\n', 2),
(4814, 59, '                case 1:\n', 5),
(4815, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(4816, 61, '                    break;\n', 2),
(4817, 62, '                case 2:\n', 5),
(4818, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(4819, 64, '                    break;\n', 2),
(4820, 65, '                case 3:\n', 5),
(4821, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(4822, 67, '                    break;\n', 2),
(4823, 68, '                }\n', 0),
(4824, 69, '                onaroll++;\n', 2),
(4825, 70, '                if (onaroll > 5) {\n', 7),
(4826, 72, '                } else {\n', 2),
(4827, 74, '                }\n', 0),
(4828, 75, '            } else {   //first hit\n', 0),
(4829, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(4830, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(4831, 78, '                onaroll = 1;\n', 5),
(4832, 79, '            }\n', 0),
(4833, 80, '        } else {   //miss\n', 0),
(4834, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(4835, 82, '			\n', 0),
(4836, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(4837, 84, '            onaroll = 0;\n', 5),
(4838, 85, '        }\n', 0),
(4839, 86, '        repaint();\n', 0),
(4840, 87, '    }\n', 0),
(4841, 88, '\n', 0),
(4842, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(4843, 90, '\n', 0),
(4844, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(4845, 92, '        repaint();\n', 0),
(4846, 93, '    }\n', 0),
(4847, 94, '\n', 0),
(4848, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(4849, 96, '        repaint();\n', 0),
(4850, 97, '    }\n', 0),
(4851, 98, '\n', 0),
(4852, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(4853, 100, '\n', 0),
(4854, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(4855, 102, ' \n', 0),
(4856, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(4857, 104, ' \n', 0),
(4858, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(4859, 106, '        repaint();\n', 0),
(4860, 107, '    }\n', 0),
(4861, 108, ' \n', 0),
(4862, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(4863, 110, '        repaint();\n', 0),
(4864, 111, '    }\n', 0),
(4865, 112, '  \n', 0),
(4866, 113, '    public void destroy() {\n', 6),
(4867, 114, '        removeMouseListener(this);\n', 2),
(4868, 115, '        removeMouseMotionListener(this);\n', 2),
(4869, 116, '    }\n', 0),
(4870, 117, '\n', 0),
(4871, 118, '    public String getAppletInfo() {\n', 4),
(4872, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(4873, 120, '    }\n', 0),
(4874, 121, '}\n', 0),
(4875, 0, 'import java.util.Scanner;\r\n', 0),
(4876, 1, ' class Years{\r\n', 2),
(4877, 2, '   public int getYear(){\r\n', 4),
(4878, 3, '	int year;\r\n', 0),
(4879, 4, '	String enteredYear;\r\n', 0),
(4880, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(4881, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(4882, 7, '	enteredYear = sc.next();\r\n', 8),
(4883, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(4884, 9, '	return year;\r\n', 2),
(4885, 10, '   }\r\n', 0),
(4886, 11, ' }\r\n', 0),
(4887, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4888, 13, ' class Months extends Years{\r\n', 4),
(4889, 14, '   public int getMonth(){\r\n', 4),
(4890, 15, '	int month;\r\n', 0),
(4891, 16, '	String enteredMonthNumber;\r\n', 0),
(4892, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(4893, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(4894, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(4895, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(4896, 21, '	return month;\r\n', 2),
(4897, 22, '   }\r\n', 0),
(4898, 23, ' }\r\n', 0),
(4899, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4900, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(4901, 26, ' static int numDays = 0;\r\n', 7),
(4902, 27, ' public static void main(String[] args) {\r\n', 8),
(4903, 28, '   int year;\r\n', 0),
(4904, 29, '   Months m = new Months();\r\n', 4),
(4905, 30, '   int month = m.getMonth();\r\n', 8),
(4906, 31, '   \r\n', 0),
(4907, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(4908, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(4909, 34, '   }\r\n', 0),
(4910, 35, '   else {\r\n', 2),
(4911, 36, '    switch (month) {\r\n', 2),
(4912, 37, '      case 1:\r\n', 5),
(4913, 38, '      case 3:\r\n', 5),
(4914, 39, '      case 5:\r\n', 5),
(4915, 40, '      case 7:\r\n', 5),
(4916, 41, '      case 8:\r\n', 5),
(4917, 42, '      case 10:\r\n', 5),
(4918, 43, '      case 12:\r\n', 5),
(4919, 44, '        numDays = 31;\r\n', 5),
(4920, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(4921, 46, '        break;\r\n', 2),
(4922, 47, '      case 4:\r\n', 5),
(4923, 48, '      case 6:\r\n', 5),
(4924, 49, '      case 9:\r\n', 5),
(4925, 50, '      case 11:\r\n', 5),
(4926, 51, '       numDays = 30;\r\n', 5),
(4927, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(4928, 53, '       break;\r\n', 2),
(4929, 54, '      case 2:\r\n', 5),
(4930, 55, '       year = m.getYear();\r\n', 8),
(4931, 56, '       if(year < 1) {\r\n', 5),
(4932, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(4933, 58, '       }\r\n', 0),
(4934, 59, '       else{\r\n', 2),
(4935, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(4936, 61, '         numDays = 29;\r\n', 5),
(4937, 62, '		 if(year > 2020){\r\n', 7),
(4938, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(4939, 64, '         }\r\n', 0),
(4940, 65, '         else{\r\n', 2),
(4941, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(4942, 67, '         }\r\n', 0),
(4943, 68, '        }//if at line 61\r\n', 0),
(4944, 69, '        else{\r\n', 2),
(4945, 70, '         numDays = 28;\r\n', 5),
(4946, 71, '         if (year > 2020){\r\n', 7),
(4947, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(4948, 73, '         }\r\n', 0),
(4949, 74, '         else{\r\n', 2),
(4950, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(4951, 76, '         }\r\n', 0),
(4952, 77, '         break;  \r\n', 2),
(4953, 78, '        }//else at line 70\r\n', 2),
(4954, 79, '       }//else at line 60\r\n', 2),
(4955, 80, '    }//switch at line 37\r\n', 2),
(4956, 81, '   }//else at line 36\r\n', 2),
(4957, 82, '  }//method\r\n', 2),
(4958, 83, ' }//class', 2),
(4959, 0, 'class Pattern{ \r\n', 2),
(4960, 1, 'public static void main(String[] args) { \r\n', 8),
(4961, 2, '	 int rows = 5;\r\n', 5),
(4962, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(4963, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(4964, 5, '	 System.out.print(j + " "); \r\n', 13),
(4965, 6, '	 } \r\n', 0),
(4966, 7, '	 System.out.println(""); \r\n', 11),
(4967, 8, ' 	} \r\n', 0),
(4968, 9, ' 	} \r\n', 0),
(4969, 10, '} ', 0),
(4970, 0, 'import java.util.Scanner;\r\n', 0),
(4971, 1, ' class Years{\r\n', 2),
(4972, 2, '   public int getYear(){\r\n', 4),
(4973, 3, '	int year;\r\n', 0),
(4974, 4, '	String enteredYear;\r\n', 0),
(4975, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(4976, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(4977, 7, '	enteredYear = sc.next();\r\n', 8),
(4978, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(4979, 9, '	return year;\r\n', 2),
(4980, 10, '   }\r\n', 0),
(4981, 11, ' }\r\n', 0),
(4982, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4983, 13, ' class Months extends Years{\r\n', 4),
(4984, 14, '   public int getMonth(){\r\n', 4),
(4985, 15, '	int month;\r\n', 0),
(4986, 16, '	String enteredMonthNumber;\r\n', 0),
(4987, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(4988, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(4989, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(4990, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(4991, 21, '	return month;\r\n', 2),
(4992, 22, '   }\r\n', 0),
(4993, 23, ' }\r\n', 0),
(4994, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4995, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(4996, 26, ' static int numDays = 0;\r\n', 7),
(4997, 27, ' public static void main(String[] args) {\r\n', 8),
(4998, 28, '   int year;\r\n', 0),
(4999, 29, '   Months m = new Months();\r\n', 4),
(5000, 30, '   int month = m.getMonth();\r\n', 8),
(5001, 31, '   \r\n', 0),
(5002, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(5003, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(5004, 34, '   }\r\n', 0),
(5005, 35, '   else {\r\n', 2),
(5006, 36, '    switch (month) {\r\n', 2),
(5007, 37, '      case 1:\r\n', 5),
(5008, 38, '      case 3:\r\n', 5),
(5009, 39, '      case 5:\r\n', 5),
(5010, 40, '      case 7:\r\n', 5),
(5011, 41, '      case 8:\r\n', 5),
(5012, 42, '      case 10:\r\n', 5),
(5013, 43, '      case 12:\r\n', 5),
(5014, 44, '        numDays = 31;\r\n', 5),
(5015, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(5016, 46, '        break;\r\n', 2),
(5017, 47, '      case 4:\r\n', 5),
(5018, 48, '      case 6:\r\n', 5),
(5019, 49, '      case 9:\r\n', 5),
(5020, 50, '      case 11:\r\n', 5),
(5021, 51, '       numDays = 30;\r\n', 5),
(5022, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(5023, 53, '       break;\r\n', 2),
(5024, 54, '      case 2:\r\n', 5),
(5025, 55, '       year = m.getYear();\r\n', 8),
(5026, 56, '       if(year < 1) {\r\n', 5),
(5027, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(5028, 58, '       }\r\n', 0),
(5029, 59, '       else{\r\n', 2),
(5030, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(5031, 61, '         numDays = 29;\r\n', 5),
(5032, 62, '		 if(year > 2020){\r\n', 7),
(5033, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(5034, 64, '         }\r\n', 0),
(5035, 65, '         else{\r\n', 2),
(5036, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(5037, 67, '         }\r\n', 0),
(5038, 68, '        }//if at line 61\r\n', 0),
(5039, 69, '        else{\r\n', 2),
(5040, 70, '         numDays = 28;\r\n', 5),
(5041, 71, '         if (year > 2020){\r\n', 7),
(5042, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(5043, 73, '         }\r\n', 0),
(5044, 74, '         else{\r\n', 2),
(5045, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(5046, 76, '         }\r\n', 0),
(5047, 77, '         break;  \r\n', 2),
(5048, 78, '        }//else at line 70\r\n', 2),
(5049, 79, '       }//else at line 60\r\n', 2),
(5050, 80, '    }//switch at line 37\r\n', 2),
(5051, 81, '   }//else at line 36\r\n', 2),
(5052, 82, '  }//method\r\n', 2),
(5053, 83, ' }//class', 2),
(5054, 0, 'class HelloWorld { \r\n', 2),
(5055, 1, '	public static void main(String args[]) \r\n', 8),
(5056, 2, '	{ \r\n', 0),
(5057, 3, '		System.out.println("Hello World"); \r\n', 11),
(5058, 4, '	} \r\n', 0),
(5059, 5, '} \r\n', 0),
(5060, 0, 'import java.awt.event.*;\n', 0),
(5061, 1, 'import java.awt.*;\n', 0),
(5062, 2, '\n', 0),
(5063, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(5064, 4, '\n', 0),
(5065, 5, '    private int mx, my;\n', 4),
(5066, 6, '    private Dimension size;\n', 2),
(5067, 7, '    private int onaroll;\n', 2),
(5068, 8, '\n', 0),
(5069, 9, '    public void init() {\n', 6),
(5070, 10, '        onaroll = 0;\n', 5),
(5071, 11, '        setSize(500, 500);\n', 5),
(5072, 12, '        size = getSize();\n', 2),
(5073, 13, '        addMouseListener(this);\n', 2),
(5074, 14, '        addMouseMotionListener(this);\n', 2),
(5075, 15, '        addComponentListener(this);\n', 4),
(5076, 16, '    }\n', 0),
(5077, 17, '\n', 0),
(5078, 18, '    public void update(Graphics g) {\n', 6),
(5079, 19, '        Dimension newSize = getSize();\n', 4),
(5080, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(5081, 21, '            g.setColor(getBackground());\n', 6),
(5082, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(5083, 23, '        } else {\n', 2),
(5084, 24, '            size = newSize;\n', 4),
(5085, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(5086, 26, '        } // Calculate new position\n', 11),
(5087, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(5088, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(5089, 29, '        paint(g);\n', 0),
(5090, 30, '    }\n', 0),
(5091, 31, '  \n', 0),
(5092, 32, '    public void paint(Graphics g) {\n', 6),
(5093, 33, '        g.setColor(Color.black);\n', 6),
(5094, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(5095, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(5096, 36, '    }\n', 0),
(5097, 37, '\n', 0),
(5098, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(5099, 39, '\n', 0),
(5100, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(5101, 41, '        e.consume();\n', 6),
(5102, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(5103, 0, 'import java.util.Scanner;\r\n', 0),
(5104, 1, ' class Years{\r\n', 2),
(5105, 2, '   public int getYear(){\r\n', 4),
(5106, 3, '	int year;\r\n', 0),
(5107, 4, '	String enteredYear;\r\n', 0),
(5108, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(5109, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(5110, 7, '	enteredYear = sc.next();\r\n', 8),
(5111, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(5112, 9, '	return year;\r\n', 2),
(5113, 10, '   }\r\n', 0),
(5114, 11, ' }\r\n', 0),
(5115, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5116, 13, ' class Months extends Years{\r\n', 4),
(5117, 14, '   public int getMonth(){\r\n', 4),
(5118, 15, '	int month;\r\n', 0),
(5119, 16, '	String enteredMonthNumber;\r\n', 0),
(5120, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(5121, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(5122, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(5123, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(5124, 21, '	return month;\r\n', 2),
(5125, 22, '   }\r\n', 0),
(5126, 23, ' }\r\n', 0),
(5127, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5128, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(5129, 26, ' static int numDays = 0;\r\n', 7),
(5130, 27, ' public static void main(String[] args) {\r\n', 8),
(5131, 28, '   int year;\r\n', 0),
(5132, 29, '   Months m = new Months();\r\n', 4),
(5133, 30, '   int month = m.getMonth();\r\n', 8),
(5134, 31, '   \r\n', 0),
(5135, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(5136, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(5137, 34, '   }\r\n', 0),
(5138, 35, '   else {\r\n', 2),
(5139, 36, '    switch (month) {\r\n', 2),
(5140, 37, '      case 1:\r\n', 5),
(5141, 38, '      case 3:\r\n', 5),
(5142, 39, '      case 5:\r\n', 5),
(5143, 40, '      case 7:\r\n', 5),
(5144, 41, '      case 8:\r\n', 5);
INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(5145, 42, '      case 10:\r\n', 5),
(5146, 43, '      case 12:\r\n', 5),
(5147, 44, '        numDays = 31;\r\n', 5),
(5148, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(5149, 46, '        break;\r\n', 2),
(5150, 47, '      case 4:\r\n', 5),
(5151, 48, '      case 6:\r\n', 5),
(5152, 49, '      case 9:\r\n', 5),
(5153, 50, '      case 11:\r\n', 5),
(5154, 51, '       numDays = 30;\r\n', 5),
(5155, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(5156, 53, '       break;\r\n', 2),
(5157, 54, '      case 2:\r\n', 5),
(5158, 55, '       year = m.getYear();\r\n', 8),
(5159, 56, '       if(year < 1) {\r\n', 5),
(5160, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(5161, 58, '       }\r\n', 0),
(5162, 59, '       else{\r\n', 2),
(5163, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(5164, 61, '         numDays = 29;\r\n', 5),
(5165, 62, '		 if(year > 2020){\r\n', 7),
(5166, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(5167, 64, '         }\r\n', 0),
(5168, 65, '         else{\r\n', 2),
(5169, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(5170, 67, '         }\r\n', 0),
(5171, 68, '        }//if at line 61\r\n', 0),
(5172, 69, '        else{\r\n', 2),
(5173, 70, '         numDays = 28;\r\n', 5),
(5174, 71, '         if (year > 2020){\r\n', 7),
(5175, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(5176, 73, '         }\r\n', 0),
(5177, 74, '         else{\r\n', 2),
(5178, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(5179, 76, '         }\r\n', 0),
(5180, 77, '         break;  \r\n', 2),
(5181, 78, '        }//else at line 70\r\n', 2),
(5182, 79, '       }//else at line 60\r\n', 2),
(5183, 80, '    }//switch at line 37\r\n', 2),
(5184, 81, '   }//else at line 36\r\n', 2),
(5185, 82, '  }//method\r\n', 2),
(5186, 83, ' }//class', 2),
(5187, 0, 'public class RecursionExample2 {  \r\n', 9),
(5188, 1, 'static int count=0;  \r\n', 7),
(5189, 2, 'public int p(){  \r\n', 4),
(5190, 3, 'count++;  \r\n', 2),
(5191, 4, 'if(count<=5){  \r\n', 9),
(5192, 5, 'System.out.println("hello "+count);  \r\n', 8),
(5193, 6, 'public int p();  \r\n', 4),
(5194, 7, '}  \r\n', 0),
(5195, 8, '}  \r\n', 0),
(5196, 9, 'public static void main(String[] args) {  \r\n', 8),
(5197, 10, 'p();  \r\n', 0),
(5198, 11, '}  \r\n', 0),
(5199, 12, '}  ', 0),
(5200, 0, 'import java.awt.event.*;\n', 0),
(5201, 1, 'import java.awt.*;\n', 0),
(5202, 2, '\n', 0),
(5203, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(5204, 4, '\n', 0),
(5205, 5, '    private int mx, my;\n', 4),
(5206, 6, '    private Dimension size;\n', 2),
(5207, 7, '    private int onaroll;\n', 2),
(5208, 8, '\n', 0),
(5209, 9, '    public void init() {\n', 6),
(5210, 10, '        onaroll = 0;\n', 5),
(5211, 11, '        setSize(500, 500);\n', 5),
(5212, 12, '        size = getSize();\n', 2),
(5213, 13, '        addMouseListener(this);\n', 2),
(5214, 14, '        addMouseMotionListener(this);\n', 2),
(5215, 15, '        addComponentListener(this);\n', 4),
(5216, 16, '    }\n', 0),
(5217, 17, '\n', 0),
(5218, 18, '    public void update(Graphics g) {\n', 6),
(5219, 19, '        Dimension newSize = getSize();\n', 4),
(5220, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(5221, 21, '            g.setColor(getBackground());\n', 6),
(5222, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(5223, 23, '        } else {\n', 2),
(5224, 24, '            size = newSize;\n', 4),
(5225, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(5226, 26, '        } // Calculate new position\n', 11),
(5227, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(5228, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(5229, 29, '        paint(g);\n', 0),
(5230, 30, '    }\n', 0),
(5231, 31, '  \n', 0),
(5232, 32, '    public void paint(Graphics g) {\n', 6),
(5233, 33, '        g.setColor(Color.black);\n', 6),
(5234, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(5235, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(5236, 36, '    }\n', 0),
(5237, 37, '\n', 0),
(5238, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(5239, 39, '\n', 0),
(5240, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(5241, 41, '        e.consume();\n', 6),
(5242, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(5243, 43, '            repaint();\n', 0),
(5244, 44, '        }\n', 0),
(5245, 45, '    }\n', 0),
(5246, 46, '\n', 0),
(5247, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(5248, 48, '        int x = e.getX();\n', 8),
(5249, 49, '        int y = e.getY();\n', 8),
(5250, 50, '        e.consume();\n', 6),
(5251, 51, '        requestFocus();\n', 0),
(5252, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(5253, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(5254, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(5255, 55, '                case 0:\n', 5),
(5256, 56, '                    play(getCodeBase(), \n', 2),
(5257, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(5258, 58, '                    break;\n', 2),
(5259, 59, '                case 1:\n', 5),
(5260, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(5261, 61, '                    break;\n', 2),
(5262, 62, '                case 2:\n', 5),
(5263, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(5264, 64, '                    break;\n', 2),
(5265, 65, '                case 3:\n', 5),
(5266, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(5267, 67, '                    break;\n', 2),
(5268, 68, '                }\n', 0),
(5269, 69, '                onaroll++;\n', 2),
(5270, 70, '                if (onaroll > 5) {\n', 7),
(5271, 72, '                } else {\n', 2),
(5272, 74, '                }\n', 0),
(5273, 75, '            } else {   //first hit\n', 0),
(5274, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(5275, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(5276, 78, '                onaroll = 1;\n', 5),
(5277, 79, '            }\n', 0),
(5278, 80, '        } else {   //miss\n', 0),
(5279, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(5280, 82, '			\n', 0),
(5281, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(5282, 84, '            onaroll = 0;\n', 5),
(5283, 85, '        }\n', 0),
(5284, 86, '        repaint();\n', 0),
(5285, 87, '    }\n', 0),
(5286, 88, '\n', 0),
(5287, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(5288, 90, '\n', 0),
(5289, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(5290, 92, '        repaint();\n', 0),
(5291, 93, '    }\n', 0),
(5292, 94, '\n', 0),
(5293, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(5294, 96, '        repaint();\n', 0),
(5295, 97, '    }\n', 0),
(5296, 98, '\n', 0),
(5297, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(5298, 100, '\n', 0),
(5299, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(5300, 102, ' \n', 0),
(5301, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(5302, 104, ' \n', 0),
(5303, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(5304, 106, '        repaint();\n', 0),
(5305, 107, '    }\n', 0),
(5306, 108, ' \n', 0),
(5307, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(5308, 110, '        repaint();\n', 0),
(5309, 111, '    }\n', 0),
(5310, 112, '  \n', 0),
(5311, 113, '    public void destroy() {\n', 6),
(5312, 114, '        removeMouseListener(this);\n', 2),
(5313, 115, '        removeMouseMotionListener(this);\n', 2),
(5314, 116, '    }\n', 0),
(5315, 117, '\n', 0),
(5316, 118, '    public String getAppletInfo() {\n', 4),
(5317, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(5318, 120, '    }\n', 0),
(5319, 121, '}\n', 0),
(5320, 0, 'import java.awt.event.*;\n', 0),
(5321, 1, 'import java.awt.*;\n', 0),
(5322, 2, '\n', 0),
(5323, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(5324, 4, '\n', 0),
(5325, 5, '    private int mx, my;\n', 4),
(5326, 6, '    private Dimension size;\n', 2),
(5327, 7, '    private int onaroll;\n', 2),
(5328, 8, '\n', 0),
(5329, 9, '    public void init() {\n', 6),
(5330, 10, '        onaroll = 0;\n', 5),
(5331, 11, '        setSize(500, 500);\n', 5),
(5332, 12, '        size = getSize();\n', 2),
(5333, 13, '        addMouseListener(this);\n', 2),
(5334, 14, '        addMouseMotionListener(this);\n', 2),
(5335, 15, '        addComponentListener(this);\n', 4),
(5336, 16, '    }\n', 0),
(5337, 17, '\n', 0),
(5338, 18, '    public void update(Graphics g) {\n', 6),
(5339, 19, '        Dimension newSize = getSize();\n', 4),
(5340, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(5341, 21, '            g.setColor(getBackground());\n', 6),
(5342, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(5343, 23, '        } else {\n', 2),
(5344, 24, '            size = newSize;\n', 4),
(5345, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(5346, 26, '        } // Calculate new position\n', 11),
(5347, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(5348, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(5349, 29, '        paint(g);\n', 0),
(5350, 30, '    }\n', 0),
(5351, 31, '  \n', 0),
(5352, 32, '    public void paint(Graphics g) {\n', 6),
(5353, 33, '        g.setColor(Color.black);\n', 6),
(5354, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(5355, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(5356, 36, '    }\n', 0),
(5357, 37, '\n', 0),
(5358, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(5359, 39, '\n', 0),
(5360, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(5361, 41, '        e.consume();\n', 6),
(5362, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(5363, 43, '            repaint();\n', 0),
(5364, 44, '        }\n', 0),
(5365, 45, '    }\n', 0),
(5366, 46, '\n', 0),
(5367, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(5368, 48, '        int x = e.getX();\n', 8),
(5369, 49, '        int y = e.getY();\n', 8),
(5370, 50, '        e.consume();\n', 6),
(5371, 51, '        requestFocus();\n', 0),
(5372, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(5373, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(5374, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(5375, 55, '                case 0:\n', 5),
(5376, 56, '                    play(getCodeBase(), \n', 2),
(5377, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(5378, 58, '                    break;\n', 2),
(5379, 59, '                case 1:\n', 5),
(5380, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(5381, 61, '                    break;\n', 2),
(5382, 62, '                case 2:\n', 5),
(5383, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(5384, 64, '                    break;\n', 2),
(5385, 65, '                case 3:\n', 5),
(5386, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(5387, 67, '                    break;\n', 2),
(5388, 68, '                }\n', 0),
(5389, 69, '                onaroll++;\n', 2),
(5390, 70, '                if (onaroll > 5) {\n', 7),
(5391, 72, '                } else {\n', 2),
(5392, 74, '                }\n', 0),
(5393, 75, '            } else {   //first hit\n', 0),
(5394, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(5395, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(5396, 78, '                onaroll = 1;\n', 5),
(5397, 79, '            }\n', 0),
(5398, 80, '        } else {   //miss\n', 0),
(5399, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(5400, 82, '			\n', 0),
(5401, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(5402, 84, '            onaroll = 0;\n', 5),
(5403, 85, '        }\n', 0),
(5404, 86, '        repaint();\n', 0),
(5405, 87, '    }\n', 0),
(5406, 88, '\n', 0),
(5407, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(5408, 90, '\n', 0),
(5409, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(5410, 92, '        repaint();\n', 0),
(5411, 93, '    }\n', 0),
(5412, 94, '\n', 0),
(5413, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(5414, 96, '        repaint();\n', 0),
(5415, 97, '    }\n', 0),
(5416, 98, '\n', 0),
(5417, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(5418, 100, '\n', 0),
(5419, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(5420, 102, ' \n', 0),
(5421, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(5422, 104, ' \n', 0),
(5423, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(5424, 106, '        repaint();\n', 0),
(5425, 107, '    }\n', 0),
(5426, 108, ' \n', 0),
(5427, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(5428, 110, '        repaint();\n', 0),
(5429, 111, '    }\n', 0),
(5430, 112, '  \n', 0),
(5431, 113, '    public void destroy() {\n', 6),
(5432, 114, '        removeMouseListener(this);\n', 2),
(5433, 115, '        removeMouseMotionListener(this);\n', 2),
(5434, 116, '    }\n', 0),
(5435, 117, '\n', 0),
(5436, 118, '    public String getAppletInfo() {\n', 4),
(5437, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(5438, 120, '    }\n', 0),
(5439, 121, '}\n', 0),
(5440, 0, 'import java.util.Scanner;\r\n', 0),
(5441, 1, ' class Years{\r\n', 2),
(5442, 2, '   public int getYear(){\r\n', 4),
(5443, 3, '	int year;\r\n', 0),
(5444, 4, '	String enteredYear;\r\n', 0),
(5445, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(5446, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(5447, 7, '	enteredYear = sc.next();\r\n', 8),
(5448, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(5449, 9, '	return year;\r\n', 2),
(5450, 10, '   }\r\n', 0),
(5451, 11, ' }\r\n', 0),
(5452, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5453, 13, ' class Months extends Years{\r\n', 4),
(5454, 14, '   public int getMonth(){\r\n', 4),
(5455, 15, '	int month;\r\n', 0),
(5456, 16, '	String enteredMonthNumber;\r\n', 0),
(5457, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(5458, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(5459, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(5460, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(5461, 21, '	return month;\r\n', 2),
(5462, 22, '   }\r\n', 0),
(5463, 23, ' }\r\n', 0),
(5464, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5465, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(5466, 26, ' static int numDays = 0;\r\n', 7),
(5467, 27, ' public static void main(String[] args) {\r\n', 8),
(5468, 28, '   int year;\r\n', 0),
(5469, 29, '   Months m = new Months();\r\n', 4),
(5470, 30, '   int month = m.getMonth();\r\n', 8),
(5471, 31, '   \r\n', 0),
(5472, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(5473, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(5474, 34, '   }\r\n', 0),
(5475, 35, '   else {\r\n', 2),
(5476, 36, '    switch (month) {\r\n', 2),
(5477, 37, '      case 1:\r\n', 5),
(5478, 38, '      case 3:\r\n', 5),
(5479, 39, '      case 5:\r\n', 5),
(5480, 40, '      case 7:\r\n', 5),
(5481, 41, '      case 8:\r\n', 5),
(5482, 42, '      case 10:\r\n', 5),
(5483, 43, '      case 12:\r\n', 5),
(5484, 44, '        numDays = 31;\r\n', 5),
(5485, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(5486, 46, '        break;\r\n', 2),
(5487, 47, '      case 4:\r\n', 5),
(5488, 48, '      case 6:\r\n', 5),
(5489, 49, '      case 9:\r\n', 5),
(5490, 50, '      case 11:\r\n', 5),
(5491, 51, '       numDays = 30;\r\n', 5),
(5492, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(5493, 53, '       break;\r\n', 2),
(5494, 54, '      case 2:\r\n', 5),
(5495, 55, '       year = m.getYear();\r\n', 8),
(5496, 56, '       if(year < 1) {\r\n', 5),
(5497, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(5498, 58, '       }\r\n', 0),
(5499, 59, '       else{\r\n', 2),
(5500, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(5501, 61, '         numDays = 29;\r\n', 5),
(5502, 62, '		 if(year > 2020){\r\n', 7),
(5503, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(5504, 64, '         }\r\n', 0),
(5505, 65, '         else{\r\n', 2),
(5506, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(5507, 67, '         }\r\n', 0),
(5508, 68, '        }//if at line 61\r\n', 0),
(5509, 69, '        else{\r\n', 2),
(5510, 70, '         numDays = 28;\r\n', 5),
(5511, 71, '         if (year > 2020){\r\n', 7),
(5512, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(5513, 73, '         }\r\n', 0),
(5514, 74, '         else{\r\n', 2),
(5515, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(5516, 76, '         }\r\n', 0),
(5517, 77, '         break;  \r\n', 2),
(5518, 78, '        }//else at line 70\r\n', 2),
(5519, 79, '       }//else at line 60\r\n', 2),
(5520, 80, '    }//switch at line 37\r\n', 2),
(5521, 81, '   }//else at line 36\r\n', 2),
(5522, 82, '  }//method\r\n', 2),
(5523, 83, ' }//class', 2),
(5524, 0, 'class Pattern{ \r\n', 2),
(5525, 1, 'public static void main(String[] args) { \r\n', 8),
(5526, 2, '	 int rows = 5;\r\n', 5),
(5527, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(5528, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(5529, 5, '	 System.out.print(j + " "); \r\n', 13),
(5530, 6, '	 } \r\n', 0),
(5531, 7, '	 System.out.println(""); \r\n', 11),
(5532, 8, ' 	} \r\n', 0),
(5533, 9, ' 	} \r\n', 0),
(5534, 10, '} ', 0),
(5535, 0, 'import java.util.Scanner;\r\n', 0),
(5536, 1, ' class Years{\r\n', 2),
(5537, 2, '   public int getYear(){\r\n', 4),
(5538, 3, '	int year;\r\n', 0),
(5539, 4, '	String enteredYear;\r\n', 0),
(5540, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(5541, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(5542, 7, '	enteredYear = sc.next();\r\n', 8),
(5543, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(5544, 9, '	return year;\r\n', 2),
(5545, 10, '   }\r\n', 0),
(5546, 11, ' }\r\n', 0),
(5547, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5548, 13, ' class Months extends Years{\r\n', 4),
(5549, 14, '   public int getMonth(){\r\n', 4),
(5550, 15, '	int month;\r\n', 0),
(5551, 16, '	String enteredMonthNumber;\r\n', 0),
(5552, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(5553, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(5554, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(5555, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(5556, 21, '	return month;\r\n', 2),
(5557, 22, '   }\r\n', 0),
(5558, 23, ' }\r\n', 0),
(5559, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5560, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(5561, 26, ' static int numDays = 0;\r\n', 7),
(5562, 27, ' public static void main(String[] args) {\r\n', 8),
(5563, 28, '   int year;\r\n', 0),
(5564, 29, '   Months m = new Months();\r\n', 4),
(5565, 30, '   int month = m.getMonth();\r\n', 8),
(5566, 31, '   \r\n', 0),
(5567, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(5568, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(5569, 34, '   }\r\n', 0),
(5570, 35, '   else {\r\n', 2),
(5571, 36, '    switch (month) {\r\n', 2),
(5572, 37, '      case 1:\r\n', 5),
(5573, 38, '      case 3:\r\n', 5),
(5574, 39, '      case 5:\r\n', 5),
(5575, 40, '      case 7:\r\n', 5),
(5576, 41, '      case 8:\r\n', 5),
(5577, 42, '      case 10:\r\n', 5),
(5578, 43, '      case 12:\r\n', 5),
(5579, 44, '        numDays = 31;\r\n', 5),
(5580, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(5581, 46, '        break;\r\n', 2),
(5582, 47, '      case 4:\r\n', 5),
(5583, 48, '      case 6:\r\n', 5),
(5584, 49, '      case 9:\r\n', 5),
(5585, 0, 'import java.util.Scanner;\r\n', 0),
(5586, 1, ' class Years{\r\n', 2),
(5587, 2, '   public int getYear(){\r\n', 4),
(5588, 3, '	int year;\r\n', 0),
(5589, 4, '	String enteredYear;\r\n', 0),
(5590, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(5591, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(5592, 7, '	enteredYear = sc.next();\r\n', 8),
(5593, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(5594, 9, '	return year;\r\n', 2),
(5595, 10, '   }\r\n', 0),
(5596, 11, ' }\r\n', 0),
(5597, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5598, 13, ' class Months extends Years{\r\n', 4),
(5599, 14, '   public int getMonth(){\r\n', 4),
(5600, 15, '	int month;\r\n', 0),
(5601, 16, '	String enteredMonthNumber;\r\n', 0),
(5602, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(5603, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(5604, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(5605, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(5606, 21, '	return month;\r\n', 2),
(5607, 22, '   }\r\n', 0),
(5608, 23, ' }\r\n', 0),
(5609, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5610, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(5611, 26, ' static int numDays = 0;\r\n', 7),
(5612, 27, ' public static void main(String[] args) {\r\n', 8),
(5613, 28, '   int year;\r\n', 0),
(5614, 29, '   Months m = new Months();\r\n', 4),
(5615, 30, '   int month = m.getMonth();\r\n', 8),
(5616, 31, '   \r\n', 0),
(5617, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(5618, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(5619, 34, '   }\r\n', 0),
(5620, 35, '   else {\r\n', 2),
(5621, 36, '    switch (month) {\r\n', 2),
(5622, 37, '      case 1:\r\n', 5),
(5623, 38, '      case 3:\r\n', 5),
(5624, 39, '      case 5:\r\n', 5),
(5625, 40, '      case 7:\r\n', 5),
(5626, 41, '      case 8:\r\n', 5),
(5627, 42, '      case 10:\r\n', 5),
(5628, 43, '      case 12:\r\n', 5),
(5629, 44, '        numDays = 31;\r\n', 5),
(5630, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(5631, 46, '        break;\r\n', 2),
(5632, 47, '      case 4:\r\n', 5),
(5633, 48, '      case 6:\r\n', 5),
(5634, 49, '      case 9:\r\n', 5),
(5635, 50, '      case 11:\r\n', 5),
(5636, 51, '       numDays = 30;\r\n', 5),
(5637, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(5638, 53, '       break;\r\n', 2),
(5639, 54, '      case 2:\r\n', 5),
(5640, 55, '       year = m.getYear();\r\n', 8),
(5641, 56, '       if(year < 1) {\r\n', 5),
(5642, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(5643, 58, '       }\r\n', 0),
(5644, 59, '       else{\r\n', 2),
(5645, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(5646, 61, '         numDays = 29;\r\n', 5),
(5647, 62, '		 if(year > 2020){\r\n', 7),
(5648, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(5649, 64, '         }\r\n', 0),
(5650, 65, '         else{\r\n', 2),
(5651, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(5652, 67, '         }\r\n', 0),
(5653, 68, '        }//if at line 61\r\n', 0),
(5654, 69, '        else{\r\n', 2),
(5655, 70, '         numDays = 28;\r\n', 5),
(5656, 71, '         if (year > 2020){\r\n', 7),
(5657, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(5658, 73, '         }\r\n', 0),
(5659, 74, '         else{\r\n', 2),
(5660, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(5661, 76, '         }\r\n', 0),
(5662, 77, '         break;  \r\n', 2),
(5663, 78, '        }//else at line 70\r\n', 2),
(5664, 79, '       }//else at line 60\r\n', 2),
(5665, 80, '    }//switch at line 37\r\n', 2),
(5666, 81, '   }//else at line 36\r\n', 2),
(5667, 82, '  }//method\r\n', 2),
(5668, 83, ' }//class', 2),
(5669, 0, 'public class RecursionExample2 {  \r\n', 9),
(5670, 1, 'static int count=0;  \r\n', 7),
(5671, 2, 'public int p(){  \r\n', 4),
(5672, 3, 'count++;  \r\n', 2),
(5673, 4, 'if(count<=5){  \r\n', 9),
(5674, 5, 'System.out.println("hello "+count);  \r\n', 8),
(5675, 6, 'public int p();  \r\n', 4),
(5676, 7, '}  \r\n', 0),
(5677, 8, '}  \r\n', 0),
(5678, 9, 'public static void main(String[] args) {  \r\n', 8),
(5679, 10, 'p();  \r\n', 0),
(5680, 11, '}  \r\n', 0),
(5681, 12, '}  ', 0),
(5682, 0, 'import java.awt.event.*;\n', 0),
(5683, 1, 'import java.awt.*;\n', 0),
(5684, 2, '\n', 0),
(5685, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(5686, 4, '\n', 0),
(5687, 5, '    private int mx, my;\n', 4),
(5688, 6, '    private Dimension size;\n', 2),
(5689, 7, '    private int onaroll;\n', 2),
(5690, 8, '\n', 0),
(5691, 9, '    public void init() {\n', 6),
(5692, 10, '        onaroll = 0;\n', 5),
(5693, 11, '        setSize(500, 500);\n', 5),
(5694, 12, '        size = getSize();\n', 2),
(5695, 13, '        addMouseListener(this);\n', 2),
(5696, 14, '        addMouseMotionListener(this);\n', 2),
(5697, 15, '        addComponentListener(this);\n', 4),
(5698, 16, '    }\n', 0),
(5699, 17, '\n', 0),
(5700, 18, '    public void update(Graphics g) {\n', 6),
(5701, 19, '        Dimension newSize = getSize();\n', 4),
(5702, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(5703, 21, '            g.setColor(getBackground());\n', 6),
(5704, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(5705, 23, '        } else {\n', 2),
(5706, 24, '            size = newSize;\n', 4),
(5707, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(5708, 26, '        } // Calculate new position\n', 11),
(5709, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(5710, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(5711, 29, '        paint(g);\n', 0),
(5712, 30, '    }\n', 0),
(5713, 31, '  \n', 0),
(5714, 32, '    public void paint(Graphics g) {\n', 6),
(5715, 33, '        g.setColor(Color.black);\n', 6),
(5716, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(5717, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(5718, 36, '    }\n', 0),
(5719, 37, '\n', 0),
(5720, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(5721, 39, '\n', 0),
(5722, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(5723, 41, '        e.consume();\n', 6),
(5724, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(5725, 43, '            repaint();\n', 0),
(5726, 44, '        }\n', 0),
(5727, 45, '    }\n', 0),
(5728, 46, '\n', 0),
(5729, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(5730, 48, '        int x = e.getX();\n', 8),
(5731, 49, '        int y = e.getY();\n', 8),
(5732, 50, '        e.consume();\n', 6),
(5733, 51, '        requestFocus();\n', 0),
(5734, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(5735, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(5736, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(5737, 55, '                case 0:\n', 5),
(5738, 56, '                    play(getCodeBase(), \n', 2),
(5739, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(5740, 58, '                    break;\n', 2),
(5741, 59, '                case 1:\n', 5),
(5742, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(5743, 61, '                    break;\n', 2),
(5744, 62, '                case 2:\n', 5),
(5745, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(5746, 64, '                    break;\n', 2),
(5747, 65, '                case 3:\n', 5),
(5748, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(5749, 67, '                    break;\n', 2),
(5750, 68, '                }\n', 0),
(5751, 69, '                onaroll++;\n', 2),
(5752, 70, '                if (onaroll > 5) {\n', 7),
(5753, 72, '                } else {\n', 2),
(5754, 74, '                }\n', 0),
(5755, 75, '            } else {   //first hit\n', 0),
(5756, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(5757, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(5758, 78, '                onaroll = 1;\n', 5),
(5759, 79, '            }\n', 0),
(5760, 80, '        } else {   //miss\n', 0),
(5761, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(5762, 82, '			\n', 0),
(5763, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(5764, 84, '            onaroll = 0;\n', 5),
(5765, 85, '        }\n', 0),
(5766, 86, '        repaint();\n', 0),
(5767, 87, '    }\n', 0),
(5768, 88, '\n', 0),
(5769, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(5770, 90, '\n', 0),
(5771, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(5772, 92, '        repaint();\n', 0),
(5773, 93, '    }\n', 0),
(5774, 94, '\n', 0),
(5775, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(5776, 96, '        repaint();\n', 0),
(5777, 97, '    }\n', 0),
(5778, 98, '\n', 0),
(5779, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(5780, 100, '\n', 0),
(5781, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(5782, 102, ' \n', 0),
(5783, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(5784, 104, ' \n', 0),
(5785, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(5786, 106, '        repaint();\n', 0),
(5787, 107, '    }\n', 0),
(5788, 108, ' \n', 0),
(5789, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(5790, 110, '        repaint();\n', 0),
(5791, 111, '    }\n', 0),
(5792, 112, '  \n', 0),
(5793, 113, '    public void destroy() {\n', 6),
(5794, 114, '        removeMouseListener(this);\n', 2),
(5795, 115, '        removeMouseMotionListener(this);\n', 2),
(5796, 116, '    }\n', 0),
(5797, 117, '\n', 0),
(5798, 118, '    public String getAppletInfo() {\n', 4),
(5799, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(5800, 120, '    }\n', 0),
(5801, 121, '}\n', 0),
(5802, 0, 'import java.awt.event.*;\n', 0),
(5803, 1, 'import java.awt.*;\n', 0),
(5804, 2, '\n', 0),
(5805, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(5806, 4, '\n', 0),
(5807, 5, '    private int mx, my;\n', 4),
(5808, 6, '    private Dimension size;\n', 2),
(5809, 7, '    private int onaroll;\n', 2),
(5810, 8, '\n', 0),
(5811, 9, '    public void init() {\n', 6),
(5812, 10, '        onaroll = 0;\n', 5),
(5813, 11, '        setSize(500, 500);\n', 5),
(5814, 12, '        size = getSize();\n', 2),
(5815, 13, '        addMouseListener(this);\n', 2),
(5816, 14, '        addMouseMotionListener(this);\n', 2),
(5817, 15, '        addComponentListener(this);\n', 4),
(5818, 16, '    }\n', 0),
(5819, 17, '\n', 0),
(5820, 18, '    public void update(Graphics g) {\n', 6),
(5821, 19, '        Dimension newSize = getSize();\n', 4),
(5822, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(5823, 21, '            g.setColor(getBackground());\n', 6),
(5824, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(5825, 23, '        } else {\n', 2),
(5826, 24, '            size = newSize;\n', 4),
(5827, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(5828, 26, '        } // Calculate new position\n', 11),
(5829, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(5830, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(5831, 29, '        paint(g);\n', 0),
(5832, 30, '    }\n', 0),
(5833, 31, '  \n', 0),
(5834, 32, '    public void paint(Graphics g) {\n', 6),
(5835, 33, '        g.setColor(Color.black);\n', 6),
(5836, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(5837, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(5838, 36, '    }\n', 0),
(5839, 37, '\n', 0),
(5840, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(5841, 39, '\n', 0),
(5842, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(5843, 41, '        e.consume();\n', 6),
(5844, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(5845, 43, '            repaint();\n', 0),
(5846, 44, '        }\n', 0),
(5847, 45, '    }\n', 0),
(5848, 46, '\n', 0),
(5849, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(5850, 48, '        int x = e.getX();\n', 8),
(5851, 49, '        int y = e.getY();\n', 8),
(5852, 50, '        e.consume();\n', 6),
(5853, 51, '        requestFocus();\n', 0),
(5854, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(5855, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(5856, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(5857, 55, '                case 0:\n', 5),
(5858, 56, '                    play(getCodeBase(), \n', 2),
(5859, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(5860, 58, '                    break;\n', 2),
(5861, 59, '                case 1:\n', 5),
(5862, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(5863, 61, '                    break;\n', 2),
(5864, 62, '                case 2:\n', 5),
(5865, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(5866, 64, '                    break;\n', 2),
(5867, 65, '                case 3:\n', 5),
(5868, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(5869, 67, '                    break;\n', 2),
(5870, 68, '                }\n', 0),
(5871, 69, '                onaroll++;\n', 2),
(5872, 70, '                if (onaroll > 5) {\n', 7),
(5873, 72, '                } else {\n', 2),
(5874, 74, '                }\n', 0),
(5875, 75, '            } else {   //first hit\n', 0),
(5876, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(5877, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(5878, 78, '                onaroll = 1;\n', 5),
(5879, 79, '            }\n', 0),
(5880, 80, '        } else {   //miss\n', 0),
(5881, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(5882, 82, '			\n', 0),
(5883, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(5884, 84, '            onaroll = 0;\n', 5),
(5885, 85, '        }\n', 0),
(5886, 86, '        repaint();\n', 0),
(5887, 87, '    }\n', 0),
(5888, 88, '\n', 0),
(5889, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(5890, 90, '\n', 0),
(5891, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(5892, 92, '        repaint();\n', 0),
(5893, 93, '    }\n', 0),
(5894, 94, '\n', 0),
(5895, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(5896, 96, '        repaint();\n', 0),
(5897, 97, '    }\n', 0),
(5898, 98, '\n', 0),
(5899, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(5900, 100, '\n', 0),
(5901, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(5902, 102, ' \n', 0),
(5903, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(5904, 104, ' \n', 0),
(5905, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(5906, 106, '        repaint();\n', 0),
(5907, 107, '    }\n', 0),
(5908, 108, ' \n', 0),
(5909, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(5910, 110, '        repaint();\n', 0),
(5911, 111, '    }\n', 0),
(5912, 112, '  \n', 0),
(5913, 113, '    public void destroy() {\n', 6),
(5914, 114, '        removeMouseListener(this);\n', 2),
(5915, 115, '        removeMouseMotionListener(this);\n', 2),
(5916, 116, '    }\n', 0),
(5917, 117, '\n', 0),
(5918, 118, '    public String getAppletInfo() {\n', 4),
(5919, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(5920, 120, '    }\n', 0),
(5921, 121, '}\n', 0),
(5922, 0, 'import java.util.Scanner;\r\n', 0),
(5923, 1, ' class Years{\r\n', 2),
(5924, 2, '   public int getYear(){\r\n', 4),
(5925, 3, '	int year;\r\n', 0),
(5926, 4, '	String enteredYear;\r\n', 0),
(5927, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(5928, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(5929, 7, '	enteredYear = sc.next();\r\n', 8),
(5930, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(5931, 9, '	return year;\r\n', 2),
(5932, 10, '   }\r\n', 0),
(5933, 11, ' }\r\n', 0),
(5934, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5935, 13, ' class Months extends Years{\r\n', 4),
(5936, 14, '   public int getMonth(){\r\n', 4),
(5937, 15, '	int month;\r\n', 0),
(5938, 16, '	String enteredMonthNumber;\r\n', 0),
(5939, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(5940, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(5941, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(5942, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(5943, 21, '	return month;\r\n', 2),
(5944, 22, '   }\r\n', 0),
(5945, 23, ' }\r\n', 0),
(5946, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5947, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(5948, 26, ' static int numDays = 0;\r\n', 7),
(5949, 27, ' public static void main(String[] args) {\r\n', 8),
(5950, 28, '   int year;\r\n', 0),
(5951, 29, '   Months m = new Months();\r\n', 4),
(5952, 30, '   int month = m.getMonth();\r\n', 8),
(5953, 31, '   \r\n', 0),
(5954, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(5955, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(5956, 34, '   }\r\n', 0),
(5957, 35, '   else {\r\n', 2),
(5958, 36, '    switch (month) {\r\n', 2),
(5959, 37, '      case 1:\r\n', 5),
(5960, 38, '      case 3:\r\n', 5),
(5961, 39, '      case 5:\r\n', 5),
(5962, 0, 'import java.util.Scanner;\r\n', 0),
(5963, 1, ' class Years{\r\n', 2),
(5964, 2, '   public int getYear(){\r\n', 4),
(5965, 3, '	int year;\r\n', 0),
(5966, 4, '	String enteredYear;\r\n', 0),
(5967, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(5968, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(5969, 7, '	enteredYear = sc.next();\r\n', 8),
(5970, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(5971, 9, '	return year;\r\n', 2),
(5972, 10, '   }\r\n', 0),
(5973, 11, ' }\r\n', 0),
(5974, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5975, 13, ' class Months extends Years{\r\n', 4),
(5976, 14, '   public int getMonth(){\r\n', 4),
(5977, 15, '	int month;\r\n', 0),
(5978, 16, '	String enteredMonthNumber;\r\n', 0),
(5979, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(5980, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(5981, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(5982, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(5983, 21, '	return month;\r\n', 2),
(5984, 22, '   }\r\n', 0),
(5985, 23, ' }\r\n', 0),
(5986, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5987, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(5988, 26, ' static int numDays = 0;\r\n', 7),
(5989, 27, ' public static void main(String[] args) {\r\n', 8),
(5990, 28, '   int year;\r\n', 0),
(5991, 29, '   Months m = new Months();\r\n', 4),
(5992, 30, '   int month = m.getMonth();\r\n', 8),
(5993, 31, '   \r\n', 0),
(5994, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(5995, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(5996, 34, '   }\r\n', 0),
(5997, 35, '   else {\r\n', 2),
(5998, 36, '    switch (month) {\r\n', 2),
(5999, 37, '      case 1:\r\n', 5),
(6000, 38, '      case 3:\r\n', 5),
(6001, 39, '      case 5:\r\n', 5),
(6002, 40, '      case 7:\r\n', 5),
(6003, 41, '      case 8:\r\n', 5),
(6004, 42, '      case 10:\r\n', 5),
(6005, 43, '      case 12:\r\n', 5),
(6006, 44, '        numDays = 31;\r\n', 5),
(6007, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(6008, 46, '        break;\r\n', 2),
(6009, 47, '      case 4:\r\n', 5),
(6010, 48, '      case 6:\r\n', 5),
(6011, 49, '      case 9:\r\n', 5),
(6012, 50, '      case 11:\r\n', 5),
(6013, 51, '       numDays = 30;\r\n', 5),
(6014, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(6015, 53, '       break;\r\n', 2),
(6016, 54, '      case 2:\r\n', 5),
(6017, 55, '       year = m.getYear();\r\n', 8),
(6018, 56, '       if(year < 1) {\r\n', 5),
(6019, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(6020, 58, '       }\r\n', 0),
(6021, 59, '       else{\r\n', 2),
(6022, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(6023, 61, '         numDays = 29;\r\n', 5),
(6024, 62, '		 if(year > 2020){\r\n', 7),
(6025, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(6026, 64, '         }\r\n', 0),
(6027, 65, '         else{\r\n', 2),
(6028, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(6029, 67, '         }\r\n', 0),
(6030, 68, '        }//if at line 61\r\n', 0),
(6031, 69, '        else{\r\n', 2),
(6032, 70, '         numDays = 28;\r\n', 5),
(6033, 71, '         if (year > 2020){\r\n', 7),
(6034, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(6035, 73, '         }\r\n', 0),
(6036, 74, '         else{\r\n', 2),
(6037, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(6038, 76, '         }\r\n', 0),
(6039, 77, '         break;  \r\n', 2),
(6040, 78, '        }//else at line 70\r\n', 2),
(6041, 79, '       }//else at line 60\r\n', 2),
(6042, 80, '    }//switch at line 37\r\n', 2),
(6043, 81, '   }//else at line 36\r\n', 2),
(6044, 82, '  }//method\r\n', 2),
(6045, 83, ' }//class', 2),
(6046, 0, 'public class RecursionExample2 {  \r\n', 9),
(6047, 1, 'static int count=0;  \r\n', 7),
(6048, 2, 'public int p(){  \r\n', 4),
(6049, 3, 'count++;  \r\n', 2),
(6050, 4, 'if(count<=5){  \r\n', 9),
(6051, 5, 'System.out.println("hello "+count);  \r\n', 8),
(6052, 6, 'public int p();  \r\n', 4),
(6053, 7, '}  \r\n', 0),
(6054, 8, '}  \r\n', 0),
(6055, 9, 'public static void main(String[] args) {  \r\n', 8),
(6056, 10, 'p();  \r\n', 0),
(6057, 11, '}  \r\n', 0),
(6058, 12, '}  ', 0),
(6059, 0, 'import java.awt.event.*;\n', 0),
(6060, 1, 'import java.awt.*;\n', 0),
(6061, 2, '\n', 0),
(6062, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(6063, 4, '\n', 0),
(6064, 5, '    private int mx, my;\n', 4),
(6065, 6, '    private Dimension size;\n', 2),
(6066, 7, '    private int onaroll;\n', 2),
(6067, 8, '\n', 0),
(6068, 9, '    public void init() {\n', 6),
(6069, 10, '        onaroll = 0;\n', 5),
(6070, 11, '        setSize(500, 500);\n', 5),
(6071, 12, '        size = getSize();\n', 2),
(6072, 13, '        addMouseListener(this);\n', 2),
(6073, 14, '        addMouseMotionListener(this);\n', 2),
(6074, 15, '        addComponentListener(this);\n', 4),
(6075, 16, '    }\n', 0),
(6076, 17, '\n', 0),
(6077, 18, '    public void update(Graphics g) {\n', 6),
(6078, 19, '        Dimension newSize = getSize();\n', 4),
(6079, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(6080, 21, '            g.setColor(getBackground());\n', 6),
(6081, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(6082, 23, '        } else {\n', 2),
(6083, 24, '            size = newSize;\n', 4),
(6084, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(6085, 26, '        } // Calculate new position\n', 11),
(6086, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(6087, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(6088, 29, '        paint(g);\n', 0),
(6089, 30, '    }\n', 0),
(6090, 31, '  \n', 0),
(6091, 32, '    public void paint(Graphics g) {\n', 6),
(6092, 33, '        g.setColor(Color.black);\n', 6),
(6093, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(6094, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(6095, 36, '    }\n', 0),
(6096, 37, '\n', 0),
(6097, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(6098, 39, '\n', 0),
(6099, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(6100, 41, '        e.consume();\n', 6),
(6101, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(6102, 43, '            repaint();\n', 0),
(6103, 44, '        }\n', 0),
(6104, 45, '    }\n', 0),
(6105, 46, '\n', 0),
(6106, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(6107, 48, '        int x = e.getX();\n', 8),
(6108, 49, '        int y = e.getY();\n', 8),
(6109, 50, '        e.consume();\n', 6),
(6110, 51, '        requestFocus();\n', 0),
(6111, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(6112, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(6113, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(6114, 55, '                case 0:\n', 5),
(6115, 56, '                    play(getCodeBase(), \n', 2),
(6116, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(6117, 58, '                    break;\n', 2),
(6118, 59, '                case 1:\n', 5),
(6119, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(6120, 61, '                    break;\n', 2),
(6121, 62, '                case 2:\n', 5),
(6122, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(6123, 64, '                    break;\n', 2),
(6124, 65, '                case 3:\n', 5),
(6125, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(6126, 67, '                    break;\n', 2),
(6127, 68, '                }\n', 0),
(6128, 69, '                onaroll++;\n', 2),
(6129, 70, '                if (onaroll > 5) {\n', 7),
(6130, 72, '                } else {\n', 2),
(6131, 74, '                }\n', 0),
(6132, 75, '            } else {   //first hit\n', 0),
(6133, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(6134, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(6135, 78, '                onaroll = 1;\n', 5),
(6136, 79, '            }\n', 0),
(6137, 80, '        } else {   //miss\n', 0),
(6138, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(6139, 82, '			\n', 0),
(6140, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(6141, 84, '            onaroll = 0;\n', 5),
(6142, 85, '        }\n', 0),
(6143, 86, '        repaint();\n', 0),
(6144, 87, '    }\n', 0),
(6145, 88, '\n', 0),
(6146, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(6147, 90, '\n', 0),
(6148, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(6149, 92, '        repaint();\n', 0),
(6150, 93, '    }\n', 0),
(6151, 94, '\n', 0),
(6152, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(6153, 96, '        repaint();\n', 0),
(6154, 97, '    }\n', 0),
(6155, 98, '\n', 0),
(6156, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(6157, 100, '\n', 0),
(6158, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(6159, 102, ' \n', 0),
(6160, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(6161, 104, ' \n', 0),
(6162, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(6163, 106, '        repaint();\n', 0),
(6164, 107, '    }\n', 0),
(6165, 108, ' \n', 0),
(6166, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(6167, 110, '        repaint();\n', 0),
(6168, 111, '    }\n', 0),
(6169, 112, '  \n', 0),
(6170, 113, '    public void destroy() {\n', 6),
(6171, 114, '        removeMouseListener(this);\n', 2),
(6172, 115, '        removeMouseMotionListener(this);\n', 2),
(6173, 116, '    }\n', 0),
(6174, 117, '\n', 0);
INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(6175, 118, '    public String getAppletInfo() {\n', 4),
(6176, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(6177, 120, '    }\n', 0),
(6178, 121, '}\n', 0),
(6179, 0, 'import java.awt.event.*;\n', 0),
(6180, 1, 'import java.awt.*;\n', 0),
(6181, 2, '\n', 0),
(6182, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(6183, 4, '\n', 0),
(6184, 5, '    private int mx, my;\n', 4),
(6185, 6, '    private Dimension size;\n', 2),
(6186, 7, '    private int onaroll;\n', 2),
(6187, 8, '\n', 0),
(6188, 9, '    public void init() {\n', 6),
(6189, 10, '        onaroll = 0;\n', 5),
(6190, 11, '        setSize(500, 500);\n', 5),
(6191, 12, '        size = getSize();\n', 2),
(6192, 13, '        addMouseListener(this);\n', 2),
(6193, 14, '        addMouseMotionListener(this);\n', 2),
(6194, 15, '        addComponentListener(this);\n', 4),
(6195, 16, '    }\n', 0),
(6196, 17, '\n', 0),
(6197, 18, '    public void update(Graphics g) {\n', 6),
(6198, 19, '        Dimension newSize = getSize();\n', 4),
(6199, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(6200, 21, '            g.setColor(getBackground());\n', 6),
(6201, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(6202, 23, '        } else {\n', 2),
(6203, 24, '            size = newSize;\n', 4),
(6204, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(6205, 26, '        } // Calculate new position\n', 11),
(6206, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(6207, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(6208, 29, '        paint(g);\n', 0),
(6209, 30, '    }\n', 0),
(6210, 31, '  \n', 0),
(6211, 32, '    public void paint(Graphics g) {\n', 6),
(6212, 33, '        g.setColor(Color.black);\n', 6),
(6213, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(6214, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(6215, 36, '    }\n', 0),
(6216, 37, '\n', 0),
(6217, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(6218, 39, '\n', 0),
(6219, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(6220, 41, '        e.consume();\n', 6),
(6221, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(6222, 43, '            repaint();\n', 0),
(6223, 44, '        }\n', 0),
(6224, 45, '    }\n', 0),
(6225, 46, '\n', 0),
(6226, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(6227, 48, '        int x = e.getX();\n', 8),
(6228, 49, '        int y = e.getY();\n', 8),
(6229, 50, '        e.consume();\n', 6),
(6230, 51, '        requestFocus();\n', 0),
(6231, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(6232, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(6233, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(6234, 55, '                case 0:\n', 5),
(6235, 56, '                    play(getCodeBase(), \n', 2),
(6236, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(6237, 0, 'import java.util.Scanner;\r\n', 0),
(6238, 1, ' class Years{\r\n', 2),
(6239, 2, '   public int getYear(){\r\n', 4),
(6240, 3, '	int year;\r\n', 0),
(6241, 4, '	String enteredYear;\r\n', 0),
(6242, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(6243, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(6244, 7, '	enteredYear = sc.next();\r\n', 8),
(6245, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(6246, 9, '	return year;\r\n', 2),
(6247, 10, '   }\r\n', 0),
(6248, 11, ' }\r\n', 0),
(6249, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6250, 13, ' class Months extends Years{\r\n', 4),
(6251, 14, '   public int getMonth(){\r\n', 4),
(6252, 15, '	int month;\r\n', 0),
(6253, 16, '	String enteredMonthNumber;\r\n', 0),
(6254, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(6255, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(6256, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(6257, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(6258, 21, '	return month;\r\n', 2),
(6259, 22, '   }\r\n', 0),
(6260, 23, ' }\r\n', 0),
(6261, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6262, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(6263, 26, ' static int numDays = 0;\r\n', 7),
(6264, 27, ' public static void main(String[] args) {\r\n', 8),
(6265, 28, '   int year;\r\n', 0),
(6266, 29, '   Months m = new Months();\r\n', 4),
(6267, 30, '   int month = m.getMonth();\r\n', 8),
(6268, 31, '   \r\n', 0),
(6269, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(6270, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(6271, 34, '   }\r\n', 0),
(6272, 35, '   else {\r\n', 2),
(6273, 36, '    switch (month) {\r\n', 2),
(6274, 37, '      case 1:\r\n', 5),
(6275, 38, '      case 3:\r\n', 5),
(6276, 39, '      case 5:\r\n', 5),
(6277, 40, '      case 7:\r\n', 5),
(6278, 41, '      case 8:\r\n', 5),
(6279, 42, '      case 10:\r\n', 5),
(6280, 43, '      case 12:\r\n', 5),
(6281, 44, '        numDays = 31;\r\n', 5),
(6282, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(6283, 46, '        break;\r\n', 2),
(6284, 47, '      case 4:\r\n', 5),
(6285, 48, '      case 6:\r\n', 5),
(6286, 49, '      case 9:\r\n', 5),
(6287, 50, '      case 11:\r\n', 5),
(6288, 51, '       numDays = 30;\r\n', 5),
(6289, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(6290, 53, '       break;\r\n', 2),
(6291, 54, '      case 2:\r\n', 5),
(6292, 55, '       year = m.getYear();\r\n', 8),
(6293, 56, '       if(year < 1) {\r\n', 5),
(6294, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(6295, 58, '       }\r\n', 0),
(6296, 59, '       else{\r\n', 2),
(6297, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(6298, 61, '         numDays = 29;\r\n', 5),
(6299, 62, '		 if(year > 2020){\r\n', 7),
(6300, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(6301, 64, '         }\r\n', 0),
(6302, 65, '         else{\r\n', 2),
(6303, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(6304, 67, '         }\r\n', 0),
(6305, 68, '        }//if at line 61\r\n', 0),
(6306, 69, '        else{\r\n', 2),
(6307, 70, '         numDays = 28;\r\n', 5),
(6308, 71, '         if (year > 2020){\r\n', 7),
(6309, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(6310, 73, '         }\r\n', 0),
(6311, 74, '         else{\r\n', 2),
(6312, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(6313, 76, '         }\r\n', 0),
(6314, 77, '         break;  \r\n', 2),
(6315, 78, '        }//else at line 70\r\n', 2),
(6316, 79, '       }//else at line 60\r\n', 2),
(6317, 80, '    }//switch at line 37\r\n', 2),
(6318, 81, '   }//else at line 36\r\n', 2),
(6319, 82, '  }//method\r\n', 2),
(6320, 83, ' }//class', 2),
(6321, 0, 'public class RecursionExample2 {  \r\n', 9),
(6322, 1, 'static int count=0;  \r\n', 7),
(6323, 2, 'public int p(){  \r\n', 4),
(6324, 3, 'count++;  \r\n', 2),
(6325, 4, 'if(count<=5){  \r\n', 9),
(6326, 5, 'System.out.println("hello "+count);  \r\n', 8),
(6327, 6, 'public int p();  \r\n', 4),
(6328, 7, '}  \r\n', 0),
(6329, 8, '}  \r\n', 0),
(6330, 9, 'public static void main(String[] args) {  \r\n', 8),
(6331, 10, 'p();  \r\n', 0),
(6332, 11, '}  \r\n', 0),
(6333, 12, '}  ', 0),
(6334, 0, 'import java.awt.event.*;\n', 0),
(6335, 1, 'import java.awt.*;\n', 0),
(6336, 2, '\n', 0),
(6337, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(6338, 4, '\n', 0),
(6339, 5, '    private int mx, my;\n', 4),
(6340, 6, '    private Dimension size;\n', 2),
(6341, 7, '    private int onaroll;\n', 2),
(6342, 8, '\n', 0),
(6343, 9, '    public void init() {\n', 6),
(6344, 10, '        onaroll = 0;\n', 5),
(6345, 11, '        setSize(500, 500);\n', 5),
(6346, 12, '        size = getSize();\n', 2),
(6347, 13, '        addMouseListener(this);\n', 2),
(6348, 14, '        addMouseMotionListener(this);\n', 2),
(6349, 15, '        addComponentListener(this);\n', 4),
(6350, 16, '    }\n', 0),
(6351, 17, '\n', 0),
(6352, 18, '    public void update(Graphics g) {\n', 6),
(6353, 19, '        Dimension newSize = getSize();\n', 4),
(6354, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(6355, 21, '            g.setColor(getBackground());\n', 6),
(6356, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(6357, 23, '        } else {\n', 2),
(6358, 24, '            size = newSize;\n', 4),
(6359, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(6360, 26, '        } // Calculate new position\n', 11),
(6361, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(6362, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(6363, 29, '        paint(g);\n', 0),
(6364, 30, '    }\n', 0),
(6365, 31, '  \n', 0),
(6366, 32, '    public void paint(Graphics g) {\n', 6),
(6367, 33, '        g.setColor(Color.black);\n', 6),
(6368, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(6369, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(6370, 36, '    }\n', 0),
(6371, 37, '\n', 0),
(6372, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(6373, 39, '\n', 0),
(6374, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(6375, 41, '        e.consume();\n', 6),
(6376, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(6377, 43, '            repaint();\n', 0),
(6378, 44, '        }\n', 0),
(6379, 45, '    }\n', 0),
(6380, 46, '\n', 0),
(6381, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(6382, 48, '        int x = e.getX();\n', 8),
(6383, 49, '        int y = e.getY();\n', 8),
(6384, 50, '        e.consume();\n', 6),
(6385, 51, '        requestFocus();\n', 0),
(6386, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(6387, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(6388, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(6389, 55, '                case 0:\n', 5),
(6390, 56, '                    play(getCodeBase(), \n', 2),
(6391, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(6392, 58, '                    break;\n', 2),
(6393, 59, '                case 1:\n', 5),
(6394, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(6395, 61, '                    break;\n', 2),
(6396, 62, '                case 2:\n', 5),
(6397, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(6398, 64, '                    break;\n', 2),
(6399, 65, '                case 3:\n', 5),
(6400, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(6401, 67, '                    break;\n', 2),
(6402, 68, '                }\n', 0),
(6403, 69, '                onaroll++;\n', 2),
(6404, 70, '                if (onaroll > 5) {\n', 7),
(6405, 72, '                } else {\n', 2),
(6406, 74, '                }\n', 0),
(6407, 75, '            } else {   //first hit\n', 0),
(6408, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(6409, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(6410, 78, '                onaroll = 1;\n', 5),
(6411, 79, '            }\n', 0),
(6412, 80, '        } else {   //miss\n', 0),
(6413, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(6414, 82, '			\n', 0),
(6415, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(6416, 84, '            onaroll = 0;\n', 5),
(6417, 85, '        }\n', 0),
(6418, 86, '        repaint();\n', 0),
(6419, 87, '    }\n', 0),
(6420, 88, '\n', 0),
(6421, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(6422, 90, '\n', 0),
(6423, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(6424, 92, '        repaint();\n', 0),
(6425, 93, '    }\n', 0),
(6426, 94, '\n', 0),
(6427, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(6428, 96, '        repaint();\n', 0),
(6429, 97, '    }\n', 0),
(6430, 98, '\n', 0),
(6431, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(6432, 100, '\n', 0),
(6433, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(6434, 102, ' \n', 0),
(6435, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(6436, 104, ' \n', 0),
(6437, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(6438, 106, '        repaint();\n', 0),
(6439, 107, '    }\n', 0),
(6440, 108, ' \n', 0),
(6441, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(6442, 110, '        repaint();\n', 0),
(6443, 111, '    }\n', 0),
(6444, 112, '  \n', 0),
(6445, 113, '    public void destroy() {\n', 6),
(6446, 114, '        removeMouseListener(this);\n', 2),
(6447, 115, '        removeMouseMotionListener(this);\n', 2),
(6448, 116, '    }\n', 0),
(6449, 117, '\n', 0),
(6450, 118, '    public String getAppletInfo() {\n', 4),
(6451, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(6452, 120, '    }\n', 0),
(6453, 121, '}\n', 0),
(6454, 0, 'import java.awt.event.*;\n', 0),
(6455, 1, 'import java.awt.*;\n', 0),
(6456, 2, '\n', 0),
(6457, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(6458, 4, '\n', 0),
(6459, 5, '    private int mx, my;\n', 4),
(6460, 6, '    private Dimension size;\n', 2),
(6461, 7, '    private int onaroll;\n', 2),
(6462, 8, '\n', 0),
(6463, 9, '    public void init() {\n', 6),
(6464, 10, '        onaroll = 0;\n', 5),
(6465, 11, '        setSize(500, 500);\n', 5),
(6466, 12, '        size = getSize();\n', 2),
(6467, 13, '        addMouseListener(this);\n', 2),
(6468, 14, '        addMouseMotionListener(this);\n', 2),
(6469, 15, '        addComponentListener(this);\n', 4),
(6470, 16, '    }\n', 0),
(6471, 17, '\n', 0),
(6472, 18, '    public void update(Graphics g) {\n', 6),
(6473, 19, '        Dimension newSize = getSize();\n', 4),
(6474, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(6475, 21, '            g.setColor(getBackground());\n', 6),
(6476, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(6477, 23, '        } else {\n', 2),
(6478, 24, '            size = newSize;\n', 4),
(6479, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(6480, 26, '        } // Calculate new position\n', 11),
(6481, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(6482, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(6483, 29, '        paint(g);\n', 0),
(6484, 30, '    }\n', 0),
(6485, 31, '  \n', 0),
(6486, 32, '    public void paint(Graphics g) {\n', 6),
(6487, 33, '        g.setColor(Color.black);\n', 6),
(6488, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(6489, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(6490, 36, '    }\n', 0),
(6491, 37, '\n', 0),
(6492, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(6493, 39, '\n', 0),
(6494, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(6495, 41, '        e.consume();\n', 6),
(6496, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(6497, 43, '            repaint();\n', 0),
(6498, 44, '        }\n', 0),
(6499, 45, '    }\n', 0),
(6500, 46, '\n', 0),
(6501, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(6502, 48, '        int x = e.getX();\n', 8),
(6503, 49, '        int y = e.getY();\n', 8),
(6504, 50, '        e.consume();\n', 6),
(6505, 51, '        requestFocus();\n', 0),
(6506, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(6507, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(6508, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(6509, 55, '                case 0:\n', 5),
(6510, 56, '                    play(getCodeBase(), \n', 2),
(6511, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(6512, 58, '                    break;\n', 2),
(6513, 59, '                case 1:\n', 5),
(6514, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(6515, 61, '                    break;\n', 2),
(6516, 62, '                case 2:\n', 5),
(6517, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(6518, 64, '                    break;\n', 2),
(6519, 65, '                case 3:\n', 5),
(6520, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(6521, 67, '                    break;\n', 2),
(6522, 68, '                }\n', 0),
(6523, 69, '                onaroll++;\n', 2),
(6524, 70, '                if (onaroll > 5) {\n', 7),
(6525, 72, '                } else {\n', 2),
(6526, 74, '                }\n', 0),
(6527, 75, '            } else {   //first hit\n', 0),
(6528, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(6529, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(6530, 78, '                onaroll = 1;\n', 5),
(6531, 79, '            }\n', 0),
(6532, 80, '        } else {   //miss\n', 0),
(6533, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(6534, 82, '			\n', 0),
(6535, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(6536, 84, '            onaroll = 0;\n', 5),
(6537, 85, '        }\n', 0),
(6538, 86, '        repaint();\n', 0),
(6539, 87, '    }\n', 0),
(6540, 88, '\n', 0),
(6541, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(6542, 90, '\n', 0),
(6543, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(6544, 92, '        repaint();\n', 0),
(6545, 93, '    }\n', 0),
(6546, 94, '\n', 0),
(6547, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(6548, 96, '        repaint();\n', 0),
(6549, 97, '    }\n', 0),
(6550, 98, '\n', 0),
(6551, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(6552, 100, '\n', 0),
(6553, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(6554, 102, ' \n', 0),
(6555, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(6556, 104, ' \n', 0),
(6557, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(6558, 106, '        repaint();\n', 0),
(6559, 107, '    }\n', 0),
(6560, 108, ' \n', 0),
(6561, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(6562, 110, '        repaint();\n', 0),
(6563, 111, '    }\n', 0),
(6564, 112, '  \n', 0),
(6565, 113, '    public void destroy() {\n', 6),
(6566, 114, '        removeMouseListener(this);\n', 2),
(6567, 115, '        removeMouseMotionListener(this);\n', 2),
(6568, 116, '    }\n', 0),
(6569, 117, '\n', 0),
(6570, 118, '    public String getAppletInfo() {\n', 4),
(6571, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(6572, 120, '    }\n', 0),
(6573, 121, '}\n', 0),
(6574, 0, 'import java.util.Scanner;\r\n', 0),
(6575, 1, ' class Years{\r\n', 2),
(6576, 2, '   public int getYear(){\r\n', 4),
(6577, 3, '	int year;\r\n', 0),
(6578, 4, '	String enteredYear;\r\n', 0),
(6579, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(6580, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(6581, 7, '	enteredYear = sc.next();\r\n', 8),
(6582, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(6583, 9, '	return year;\r\n', 2),
(6584, 10, '   }\r\n', 0),
(6585, 11, ' }\r\n', 0),
(6586, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6587, 13, ' class Months extends Years{\r\n', 4),
(6588, 14, '   public int getMonth(){\r\n', 4),
(6589, 15, '	int month;\r\n', 0),
(6590, 16, '	String enteredMonthNumber;\r\n', 0),
(6591, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(6592, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(6593, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(6594, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(6595, 21, '	return month;\r\n', 2),
(6596, 22, '   }\r\n', 0),
(6597, 23, ' }\r\n', 0),
(6598, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6599, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(6600, 26, ' static int numDays = 0;\r\n', 7),
(6601, 27, ' public static void main(String[] args) {\r\n', 8),
(6602, 28, '   int year;\r\n', 0),
(6603, 29, '   Months m = new Months();\r\n', 4),
(6604, 30, '   int month = m.getMonth();\r\n', 8),
(6605, 31, '   \r\n', 0),
(6606, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(6607, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(6608, 34, '   }\r\n', 0),
(6609, 35, '   else {\r\n', 2),
(6610, 36, '    switch (month) {\r\n', 2),
(6611, 37, '      case 1:\r\n', 5),
(6612, 38, '      case 3:\r\n', 5),
(6613, 39, '      case 5:\r\n', 5),
(6614, 40, '      case 7:\r\n', 5),
(6615, 41, '      case 8:\r\n', 5),
(6616, 42, '      case 10:\r\n', 5),
(6617, 43, '      case 12:\r\n', 5),
(6618, 44, '        numDays = 31;\r\n', 5),
(6619, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(6620, 46, '        break;\r\n', 2),
(6621, 47, '      case 4:\r\n', 5),
(6622, 48, '      case 6:\r\n', 5),
(6623, 49, '      case 9:\r\n', 5),
(6624, 50, '      case 11:\r\n', 5),
(6625, 51, '       numDays = 30;\r\n', 5),
(6626, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(6627, 53, '       break;\r\n', 2),
(6628, 54, '      case 2:\r\n', 5),
(6629, 55, '       year = m.getYear();\r\n', 8),
(6630, 56, '       if(year < 1) {\r\n', 5),
(6631, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(6632, 58, '       }\r\n', 0),
(6633, 59, '       else{\r\n', 2),
(6634, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(6635, 61, '         numDays = 29;\r\n', 5),
(6636, 62, '		 if(year > 2020){\r\n', 7),
(6637, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(6638, 64, '         }\r\n', 0),
(6639, 65, '         else{\r\n', 2),
(6640, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(6641, 67, '         }\r\n', 0),
(6642, 68, '        }//if at line 61\r\n', 0),
(6643, 69, '        else{\r\n', 2),
(6644, 70, '         numDays = 28;\r\n', 5),
(6645, 71, '         if (year > 2020){\r\n', 7),
(6646, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(6647, 73, '         }\r\n', 0),
(6648, 74, '         else{\r\n', 2),
(6649, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(6650, 76, '         }\r\n', 0),
(6651, 77, '         break;  \r\n', 2),
(6652, 78, '        }//else at line 70\r\n', 2),
(6653, 79, '       }//else at line 60\r\n', 2),
(6654, 80, '    }//switch at line 37\r\n', 2),
(6655, 81, '   }//else at line 36\r\n', 2),
(6656, 82, '  }//method\r\n', 2),
(6657, 83, ' }//class', 2),
(6658, 0, 'class Pattern{ \r\n', 2),
(6659, 1, 'public static void main(String[] args) { \r\n', 8),
(6660, 2, '	 int rows = 5;\r\n', 5),
(6661, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(6662, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(6663, 5, '	 System.out.print(j + " "); \r\n', 13),
(6664, 6, '	 } \r\n', 0),
(6665, 7, '	 System.out.println(""); \r\n', 11),
(6666, 8, ' 	} \r\n', 0),
(6667, 9, ' 	} \r\n', 0),
(6668, 10, '} ', 0),
(6669, 0, 'import java.util.Scanner;\r\n', 0),
(6670, 1, ' class Years{\r\n', 2),
(6671, 2, '   public int getYear(){\r\n', 4),
(6672, 3, '	int year;\r\n', 0),
(6673, 4, '	String enteredYear;\r\n', 0),
(6674, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(6675, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(6676, 7, '	enteredYear = sc.next();\r\n', 8),
(6677, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(6678, 9, '	return year;\r\n', 2),
(6679, 10, '   }\r\n', 0),
(6680, 11, ' }\r\n', 0),
(6681, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6682, 13, ' class Months extends Years{\r\n', 4),
(6683, 14, '   public int getMonth(){\r\n', 4),
(6684, 15, '	int month;\r\n', 0),
(6685, 16, '	String enteredMonthNumber;\r\n', 0),
(6686, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(6687, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(6688, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(6689, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(6690, 21, '	return month;\r\n', 2),
(6691, 22, '   }\r\n', 0),
(6692, 23, ' }\r\n', 0),
(6693, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6694, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(6695, 26, ' static int numDays = 0;\r\n', 7),
(6696, 27, ' public static void main(String[] args) {\r\n', 8),
(6697, 28, '   int year;\r\n', 0),
(6698, 29, '   Months m = new Months();\r\n', 4),
(6699, 30, '   int month = m.getMonth();\r\n', 8),
(6700, 31, '   \r\n', 0),
(6701, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(6702, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(6703, 34, '   }\r\n', 0),
(6704, 35, '   else {\r\n', 2),
(6705, 36, '    switch (month) {\r\n', 2),
(6706, 37, '      case 1:\r\n', 5),
(6707, 38, '      case 3:\r\n', 5),
(6708, 39, '      case 5:\r\n', 5),
(6709, 40, '      case 7:\r\n', 5),
(6710, 41, '      case 8:\r\n', 5),
(6711, 42, '      case 10:\r\n', 5),
(6712, 43, '      case 12:\r\n', 5),
(6713, 44, '        numDays = 31;\r\n', 5),
(6714, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(6715, 46, '        break;\r\n', 2),
(6716, 47, '      case 4:\r\n', 5),
(6717, 48, '      case 6:\r\n', 5),
(6718, 49, '      case 9:\r\n', 5),
(6719, 50, '      case 11:\r\n', 5),
(6720, 51, '       numDays = 30;\r\n', 5),
(6721, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(6722, 53, '       break;\r\n', 2),
(6723, 54, '      case 2:\r\n', 5),
(6724, 55, '       year = m.getYear();\r\n', 8),
(6725, 56, '       if(year < 1) {\r\n', 5),
(6726, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(6727, 58, '       }\r\n', 0),
(6728, 59, '       else{\r\n', 2),
(6729, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(6730, 61, '         numDays = 29;\r\n', 5),
(6731, 62, '		 if(year > 2020){\r\n', 7),
(6732, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(6733, 64, '         }\r\n', 0),
(6734, 65, '         else{\r\n', 2),
(6735, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(6736, 67, '         }\r\n', 0),
(6737, 68, '        }//if at line 61\r\n', 0),
(6738, 69, '        else{\r\n', 2),
(6739, 70, '         numDays = 28;\r\n', 5),
(6740, 71, '         if (year > 2020){\r\n', 7),
(6741, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(6742, 73, '         }\r\n', 0),
(6743, 74, '         else{\r\n', 2),
(6744, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(6745, 76, '         }\r\n', 0),
(6746, 77, '         break;  \r\n', 2),
(6747, 78, '        }//else at line 70\r\n', 2),
(6748, 79, '       }//else at line 60\r\n', 2),
(6749, 80, '    }//switch at line 37\r\n', 2),
(6750, 81, '   }//else at line 36\r\n', 2),
(6751, 82, '  }//method\r\n', 2),
(6752, 83, ' }//class', 2),
(6753, 0, 'class HelloWorld { \r\n', 2),
(6754, 1, '	public static void main(String args[]) \r\n', 8),
(6755, 2, '	{ \r\n', 0),
(6756, 3, '		System.out.println("Hello World"); \r\n', 11),
(6757, 0, 'import java.util.Scanner;\r\n', 0),
(6758, 4, '	} \r\n', 0),
(6759, 1, ' class Years{\r\n', 2),
(6760, 5, '} \r\n', 0),
(6761, 2, '   public int getYear(){\r\n', 4),
(6762, 0, 'import java.awt.event.*;\n', 0),
(6763, 1, 'import java.awt.*;\n', 0),
(6764, 3, '	int year;\r\n', 0),
(6765, 2, '\n', 0),
(6766, 4, '	String enteredYear;\r\n', 0),
(6767, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(6768, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(6769, 4, '\n', 0),
(6770, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(6771, 5, '    private int mx, my;\n', 4),
(6772, 7, '	enteredYear = sc.next();\r\n', 8),
(6773, 6, '    private Dimension size;\n', 2),
(6774, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(6775, 7, '    private int onaroll;\n', 2),
(6776, 9, '	return year;\r\n', 2),
(6777, 8, '\n', 0),
(6778, 10, '   }\r\n', 0),
(6779, 9, '    public void init() {\n', 6),
(6780, 11, ' }\r\n', 0),
(6781, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6782, 10, '        onaroll = 0;\n', 5),
(6783, 13, ' class Months extends Years{\r\n', 4),
(6784, 11, '        setSize(500, 500);\n', 5),
(6785, 14, '   public int getMonth(){\r\n', 4),
(6786, 12, '        size = getSize();\n', 2),
(6787, 15, '	int month;\r\n', 0),
(6788, 13, '        addMouseListener(this);\n', 2),
(6789, 16, '	String enteredMonthNumber;\r\n', 0),
(6790, 14, '        addMouseMotionListener(this);\n', 2),
(6791, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(6792, 15, '        addComponentListener(this);\n', 4),
(6793, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(6794, 16, '    }\n', 0),
(6795, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(6796, 17, '\n', 0),
(6797, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(6798, 21, '	return month;\r\n', 2),
(6799, 18, '    public void update(Graphics g) {\n', 6),
(6800, 22, '   }\r\n', 0),
(6801, 19, '        Dimension newSize = getSize();\n', 4),
(6802, 23, ' }\r\n', 0),
(6803, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(6804, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6805, 21, '            g.setColor(getBackground());\n', 6),
(6806, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(6807, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(6808, 26, ' static int numDays = 0;\r\n', 7),
(6809, 23, '        } else {\n', 2),
(6810, 27, ' public static void main(String[] args) {\r\n', 8),
(6811, 24, '            size = newSize;\n', 4),
(6812, 28, '   int year;\r\n', 0),
(6813, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(6814, 26, '        } // Calculate new position\n', 11),
(6815, 29, '   Months m = new Months();\r\n', 4),
(6816, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(6817, 30, '   int month = m.getMonth();\r\n', 8),
(6818, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(6819, 31, '   \r\n', 0),
(6820, 29, '        paint(g);\n', 0),
(6821, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(6822, 30, '    }\n', 0),
(6823, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(6824, 31, '  \n', 0),
(6825, 34, '   }\r\n', 0),
(6826, 32, '    public void paint(Graphics g) {\n', 6),
(6827, 35, '   else {\r\n', 2),
(6828, 33, '        g.setColor(Color.black);\n', 6),
(6829, 36, '    switch (month) {\r\n', 2),
(6830, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(6831, 37, '      case 1:\r\n', 5),
(6832, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(6833, 38, '      case 3:\r\n', 5),
(6834, 36, '    }\n', 0),
(6835, 39, '      case 5:\r\n', 5),
(6836, 37, '\n', 0),
(6837, 40, '      case 7:\r\n', 5),
(6838, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(6839, 41, '      case 8:\r\n', 5),
(6840, 39, '\n', 0),
(6841, 42, '      case 10:\r\n', 5),
(6842, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(6843, 43, '      case 12:\r\n', 5),
(6844, 41, '        e.consume();\n', 6),
(6845, 44, '        numDays = 31;\r\n', 5),
(6846, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(6847, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(6848, 46, '        break;\r\n', 2),
(6849, 47, '      case 4:\r\n', 5),
(6850, 48, '      case 6:\r\n', 5),
(6851, 49, '      case 9:\r\n', 5),
(6852, 50, '      case 11:\r\n', 5),
(6853, 51, '       numDays = 30;\r\n', 5),
(6854, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(6855, 53, '       break;\r\n', 2),
(6856, 54, '      case 2:\r\n', 5),
(6857, 55, '       year = m.getYear();\r\n', 8),
(6858, 56, '       if(year < 1) {\r\n', 5),
(6859, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(6860, 58, '       }\r\n', 0),
(6861, 59, '       else{\r\n', 2),
(6862, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(6863, 61, '         numDays = 29;\r\n', 5),
(6864, 62, '		 if(year > 2020){\r\n', 7),
(6865, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(6866, 64, '         }\r\n', 0),
(6867, 65, '         else{\r\n', 2),
(6868, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(6869, 67, '         }\r\n', 0),
(6870, 68, '        }//if at line 61\r\n', 0),
(6871, 69, '        else{\r\n', 2),
(6872, 70, '         numDays = 28;\r\n', 5),
(6873, 71, '         if (year > 2020){\r\n', 7),
(6874, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(6875, 73, '         }\r\n', 0),
(6876, 74, '         else{\r\n', 2),
(6877, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(6878, 76, '         }\r\n', 0),
(6879, 77, '         break;  \r\n', 2),
(6880, 78, '        }//else at line 70\r\n', 2),
(6881, 79, '       }//else at line 60\r\n', 2),
(6882, 80, '    }//switch at line 37\r\n', 2),
(6883, 81, '   }//else at line 36\r\n', 2),
(6884, 82, '  }//method\r\n', 2),
(6885, 83, ' }//class', 2),
(6886, 0, 'public class RecursionExample2 {  \r\n', 9),
(6887, 1, 'static int count=0;  \r\n', 7),
(6888, 2, 'public int p(){  \r\n', 4),
(6889, 3, 'count++;  \r\n', 2),
(6890, 4, 'if(count<=5){  \r\n', 9),
(6891, 5, 'System.out.println("hello "+count);  \r\n', 8),
(6892, 6, 'public int p();  \r\n', 4),
(6893, 7, '}  \r\n', 0),
(6894, 8, '}  \r\n', 0),
(6895, 9, 'public static void main(String[] args) {  \r\n', 8),
(6896, 10, 'p();  \r\n', 0),
(6897, 11, '}  \r\n', 0),
(6898, 12, '}  ', 0),
(6899, 0, 'import java.awt.event.*;\n', 0),
(6900, 1, 'import java.awt.*;\n', 0),
(6901, 2, '\n', 0),
(6902, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(6903, 4, '\n', 0),
(6904, 5, '    private int mx, my;\n', 4),
(6905, 6, '    private Dimension size;\n', 2),
(6906, 7, '    private int onaroll;\n', 2),
(6907, 8, '\n', 0),
(6908, 9, '    public void init() {\n', 6),
(6909, 10, '        onaroll = 0;\n', 5),
(6910, 11, '        setSize(500, 500);\n', 5),
(6911, 12, '        size = getSize();\n', 2),
(6912, 13, '        addMouseListener(this);\n', 2),
(6913, 14, '        addMouseMotionListener(this);\n', 2),
(6914, 15, '        addComponentListener(this);\n', 4),
(6915, 16, '    }\n', 0),
(6916, 17, '\n', 0),
(6917, 18, '    public void update(Graphics g) {\n', 6),
(6918, 19, '        Dimension newSize = getSize();\n', 4),
(6919, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(6920, 21, '            g.setColor(getBackground());\n', 6),
(6921, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(6922, 23, '        } else {\n', 2),
(6923, 24, '            size = newSize;\n', 4),
(6924, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(6925, 26, '        } // Calculate new position\n', 11),
(6926, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(6927, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(6928, 29, '        paint(g);\n', 0),
(6929, 30, '    }\n', 0),
(6930, 31, '  \n', 0),
(6931, 32, '    public void paint(Graphics g) {\n', 6),
(6932, 33, '        g.setColor(Color.black);\n', 6),
(6933, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(6934, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(6935, 36, '    }\n', 0),
(6936, 37, '\n', 0),
(6937, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(6938, 39, '\n', 0),
(6939, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(6940, 41, '        e.consume();\n', 6),
(6941, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(6942, 43, '            repaint();\n', 0),
(6943, 44, '        }\n', 0),
(6944, 45, '    }\n', 0),
(6945, 46, '\n', 0),
(6946, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(6947, 48, '        int x = e.getX();\n', 8),
(6948, 49, '        int y = e.getY();\n', 8),
(6949, 50, '        e.consume();\n', 6),
(6950, 51, '        requestFocus();\n', 0),
(6951, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(6952, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(6953, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(6954, 55, '                case 0:\n', 5),
(6955, 56, '                    play(getCodeBase(), \n', 2),
(6956, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(6957, 58, '                    break;\n', 2),
(6958, 59, '                case 1:\n', 5),
(6959, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(6960, 61, '                    break;\n', 2),
(6961, 62, '                case 2:\n', 5),
(6962, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(6963, 64, '                    break;\n', 2),
(6964, 65, '                case 3:\n', 5),
(6965, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(6966, 67, '                    break;\n', 2),
(6967, 68, '                }\n', 0),
(6968, 69, '                onaroll++;\n', 2),
(6969, 70, '                if (onaroll > 5) {\n', 7),
(6970, 72, '                } else {\n', 2),
(6971, 74, '                }\n', 0),
(6972, 75, '            } else {   //first hit\n', 0),
(6973, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(6974, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(6975, 78, '                onaroll = 1;\n', 5),
(6976, 79, '            }\n', 0),
(6977, 80, '        } else {   //miss\n', 0),
(6978, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(6979, 82, '			\n', 0),
(6980, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(6981, 84, '            onaroll = 0;\n', 5),
(6982, 85, '        }\n', 0),
(6983, 86, '        repaint();\n', 0),
(6984, 87, '    }\n', 0),
(6985, 88, '\n', 0),
(6986, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(6987, 90, '\n', 0),
(6988, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(6989, 92, '        repaint();\n', 0),
(6990, 93, '    }\n', 0),
(6991, 94, '\n', 0),
(6992, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(6993, 96, '        repaint();\n', 0),
(6994, 97, '    }\n', 0),
(6995, 98, '\n', 0),
(6996, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(6997, 100, '\n', 0),
(6998, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(6999, 102, ' \n', 0),
(7000, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(7001, 104, ' \n', 0),
(7002, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(7003, 106, '        repaint();\n', 0),
(7004, 107, '    }\n', 0),
(7005, 108, ' \n', 0),
(7006, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(7007, 110, '        repaint();\n', 0),
(7008, 111, '    }\n', 0),
(7009, 112, '  \n', 0),
(7010, 113, '    public void destroy() {\n', 6),
(7011, 114, '        removeMouseListener(this);\n', 2),
(7012, 115, '        removeMouseMotionListener(this);\n', 2),
(7013, 116, '    }\n', 0),
(7014, 117, '\n', 0),
(7015, 118, '    public String getAppletInfo() {\n', 4),
(7016, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(7017, 120, '    }\n', 0),
(7018, 121, '}\n', 0),
(7019, 0, 'import java.awt.event.*;\n', 0),
(7020, 1, 'import java.awt.*;\n', 0),
(7021, 2, '\n', 0),
(7022, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(7023, 4, '\n', 0),
(7024, 5, '    private int mx, my;\n', 4),
(7025, 6, '    private Dimension size;\n', 2),
(7026, 7, '    private int onaroll;\n', 2),
(7027, 8, '\n', 0),
(7028, 9, '    public void init() {\n', 6),
(7029, 10, '        onaroll = 0;\n', 5),
(7030, 11, '        setSize(500, 500);\n', 5),
(7031, 12, '        size = getSize();\n', 2),
(7032, 13, '        addMouseListener(this);\n', 2),
(7033, 14, '        addMouseMotionListener(this);\n', 2),
(7034, 15, '        addComponentListener(this);\n', 4),
(7035, 16, '    }\n', 0),
(7036, 17, '\n', 0),
(7037, 18, '    public void update(Graphics g) {\n', 6),
(7038, 19, '        Dimension newSize = getSize();\n', 4),
(7039, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(7040, 21, '            g.setColor(getBackground());\n', 6),
(7041, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(7042, 23, '        } else {\n', 2),
(7043, 24, '            size = newSize;\n', 4),
(7044, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(7045, 26, '        } // Calculate new position\n', 11),
(7046, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(7047, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(7048, 29, '        paint(g);\n', 0),
(7049, 30, '    }\n', 0),
(7050, 31, '  \n', 0),
(7051, 32, '    public void paint(Graphics g) {\n', 6),
(7052, 33, '        g.setColor(Color.black);\n', 6),
(7053, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(7054, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(7055, 36, '    }\n', 0),
(7056, 37, '\n', 0),
(7057, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(7058, 39, '\n', 0),
(7059, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(7060, 41, '        e.consume();\n', 6),
(7061, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(7062, 43, '            repaint();\n', 0),
(7063, 44, '        }\n', 0),
(7064, 45, '    }\n', 0),
(7065, 46, '\n', 0),
(7066, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(7067, 48, '        int x = e.getX();\n', 8),
(7068, 49, '        int y = e.getY();\n', 8),
(7069, 50, '        e.consume();\n', 6),
(7070, 51, '        requestFocus();\n', 0),
(7071, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(7072, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(7073, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(7074, 55, '                case 0:\n', 5),
(7075, 56, '                    play(getCodeBase(), \n', 2),
(7076, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(7077, 58, '                    break;\n', 2),
(7078, 59, '                case 1:\n', 5),
(7079, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(7080, 61, '                    break;\n', 2),
(7081, 62, '                case 2:\n', 5),
(7082, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(7083, 64, '                    break;\n', 2),
(7084, 65, '                case 3:\n', 5),
(7085, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(7086, 67, '                    break;\n', 2),
(7087, 68, '                }\n', 0),
(7088, 69, '                onaroll++;\n', 2),
(7089, 70, '                if (onaroll > 5) {\n', 7),
(7090, 72, '                } else {\n', 2),
(7091, 74, '                }\n', 0),
(7092, 75, '            } else {   //first hit\n', 0),
(7093, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(7094, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(7095, 78, '                onaroll = 1;\n', 5),
(7096, 79, '            }\n', 0),
(7097, 80, '        } else {   //miss\n', 0),
(7098, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(7099, 82, '			\n', 0),
(7100, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(7101, 84, '            onaroll = 0;\n', 5),
(7102, 85, '        }\n', 0),
(7103, 86, '        repaint();\n', 0),
(7104, 87, '    }\n', 0),
(7105, 88, '\n', 0),
(7106, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(7107, 90, '\n', 0),
(7108, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(7109, 92, '        repaint();\n', 0),
(7110, 93, '    }\n', 0),
(7111, 94, '\n', 0),
(7112, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(7113, 96, '        repaint();\n', 0),
(7114, 97, '    }\n', 0),
(7115, 98, '\n', 0),
(7116, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(7117, 100, '\n', 0),
(7118, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(7119, 102, ' \n', 0),
(7120, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(7121, 104, ' \n', 0),
(7122, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(7123, 106, '        repaint();\n', 0),
(7124, 107, '    }\n', 0),
(7125, 108, ' \n', 0),
(7126, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(7127, 110, '        repaint();\n', 0),
(7128, 111, '    }\n', 0),
(7129, 112, '  \n', 0),
(7130, 113, '    public void destroy() {\n', 6),
(7131, 114, '        removeMouseListener(this);\n', 2),
(7132, 115, '        removeMouseMotionListener(this);\n', 2),
(7133, 116, '    }\n', 0),
(7134, 117, '\n', 0),
(7135, 118, '    public String getAppletInfo() {\n', 4),
(7136, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(7137, 120, '    }\n', 0),
(7138, 121, '}\n', 0),
(7139, 0, 'import java.util.Scanner;\r\n', 0),
(7140, 1, ' class Years{\r\n', 2),
(7141, 2, '   public int getYear(){\r\n', 4),
(7142, 3, '	int year;\r\n', 0),
(7143, 4, '	String enteredYear;\r\n', 0),
(7144, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(7145, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(7146, 7, '	enteredYear = sc.next();\r\n', 8),
(7147, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(7148, 9, '	return year;\r\n', 2),
(7149, 10, '   }\r\n', 0),
(7150, 11, ' }\r\n', 0),
(7151, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7152, 13, ' class Months extends Years{\r\n', 4),
(7153, 14, '   public int getMonth(){\r\n', 4),
(7154, 15, '	int month;\r\n', 0),
(7155, 16, '	String enteredMonthNumber;\r\n', 0),
(7156, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(7157, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(7158, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(7159, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(7160, 21, '	return month;\r\n', 2),
(7161, 22, '   }\r\n', 0),
(7162, 23, ' }\r\n', 0),
(7163, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7164, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(7165, 26, ' static int numDays = 0;\r\n', 7),
(7166, 27, ' public static void main(String[] args) {\r\n', 8),
(7167, 28, '   int year;\r\n', 0),
(7168, 29, '   Months m = new Months();\r\n', 4),
(7169, 30, '   int month = m.getMonth();\r\n', 8),
(7170, 31, '   \r\n', 0),
(7171, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(7172, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(7173, 34, '   }\r\n', 0),
(7174, 35, '   else {\r\n', 2),
(7175, 36, '    switch (month) {\r\n', 2),
(7176, 37, '      case 1:\r\n', 5),
(7177, 38, '      case 3:\r\n', 5),
(7178, 39, '      case 5:\r\n', 5),
(7179, 40, '      case 7:\r\n', 5),
(7180, 41, '      case 8:\r\n', 5),
(7181, 42, '      case 10:\r\n', 5),
(7182, 43, '      case 12:\r\n', 5),
(7183, 44, '        numDays = 31;\r\n', 5),
(7184, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(7185, 46, '        break;\r\n', 2),
(7186, 47, '      case 4:\r\n', 5),
(7187, 48, '      case 6:\r\n', 5),
(7188, 49, '      case 9:\r\n', 5),
(7189, 50, '      case 11:\r\n', 5),
(7190, 51, '       numDays = 30;\r\n', 5),
(7191, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(7192, 53, '       break;\r\n', 2),
(7193, 54, '      case 2:\r\n', 5),
(7194, 55, '       year = m.getYear();\r\n', 8),
(7195, 56, '       if(year < 1) {\r\n', 5),
(7196, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(7197, 58, '       }\r\n', 0),
(7198, 59, '       else{\r\n', 2);
INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(7199, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(7200, 61, '         numDays = 29;\r\n', 5),
(7201, 62, '		 if(year > 2020){\r\n', 7),
(7202, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(7203, 64, '         }\r\n', 0),
(7204, 65, '         else{\r\n', 2),
(7205, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(7206, 67, '         }\r\n', 0),
(7207, 68, '        }//if at line 61\r\n', 0),
(7208, 69, '        else{\r\n', 2),
(7209, 70, '         numDays = 28;\r\n', 5),
(7210, 71, '         if (year > 2020){\r\n', 7),
(7211, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(7212, 73, '         }\r\n', 0),
(7213, 74, '         else{\r\n', 2),
(7214, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(7215, 76, '         }\r\n', 0),
(7216, 77, '         break;  \r\n', 2),
(7217, 78, '        }//else at line 70\r\n', 2),
(7218, 79, '       }//else at line 60\r\n', 2),
(7219, 80, '    }//switch at line 37\r\n', 2),
(7220, 81, '   }//else at line 36\r\n', 2),
(7221, 82, '  }//method\r\n', 2),
(7222, 83, ' }//class', 2),
(7223, 0, 'class Pattern{ \r\n', 2),
(7224, 1, 'public static void main(String[] args) { \r\n', 8),
(7225, 2, '	 int rows = 5;\r\n', 5),
(7226, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(7227, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(7228, 5, '	 System.out.print(j + " "); \r\n', 13),
(7229, 6, '	 } \r\n', 0),
(7230, 7, '	 System.out.println(""); \r\n', 11),
(7231, 8, ' 	} \r\n', 0),
(7232, 9, ' 	} \r\n', 0),
(7233, 10, '} ', 0),
(7234, 0, 'import java.util.Scanner;\r\n', 0),
(7235, 1, ' class Years{\r\n', 2),
(7236, 2, '   public int getYear(){\r\n', 4),
(7237, 3, '	int year;\r\n', 0),
(7238, 4, '	String enteredYear;\r\n', 0),
(7239, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(7240, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(7241, 7, '	enteredYear = sc.next();\r\n', 8),
(7242, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(7243, 9, '	return year;\r\n', 2),
(7244, 10, '   }\r\n', 0),
(7245, 11, ' }\r\n', 0),
(7246, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7247, 13, ' class Months extends Years{\r\n', 4),
(7248, 14, '   public int getMonth(){\r\n', 4),
(7249, 15, '	int month;\r\n', 0),
(7250, 16, '	String enteredMonthNumber;\r\n', 0),
(7251, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(7252, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(7253, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(7254, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(7255, 21, '	return month;\r\n', 2),
(7256, 22, '   }\r\n', 0),
(7257, 23, ' }\r\n', 0),
(7258, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7259, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(7260, 26, ' static int numDays = 0;\r\n', 7),
(7261, 27, ' public static void main(String[] args) {\r\n', 8),
(7262, 28, '   int year;\r\n', 0),
(7263, 29, '   Months m = new Months();\r\n', 4),
(7264, 30, '   int month = m.getMonth();\r\n', 8),
(7265, 31, '   \r\n', 0),
(7266, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(7267, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(7268, 34, '   }\r\n', 0),
(7269, 35, '   else {\r\n', 2),
(7270, 36, '    switch (month) {\r\n', 2),
(7271, 37, '      case 1:\r\n', 5),
(7272, 38, '      case 3:\r\n', 5),
(7273, 39, '      case 5:\r\n', 5),
(7274, 40, '      case 7:\r\n', 5),
(7275, 41, '      case 8:\r\n', 5),
(7276, 42, '      case 10:\r\n', 5),
(7277, 43, '      case 12:\r\n', 5),
(7278, 44, '        numDays = 31;\r\n', 5),
(7279, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(7280, 46, '        break;\r\n', 2),
(7281, 47, '      case 4:\r\n', 5),
(7282, 48, '      case 6:\r\n', 5),
(7283, 49, '      case 9:\r\n', 5),
(7284, 50, '      case 11:\r\n', 5),
(7285, 51, '       numDays = 30;\r\n', 5),
(7286, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(7287, 53, '       break;\r\n', 2),
(7288, 54, '      case 2:\r\n', 5),
(7289, 55, '       year = m.getYear();\r\n', 8),
(7290, 56, '       if(year < 1) {\r\n', 5),
(7291, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(7292, 58, '       }\r\n', 0),
(7293, 59, '       else{\r\n', 2),
(7294, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(7295, 61, '         numDays = 29;\r\n', 5),
(7296, 62, '		 if(year > 2020){\r\n', 7),
(7297, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(7298, 64, '         }\r\n', 0),
(7299, 65, '         else{\r\n', 2),
(7300, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(7301, 67, '         }\r\n', 0),
(7302, 68, '        }//if at line 61\r\n', 0),
(7303, 69, '        else{\r\n', 2),
(7304, 70, '         numDays = 28;\r\n', 5),
(7305, 71, '         if (year > 2020){\r\n', 7),
(7306, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(7307, 73, '         }\r\n', 0),
(7308, 74, '         else{\r\n', 2),
(7309, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(7310, 76, '         }\r\n', 0),
(7311, 77, '         break;  \r\n', 2),
(7312, 78, '        }//else at line 70\r\n', 2),
(7313, 79, '       }//else at line 60\r\n', 2),
(7314, 80, '    }//switch at line 37\r\n', 2),
(7315, 81, '   }//else at line 36\r\n', 2),
(7316, 82, '  }//method\r\n', 2),
(7317, 83, ' }//class', 2),
(7318, 0, 'class HelloWorld { \r\n', 2),
(7319, 1, '	public static void main(String args[]) \r\n', 8),
(7320, 2, '	{ \r\n', 0),
(7321, 3, '		System.out.println("Hello World"); \r\n', 11),
(7322, 4, '	} \r\n', 0),
(7323, 5, '} \r\n', 0),
(7324, 0, 'import java.awt.event.*;\n', 0),
(7325, 1, 'import java.awt.*;\n', 0),
(7326, 2, '\n', 0),
(7327, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(7328, 4, '\n', 0),
(7329, 5, '    private int mx, my;\n', 4),
(7330, 6, '    private Dimension size;\n', 2),
(7331, 7, '    private int onaroll;\n', 2),
(7332, 8, '\n', 0),
(7333, 9, '    public void init() {\n', 6),
(7334, 10, '        onaroll = 0;\n', 5),
(7335, 11, '        setSize(500, 500);\n', 5),
(7336, 12, '        size = getSize();\n', 2),
(7337, 13, '        addMouseListener(this);\n', 2),
(7338, 14, '        addMouseMotionListener(this);\n', 2),
(7339, 15, '        addComponentListener(this);\n', 4),
(7340, 16, '    }\n', 0),
(7341, 17, '\n', 0),
(7342, 18, '    public void update(Graphics g) {\n', 6),
(7343, 19, '        Dimension newSize = getSize();\n', 4),
(7344, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(7345, 21, '            g.setColor(getBackground());\n', 6),
(7346, 0, 'import java.util.Scanner;\r\n', 0),
(7347, 1, ' class Years{\r\n', 2),
(7348, 2, '   public int getYear(){\r\n', 4),
(7349, 3, '	int year;\r\n', 0),
(7350, 4, '	String enteredYear;\r\n', 0),
(7351, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(7352, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(7353, 7, '	enteredYear = sc.next();\r\n', 8),
(7354, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(7355, 9, '	return year;\r\n', 2),
(7356, 10, '   }\r\n', 0),
(7357, 11, ' }\r\n', 0),
(7358, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7359, 13, ' class Months extends Years{\r\n', 4),
(7360, 14, '   public int getMonth(){\r\n', 4),
(7361, 15, '	int month;\r\n', 0),
(7362, 16, '	String enteredMonthNumber;\r\n', 0),
(7363, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(7364, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(7365, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(7366, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(7367, 21, '	return month;\r\n', 2),
(7368, 22, '   }\r\n', 0),
(7369, 23, ' }\r\n', 0),
(7370, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7371, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(7372, 26, ' static int numDays = 0;\r\n', 7),
(7373, 27, ' public static void main(String[] args) {\r\n', 8),
(7374, 28, '   int year;\r\n', 0),
(7375, 29, '   Months m = new Months();\r\n', 4),
(7376, 30, '   int month = m.getMonth();\r\n', 8),
(7377, 31, '   \r\n', 0),
(7378, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(7379, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(7380, 34, '   }\r\n', 0),
(7381, 35, '   else {\r\n', 2),
(7382, 36, '    switch (month) {\r\n', 2),
(7383, 37, '      case 1:\r\n', 5),
(7384, 38, '      case 3:\r\n', 5),
(7385, 39, '      case 5:\r\n', 5),
(7386, 40, '      case 7:\r\n', 5),
(7387, 41, '      case 8:\r\n', 5),
(7388, 42, '      case 10:\r\n', 5),
(7389, 43, '      case 12:\r\n', 5),
(7390, 44, '        numDays = 31;\r\n', 5),
(7391, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(7392, 46, '        break;\r\n', 2),
(7393, 47, '      case 4:\r\n', 5),
(7394, 48, '      case 6:\r\n', 5),
(7395, 49, '      case 9:\r\n', 5),
(7396, 50, '      case 11:\r\n', 5),
(7397, 51, '       numDays = 30;\r\n', 5),
(7398, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(7399, 53, '       break;\r\n', 2),
(7400, 54, '      case 2:\r\n', 5),
(7401, 55, '       year = m.getYear();\r\n', 8),
(7402, 56, '       if(year < 1) {\r\n', 5),
(7403, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(7404, 58, '       }\r\n', 0),
(7405, 59, '       else{\r\n', 2),
(7406, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(7407, 61, '         numDays = 29;\r\n', 5),
(7408, 62, '		 if(year > 2020){\r\n', 7),
(7409, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(7410, 64, '         }\r\n', 0),
(7411, 65, '         else{\r\n', 2),
(7412, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(7413, 67, '         }\r\n', 0),
(7414, 68, '        }//if at line 61\r\n', 0),
(7415, 69, '        else{\r\n', 2),
(7416, 70, '         numDays = 28;\r\n', 5),
(7417, 71, '         if (year > 2020){\r\n', 7),
(7418, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(7419, 73, '         }\r\n', 0),
(7420, 74, '         else{\r\n', 2),
(7421, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(7422, 76, '         }\r\n', 0),
(7423, 77, '         break;  \r\n', 2),
(7424, 78, '        }//else at line 70\r\n', 2),
(7425, 79, '       }//else at line 60\r\n', 2),
(7426, 80, '    }//switch at line 37\r\n', 2),
(7427, 81, '   }//else at line 36\r\n', 2),
(7428, 82, '  }//method\r\n', 2),
(7429, 83, ' }//class', 2),
(7430, 0, 'public class RecursionExample2 {  \r\n', 9),
(7431, 1, 'static int count=0;  \r\n', 7),
(7432, 2, 'public int p(){  \r\n', 4),
(7433, 3, 'count++;  \r\n', 2),
(7434, 4, 'if(count<=5){  \r\n', 9),
(7435, 5, 'System.out.println("hello "+count);  \r\n', 8),
(7436, 6, 'public int p();  \r\n', 4),
(7437, 7, '}  \r\n', 0),
(7438, 8, '}  \r\n', 0),
(7439, 9, 'public static void main(String[] args) {  \r\n', 8),
(7440, 10, 'p();  \r\n', 0),
(7441, 11, '}  \r\n', 0),
(7442, 12, '}  ', 0),
(7443, 0, 'import java.awt.event.*;\n', 0),
(7444, 1, 'import java.awt.*;\n', 0),
(7445, 2, '\n', 0),
(7446, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(7447, 4, '\n', 0),
(7448, 5, '    private int mx, my;\n', 4),
(7449, 6, '    private Dimension size;\n', 2),
(7450, 7, '    private int onaroll;\n', 2),
(7451, 8, '\n', 0),
(7452, 9, '    public void init() {\n', 6),
(7453, 10, '        onaroll = 0;\n', 5),
(7454, 11, '        setSize(500, 500);\n', 5),
(7455, 12, '        size = getSize();\n', 2),
(7456, 13, '        addMouseListener(this);\n', 2),
(7457, 14, '        addMouseMotionListener(this);\n', 2),
(7458, 15, '        addComponentListener(this);\n', 4),
(7459, 16, '    }\n', 0),
(7460, 17, '\n', 0),
(7461, 18, '    public void update(Graphics g) {\n', 6),
(7462, 19, '        Dimension newSize = getSize();\n', 4),
(7463, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(7464, 21, '            g.setColor(getBackground());\n', 6),
(7465, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(7466, 23, '        } else {\n', 2),
(7467, 24, '            size = newSize;\n', 4),
(7468, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(7469, 26, '        } // Calculate new position\n', 11),
(7470, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(7471, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(7472, 29, '        paint(g);\n', 0),
(7473, 30, '    }\n', 0),
(7474, 31, '  \n', 0),
(7475, 32, '    public void paint(Graphics g) {\n', 6),
(7476, 33, '        g.setColor(Color.black);\n', 6),
(7477, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(7478, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(7479, 36, '    }\n', 0),
(7480, 37, '\n', 0),
(7481, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(7482, 39, '\n', 0),
(7483, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(7484, 41, '        e.consume();\n', 6),
(7485, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(7486, 43, '            repaint();\n', 0),
(7487, 44, '        }\n', 0),
(7488, 45, '    }\n', 0),
(7489, 46, '\n', 0),
(7490, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(7491, 48, '        int x = e.getX();\n', 8),
(7492, 49, '        int y = e.getY();\n', 8),
(7493, 50, '        e.consume();\n', 6),
(7494, 51, '        requestFocus();\n', 0),
(7495, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(7496, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(7497, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(7498, 55, '                case 0:\n', 5),
(7499, 56, '                    play(getCodeBase(), \n', 2),
(7500, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(7501, 58, '                    break;\n', 2),
(7502, 59, '                case 1:\n', 5),
(7503, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(7504, 61, '                    break;\n', 2),
(7505, 62, '                case 2:\n', 5),
(7506, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(7507, 64, '                    break;\n', 2),
(7508, 65, '                case 3:\n', 5),
(7509, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(7510, 67, '                    break;\n', 2),
(7511, 68, '                }\n', 0),
(7512, 69, '                onaroll++;\n', 2),
(7513, 70, '                if (onaroll > 5) {\n', 7),
(7514, 72, '                } else {\n', 2),
(7515, 74, '                }\n', 0),
(7516, 75, '            } else {   //first hit\n', 0),
(7517, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(7518, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(7519, 78, '                onaroll = 1;\n', 5),
(7520, 79, '            }\n', 0),
(7521, 80, '        } else {   //miss\n', 0),
(7522, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(7523, 82, '			\n', 0),
(7524, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(7525, 84, '            onaroll = 0;\n', 5),
(7526, 85, '        }\n', 0),
(7527, 86, '        repaint();\n', 0),
(7528, 87, '    }\n', 0),
(7529, 88, '\n', 0),
(7530, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(7531, 90, '\n', 0),
(7532, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(7533, 92, '        repaint();\n', 0),
(7534, 93, '    }\n', 0),
(7535, 94, '\n', 0),
(7536, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(7537, 96, '        repaint();\n', 0),
(7538, 97, '    }\n', 0),
(7539, 98, '\n', 0),
(7540, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(7541, 100, '\n', 0),
(7542, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(7543, 102, ' \n', 0),
(7544, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(7545, 104, ' \n', 0),
(7546, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(7547, 106, '        repaint();\n', 0),
(7548, 107, '    }\n', 0),
(7549, 108, ' \n', 0),
(7550, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(7551, 110, '        repaint();\n', 0),
(7552, 111, '    }\n', 0),
(7553, 112, '  \n', 0),
(7554, 113, '    public void destroy() {\n', 6),
(7555, 114, '        removeMouseListener(this);\n', 2),
(7556, 115, '        removeMouseMotionListener(this);\n', 2),
(7557, 116, '    }\n', 0),
(7558, 117, '\n', 0),
(7559, 118, '    public String getAppletInfo() {\n', 4),
(7560, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(7561, 120, '    }\n', 0),
(7562, 121, '}\n', 0),
(7563, 0, 'import java.awt.event.*;\n', 0),
(7564, 1, 'import java.awt.*;\n', 0),
(7565, 2, '\n', 0),
(7566, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(7567, 4, '\n', 0),
(7568, 5, '    private int mx, my;\n', 4),
(7569, 6, '    private Dimension size;\n', 2),
(7570, 7, '    private int onaroll;\n', 2),
(7571, 8, '\n', 0),
(7572, 9, '    public void init() {\n', 6),
(7573, 10, '        onaroll = 0;\n', 5),
(7574, 11, '        setSize(500, 500);\n', 5),
(7575, 12, '        size = getSize();\n', 2),
(7576, 13, '        addMouseListener(this);\n', 2),
(7577, 14, '        addMouseMotionListener(this);\n', 2),
(7578, 15, '        addComponentListener(this);\n', 4),
(7579, 16, '    }\n', 0),
(7580, 17, '\n', 0),
(7581, 18, '    public void update(Graphics g) {\n', 6),
(7582, 19, '        Dimension newSize = getSize();\n', 4),
(7583, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(7584, 21, '            g.setColor(getBackground());\n', 6),
(7585, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(7586, 23, '        } else {\n', 2),
(7587, 24, '            size = newSize;\n', 4),
(7588, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(7589, 26, '        } // Calculate new position\n', 11),
(7590, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(7591, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(7592, 29, '        paint(g);\n', 0),
(7593, 30, '    }\n', 0),
(7594, 31, '  \n', 0),
(7595, 32, '    public void paint(Graphics g) {\n', 6),
(7596, 33, '        g.setColor(Color.black);\n', 6),
(7597, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(7598, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(7599, 36, '    }\n', 0),
(7600, 37, '\n', 0),
(7601, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(7602, 39, '\n', 0),
(7603, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(7604, 41, '        e.consume();\n', 6),
(7605, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(7606, 43, '            repaint();\n', 0),
(7607, 44, '        }\n', 0),
(7608, 45, '    }\n', 0),
(7609, 46, '\n', 0),
(7610, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(7611, 48, '        int x = e.getX();\n', 8),
(7612, 49, '        int y = e.getY();\n', 8),
(7613, 50, '        e.consume();\n', 6),
(7614, 51, '        requestFocus();\n', 0),
(7615, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(7616, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(7617, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(7618, 55, '                case 0:\n', 5),
(7619, 56, '                    play(getCodeBase(), \n', 2),
(7620, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(7621, 58, '                    break;\n', 2),
(7622, 59, '                case 1:\n', 5),
(7623, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(7624, 61, '                    break;\n', 2),
(7625, 62, '                case 2:\n', 5),
(7626, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(7627, 64, '                    break;\n', 2),
(7628, 65, '                case 3:\n', 5),
(7629, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(7630, 67, '                    break;\n', 2),
(7631, 68, '                }\n', 0),
(7632, 69, '                onaroll++;\n', 2),
(7633, 70, '                if (onaroll > 5) {\n', 7),
(7634, 72, '                } else {\n', 2),
(7635, 74, '                }\n', 0),
(7636, 75, '            } else {   //first hit\n', 0),
(7637, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(7638, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(7639, 78, '                onaroll = 1;\n', 5),
(7640, 79, '            }\n', 0),
(7641, 80, '        } else {   //miss\n', 0),
(7642, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(7643, 82, '			\n', 0),
(7644, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(7645, 84, '            onaroll = 0;\n', 5),
(7646, 85, '        }\n', 0),
(7647, 86, '        repaint();\n', 0),
(7648, 87, '    }\n', 0),
(7649, 88, '\n', 0),
(7650, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(7651, 90, '\n', 0),
(7652, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(7653, 92, '        repaint();\n', 0),
(7654, 93, '    }\n', 0),
(7655, 94, '\n', 0),
(7656, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(7657, 96, '        repaint();\n', 0),
(7658, 97, '    }\n', 0),
(7659, 98, '\n', 0),
(7660, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(7661, 100, '\n', 0),
(7662, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(7663, 102, ' \n', 0),
(7664, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(7665, 104, ' \n', 0),
(7666, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(7667, 106, '        repaint();\n', 0),
(7668, 107, '    }\n', 0),
(7669, 108, ' \n', 0),
(7670, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(7671, 110, '        repaint();\n', 0),
(7672, 111, '    }\n', 0),
(7673, 112, '  \n', 0),
(7674, 113, '    public void destroy() {\n', 6),
(7675, 114, '        removeMouseListener(this);\n', 2),
(7676, 115, '        removeMouseMotionListener(this);\n', 2),
(7677, 116, '    }\n', 0),
(7678, 117, '\n', 0),
(7679, 118, '    public String getAppletInfo() {\n', 4),
(7680, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(7681, 120, '    }\n', 0),
(7682, 121, '}\n', 0),
(7683, 0, 'import java.util.Scanner;\r\n', 0),
(7684, 1, ' class Years{\r\n', 2),
(7685, 2, '   public int getYear(){\r\n', 4),
(7686, 3, '	int year;\r\n', 0),
(7687, 4, '	String enteredYear;\r\n', 0),
(7688, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(7689, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(7690, 7, '	enteredYear = sc.next();\r\n', 8),
(7691, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(7692, 9, '	return year;\r\n', 2),
(7693, 10, '   }\r\n', 0),
(7694, 11, ' }\r\n', 0),
(7695, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7696, 13, ' class Months extends Years{\r\n', 4),
(7697, 14, '   public int getMonth(){\r\n', 4),
(7698, 15, '	int month;\r\n', 0),
(7699, 16, '	String enteredMonthNumber;\r\n', 0),
(7700, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(7701, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(7702, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(7703, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(7704, 21, '	return month;\r\n', 2),
(7705, 22, '   }\r\n', 0),
(7706, 23, ' }\r\n', 0),
(7707, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7708, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(7709, 26, ' static int numDays = 0;\r\n', 7),
(7710, 27, ' public static void main(String[] args) {\r\n', 8),
(7711, 28, '   int year;\r\n', 0),
(7712, 29, '   Months m = new Months();\r\n', 4),
(7713, 30, '   int month = m.getMonth();\r\n', 8),
(7714, 31, '   \r\n', 0),
(7715, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(7716, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(7717, 34, '   }\r\n', 0),
(7718, 35, '   else {\r\n', 2),
(7719, 36, '    switch (month) {\r\n', 2),
(7720, 37, '      case 1:\r\n', 5),
(7721, 38, '      case 3:\r\n', 5),
(7722, 39, '      case 5:\r\n', 5),
(7723, 40, '      case 7:\r\n', 5),
(7724, 41, '      case 8:\r\n', 5),
(7725, 42, '      case 10:\r\n', 5),
(7726, 43, '      case 12:\r\n', 5),
(7727, 44, '        numDays = 31;\r\n', 5),
(7728, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(7729, 46, '        break;\r\n', 2),
(7730, 47, '      case 4:\r\n', 5),
(7731, 48, '      case 6:\r\n', 5),
(7732, 49, '      case 9:\r\n', 5),
(7733, 50, '      case 11:\r\n', 5),
(7734, 51, '       numDays = 30;\r\n', 5),
(7735, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(7736, 53, '       break;\r\n', 2),
(7737, 54, '      case 2:\r\n', 5),
(7738, 55, '       year = m.getYear();\r\n', 8),
(7739, 56, '       if(year < 1) {\r\n', 5),
(7740, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(7741, 58, '       }\r\n', 0),
(7742, 59, '       else{\r\n', 2),
(7743, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(7744, 61, '         numDays = 29;\r\n', 5),
(7745, 62, '		 if(year > 2020){\r\n', 7),
(7746, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(7747, 64, '         }\r\n', 0),
(7748, 65, '         else{\r\n', 2),
(7749, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(7750, 67, '         }\r\n', 0),
(7751, 68, '        }//if at line 61\r\n', 0),
(7752, 69, '        else{\r\n', 2),
(7753, 70, '         numDays = 28;\r\n', 5),
(7754, 71, '         if (year > 2020){\r\n', 7),
(7755, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(7756, 73, '         }\r\n', 0),
(7757, 74, '         else{\r\n', 2),
(7758, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(7759, 76, '         }\r\n', 0),
(7760, 77, '         break;  \r\n', 2),
(7761, 78, '        }//else at line 70\r\n', 2),
(7762, 79, '       }//else at line 60\r\n', 2),
(7763, 80, '    }//switch at line 37\r\n', 2),
(7764, 81, '   }//else at line 36\r\n', 2),
(7765, 82, '  }//method\r\n', 2),
(7766, 83, ' }//class', 2),
(7767, 0, 'class Pattern{ \r\n', 2),
(7768, 1, 'public static void main(String[] args) { \r\n', 8),
(7769, 2, '	 int rows = 5;\r\n', 5),
(7770, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(7771, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(7772, 5, '	 System.out.print(j + " "); \r\n', 13),
(7773, 6, '	 } \r\n', 0),
(7774, 7, '	 System.out.println(""); \r\n', 11),
(7775, 8, ' 	} \r\n', 0),
(7776, 9, ' 	} \r\n', 0),
(7777, 10, '} ', 0),
(7778, 0, 'import java.util.Scanner;\r\n', 0),
(7779, 1, ' class Years{\r\n', 2),
(7780, 2, '   public int getYear(){\r\n', 4),
(7781, 3, '	int year;\r\n', 0),
(7782, 4, '	String enteredYear;\r\n', 0),
(7783, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(7784, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(7785, 7, '	enteredYear = sc.next();\r\n', 8),
(7786, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(7787, 9, '	return year;\r\n', 2),
(7788, 10, '   }\r\n', 0),
(7789, 11, ' }\r\n', 0),
(7790, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7791, 13, ' class Months extends Years{\r\n', 4),
(7792, 14, '   public int getMonth(){\r\n', 4),
(7793, 15, '	int month;\r\n', 0),
(7794, 16, '	String enteredMonthNumber;\r\n', 0),
(7795, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(7796, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(7797, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(7798, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(7799, 21, '	return month;\r\n', 2),
(7800, 22, '   }\r\n', 0),
(7801, 23, ' }\r\n', 0),
(7802, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7803, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(7804, 26, ' static int numDays = 0;\r\n', 7),
(7805, 27, ' public static void main(String[] args) {\r\n', 8),
(7806, 28, '   int year;\r\n', 0),
(7807, 29, '   Months m = new Months();\r\n', 4),
(7808, 30, '   int month = m.getMonth();\r\n', 8),
(7809, 31, '   \r\n', 0),
(7810, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(7811, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(7812, 34, '   }\r\n', 0),
(7813, 35, '   else {\r\n', 2),
(7814, 36, '    switch (month) {\r\n', 2),
(7815, 37, '      case 1:\r\n', 5),
(7816, 38, '      case 3:\r\n', 5),
(7817, 39, '      case 5:\r\n', 5),
(7818, 40, '      case 7:\r\n', 5),
(7819, 41, '      case 8:\r\n', 5),
(7820, 42, '      case 10:\r\n', 5),
(7821, 43, '      case 12:\r\n', 5),
(7822, 44, '        numDays = 31;\r\n', 5),
(7823, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(7824, 46, '        break;\r\n', 2),
(7825, 47, '      case 4:\r\n', 5),
(7826, 48, '      case 6:\r\n', 5),
(7827, 49, '      case 9:\r\n', 5),
(7828, 50, '      case 11:\r\n', 5),
(7829, 51, '       numDays = 30;\r\n', 5),
(7830, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(7831, 53, '       break;\r\n', 2),
(7832, 54, '      case 2:\r\n', 5),
(7833, 55, '       year = m.getYear();\r\n', 8),
(7834, 56, '       if(year < 1) {\r\n', 5),
(7835, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(7836, 58, '       }\r\n', 0),
(7837, 59, '       else{\r\n', 2),
(7838, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(7839, 61, '         numDays = 29;\r\n', 5),
(7840, 62, '		 if(year > 2020){\r\n', 7),
(7841, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(7842, 64, '         }\r\n', 0),
(7843, 65, '         else{\r\n', 2),
(7844, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(7845, 67, '         }\r\n', 0),
(7846, 68, '        }//if at line 61\r\n', 0),
(7847, 69, '        else{\r\n', 2),
(7848, 70, '         numDays = 28;\r\n', 5),
(7849, 71, '         if (year > 2020){\r\n', 7),
(7850, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(7851, 73, '         }\r\n', 0),
(7852, 74, '         else{\r\n', 2),
(7853, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(7854, 76, '         }\r\n', 0),
(7855, 77, '         break;  \r\n', 2),
(7856, 78, '        }//else at line 70\r\n', 2),
(7857, 79, '       }//else at line 60\r\n', 2),
(7858, 80, '    }//switch at line 37\r\n', 2),
(7859, 81, '   }//else at line 36\r\n', 2),
(7860, 82, '  }//method\r\n', 2),
(7861, 83, ' }//class', 2),
(7862, 0, 'class HelloWorld { \r\n', 2),
(7863, 1, '	public static void main(String args[]) \r\n', 8),
(7864, 2, '	{ \r\n', 0),
(7865, 3, '		System.out.println("Hello World"); \r\n', 11),
(7866, 4, '	} \r\n', 0),
(7867, 5, '} \r\n', 0),
(7868, 0, 'import java.awt.event.*;\n', 0),
(7869, 1, 'import java.awt.*;\n', 0),
(7870, 2, '\n', 0),
(7871, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(7872, 4, '\n', 0),
(7873, 5, '    private int mx, my;\n', 4),
(7874, 6, '    private Dimension size;\n', 2),
(7875, 7, '    private int onaroll;\n', 2),
(7876, 8, '\n', 0),
(7877, 9, '    public void init() {\n', 6),
(7878, 10, '        onaroll = 0;\n', 5),
(7879, 11, '        setSize(500, 500);\n', 5),
(7880, 12, '        size = getSize();\n', 2),
(7881, 13, '        addMouseListener(this);\n', 2),
(7882, 14, '        addMouseMotionListener(this);\n', 2),
(7883, 15, '        addComponentListener(this);\n', 4),
(7884, 16, '    }\n', 0),
(7885, 17, '\n', 0),
(7886, 18, '    public void update(Graphics g) {\n', 6),
(7887, 19, '        Dimension newSize = getSize();\n', 4),
(7888, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(7889, 21, '            g.setColor(getBackground());\n', 6),
(7890, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(7891, 23, '        } else {\n', 2),
(7892, 24, '            size = newSize;\n', 4),
(7893, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(7894, 26, '        } // Calculate new position\n', 11),
(7895, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(7896, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(7897, 29, '        paint(g);\n', 0),
(7898, 30, '    }\n', 0),
(7899, 31, '  \n', 0),
(7900, 32, '    public void paint(Graphics g) {\n', 6),
(7901, 33, '        g.setColor(Color.black);\n', 6),
(7902, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(7903, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(7904, 36, '    }\n', 0),
(7905, 37, '\n', 0),
(7906, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(7907, 39, '\n', 0),
(7908, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(7909, 41, '        e.consume();\n', 6),
(7910, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(7911, 43, '            repaint();\n', 0),
(7912, 44, '        }\n', 0),
(7913, 45, '    }\n', 0),
(7914, 46, '\n', 0),
(7915, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(7916, 48, '        int x = e.getX();\n', 8),
(7917, 49, '        int y = e.getY();\n', 8),
(7918, 50, '        e.consume();\n', 6),
(7919, 51, '        requestFocus();\n', 0),
(7920, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(7921, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(7922, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(7923, 55, '                case 0:\n', 5),
(7924, 56, '                    play(getCodeBase(), \n', 2),
(7925, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(7926, 58, '                    break;\n', 2),
(7927, 59, '                case 1:\n', 5),
(7928, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(7929, 61, '                    break;\n', 2),
(7930, 62, '                case 2:\n', 5),
(7931, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(7932, 64, '                    break;\n', 2),
(7933, 65, '                case 3:\n', 5),
(7934, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(7935, 67, '                    break;\n', 2),
(7936, 68, '                }\n', 0),
(7937, 69, '                onaroll++;\n', 2),
(7938, 70, '                if (onaroll > 5) {\n', 7),
(7939, 72, '                } else {\n', 2),
(7940, 74, '                }\n', 0),
(7941, 75, '            } else {   //first hit\n', 0),
(7942, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(7943, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(7944, 78, '                onaroll = 1;\n', 5),
(7945, 79, '            }\n', 0),
(7946, 80, '        } else {   //miss\n', 0),
(7947, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(7948, 82, '			\n', 0),
(7949, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(7950, 84, '            onaroll = 0;\n', 5),
(7951, 85, '        }\n', 0),
(7952, 86, '        repaint();\n', 0),
(7953, 87, '    }\n', 0),
(7954, 88, '\n', 0),
(7955, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(7956, 90, '\n', 0),
(7957, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(7958, 92, '        repaint();\n', 0),
(7959, 93, '    }\n', 0),
(7960, 94, '\n', 0),
(7961, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(7962, 96, '        repaint();\n', 0),
(7963, 97, '    }\n', 0),
(7964, 98, '\n', 0),
(7965, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(7966, 100, '\n', 0),
(7967, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(7968, 102, ' \n', 0),
(7969, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(7970, 104, ' \n', 0),
(7971, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(7972, 106, '        repaint();\n', 0),
(7973, 107, '    }\n', 0),
(7974, 108, ' \n', 0),
(7975, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(7976, 110, '        repaint();\n', 0),
(7977, 111, '    }\n', 0),
(7978, 112, '  \n', 0),
(7979, 113, '    public void destroy() {\n', 6),
(7980, 114, '        removeMouseListener(this);\n', 2),
(7981, 115, '        removeMouseMotionListener(this);\n', 2),
(7982, 116, '    }\n', 0),
(7983, 117, '\n', 0),
(7984, 118, '    public String getAppletInfo() {\n', 4),
(7985, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(7986, 120, '    }\n', 0),
(7987, 121, '}\n', 0),
(7988, 0, 'import java.awt.event.*;\n', 0),
(7989, 1, 'import java.awt.*;\n', 0),
(7990, 2, '\n', 0),
(7991, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(7992, 4, '\n', 0),
(7993, 5, '    private int mx, my;\n', 4),
(7994, 6, '    private Dimension size;\n', 2),
(7995, 7, '    private int onaroll;\n', 2),
(7996, 8, '\n', 0),
(7997, 9, '    public void init() {\n', 6),
(7998, 10, '        onaroll = 0;\n', 5),
(7999, 11, '        setSize(500, 500);\n', 5),
(8000, 12, '        size = getSize();\n', 2),
(8001, 13, '        addMouseListener(this);\n', 2),
(8002, 14, '        addMouseMotionListener(this);\n', 2),
(8003, 15, '        addComponentListener(this);\n', 4),
(8004, 16, '    }\n', 0),
(8005, 17, '\n', 0),
(8006, 18, '    public void update(Graphics g) {\n', 6),
(8007, 19, '        Dimension newSize = getSize();\n', 4),
(8008, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(8009, 21, '            g.setColor(getBackground());\n', 6),
(8010, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(8011, 23, '        } else {\n', 2),
(8012, 24, '            size = newSize;\n', 4),
(8013, 0, 'import java.util.Scanner;\r\n', 0),
(8014, 1, ' class Years{\r\n', 2),
(8015, 2, '   public int getYear(){\r\n', 4),
(8016, 3, '	int year;\r\n', 0),
(8017, 4, '	String enteredYear;\r\n', 0),
(8018, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(8019, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(8020, 7, '	enteredYear = sc.next();\r\n', 8),
(8021, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(8022, 9, '	return year;\r\n', 2),
(8023, 10, '   }\r\n', 0),
(8024, 11, ' }\r\n', 0),
(8025, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(8026, 13, ' class Months extends Years{\r\n', 4),
(8027, 14, '   public int getMonth(){\r\n', 4),
(8028, 15, '	int month;\r\n', 0),
(8029, 16, '	String enteredMonthNumber;\r\n', 0),
(8030, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(8031, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(8032, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(8033, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(8034, 21, '	return month;\r\n', 2),
(8035, 22, '   }\r\n', 0),
(8036, 23, ' }\r\n', 0),
(8037, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(8038, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(8039, 26, ' static int numDays = 0;\r\n', 7),
(8040, 27, ' public static void main(String[] args) {\r\n', 8),
(8041, 28, '   int year;\r\n', 0),
(8042, 29, '   Months m = new Months();\r\n', 4),
(8043, 30, '   int month = m.getMonth();\r\n', 8),
(8044, 31, '   \r\n', 0),
(8045, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(8046, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(8047, 34, '   }\r\n', 0),
(8048, 35, '   else {\r\n', 2),
(8049, 36, '    switch (month) {\r\n', 2),
(8050, 37, '      case 1:\r\n', 5),
(8051, 38, '      case 3:\r\n', 5),
(8052, 39, '      case 5:\r\n', 5),
(8053, 40, '      case 7:\r\n', 5),
(8054, 41, '      case 8:\r\n', 5),
(8055, 42, '      case 10:\r\n', 5),
(8056, 43, '      case 12:\r\n', 5),
(8057, 44, '        numDays = 31;\r\n', 5),
(8058, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(8059, 46, '        break;\r\n', 2),
(8060, 47, '      case 4:\r\n', 5),
(8061, 48, '      case 6:\r\n', 5),
(8062, 49, '      case 9:\r\n', 5),
(8063, 50, '      case 11:\r\n', 5),
(8064, 51, '       numDays = 30;\r\n', 5),
(8065, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(8066, 53, '       break;\r\n', 2),
(8067, 54, '      case 2:\r\n', 5),
(8068, 55, '       year = m.getYear();\r\n', 8),
(8069, 56, '       if(year < 1) {\r\n', 5),
(8070, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(8071, 58, '       }\r\n', 0),
(8072, 59, '       else{\r\n', 2),
(8073, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(8074, 61, '         numDays = 29;\r\n', 5),
(8075, 62, '		 if(year > 2020){\r\n', 7),
(8076, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(8077, 64, '         }\r\n', 0),
(8078, 65, '         else{\r\n', 2),
(8079, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(8080, 67, '         }\r\n', 0),
(8081, 68, '        }//if at line 61\r\n', 0),
(8082, 69, '        else{\r\n', 2),
(8083, 70, '         numDays = 28;\r\n', 5),
(8084, 71, '         if (year > 2020){\r\n', 7),
(8085, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(8086, 73, '         }\r\n', 0),
(8087, 74, '         else{\r\n', 2),
(8088, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(8089, 76, '         }\r\n', 0),
(8090, 77, '         break;  \r\n', 2),
(8091, 78, '        }//else at line 70\r\n', 2),
(8092, 79, '       }//else at line 60\r\n', 2),
(8093, 80, '    }//switch at line 37\r\n', 2),
(8094, 81, '   }//else at line 36\r\n', 2),
(8095, 82, '  }//method\r\n', 2),
(8096, 83, ' }//class', 2),
(8097, 0, 'public class RecursionExample2 {  \r\n', 9),
(8098, 1, 'static int count=0;  \r\n', 7),
(8099, 2, 'public int p(){  \r\n', 4),
(8100, 3, 'count++;  \r\n', 2),
(8101, 4, 'if(count<=5){  \r\n', 9),
(8102, 5, 'System.out.println("hello "+count);  \r\n', 8),
(8103, 6, 'public int p();  \r\n', 4),
(8104, 7, '}  \r\n', 0),
(8105, 8, '}  \r\n', 0),
(8106, 9, 'public static void main(String[] args) {  \r\n', 8),
(8107, 10, 'p();  \r\n', 0),
(8108, 11, '}  \r\n', 0),
(8109, 12, '}  ', 0),
(8110, 0, 'import java.awt.event.*;\n', 0),
(8111, 1, 'import java.awt.*;\n', 0),
(8112, 2, '\n', 0),
(8113, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(8114, 4, '\n', 0),
(8115, 5, '    private int mx, my;\n', 4),
(8116, 6, '    private Dimension size;\n', 2),
(8117, 7, '    private int onaroll;\n', 2),
(8118, 8, '\n', 0),
(8119, 9, '    public void init() {\n', 6),
(8120, 10, '        onaroll = 0;\n', 5),
(8121, 11, '        setSize(500, 500);\n', 5),
(8122, 12, '        size = getSize();\n', 2),
(8123, 13, '        addMouseListener(this);\n', 2),
(8124, 14, '        addMouseMotionListener(this);\n', 2),
(8125, 15, '        addComponentListener(this);\n', 4),
(8126, 16, '    }\n', 0),
(8127, 17, '\n', 0),
(8128, 18, '    public void update(Graphics g) {\n', 6),
(8129, 19, '        Dimension newSize = getSize();\n', 4),
(8130, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(8131, 21, '            g.setColor(getBackground());\n', 6),
(8132, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(8133, 23, '        } else {\n', 2),
(8134, 24, '            size = newSize;\n', 4),
(8135, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(8136, 26, '        } // Calculate new position\n', 11),
(8137, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(8138, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(8139, 29, '        paint(g);\n', 0),
(8140, 30, '    }\n', 0),
(8141, 31, '  \n', 0),
(8142, 32, '    public void paint(Graphics g) {\n', 6),
(8143, 33, '        g.setColor(Color.black);\n', 6),
(8144, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(8145, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(8146, 36, '    }\n', 0),
(8147, 37, '\n', 0),
(8148, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(8149, 39, '\n', 0),
(8150, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(8151, 41, '        e.consume();\n', 6),
(8152, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(8153, 43, '            repaint();\n', 0),
(8154, 44, '        }\n', 0),
(8155, 45, '    }\n', 0),
(8156, 46, '\n', 0),
(8157, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(8158, 48, '        int x = e.getX();\n', 8),
(8159, 49, '        int y = e.getY();\n', 8),
(8160, 50, '        e.consume();\n', 6),
(8161, 51, '        requestFocus();\n', 0),
(8162, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(8163, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(8164, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(8165, 55, '                case 0:\n', 5),
(8166, 56, '                    play(getCodeBase(), \n', 2),
(8167, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(8168, 58, '                    break;\n', 2),
(8169, 59, '                case 1:\n', 5),
(8170, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(8171, 61, '                    break;\n', 2),
(8172, 62, '                case 2:\n', 5),
(8173, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(8174, 64, '                    break;\n', 2),
(8175, 65, '                case 3:\n', 5),
(8176, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(8177, 67, '                    break;\n', 2),
(8178, 68, '                }\n', 0),
(8179, 69, '                onaroll++;\n', 2),
(8180, 70, '                if (onaroll > 5) {\n', 7),
(8181, 72, '                } else {\n', 2),
(8182, 74, '                }\n', 0),
(8183, 75, '            } else {   //first hit\n', 0),
(8184, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(8185, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(8186, 78, '                onaroll = 1;\n', 5),
(8187, 79, '            }\n', 0),
(8188, 80, '        } else {   //miss\n', 0),
(8189, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(8190, 82, '			\n', 0),
(8191, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(8192, 84, '            onaroll = 0;\n', 5),
(8193, 85, '        }\n', 0),
(8194, 86, '        repaint();\n', 0),
(8195, 87, '    }\n', 0),
(8196, 88, '\n', 0),
(8197, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(8198, 90, '\n', 0),
(8199, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(8200, 92, '        repaint();\n', 0),
(8201, 93, '    }\n', 0),
(8202, 94, '\n', 0),
(8203, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(8204, 96, '        repaint();\n', 0),
(8205, 97, '    }\n', 0),
(8206, 98, '\n', 0),
(8207, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(8208, 100, '\n', 0),
(8209, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(8210, 102, ' \n', 0),
(8211, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(8212, 104, ' \n', 0),
(8213, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(8214, 106, '        repaint();\n', 0),
(8215, 107, '    }\n', 0),
(8216, 108, ' \n', 0),
(8217, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(8218, 110, '        repaint();\n', 0),
(8219, 111, '    }\n', 0),
(8220, 112, '  \n', 0),
(8221, 113, '    public void destroy() {\n', 6),
(8222, 114, '        removeMouseListener(this);\n', 2),
(8223, 115, '        removeMouseMotionListener(this);\n', 2),
(8224, 116, '    }\n', 0);
INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(8225, 117, '\n', 0),
(8226, 118, '    public String getAppletInfo() {\n', 4),
(8227, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(8228, 120, '    }\n', 0),
(8229, 121, '}\n', 0),
(8230, 0, 'import java.awt.event.*;\n', 0),
(8231, 1, 'import java.awt.*;\n', 0),
(8232, 2, '\n', 0),
(8233, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(8234, 4, '\n', 0),
(8235, 5, '    private int mx, my;\n', 4),
(8236, 6, '    private Dimension size;\n', 2),
(8237, 7, '    private int onaroll;\n', 2),
(8238, 8, '\n', 0),
(8239, 9, '    public void init() {\n', 6),
(8240, 10, '        onaroll = 0;\n', 5),
(8241, 11, '        setSize(500, 500);\n', 5),
(8242, 12, '        size = getSize();\n', 2),
(8243, 13, '        addMouseListener(this);\n', 2),
(8244, 14, '        addMouseMotionListener(this);\n', 2),
(8245, 15, '        addComponentListener(this);\n', 4),
(8246, 16, '    }\n', 0),
(8247, 17, '\n', 0),
(8248, 18, '    public void update(Graphics g) {\n', 6),
(8249, 19, '        Dimension newSize = getSize();\n', 4),
(8250, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(8251, 21, '            g.setColor(getBackground());\n', 6),
(8252, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(8253, 23, '        } else {\n', 2),
(8254, 24, '            size = newSize;\n', 4),
(8255, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(8256, 26, '        } // Calculate new position\n', 11),
(8257, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(8258, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(8259, 29, '        paint(g);\n', 0),
(8260, 30, '    }\n', 0),
(8261, 31, '  \n', 0),
(8262, 32, '    public void paint(Graphics g) {\n', 6),
(8263, 33, '        g.setColor(Color.black);\n', 6),
(8264, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(8265, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(8266, 36, '    }\n', 0),
(8267, 37, '\n', 0),
(8268, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(8269, 39, '\n', 0),
(8270, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(8271, 41, '        e.consume();\n', 6),
(8272, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(8273, 43, '            repaint();\n', 0),
(8274, 44, '        }\n', 0),
(8275, 45, '    }\n', 0),
(8276, 46, '\n', 0),
(8277, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(8278, 48, '        int x = e.getX();\n', 8),
(8279, 49, '        int y = e.getY();\n', 8),
(8280, 50, '        e.consume();\n', 6),
(8281, 51, '        requestFocus();\n', 0),
(8282, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(8283, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(8284, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(8285, 55, '                case 0:\n', 5),
(8286, 56, '                    play(getCodeBase(), \n', 2),
(8287, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(8288, 58, '                    break;\n', 2),
(8289, 59, '                case 1:\n', 5),
(8290, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(8291, 61, '                    break;\n', 2),
(8292, 62, '                case 2:\n', 5),
(8293, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(8294, 64, '                    break;\n', 2),
(8295, 65, '                case 3:\n', 5),
(8296, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(8297, 67, '                    break;\n', 2),
(8298, 68, '                }\n', 0),
(8299, 69, '                onaroll++;\n', 2),
(8300, 70, '                if (onaroll > 5) {\n', 7),
(8301, 72, '                } else {\n', 2),
(8302, 74, '                }\n', 0),
(8303, 75, '            } else {   //first hit\n', 0),
(8304, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(8305, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(8306, 78, '                onaroll = 1;\n', 5),
(8307, 79, '            }\n', 0),
(8308, 80, '        } else {   //miss\n', 0),
(8309, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(8310, 82, '			\n', 0),
(8311, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(8312, 84, '            onaroll = 0;\n', 5),
(8313, 85, '        }\n', 0),
(8314, 86, '        repaint();\n', 0),
(8315, 87, '    }\n', 0),
(8316, 88, '\n', 0),
(8317, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(8318, 90, '\n', 0),
(8319, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(8320, 92, '        repaint();\n', 0),
(8321, 93, '    }\n', 0),
(8322, 94, '\n', 0),
(8323, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(8324, 96, '        repaint();\n', 0),
(8325, 97, '    }\n', 0),
(8326, 98, '\n', 0),
(8327, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(8328, 100, '\n', 0),
(8329, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(8330, 102, ' \n', 0),
(8331, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(8332, 104, ' \n', 0),
(8333, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(8334, 106, '        repaint();\n', 0),
(8335, 107, '    }\n', 0),
(8336, 108, ' \n', 0),
(8337, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(8338, 110, '        repaint();\n', 0),
(8339, 111, '    }\n', 0),
(8340, 112, '  \n', 0),
(8341, 113, '    public void destroy() {\n', 6),
(8342, 114, '        removeMouseListener(this);\n', 2),
(8343, 115, '        removeMouseMotionListener(this);\n', 2),
(8344, 116, '    }\n', 0),
(8345, 117, '\n', 0),
(8346, 118, '    public String getAppletInfo() {\n', 4),
(8347, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(8348, 120, '    }\n', 0),
(8349, 121, '}\n', 0),
(8350, 0, 'import java.util.Scanner;\r\n', 0),
(8351, 1, ' class Years{\r\n', 2),
(8352, 2, '   public int getYear(){\r\n', 4),
(8353, 3, '	int year;\r\n', 0),
(8354, 4, '	String enteredYear;\r\n', 0),
(8355, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(8356, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(8357, 7, '	enteredYear = sc.next();\r\n', 8),
(8358, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(8359, 9, '	return year;\r\n', 2),
(8360, 10, '   }\r\n', 0),
(8361, 11, ' }\r\n', 0),
(8362, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(8363, 13, ' class Months extends Years{\r\n', 4),
(8364, 14, '   public int getMonth(){\r\n', 4),
(8365, 15, '	int month;\r\n', 0),
(8366, 16, '	String enteredMonthNumber;\r\n', 0),
(8367, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(8368, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(8369, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(8370, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(8371, 21, '	return month;\r\n', 2),
(8372, 22, '   }\r\n', 0),
(8373, 23, ' }\r\n', 0),
(8374, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(8375, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(8376, 26, ' static int numDays = 0;\r\n', 7),
(8377, 27, ' public static void main(String[] args) {\r\n', 8),
(8378, 28, '   int year;\r\n', 0),
(8379, 29, '   Months m = new Months();\r\n', 4),
(8380, 30, '   int month = m.getMonth();\r\n', 8),
(8381, 31, '   \r\n', 0),
(8382, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(8383, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(8384, 34, '   }\r\n', 0),
(8385, 35, '   else {\r\n', 2),
(8386, 36, '    switch (month) {\r\n', 2),
(8387, 37, '      case 1:\r\n', 5),
(8388, 38, '      case 3:\r\n', 5),
(8389, 39, '      case 5:\r\n', 5),
(8390, 40, '      case 7:\r\n', 5),
(8391, 41, '      case 8:\r\n', 5),
(8392, 42, '      case 10:\r\n', 5),
(8393, 43, '      case 12:\r\n', 5),
(8394, 44, '        numDays = 31;\r\n', 5),
(8395, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(8396, 46, '        break;\r\n', 2),
(8397, 47, '      case 4:\r\n', 5),
(8398, 48, '      case 6:\r\n', 5),
(8399, 49, '      case 9:\r\n', 5),
(8400, 50, '      case 11:\r\n', 5),
(8401, 51, '       numDays = 30;\r\n', 5),
(8402, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(8403, 53, '       break;\r\n', 2),
(8404, 54, '      case 2:\r\n', 5),
(8405, 55, '       year = m.getYear();\r\n', 8),
(8406, 56, '       if(year < 1) {\r\n', 5),
(8407, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(8408, 58, '       }\r\n', 0),
(8409, 59, '       else{\r\n', 2),
(8410, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(8411, 61, '         numDays = 29;\r\n', 5),
(8412, 62, '		 if(year > 2020){\r\n', 7),
(8413, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(8414, 64, '         }\r\n', 0),
(8415, 65, '         else{\r\n', 2),
(8416, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(8417, 67, '         }\r\n', 0),
(8418, 68, '        }//if at line 61\r\n', 0),
(8419, 69, '        else{\r\n', 2),
(8420, 70, '         numDays = 28;\r\n', 5),
(8421, 71, '         if (year > 2020){\r\n', 7),
(8422, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(8423, 73, '         }\r\n', 0),
(8424, 74, '         else{\r\n', 2),
(8425, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(8426, 76, '         }\r\n', 0),
(8427, 77, '         break;  \r\n', 2),
(8428, 78, '        }//else at line 70\r\n', 2),
(8429, 79, '       }//else at line 60\r\n', 2),
(8430, 80, '    }//switch at line 37\r\n', 2),
(8431, 81, '   }//else at line 36\r\n', 2),
(8432, 82, '  }//method\r\n', 2),
(8433, 83, ' }//class', 2),
(8434, 0, 'class Pattern{ \r\n', 2),
(8435, 1, 'public static void main(String[] args) { \r\n', 8),
(8436, 2, '	 int rows = 5;\r\n', 5),
(8437, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(8438, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(8439, 5, '	 System.out.print(j + " "); \r\n', 13),
(8440, 6, '	 } \r\n', 0),
(8441, 7, '	 System.out.println(""); \r\n', 11),
(8442, 8, ' 	} \r\n', 0),
(8443, 9, ' 	} \r\n', 0),
(8444, 10, '} ', 0),
(8445, 0, 'import java.util.Scanner;\r\n', 0),
(8446, 1, ' class Years{\r\n', 2),
(8447, 2, '   public int getYear(){\r\n', 4),
(8448, 3, '	int year;\r\n', 0),
(8449, 4, '	String enteredYear;\r\n', 0),
(8450, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(8451, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(8452, 7, '	enteredYear = sc.next();\r\n', 8),
(8453, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(8454, 9, '	return year;\r\n', 2),
(8455, 10, '   }\r\n', 0),
(8456, 11, ' }\r\n', 0),
(8457, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(8458, 13, ' class Months extends Years{\r\n', 4),
(8459, 14, '   public int getMonth(){\r\n', 4),
(8460, 15, '	int month;\r\n', 0),
(8461, 16, '	String enteredMonthNumber;\r\n', 0),
(8462, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(8463, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(8464, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(8465, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(8466, 21, '	return month;\r\n', 2),
(8467, 22, '   }\r\n', 0),
(8468, 23, ' }\r\n', 0),
(8469, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(8470, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(8471, 26, ' static int numDays = 0;\r\n', 7),
(8472, 27, ' public static void main(String[] args) {\r\n', 8),
(8473, 28, '   int year;\r\n', 0),
(8474, 29, '   Months m = new Months();\r\n', 4),
(8475, 30, '   int month = m.getMonth();\r\n', 8),
(8476, 31, '   \r\n', 0),
(8477, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(8478, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(8479, 34, '   }\r\n', 0),
(8480, 35, '   else {\r\n', 2),
(8481, 36, '    switch (month) {\r\n', 2),
(8482, 37, '      case 1:\r\n', 5),
(8483, 38, '      case 3:\r\n', 5),
(8484, 39, '      case 5:\r\n', 5),
(8485, 40, '      case 7:\r\n', 5),
(8486, 41, '      case 8:\r\n', 5),
(8487, 42, '      case 10:\r\n', 5),
(8488, 43, '      case 12:\r\n', 5),
(8489, 44, '        numDays = 31;\r\n', 5),
(8490, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(8491, 46, '        break;\r\n', 2),
(8492, 47, '      case 4:\r\n', 5),
(8493, 48, '      case 6:\r\n', 5),
(8494, 49, '      case 9:\r\n', 5),
(8495, 50, '      case 11:\r\n', 5),
(8496, 51, '       numDays = 30;\r\n', 5),
(8497, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(8498, 53, '       break;\r\n', 2),
(8499, 54, '      case 2:\r\n', 5),
(8500, 55, '       year = m.getYear();\r\n', 8),
(8501, 56, '       if(year < 1) {\r\n', 5),
(8502, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(8503, 58, '       }\r\n', 0),
(8504, 59, '       else{\r\n', 2),
(8505, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(8506, 61, '         numDays = 29;\r\n', 5),
(8507, 62, '		 if(year > 2020){\r\n', 7),
(8508, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(8509, 64, '         }\r\n', 0),
(8510, 65, '         else{\r\n', 2),
(8511, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(8512, 67, '         }\r\n', 0),
(8513, 68, '        }//if at line 61\r\n', 0),
(8514, 69, '        else{\r\n', 2),
(8515, 70, '         numDays = 28;\r\n', 5),
(8516, 71, '         if (year > 2020){\r\n', 7),
(8517, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(8518, 73, '         }\r\n', 0),
(8519, 74, '         else{\r\n', 2),
(8520, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(8521, 76, '         }\r\n', 0),
(8522, 77, '         break;  \r\n', 2),
(8523, 78, '        }//else at line 70\r\n', 2),
(8524, 79, '       }//else at line 60\r\n', 2),
(8525, 80, '    }//switch at line 37\r\n', 2),
(8526, 81, '   }//else at line 36\r\n', 2),
(8527, 82, '  }//method\r\n', 2),
(8528, 83, ' }//class', 2),
(8529, 0, 'class HelloWorld { \r\n', 2),
(8530, 1, '	public static void main(String args[]) \r\n', 8),
(8531, 2, '	{ \r\n', 0),
(8532, 3, '		System.out.println("Hello World"); \r\n', 11),
(8533, 4, '	} \r\n', 0),
(8534, 5, '} \r\n', 0),
(8535, 0, 'import java.awt.event.*;\n', 0),
(8536, 1, 'import java.awt.*;\n', 0),
(8537, 2, '\n', 0),
(8538, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(8539, 4, '\n', 0),
(8540, 5, '    private int mx, my;\n', 4),
(8541, 6, '    private Dimension size;\n', 2),
(8542, 7, '    private int onaroll;\n', 2),
(8543, 8, '\n', 0),
(8544, 9, '    public void init() {\n', 6),
(8545, 10, '        onaroll = 0;\n', 5),
(8546, 11, '        setSize(500, 500);\n', 5),
(8547, 12, '        size = getSize();\n', 2),
(8548, 13, '        addMouseListener(this);\n', 2),
(8549, 14, '        addMouseMotionListener(this);\n', 2),
(8550, 15, '        addComponentListener(this);\n', 4),
(8551, 16, '    }\n', 0),
(8552, 17, '\n', 0),
(8553, 18, '    public void update(Graphics g) {\n', 6),
(8554, 19, '        Dimension newSize = getSize();\n', 4),
(8555, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(8556, 21, '            g.setColor(getBackground());\n', 6),
(8557, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(8558, 23, '        } else {\n', 2),
(8559, 24, '            size = newSize;\n', 4),
(8560, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(8561, 26, '        } // Calculate new position\n', 11),
(8562, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(8563, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(8564, 29, '        paint(g);\n', 0),
(8565, 30, '    }\n', 0),
(8566, 31, '  \n', 0),
(8567, 32, '    public void paint(Graphics g) {\n', 6),
(8568, 33, '        g.setColor(Color.black);\n', 6),
(8569, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(8570, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(8571, 36, '    }\n', 0),
(8572, 37, '\n', 0),
(8573, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(8574, 39, '\n', 0),
(8575, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(8576, 41, '        e.consume();\n', 6),
(8577, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(8578, 43, '            repaint();\n', 0),
(8579, 44, '        }\n', 0),
(8580, 45, '    }\n', 0),
(8581, 46, '\n', 0),
(8582, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(8583, 48, '        int x = e.getX();\n', 8),
(8584, 49, '        int y = e.getY();\n', 8),
(8585, 50, '        e.consume();\n', 6),
(8586, 51, '        requestFocus();\n', 0),
(8587, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(8588, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(8589, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(8590, 55, '                case 0:\n', 5),
(8591, 56, '                    play(getCodeBase(), \n', 2),
(8592, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(8593, 58, '                    break;\n', 2),
(8594, 59, '                case 1:\n', 5),
(8595, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(8596, 61, '                    break;\n', 2),
(8597, 62, '                case 2:\n', 5),
(8598, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(8599, 64, '                    break;\n', 2),
(8600, 65, '                case 3:\n', 5),
(8601, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(8602, 67, '                    break;\n', 2),
(8603, 68, '                }\n', 0),
(8604, 69, '                onaroll++;\n', 2),
(8605, 70, '                if (onaroll > 5) {\n', 7),
(8606, 72, '                } else {\n', 2),
(8607, 74, '                }\n', 0),
(8608, 75, '            } else {   //first hit\n', 0),
(8609, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(8610, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(8611, 78, '                onaroll = 1;\n', 5),
(8612, 79, '            }\n', 0),
(8613, 80, '        } else {   //miss\n', 0),
(8614, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(8615, 82, '			\n', 0),
(8616, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(8617, 84, '            onaroll = 0;\n', 5),
(8618, 85, '        }\n', 0),
(8619, 86, '        repaint();\n', 0),
(8620, 87, '    }\n', 0),
(8621, 88, '\n', 0),
(8622, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(8623, 90, '\n', 0),
(8624, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(8625, 92, '        repaint();\n', 0),
(8626, 93, '    }\n', 0),
(8627, 94, '\n', 0),
(8628, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(8629, 96, '        repaint();\n', 0),
(8630, 97, '    }\n', 0),
(8631, 98, '\n', 0),
(8632, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(8633, 100, '\n', 0),
(8634, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(8635, 102, ' \n', 0),
(8636, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(8637, 104, ' \n', 0),
(8638, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(8639, 106, '        repaint();\n', 0),
(8640, 107, '    }\n', 0),
(8641, 108, ' \n', 0),
(8642, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(8643, 110, '        repaint();\n', 0),
(8644, 111, '    }\n', 0),
(8645, 112, '  \n', 0),
(8646, 113, '    public void destroy() {\n', 6),
(8647, 114, '        removeMouseListener(this);\n', 2),
(8648, 115, '        removeMouseMotionListener(this);\n', 2),
(8649, 116, '    }\n', 0),
(8650, 117, '\n', 0),
(8651, 118, '    public String getAppletInfo() {\n', 4),
(8652, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(8653, 120, '    }\n', 0),
(8654, 121, '}\n', 0),
(8655, 0, 'import java.awt.event.*;\n', 0),
(8656, 1, 'import java.awt.*;\n', 0),
(8657, 2, '\n', 0),
(8658, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(8659, 4, '\n', 0),
(8660, 5, '    private int mx, my;\n', 4),
(8661, 6, '    private Dimension size;\n', 2),
(8662, 7, '    private int onaroll;\n', 2),
(8663, 8, '\n', 0),
(8664, 9, '    public void init() {\n', 6),
(8665, 10, '        onaroll = 0;\n', 5),
(8666, 11, '        setSize(500, 500);\n', 5),
(8667, 12, '        size = getSize();\n', 2),
(8668, 13, '        addMouseListener(this);\n', 2),
(8669, 14, '        addMouseMotionListener(this);\n', 2),
(8670, 15, '        addComponentListener(this);\n', 4),
(8671, 16, '    }\n', 0),
(8672, 17, '\n', 0),
(8673, 18, '    public void update(Graphics g) {\n', 6),
(8674, 19, '        Dimension newSize = getSize();\n', 4),
(8675, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(8676, 21, '            g.setColor(getBackground());\n', 6),
(8677, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(8678, 23, '        } else {\n', 2),
(8679, 0, '', 0),
(8680, 24, '            size = newSize;\n', 4),
(8681, 0, '', 0),
(8682, 0, '', 0),
(8683, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(8684, 0, '', 0),
(8685, 26, '        } // Calculate new position\n', 11),
(8686, 0, '', 0),
(8687, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(8688, 0, '', 0),
(8689, 0, '', 0),
(8690, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(8691, 0, '', 0),
(8692, 0, '', 0),
(8693, 29, '        paint(g);\n', 0),
(8694, 0, '', 0),
(8695, 30, '    }\n', 0),
(8696, 0, '', 0),
(8697, 0, '', 0),
(8698, 31, '  \n', 0),
(8699, 0, '', 0),
(8700, 0, '', 0),
(8701, 0, '', 0),
(8702, 32, '    public void paint(Graphics g) {\n', 6),
(8703, 0, '', 0),
(8704, 0, '', 0),
(8705, 33, '        g.setColor(Color.black);\n', 6),
(8706, 0, '', 0),
(8707, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(8708, 0, '', 0),
(8709, 0, '', 0),
(8710, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(8711, 0, '', 0),
(8712, 0, '', 0),
(8713, 36, '    }\n', 0),
(8714, 0, '', 0),
(8715, 37, '\n', 0),
(8716, 0, '', 0),
(8717, 0, '', 0),
(8718, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(8719, 0, '', 0),
(8720, 39, '\n', 0),
(8721, 0, '', 0),
(8722, 0, '', 0),
(8723, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(8724, 0, '', 0),
(8725, 41, '        e.consume();\n', 6),
(8726, 0, '', 0),
(8727, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(8728, 0, '', 0),
(8729, 0, '', 0),
(8730, 43, '            repaint();\n', 0),
(8731, 0, '', 0),
(8732, 0, '', 0),
(8733, 44, '        }\n', 0),
(8734, 0, '', 0),
(8735, 45, '    }\n', 0),
(8736, 0, '', 0),
(8737, 46, '\n', 0),
(8738, 0, '', 0),
(8739, 0, '', 0),
(8740, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(8741, 0, '', 0),
(8742, 0, '', 0),
(8743, 48, '        int x = e.getX();\n', 8),
(8744, 0, '', 0),
(8745, 0, '', 0),
(8746, 49, '        int y = e.getY();\n', 8),
(8747, 0, '', 0),
(8748, 50, '        e.consume();\n', 6),
(8749, 0, '', 0),
(8750, 51, '        requestFocus();\n', 0),
(8751, 0, '', 0),
(8752, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(8753, 0, '', 0),
(8754, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(8755, 0, '', 0),
(8756, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(8757, 0, '', 0),
(8758, 55, '                case 0:\n', 5),
(8759, 0, '', 0),
(8760, 56, '                    play(getCodeBase(), \n', 2),
(8761, 0, '', 0),
(8762, 0, '', 0),
(8763, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(8764, 0, '', 0),
(8765, 58, '                    break;\n', 2),
(8766, 0, '', 0),
(8767, 59, '                case 1:\n', 5),
(8768, 0, '', 0),
(8769, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(8770, 0, '', 0),
(8771, 0, '', 0),
(8772, 61, '                    break;\n', 2),
(8773, 0, '', 0),
(8774, 62, '                case 2:\n', 5),
(8775, 0, '', 0),
(8776, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(8777, 0, '', 0),
(8778, 0, '', 0),
(8779, 64, '                    break;\n', 2),
(8780, 0, '', 0),
(8781, 65, '                case 3:\n', 5),
(8782, 0, '', 0),
(8783, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(8784, 0, '', 0),
(8785, 0, '', 0),
(8786, 0, '', 0),
(8787, 0, '', 0),
(8788, 0, '', 0),
(8789, 0, '', 0),
(8790, 0, '', 0),
(8791, 0, '', 0),
(8792, 0, '', 0),
(8793, 0, '', 0),
(8794, 0, '', 0),
(8795, 0, '', 0),
(8796, 0, '', 0),
(8797, 0, '', 0),
(8798, 0, '', 0),
(8799, 0, '', 0),
(8800, 0, '', 0),
(8801, 0, '', 0),
(8802, 0, '', 0),
(8803, 0, '', 0),
(8804, 0, '', 0),
(8805, 0, '', 0),
(8806, 0, '', 0),
(8807, 0, '', 0),
(8808, 0, '', 0),
(8809, 0, '', 0),
(8810, 0, '', 0),
(8811, 0, '', 0),
(8812, 0, '', 0),
(8813, 0, '', 0),
(8814, 0, '', 0),
(8815, 0, '', 0),
(8816, 0, '', 0),
(8817, 0, '', 0),
(8818, 0, '', 0),
(8819, 0, '', 0),
(8820, 0, '', 0),
(8821, 0, '', 0),
(8822, 0, '', 0),
(8823, 0, '', 0),
(8824, 0, '', 0),
(8825, 0, '', 0),
(8826, 0, '', 0),
(8827, 0, '', 0),
(8828, 0, '', 0),
(8829, 0, '', 0),
(8830, 0, '', 0),
(8831, 0, '', 0),
(8832, 0, '', 0),
(8833, 0, '', 0),
(8834, 0, '', 0),
(8835, 0, '', 0),
(8836, 0, '', 0),
(8837, 0, '', 0),
(8838, 0, '', 0),
(8839, 0, '', 0),
(8840, 0, '', 0),
(8841, 0, '', 0),
(8842, 0, '', 0),
(8843, 0, '', 0),
(8844, 0, '', 0),
(8845, 0, '', 0),
(8846, 0, '', 0),
(8847, 0, '', 0),
(8848, 0, '', 0),
(8849, 0, '', 0),
(8850, 0, '', 0),
(8851, 0, '', 0),
(8852, 0, '', 0),
(8853, 0, '', 0),
(8854, 0, '', 0),
(8855, 0, '', 0),
(8856, 0, '', 0),
(8857, 0, '', 0),
(8858, 0, '', 0),
(8859, 0, '', 0),
(8860, 0, '', 0),
(8861, 0, '', 0),
(8862, 0, '', 0),
(8863, 0, '', 0),
(8864, 0, '', 0),
(8865, 0, '', 0),
(8866, 0, '', 0),
(8867, 0, '', 0),
(8868, 0, '', 0),
(8869, 0, '', 0),
(8870, 0, '', 0),
(8871, 0, '', 0),
(8872, 0, '', 0),
(8873, 0, '', 0),
(8874, 0, '', 0),
(8875, 0, '', 0),
(8876, 0, '', 0),
(8877, 0, '', 0),
(8878, 0, '', 0),
(8879, 0, '', 0),
(8880, 0, '', 0),
(8881, 0, '', 0),
(8882, 0, '', 0),
(8883, 0, '', 0),
(8884, 0, '', 0),
(8885, 0, '', 0),
(8886, 0, '', 0),
(8887, 0, '', 0),
(8888, 0, '', 0),
(8889, 0, '', 0),
(8890, 0, '', 0),
(8891, 0, '', 0),
(8892, 0, '', 0),
(8893, 0, '', 0),
(8894, 0, '', 0),
(8895, 0, '', 0),
(8896, 0, '', 0),
(8897, 0, '', 0),
(8898, 0, '', 0),
(8899, 0, '', 0),
(8900, 0, '', 0),
(8901, 0, '', 0),
(8902, 0, '', 0),
(8903, 0, '', 0),
(8904, 0, '', 0),
(8905, 0, '', 0),
(8906, 0, '', 0),
(8907, 0, '', 0),
(8908, 0, '', 0),
(8909, 0, '', 0),
(8910, 0, '', 0),
(8911, 0, '', 0),
(8912, 0, '', 0),
(8913, 0, '', 0),
(8914, 0, '', 0),
(8915, 0, '', 0),
(8916, 0, '', 0),
(8917, 0, '', 0),
(8918, 0, '', 0),
(8919, 0, '', 0),
(8920, 0, '', 0),
(8921, 0, '', 0),
(8922, 0, '', 0),
(8923, 0, '', 0),
(8924, 0, '', 0),
(8925, 0, '', 0),
(8926, 0, '', 0),
(8927, 0, '', 0),
(8928, 0, '', 0),
(8929, 0, '', 0),
(8930, 0, '', 0),
(8931, 0, '', 0),
(8932, 0, '', 0),
(8933, 0, '', 0),
(8934, 0, '', 0),
(8935, 0, '', 0),
(8936, 0, '', 0),
(8937, 0, '', 0),
(8938, 0, '', 0),
(8939, 0, '', 0),
(8940, 0, '', 0),
(8941, 0, '', 0),
(8942, 0, '', 0),
(8943, 0, '', 0),
(8944, 0, '', 0),
(8945, 0, '', 0),
(8946, 0, '', 0),
(8947, 0, '', 0),
(8948, 0, '', 0),
(8949, 0, '', 0),
(8950, 0, '', 0),
(8951, 0, '', 0),
(8952, 0, '', 0),
(8953, 0, '', 0),
(8954, 0, '', 0),
(8955, 0, '', 0),
(8956, 0, '', 0),
(8957, 0, '', 0),
(8958, 0, '', 0),
(8959, 0, '', 0),
(8960, 0, '', 0),
(8961, 0, '', 0),
(8962, 0, '', 0),
(8963, 0, '', 0),
(8964, 0, '', 0),
(8965, 0, '', 0),
(8966, 0, '', 0),
(8967, 0, '', 0),
(8968, 0, '', 0),
(8969, 0, '', 0),
(8970, 0, '', 0),
(8971, 0, '', 0),
(8972, 0, '', 0),
(8973, 0, '', 0),
(8974, 0, '', 0),
(8975, 0, '', 0),
(8976, 0, '', 0),
(8977, 0, '', 0),
(8978, 0, '', 0),
(8979, 0, '', 0),
(8980, 0, '', 0),
(8981, 0, '', 0),
(8982, 0, '', 0),
(8983, 0, '', 0),
(8984, 0, '', 0),
(8985, 0, '', 0),
(8986, 0, '', 0),
(8987, 0, '', 0),
(8988, 0, '', 0),
(8989, 0, '', 0),
(8990, 0, '', 0),
(8991, 0, '', 0),
(8992, 0, '', 0),
(8993, 0, '', 0),
(8994, 0, '', 0),
(8995, 0, '', 0),
(8996, 0, '', 0),
(8997, 0, '', 0),
(8998, 0, '', 0),
(8999, 0, '', 0),
(9000, 0, '', 0),
(9001, 0, '', 0),
(9002, 0, '', 0),
(9003, 0, '', 0),
(9004, 0, '', 0),
(9005, 0, '', 0),
(9006, 0, '', 0),
(9007, 0, '', 0),
(9008, 0, '', 0),
(9009, 0, '', 0),
(9010, 0, '', 0),
(9011, 0, '', 0),
(9012, 0, '', 0),
(9013, 0, '', 0),
(9014, 0, '', 0),
(9015, 0, '', 0),
(9016, 0, '', 0),
(9017, 0, '', 0),
(9018, 0, '', 0),
(9019, 0, '', 0),
(9020, 0, '', 0),
(9021, 0, '', 0),
(9022, 0, '', 0),
(9023, 0, '', 0),
(9024, 0, '', 0),
(9025, 0, '', 0),
(9026, 0, '', 0),
(9027, 0, '', 0),
(9028, 0, '', 0),
(9029, 0, '', 0),
(9030, 0, '', 0),
(9031, 0, '', 0),
(9032, 0, '', 0),
(9033, 0, '', 0),
(9034, 0, '', 0),
(9035, 0, '', 0),
(9036, 0, '', 0),
(9037, 0, '', 0),
(9038, 0, '', 0),
(9039, 0, '', 0),
(9040, 0, '', 0),
(9041, 0, '', 0),
(9042, 0, '', 0),
(9043, 0, '', 0),
(9044, 0, '', 0),
(9045, 0, '', 0),
(9046, 0, '', 0),
(9047, 0, '', 0),
(9048, 0, '', 0),
(9049, 0, '', 0),
(9050, 0, '', 0),
(9051, 0, '', 0),
(9052, 0, '', 0),
(9053, 0, '', 0),
(9054, 0, '', 0),
(9055, 0, '', 0),
(9056, 0, '', 0),
(9057, 0, '', 0),
(9058, 0, '', 0),
(9059, 0, '', 0),
(9060, 0, '', 0),
(9061, 0, '', 0),
(9062, 0, '', 0),
(9063, 0, '', 0),
(9064, 0, '', 0),
(9065, 0, '', 0),
(9066, 0, '', 0),
(9067, 0, '', 0),
(9068, 0, '', 0),
(9069, 0, '', 0),
(9070, 0, '', 0),
(9071, 0, '', 0),
(9072, 0, '', 0),
(9073, 0, '', 0),
(9074, 0, '', 0),
(9075, 0, '', 0),
(9076, 0, '', 0),
(9077, 0, '', 0),
(9078, 0, '', 0),
(9079, 0, '', 0),
(9080, 0, '', 0),
(9081, 0, '', 0),
(9082, 0, '', 0),
(9083, 0, '', 0),
(9084, 0, '', 0),
(9085, 0, '', 0),
(9086, 0, '', 0),
(9087, 0, '', 0),
(9088, 0, '', 0),
(9089, 0, '', 0),
(9090, 0, '', 0),
(9091, 0, '', 0),
(9092, 0, '', 0),
(9093, 0, '', 0),
(9094, 0, '', 0),
(9095, 0, '', 0),
(9096, 0, '', 0),
(9097, 0, '', 0),
(9098, 0, '', 0),
(9099, 0, '', 0),
(9100, 0, '', 0),
(9101, 0, '', 0),
(9102, 0, '', 0),
(9103, 0, '', 0),
(9104, 0, '', 0),
(9105, 0, '', 0),
(9106, 0, '', 0),
(9107, 0, '', 0),
(9108, 0, '', 0),
(9109, 0, '', 0),
(9110, 0, '', 0),
(9111, 0, '', 0),
(9112, 0, '', 0),
(9113, 0, '', 0),
(9114, 0, '', 0),
(9115, 0, '', 0),
(9116, 0, '', 0),
(9117, 0, '', 0),
(9118, 0, '', 0),
(9119, 0, '', 0),
(9120, 0, '', 0),
(9121, 0, '', 0),
(9122, 0, '', 0),
(9123, 0, '', 0),
(9124, 0, '', 0),
(9125, 0, '', 0),
(9126, 0, '', 0),
(9127, 0, '', 0),
(9128, 0, '', 0),
(9129, 0, '', 0),
(9130, 0, '', 0),
(9131, 0, '', 0),
(9132, 0, '', 0),
(9133, 0, '', 0),
(9134, 0, '', 0),
(9135, 0, '', 0),
(9136, 0, '', 0),
(9137, 0, '', 0),
(9138, 0, '', 0),
(9139, 0, '', 0),
(9140, 0, '', 0),
(9141, 0, '', 0),
(9142, 0, '', 0),
(9143, 0, '', 0),
(9144, 0, '', 0),
(9145, 0, '', 0),
(9146, 0, '', 0),
(9147, 0, '', 0),
(9148, 0, '', 0),
(9149, 0, '', 0),
(9150, 0, '', 0),
(9151, 0, '', 0),
(9152, 0, '', 0),
(9153, 0, '', 0),
(9154, 0, '', 0),
(9155, 0, '', 0),
(9156, 0, '', 0),
(9157, 0, '', 0),
(9158, 0, '', 0),
(9159, 0, '', 0),
(9160, 0, '', 0),
(9161, 0, '', 0),
(9162, 0, '', 0),
(9163, 0, '', 0),
(9164, 0, '', 0),
(9165, 0, '', 0),
(9166, 0, '', 0),
(9167, 0, '', 0),
(9168, 0, '', 0),
(9169, 0, '', 0),
(9170, 0, '', 0),
(9171, 0, '', 0),
(9172, 0, '', 0),
(9173, 0, '', 0),
(9174, 0, '', 0),
(9175, 0, '', 0),
(9176, 0, '', 0),
(9177, 0, '', 0),
(9178, 0, '', 0),
(9179, 0, '', 0),
(9180, 0, '', 0),
(9181, 0, '', 0),
(9182, 0, '', 0),
(9183, 0, '', 0),
(9184, 0, '', 0),
(9185, 0, '', 0),
(9186, 0, '', 0),
(9187, 0, '', 0),
(9188, 0, '', 0),
(9189, 0, '', 0),
(9190, 0, '', 0),
(9191, 0, '', 0),
(9192, 0, '', 0),
(9193, 0, '', 0),
(9194, 0, '', 0),
(9195, 0, '', 0),
(9196, 0, '', 0),
(9197, 0, '', 0),
(9198, 0, '', 0),
(9199, 0, '', 0),
(9200, 0, '', 0),
(9201, 0, '', 0),
(9202, 0, '', 0),
(9203, 0, '', 0),
(9204, 0, '', 0),
(9205, 0, '', 0),
(9206, 0, '', 0),
(9207, 0, '', 0),
(9208, 0, '', 0),
(9209, 0, '', 0),
(9210, 0, '', 0),
(9211, 0, '', 0),
(9212, 0, '', 0),
(9213, 0, '', 0),
(9214, 0, '', 0),
(9215, 0, '', 0),
(9216, 0, '', 0),
(9217, 0, '', 0),
(9218, 0, '', 0),
(9219, 0, '', 0),
(9220, 0, '', 0),
(9221, 0, '', 0),
(9222, 0, '', 0),
(9223, 0, '', 0),
(9224, 0, '', 0),
(9225, 0, '', 0),
(9226, 0, '', 0),
(9227, 0, '', 0),
(9228, 0, '', 0),
(9229, 0, '', 0),
(9230, 0, '', 0),
(9231, 0, '', 0),
(9232, 0, '', 0),
(9233, 0, '', 0),
(9234, 0, '', 0),
(9235, 0, '', 0),
(9236, 0, '', 0),
(9237, 0, '', 0),
(9238, 0, '', 0),
(9239, 0, '', 0),
(9240, 0, '', 0),
(9241, 0, '', 0),
(9242, 0, '', 0),
(9243, 0, '', 0),
(9244, 0, '', 0),
(9245, 0, '', 0),
(9246, 0, '', 0),
(9247, 0, '', 0),
(9248, 0, '', 0),
(9249, 0, '', 0),
(9250, 0, '', 0),
(9251, 0, '', 0),
(9252, 0, '', 0),
(9253, 0, '', 0),
(9254, 0, '', 0),
(9255, 0, '', 0),
(9256, 0, '', 0),
(9257, 0, '', 0),
(9258, 0, '', 0),
(9259, 0, '', 0),
(9260, 0, '', 0),
(9261, 0, '', 0),
(9262, 0, '', 0),
(9263, 0, '', 0),
(9264, 0, '', 0),
(9265, 0, '', 0),
(9266, 0, '', 0),
(9267, 0, '', 0),
(9268, 0, '', 0),
(9269, 0, '', 0),
(9270, 0, '', 0),
(9271, 0, '', 0),
(9272, 0, '', 0),
(9273, 0, '', 0),
(9274, 0, '', 0),
(9275, 0, '', 0),
(9276, 0, '', 0),
(9277, 0, '', 0),
(9278, 0, '', 0),
(9279, 0, '', 0),
(9280, 0, '', 0),
(9281, 0, '', 0),
(9282, 0, '', 0),
(9283, 0, '', 0),
(9284, 0, '', 0),
(9285, 0, '', 0),
(9286, 0, '', 0),
(9287, 0, '', 0),
(9288, 0, '', 0),
(9289, 0, '', 0),
(9290, 0, '', 0),
(9291, 0, '', 0),
(9292, 0, '', 0),
(9293, 0, '', 0),
(9294, 0, '', 0),
(9295, 0, '', 0),
(9296, 0, '', 0),
(9297, 0, '', 0),
(9298, 0, '', 0),
(9299, 0, '', 0),
(9300, 0, '', 0),
(9301, 0, '', 0),
(9302, 0, '', 0),
(9303, 0, '', 0),
(9304, 0, '', 0),
(9305, 0, '', 0),
(9306, 0, '', 0),
(9307, 0, '', 0),
(9308, 0, '', 0),
(9309, 0, '', 0),
(9310, 0, '', 0),
(9311, 0, '', 0),
(9312, 0, '', 0),
(9313, 0, '', 0),
(9314, 0, '', 0),
(9315, 0, '', 0),
(9316, 0, '', 0),
(9317, 0, '', 0),
(9318, 0, '', 0),
(9319, 0, '', 0),
(9320, 0, '', 0),
(9321, 0, '', 0),
(9322, 0, '', 0),
(9323, 0, '', 0),
(9324, 0, '', 0),
(9325, 0, '', 0),
(9326, 0, '', 0),
(9327, 0, '', 0),
(9328, 0, '', 0),
(9329, 0, '', 0),
(9330, 0, '', 0),
(9331, 0, '', 0),
(9332, 0, '', 0),
(9333, 0, '', 0),
(9334, 0, '', 0),
(9335, 0, '', 0),
(9336, 0, '', 0),
(9337, 0, '', 0),
(9338, 0, '', 0),
(9339, 0, '', 0),
(9340, 0, '', 0),
(9341, 0, '', 0),
(9342, 0, '', 0),
(9343, 0, '', 0),
(9344, 0, '', 0),
(9345, 0, '', 0),
(9346, 0, '', 0),
(9347, 0, '', 0),
(9348, 0, '', 0),
(9349, 0, '', 0),
(9350, 0, '', 0),
(9351, 0, '', 0),
(9352, 0, '', 0),
(9353, 0, '', 0),
(9354, 0, '', 0),
(9355, 0, '', 0),
(9356, 0, '', 0),
(9357, 0, '', 0),
(9358, 0, '', 0),
(9359, 0, '', 0),
(9360, 0, '', 0),
(9361, 0, '', 0),
(9362, 0, '', 0),
(9363, 0, '', 0),
(9364, 0, '', 0),
(9365, 0, '', 0),
(9366, 0, '', 0),
(9367, 0, '', 0),
(9368, 0, '', 0),
(9369, 0, '', 0),
(9370, 0, '', 0),
(9371, 0, '', 0),
(9372, 0, '', 0),
(9373, 0, '', 0),
(9374, 0, '', 0),
(9375, 0, '', 0),
(9376, 0, '', 0),
(9377, 0, '', 0),
(9378, 0, '', 0),
(9379, 0, '', 0),
(9380, 0, '', 0),
(9381, 0, '', 0),
(9382, 0, '', 0),
(9383, 0, '', 0),
(9384, 0, '', 0),
(9385, 0, '', 0),
(9386, 0, '', 0),
(9387, 0, '', 0),
(9388, 0, '', 0),
(9389, 0, '', 0),
(9390, 0, '', 0),
(9391, 0, '', 0),
(9392, 0, '', 0),
(9393, 0, '', 0),
(9394, 0, '', 0),
(9395, 0, '', 0),
(9396, 0, '', 0),
(9397, 0, '', 0),
(9398, 0, '', 0),
(9399, 0, '', 0),
(9400, 0, '', 0),
(9401, 0, '', 0),
(9402, 0, '', 0),
(9403, 0, '', 0),
(9404, 0, 'import java.util.Scanner;\r\n', 0),
(9405, 1, ' class Years{\r\n', 2),
(9406, 2, '   public int getYear(){\r\n', 4),
(9407, 3, '	int year;\r\n', 0),
(9408, 4, '	String enteredYear;\r\n', 0),
(9409, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(9410, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(9411, 7, '	enteredYear = sc.next();\r\n', 8),
(9412, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(9413, 9, '	return year;\r\n', 2),
(9414, 10, '   }\r\n', 0),
(9415, 11, ' }\r\n', 0),
(9416, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9417, 13, ' class Months extends Years{\r\n', 4),
(9418, 14, '   public int getMonth(){\r\n', 4),
(9419, 15, '	int month;\r\n', 0),
(9420, 16, '	String enteredMonthNumber;\r\n', 0),
(9421, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(9422, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(9423, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(9424, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(9425, 21, '	return month;\r\n', 2),
(9426, 22, '   }\r\n', 0),
(9427, 23, ' }\r\n', 0),
(9428, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9429, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(9430, 26, ' static int numDays = 0;\r\n', 7),
(9431, 27, ' public static void main(String[] args) {\r\n', 8),
(9432, 28, '   int year;\r\n', 0),
(9433, 29, '   Months m = new Months();\r\n', 4),
(9434, 30, '   int month = m.getMonth();\r\n', 8),
(9435, 31, '   \r\n', 0),
(9436, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(9437, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(9438, 34, '   }\r\n', 0),
(9439, 35, '   else {\r\n', 2),
(9440, 36, '    switch (month) {\r\n', 2),
(9441, 37, '      case 1:\r\n', 5),
(9442, 38, '      case 3:\r\n', 5),
(9443, 39, '      case 5:\r\n', 5),
(9444, 40, '      case 7:\r\n', 5),
(9445, 41, '      case 8:\r\n', 5),
(9446, 42, '      case 10:\r\n', 5),
(9447, 43, '      case 12:\r\n', 5),
(9448, 44, '        numDays = 31;\r\n', 5),
(9449, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(9450, 46, '        break;\r\n', 2),
(9451, 47, '      case 4:\r\n', 5),
(9452, 48, '      case 6:\r\n', 5),
(9453, 49, '      case 9:\r\n', 5),
(9454, 50, '      case 11:\r\n', 5),
(9455, 51, '       numDays = 30;\r\n', 5),
(9456, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(9457, 53, '       break;\r\n', 2),
(9458, 54, '      case 2:\r\n', 5),
(9459, 55, '       year = m.getYear();\r\n', 8),
(9460, 56, '       if(year < 1) {\r\n', 5),
(9461, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(9462, 58, '       }\r\n', 0),
(9463, 59, '       else{\r\n', 2),
(9464, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(9465, 61, '         numDays = 29;\r\n', 5),
(9466, 62, '		 if(year > 2020){\r\n', 7),
(9467, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(9468, 64, '         }\r\n', 0),
(9469, 65, '         else{\r\n', 2),
(9470, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(9471, 67, '         }\r\n', 0),
(9472, 68, '        }//if at line 61\r\n', 0),
(9473, 69, '        else{\r\n', 2),
(9474, 70, '         numDays = 28;\r\n', 5),
(9475, 71, '         if (year > 2020){\r\n', 7),
(9476, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(9477, 73, '         }\r\n', 0),
(9478, 74, '         else{\r\n', 2),
(9479, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(9480, 76, '         }\r\n', 0),
(9481, 77, '         break;  \r\n', 2),
(9482, 78, '        }//else at line 70\r\n', 2),
(9483, 79, '       }//else at line 60\r\n', 2),
(9484, 80, '    }//switch at line 37\r\n', 2),
(9485, 81, '   }//else at line 36\r\n', 2),
(9486, 82, '  }//method\r\n', 2),
(9487, 83, ' }//class', 2),
(9488, 0, 'public class RecursionExample2 {  \r\n', 9),
(9489, 1, 'static int count=0;  \r\n', 7),
(9490, 2, 'public int p(){  \r\n', 4),
(9491, 3, 'count++;  \r\n', 2),
(9492, 4, 'if(count<=5){  \r\n', 9),
(9493, 5, 'System.out.println("hello "+count);  \r\n', 8),
(9494, 6, 'public int p();  \r\n', 4),
(9495, 7, '}  \r\n', 0),
(9496, 8, '}  \r\n', 0),
(9497, 9, 'public static void main(String[] args) {  \r\n', 8),
(9498, 10, 'p();  \r\n', 0),
(9499, 11, '}  \r\n', 0),
(9500, 12, '}  ', 0),
(9501, 0, 'import java.awt.event.*;\n', 0),
(9502, 1, 'import java.awt.*;\n', 0),
(9503, 2, '\n', 0),
(9504, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(9505, 4, '\n', 0),
(9506, 5, '    private int mx, my;\n', 4),
(9507, 6, '    private Dimension size;\n', 2),
(9508, 7, '    private int onaroll;\n', 2),
(9509, 8, '\n', 0),
(9510, 9, '    public void init() {\n', 6),
(9511, 10, '        onaroll = 0;\n', 5),
(9512, 11, '        setSize(500, 500);\n', 5),
(9513, 12, '        size = getSize();\n', 2),
(9514, 13, '        addMouseListener(this);\n', 2),
(9515, 14, '        addMouseMotionListener(this);\n', 2),
(9516, 15, '        addComponentListener(this);\n', 4),
(9517, 16, '    }\n', 0),
(9518, 17, '\n', 0),
(9519, 18, '    public void update(Graphics g) {\n', 6),
(9520, 19, '        Dimension newSize = getSize();\n', 4),
(9521, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(9522, 21, '            g.setColor(getBackground());\n', 6),
(9523, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(9524, 23, '        } else {\n', 2),
(9525, 24, '            size = newSize;\n', 4),
(9526, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(9527, 26, '        } // Calculate new position\n', 11),
(9528, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(9529, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(9530, 29, '        paint(g);\n', 0),
(9531, 30, '    }\n', 0),
(9532, 31, '  \n', 0),
(9533, 32, '    public void paint(Graphics g) {\n', 6),
(9534, 33, '        g.setColor(Color.black);\n', 6),
(9535, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(9536, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(9537, 36, '    }\n', 0),
(9538, 37, '\n', 0),
(9539, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(9540, 39, '\n', 0),
(9541, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(9542, 41, '        e.consume();\n', 6),
(9543, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(9544, 43, '            repaint();\n', 0),
(9545, 44, '        }\n', 0),
(9546, 45, '    }\n', 0),
(9547, 46, '\n', 0),
(9548, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(9549, 48, '        int x = e.getX();\n', 8),
(9550, 49, '        int y = e.getY();\n', 8),
(9551, 50, '        e.consume();\n', 6),
(9552, 51, '        requestFocus();\n', 0),
(9553, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(9554, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(9555, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(9556, 55, '                case 0:\n', 5),
(9557, 56, '                    play(getCodeBase(), \n', 2),
(9558, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(9559, 58, '                    break;\n', 2),
(9560, 59, '                case 1:\n', 5),
(9561, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(9562, 61, '                    break;\n', 2),
(9563, 62, '                case 2:\n', 5),
(9564, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(9565, 64, '                    break;\n', 2),
(9566, 65, '                case 3:\n', 5),
(9567, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(9568, 67, '                    break;\n', 2),
(9569, 68, '                }\n', 0),
(9570, 69, '                onaroll++;\n', 2),
(9571, 70, '                if (onaroll > 5) {\n', 7),
(9572, 72, '                } else {\n', 2),
(9573, 74, '                }\n', 0),
(9574, 75, '            } else {   //first hit\n', 0),
(9575, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(9576, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(9577, 78, '                onaroll = 1;\n', 5),
(9578, 79, '            }\n', 0),
(9579, 80, '        } else {   //miss\n', 0),
(9580, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(9581, 82, '			\n', 0),
(9582, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(9583, 84, '            onaroll = 0;\n', 5),
(9584, 85, '        }\n', 0),
(9585, 86, '        repaint();\n', 0),
(9586, 87, '    }\n', 0),
(9587, 88, '\n', 0),
(9588, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(9589, 90, '\n', 0),
(9590, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(9591, 92, '        repaint();\n', 0),
(9592, 93, '    }\n', 0),
(9593, 94, '\n', 0),
(9594, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(9595, 96, '        repaint();\n', 0),
(9596, 97, '    }\n', 0),
(9597, 98, '\n', 0),
(9598, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(9599, 100, '\n', 0),
(9600, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(9601, 102, ' \n', 0),
(9602, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(9603, 104, ' \n', 0),
(9604, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(9605, 106, '        repaint();\n', 0),
(9606, 107, '    }\n', 0),
(9607, 108, ' \n', 0),
(9608, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(9609, 110, '        repaint();\n', 0),
(9610, 111, '    }\n', 0),
(9611, 112, '  \n', 0),
(9612, 113, '    public void destroy() {\n', 6),
(9613, 114, '        removeMouseListener(this);\n', 2),
(9614, 115, '        removeMouseMotionListener(this);\n', 2),
(9615, 116, '    }\n', 0),
(9616, 117, '\n', 0),
(9617, 118, '    public String getAppletInfo() {\n', 4),
(9618, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(9619, 120, '    }\n', 0),
(9620, 121, '}\n', 0),
(9621, 0, 'import java.awt.event.*;\n', 0),
(9622, 1, 'import java.awt.*;\n', 0),
(9623, 2, '\n', 0),
(9624, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(9625, 4, '\n', 0),
(9626, 5, '    private int mx, my;\n', 4),
(9627, 6, '    private Dimension size;\n', 2),
(9628, 7, '    private int onaroll;\n', 2),
(9629, 8, '\n', 0),
(9630, 9, '    public void init() {\n', 6),
(9631, 10, '        onaroll = 0;\n', 5),
(9632, 11, '        setSize(500, 500);\n', 5),
(9633, 12, '        size = getSize();\n', 2),
(9634, 13, '        addMouseListener(this);\n', 2),
(9635, 14, '        addMouseMotionListener(this);\n', 2),
(9636, 15, '        addComponentListener(this);\n', 4),
(9637, 16, '    }\n', 0),
(9638, 17, '\n', 0),
(9639, 18, '    public void update(Graphics g) {\n', 6),
(9640, 19, '        Dimension newSize = getSize();\n', 4),
(9641, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(9642, 21, '            g.setColor(getBackground());\n', 6),
(9643, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(9644, 23, '        } else {\n', 2),
(9645, 24, '            size = newSize;\n', 4),
(9646, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(9647, 26, '        } // Calculate new position\n', 11),
(9648, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(9649, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(9650, 29, '        paint(g);\n', 0),
(9651, 30, '    }\n', 0),
(9652, 31, '  \n', 0),
(9653, 32, '    public void paint(Graphics g) {\n', 6),
(9654, 33, '        g.setColor(Color.black);\n', 6),
(9655, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(9656, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(9657, 36, '    }\n', 0),
(9658, 37, '\n', 0),
(9659, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(9660, 39, '\n', 0),
(9661, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(9662, 41, '        e.consume();\n', 6),
(9663, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(9664, 43, '            repaint();\n', 0),
(9665, 44, '        }\n', 0),
(9666, 45, '    }\n', 0),
(9667, 46, '\n', 0),
(9668, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(9669, 48, '        int x = e.getX();\n', 8),
(9670, 49, '        int y = e.getY();\n', 8),
(9671, 50, '        e.consume();\n', 6),
(9672, 51, '        requestFocus();\n', 0),
(9673, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(9674, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(9675, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(9676, 55, '                case 0:\n', 5),
(9677, 56, '                    play(getCodeBase(), \n', 2),
(9678, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(9679, 0, 'import java.util.Scanner;\r\n', 0),
(9680, 1, ' class Years{\r\n', 2),
(9681, 2, '   public int getYear(){\r\n', 4),
(9682, 3, '	int year;\r\n', 0),
(9683, 4, '	String enteredYear;\r\n', 0),
(9684, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(9685, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(9686, 7, '	enteredYear = sc.next();\r\n', 8),
(9687, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(9688, 9, '	return year;\r\n', 2),
(9689, 10, '   }\r\n', 0),
(9690, 11, ' }\r\n', 0),
(9691, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9692, 13, ' class Months extends Years{\r\n', 4),
(9693, 14, '   public int getMonth(){\r\n', 4),
(9694, 15, '	int month;\r\n', 0),
(9695, 16, '	String enteredMonthNumber;\r\n', 0),
(9696, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(9697, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(9698, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(9699, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(9700, 21, '	return month;\r\n', 2);
INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(9701, 22, '   }\r\n', 0),
(9702, 23, ' }\r\n', 0),
(9703, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9704, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(9705, 26, ' static int numDays = 0;\r\n', 7),
(9706, 27, ' public static void main(String[] args) {\r\n', 8),
(9707, 28, '   int year;\r\n', 0),
(9708, 29, '   Months m = new Months();\r\n', 4),
(9709, 30, '   int month = m.getMonth();\r\n', 8),
(9710, 31, '   \r\n', 0),
(9711, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(9712, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(9713, 34, '   }\r\n', 0),
(9714, 35, '   else {\r\n', 2),
(9715, 36, '    switch (month) {\r\n', 2),
(9716, 37, '      case 1:\r\n', 5),
(9717, 38, '      case 3:\r\n', 5),
(9718, 39, '      case 5:\r\n', 5),
(9719, 40, '      case 7:\r\n', 5),
(9720, 41, '      case 8:\r\n', 5),
(9721, 42, '      case 10:\r\n', 5),
(9722, 43, '      case 12:\r\n', 5),
(9723, 44, '        numDays = 31;\r\n', 5),
(9724, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(9725, 46, '        break;\r\n', 2),
(9726, 47, '      case 4:\r\n', 5),
(9727, 48, '      case 6:\r\n', 5),
(9728, 49, '      case 9:\r\n', 5),
(9729, 50, '      case 11:\r\n', 5),
(9730, 51, '       numDays = 30;\r\n', 5),
(9731, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(9732, 53, '       break;\r\n', 2),
(9733, 54, '      case 2:\r\n', 5),
(9734, 55, '       year = m.getYear();\r\n', 8),
(9735, 56, '       if(year < 1) {\r\n', 5),
(9736, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(9737, 58, '       }\r\n', 0),
(9738, 59, '       else{\r\n', 2),
(9739, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(9740, 61, '         numDays = 29;\r\n', 5),
(9741, 62, '		 if(year > 2020){\r\n', 7),
(9742, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(9743, 64, '         }\r\n', 0),
(9744, 65, '         else{\r\n', 2),
(9745, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(9746, 67, '         }\r\n', 0),
(9747, 68, '        }//if at line 61\r\n', 0),
(9748, 69, '        else{\r\n', 2),
(9749, 70, '         numDays = 28;\r\n', 5),
(9750, 71, '         if (year > 2020){\r\n', 7),
(9751, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(9752, 73, '         }\r\n', 0),
(9753, 74, '         else{\r\n', 2),
(9754, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(9755, 76, '         }\r\n', 0),
(9756, 77, '         break;  \r\n', 2),
(9757, 78, '        }//else at line 70\r\n', 2),
(9758, 79, '       }//else at line 60\r\n', 2),
(9759, 80, '    }//switch at line 37\r\n', 2),
(9760, 81, '   }//else at line 36\r\n', 2),
(9761, 82, '  }//method\r\n', 2),
(9762, 83, ' }//class', 2),
(9763, 0, 'public class RecursionExample2 {  \r\n', 9),
(9764, 1, 'static int count=0;  \r\n', 7),
(9765, 2, 'public int p(){  \r\n', 4),
(9766, 3, 'count++;  \r\n', 2),
(9767, 4, 'if(count<=5){  \r\n', 9),
(9768, 5, 'System.out.println("hello "+count);  \r\n', 8),
(9769, 6, 'public int p();  \r\n', 4),
(9770, 7, '}  \r\n', 0),
(9771, 8, '}  \r\n', 0),
(9772, 9, 'public static void main(String[] args) {  \r\n', 8),
(9773, 10, 'p();  \r\n', 0),
(9774, 11, '}  \r\n', 0),
(9775, 12, '}  ', 0),
(9776, 0, 'import java.awt.event.*;\n', 0),
(9777, 1, 'import java.awt.*;\n', 0),
(9778, 2, '\n', 0),
(9779, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(9780, 4, '\n', 0),
(9781, 5, '    private int mx, my;\n', 4),
(9782, 6, '    private Dimension size;\n', 2),
(9783, 7, '    private int onaroll;\n', 2),
(9784, 8, '\n', 0),
(9785, 9, '    public void init() {\n', 6),
(9786, 10, '        onaroll = 0;\n', 5),
(9787, 11, '        setSize(500, 500);\n', 5),
(9788, 12, '        size = getSize();\n', 2),
(9789, 13, '        addMouseListener(this);\n', 2),
(9790, 14, '        addMouseMotionListener(this);\n', 2),
(9791, 15, '        addComponentListener(this);\n', 4),
(9792, 16, '    }\n', 0),
(9793, 17, '\n', 0),
(9794, 18, '    public void update(Graphics g) {\n', 6),
(9795, 19, '        Dimension newSize = getSize();\n', 4),
(9796, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(9797, 21, '            g.setColor(getBackground());\n', 6),
(9798, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(9799, 23, '        } else {\n', 2),
(9800, 24, '            size = newSize;\n', 4),
(9801, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(9802, 26, '        } // Calculate new position\n', 11),
(9803, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(9804, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(9805, 29, '        paint(g);\n', 0),
(9806, 30, '    }\n', 0),
(9807, 31, '  \n', 0),
(9808, 32, '    public void paint(Graphics g) {\n', 6),
(9809, 33, '        g.setColor(Color.black);\n', 6),
(9810, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(9811, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(9812, 36, '    }\n', 0),
(9813, 37, '\n', 0),
(9814, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(9815, 39, '\n', 0),
(9816, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(9817, 41, '        e.consume();\n', 6),
(9818, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(9819, 43, '            repaint();\n', 0),
(9820, 44, '        }\n', 0),
(9821, 45, '    }\n', 0),
(9822, 46, '\n', 0),
(9823, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(9824, 48, '        int x = e.getX();\n', 8),
(9825, 49, '        int y = e.getY();\n', 8),
(9826, 50, '        e.consume();\n', 6),
(9827, 51, '        requestFocus();\n', 0),
(9828, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(9829, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(9830, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(9831, 55, '                case 0:\n', 5),
(9832, 56, '                    play(getCodeBase(), \n', 2),
(9833, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(9834, 58, '                    break;\n', 2),
(9835, 59, '                case 1:\n', 5),
(9836, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(9837, 61, '                    break;\n', 2),
(9838, 62, '                case 2:\n', 5),
(9839, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(9840, 64, '                    break;\n', 2),
(9841, 65, '                case 3:\n', 5),
(9842, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(9843, 67, '                    break;\n', 2),
(9844, 68, '                }\n', 0),
(9845, 69, '                onaroll++;\n', 2),
(9846, 70, '                if (onaroll > 5) {\n', 7),
(9847, 72, '                } else {\n', 2),
(9848, 74, '                }\n', 0),
(9849, 75, '            } else {   //first hit\n', 0),
(9850, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(9851, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(9852, 78, '                onaroll = 1;\n', 5),
(9853, 79, '            }\n', 0),
(9854, 80, '        } else {   //miss\n', 0),
(9855, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(9856, 82, '			\n', 0),
(9857, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(9858, 84, '            onaroll = 0;\n', 5),
(9859, 85, '        }\n', 0),
(9860, 86, '        repaint();\n', 0),
(9861, 87, '    }\n', 0),
(9862, 88, '\n', 0),
(9863, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(9864, 90, '\n', 0),
(9865, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(9866, 92, '        repaint();\n', 0),
(9867, 93, '    }\n', 0),
(9868, 94, '\n', 0),
(9869, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(9870, 96, '        repaint();\n', 0),
(9871, 97, '    }\n', 0),
(9872, 98, '\n', 0),
(9873, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(9874, 100, '\n', 0),
(9875, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(9876, 102, ' \n', 0),
(9877, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(9878, 104, ' \n', 0),
(9879, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(9880, 106, '        repaint();\n', 0),
(9881, 107, '    }\n', 0),
(9882, 108, ' \n', 0),
(9883, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(9884, 110, '        repaint();\n', 0),
(9885, 111, '    }\n', 0),
(9886, 112, '  \n', 0),
(9887, 113, '    public void destroy() {\n', 6),
(9888, 114, '        removeMouseListener(this);\n', 2),
(9889, 115, '        removeMouseMotionListener(this);\n', 2),
(9890, 116, '    }\n', 0),
(9891, 117, '\n', 0),
(9892, 118, '    public String getAppletInfo() {\n', 4),
(9893, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(9894, 120, '    }\n', 0),
(9895, 121, '}\n', 0),
(9896, 0, 'import java.awt.event.*;\n', 0),
(9897, 1, 'import java.awt.*;\n', 0),
(9898, 2, '\n', 0),
(9899, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(9900, 4, '\n', 0),
(9901, 5, '    private int mx, my;\n', 4),
(9902, 6, '    private Dimension size;\n', 2),
(9903, 7, '    private int onaroll;\n', 2),
(9904, 8, '\n', 0),
(9905, 9, '    public void init() {\n', 6),
(9906, 10, '        onaroll = 0;\n', 5),
(9907, 11, '        setSize(500, 500);\n', 5),
(9908, 12, '        size = getSize();\n', 2),
(9909, 13, '        addMouseListener(this);\n', 2),
(9910, 14, '        addMouseMotionListener(this);\n', 2),
(9911, 15, '        addComponentListener(this);\n', 4),
(9912, 16, '    }\n', 0),
(9913, 17, '\n', 0),
(9914, 18, '    public void update(Graphics g) {\n', 6),
(9915, 19, '        Dimension newSize = getSize();\n', 4),
(9916, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(9917, 21, '            g.setColor(getBackground());\n', 6),
(9918, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(9919, 23, '        } else {\n', 2),
(9920, 24, '            size = newSize;\n', 4),
(9921, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(9922, 26, '        } // Calculate new position\n', 11),
(9923, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(9924, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(9925, 29, '        paint(g);\n', 0),
(9926, 30, '    }\n', 0),
(9927, 31, '  \n', 0),
(9928, 32, '    public void paint(Graphics g) {\n', 6),
(9929, 33, '        g.setColor(Color.black);\n', 6),
(9930, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(9931, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(9932, 36, '    }\n', 0),
(9933, 37, '\n', 0),
(9934, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(9935, 39, '\n', 0),
(9936, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(9937, 41, '        e.consume();\n', 6),
(9938, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(9939, 43, '            repaint();\n', 0),
(9940, 44, '        }\n', 0),
(9941, 45, '    }\n', 0),
(9942, 46, '\n', 0),
(9943, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(9944, 48, '        int x = e.getX();\n', 8),
(9945, 49, '        int y = e.getY();\n', 8),
(9946, 50, '        e.consume();\n', 6),
(9947, 51, '        requestFocus();\n', 0),
(9948, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(9949, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(9950, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(9951, 55, '                case 0:\n', 5),
(9952, 56, '                    play(getCodeBase(), \n', 2),
(9953, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(9954, 58, '                    break;\n', 2),
(9955, 59, '                case 1:\n', 5),
(9956, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(9957, 61, '                    break;\n', 2),
(9958, 62, '                case 2:\n', 5),
(9959, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(9960, 64, '                    break;\n', 2),
(9961, 65, '                case 3:\n', 5),
(9962, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(9963, 67, '                    break;\n', 2),
(9964, 68, '                }\n', 0),
(9965, 69, '                onaroll++;\n', 2),
(9966, 70, '                if (onaroll > 5) {\n', 7),
(9967, 72, '                } else {\n', 2),
(9968, 74, '                }\n', 0),
(9969, 75, '            } else {   //first hit\n', 0),
(9970, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(9971, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(9972, 78, '                onaroll = 1;\n', 5),
(9973, 79, '            }\n', 0),
(9974, 80, '        } else {   //miss\n', 0),
(9975, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(9976, 82, '			\n', 0),
(9977, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(9978, 84, '            onaroll = 0;\n', 5),
(9979, 85, '        }\n', 0),
(9980, 86, '        repaint();\n', 0),
(9981, 87, '    }\n', 0),
(9982, 88, '\n', 0),
(9983, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(9984, 90, '\n', 0),
(9985, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(9986, 92, '        repaint();\n', 0),
(9987, 93, '    }\n', 0),
(9988, 94, '\n', 0),
(9989, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(9990, 96, '        repaint();\n', 0),
(9991, 97, '    }\n', 0),
(9992, 98, '\n', 0),
(9993, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(9994, 100, '\n', 0),
(9995, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(9996, 102, ' \n', 0),
(9997, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(9998, 104, ' \n', 0),
(9999, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(10000, 106, '        repaint();\n', 0),
(10001, 107, '    }\n', 0),
(10002, 108, ' \n', 0),
(10003, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(10004, 110, '        repaint();\n', 0),
(10005, 111, '    }\n', 0),
(10006, 112, '  \n', 0),
(10007, 113, '    public void destroy() {\n', 6),
(10008, 114, '        removeMouseListener(this);\n', 2),
(10009, 115, '        removeMouseMotionListener(this);\n', 2),
(10010, 116, '    }\n', 0),
(10011, 117, '\n', 0),
(10012, 118, '    public String getAppletInfo() {\n', 4),
(10013, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(10014, 120, '    }\n', 0),
(10015, 121, '}\n', 0),
(10016, 0, 'import java.util.Scanner;\r\n', 0),
(10017, 1, ' class Years{\r\n', 2),
(10018, 2, '   public int getYear(){\r\n', 4),
(10019, 3, '	int year;\r\n', 0),
(10020, 4, '	String enteredYear;\r\n', 0),
(10021, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(10022, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(10023, 7, '	enteredYear = sc.next();\r\n', 8),
(10024, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(10025, 9, '	return year;\r\n', 2),
(10026, 10, '   }\r\n', 0),
(10027, 11, ' }\r\n', 0),
(10028, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10029, 13, ' class Months extends Years{\r\n', 4),
(10030, 14, '   public int getMonth(){\r\n', 4),
(10031, 15, '	int month;\r\n', 0),
(10032, 16, '	String enteredMonthNumber;\r\n', 0),
(10033, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(10034, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(10035, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(10036, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(10037, 21, '	return month;\r\n', 2),
(10038, 22, '   }\r\n', 0),
(10039, 23, ' }\r\n', 0),
(10040, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10041, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(10042, 26, ' static int numDays = 0;\r\n', 7),
(10043, 27, ' public static void main(String[] args) {\r\n', 8),
(10044, 28, '   int year;\r\n', 0),
(10045, 29, '   Months m = new Months();\r\n', 4),
(10046, 30, '   int month = m.getMonth();\r\n', 8),
(10047, 31, '   \r\n', 0),
(10048, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(10049, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(10050, 34, '   }\r\n', 0),
(10051, 35, '   else {\r\n', 2),
(10052, 36, '    switch (month) {\r\n', 2),
(10053, 37, '      case 1:\r\n', 5),
(10054, 38, '      case 3:\r\n', 5),
(10055, 39, '      case 5:\r\n', 5),
(10056, 40, '      case 7:\r\n', 5),
(10057, 41, '      case 8:\r\n', 5),
(10058, 42, '      case 10:\r\n', 5),
(10059, 43, '      case 12:\r\n', 5),
(10060, 44, '        numDays = 31;\r\n', 5),
(10061, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(10062, 46, '        break;\r\n', 2),
(10063, 47, '      case 4:\r\n', 5),
(10064, 48, '      case 6:\r\n', 5),
(10065, 49, '      case 9:\r\n', 5),
(10066, 50, '      case 11:\r\n', 5),
(10067, 51, '       numDays = 30;\r\n', 5),
(10068, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(10069, 53, '       break;\r\n', 2),
(10070, 54, '      case 2:\r\n', 5),
(10071, 55, '       year = m.getYear();\r\n', 8),
(10072, 56, '       if(year < 1) {\r\n', 5),
(10073, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(10074, 58, '       }\r\n', 0),
(10075, 59, '       else{\r\n', 2),
(10076, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(10077, 61, '         numDays = 29;\r\n', 5),
(10078, 62, '		 if(year > 2020){\r\n', 7),
(10079, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(10080, 64, '         }\r\n', 0),
(10081, 65, '         else{\r\n', 2),
(10082, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(10083, 67, '         }\r\n', 0),
(10084, 68, '        }//if at line 61\r\n', 0),
(10085, 69, '        else{\r\n', 2),
(10086, 70, '         numDays = 28;\r\n', 5),
(10087, 71, '         if (year > 2020){\r\n', 7),
(10088, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(10089, 73, '         }\r\n', 0),
(10090, 74, '         else{\r\n', 2),
(10091, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(10092, 76, '         }\r\n', 0),
(10093, 77, '         break;  \r\n', 2),
(10094, 78, '        }//else at line 70\r\n', 2),
(10095, 79, '       }//else at line 60\r\n', 2),
(10096, 80, '    }//switch at line 37\r\n', 2),
(10097, 81, '   }//else at line 36\r\n', 2),
(10098, 82, '  }//method\r\n', 2),
(10099, 83, ' }//class', 2),
(10100, 0, 'class Pattern{ \r\n', 2),
(10101, 1, 'public static void main(String[] args) { \r\n', 8),
(10102, 2, '	 int rows = 5;\r\n', 5),
(10103, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(10104, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(10105, 5, '	 System.out.print(j + " "); \r\n', 13),
(10106, 6, '	 } \r\n', 0),
(10107, 7, '	 System.out.println(""); \r\n', 11),
(10108, 8, ' 	} \r\n', 0),
(10109, 9, ' 	} \r\n', 0),
(10110, 10, '} ', 0),
(10111, 0, 'import java.util.Scanner;\r\n', 0),
(10112, 1, ' class Years{\r\n', 2),
(10113, 2, '   public int getYear(){\r\n', 4),
(10114, 3, '	int year;\r\n', 0),
(10115, 4, '	String enteredYear;\r\n', 0),
(10116, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(10117, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(10118, 7, '	enteredYear = sc.next();\r\n', 8),
(10119, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(10120, 9, '	return year;\r\n', 2),
(10121, 10, '   }\r\n', 0),
(10122, 11, ' }\r\n', 0),
(10123, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10124, 13, ' class Months extends Years{\r\n', 4),
(10125, 14, '   public int getMonth(){\r\n', 4),
(10126, 15, '	int month;\r\n', 0),
(10127, 16, '	String enteredMonthNumber;\r\n', 0),
(10128, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(10129, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(10130, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(10131, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(10132, 21, '	return month;\r\n', 2),
(10133, 22, '   }\r\n', 0),
(10134, 23, ' }\r\n', 0),
(10135, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10136, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(10137, 26, ' static int numDays = 0;\r\n', 7),
(10138, 27, ' public static void main(String[] args) {\r\n', 8),
(10139, 28, '   int year;\r\n', 0),
(10140, 29, '   Months m = new Months();\r\n', 4),
(10141, 30, '   int month = m.getMonth();\r\n', 8),
(10142, 31, '   \r\n', 0),
(10143, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(10144, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(10145, 34, '   }\r\n', 0),
(10146, 35, '   else {\r\n', 2),
(10147, 36, '    switch (month) {\r\n', 2),
(10148, 37, '      case 1:\r\n', 5),
(10149, 38, '      case 3:\r\n', 5),
(10150, 39, '      case 5:\r\n', 5),
(10151, 40, '      case 7:\r\n', 5),
(10152, 41, '      case 8:\r\n', 5),
(10153, 42, '      case 10:\r\n', 5),
(10154, 43, '      case 12:\r\n', 5),
(10155, 44, '        numDays = 31;\r\n', 5),
(10156, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(10157, 46, '        break;\r\n', 2),
(10158, 47, '      case 4:\r\n', 5),
(10159, 48, '      case 6:\r\n', 5),
(10160, 49, '      case 9:\r\n', 5),
(10161, 50, '      case 11:\r\n', 5),
(10162, 51, '       numDays = 30;\r\n', 5),
(10163, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(10164, 53, '       break;\r\n', 2),
(10165, 54, '      case 2:\r\n', 5),
(10166, 55, '       year = m.getYear();\r\n', 8),
(10167, 56, '       if(year < 1) {\r\n', 5),
(10168, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(10169, 58, '       }\r\n', 0),
(10170, 59, '       else{\r\n', 2),
(10171, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(10172, 61, '         numDays = 29;\r\n', 5),
(10173, 62, '		 if(year > 2020){\r\n', 7),
(10174, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(10175, 64, '         }\r\n', 0),
(10176, 65, '         else{\r\n', 2),
(10177, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(10178, 67, '         }\r\n', 0),
(10179, 68, '        }//if at line 61\r\n', 0),
(10180, 69, '        else{\r\n', 2),
(10181, 70, '         numDays = 28;\r\n', 5),
(10182, 71, '         if (year > 2020){\r\n', 7),
(10183, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(10184, 73, '         }\r\n', 0),
(10185, 74, '         else{\r\n', 2),
(10186, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(10187, 76, '         }\r\n', 0),
(10188, 77, '         break;  \r\n', 2),
(10189, 78, '        }//else at line 70\r\n', 2),
(10190, 79, '       }//else at line 60\r\n', 2),
(10191, 80, '    }//switch at line 37\r\n', 2),
(10192, 81, '   }//else at line 36\r\n', 2),
(10193, 82, '  }//method\r\n', 2),
(10194, 83, ' }//class', 2),
(10195, 0, 'class HelloWorld { \r\n', 2),
(10196, 1, '	public static void main(String args[]) \r\n', 8),
(10197, 2, '	{ \r\n', 0),
(10198, 3, '		System.out.println("Hello World"); \r\n', 11),
(10199, 4, '	} \r\n', 0),
(10200, 5, '} \r\n', 0),
(10201, 0, 'import java.awt.event.*;\n', 0),
(10202, 1, 'import java.awt.*;\n', 0),
(10203, 2, '\n', 0),
(10204, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(10205, 4, '\n', 0),
(10206, 5, '    private int mx, my;\n', 4),
(10207, 6, '    private Dimension size;\n', 2),
(10208, 7, '    private int onaroll;\n', 2),
(10209, 8, '\n', 0),
(10210, 9, '    public void init() {\n', 6),
(10211, 10, '        onaroll = 0;\n', 5),
(10212, 11, '        setSize(500, 500);\n', 5),
(10213, 12, '        size = getSize();\n', 2),
(10214, 13, '        addMouseListener(this);\n', 2),
(10215, 14, '        addMouseMotionListener(this);\n', 2),
(10216, 15, '        addComponentListener(this);\n', 4),
(10217, 16, '    }\n', 0),
(10218, 17, '\n', 0),
(10219, 18, '    public void update(Graphics g) {\n', 6),
(10220, 19, '        Dimension newSize = getSize();\n', 4),
(10221, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(10222, 21, '            g.setColor(getBackground());\n', 6),
(10223, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(10224, 23, '        } else {\n', 2),
(10225, 24, '            size = newSize;\n', 4),
(10226, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(10227, 26, '        } // Calculate new position\n', 11),
(10228, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(10229, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(10230, 29, '        paint(g);\n', 0),
(10231, 30, '    }\n', 0),
(10232, 31, '  \n', 0),
(10233, 32, '    public void paint(Graphics g) {\n', 6),
(10234, 33, '        g.setColor(Color.black);\n', 6),
(10235, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(10236, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(10237, 36, '    }\n', 0),
(10238, 37, '\n', 0),
(10239, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(10240, 39, '\n', 0),
(10241, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(10242, 41, '        e.consume();\n', 6),
(10243, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(10244, 43, '            repaint();\n', 0),
(10245, 44, '        }\n', 0),
(10246, 45, '    }\n', 0),
(10247, 46, '\n', 0),
(10248, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(10249, 48, '        int x = e.getX();\n', 8),
(10250, 49, '        int y = e.getY();\n', 8),
(10251, 50, '        e.consume();\n', 6),
(10252, 51, '        requestFocus();\n', 0),
(10253, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(10254, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(10255, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(10256, 55, '                case 0:\n', 5),
(10257, 56, '                    play(getCodeBase(), \n', 2),
(10258, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(10259, 58, '                    break;\n', 2),
(10260, 59, '                case 1:\n', 5),
(10261, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(10262, 61, '                    break;\n', 2),
(10263, 62, '                case 2:\n', 5),
(10264, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(10265, 64, '                    break;\n', 2),
(10266, 65, '                case 3:\n', 5),
(10267, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(10268, 67, '                    break;\n', 2),
(10269, 68, '                }\n', 0),
(10270, 69, '                onaroll++;\n', 2),
(10271, 70, '                if (onaroll > 5) {\n', 7),
(10272, 72, '                } else {\n', 2),
(10273, 74, '                }\n', 0),
(10274, 75, '            } else {   //first hit\n', 0),
(10275, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(10276, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(10277, 78, '                onaroll = 1;\n', 5),
(10278, 79, '            }\n', 0),
(10279, 80, '        } else {   //miss\n', 0),
(10280, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(10281, 82, '			\n', 0),
(10282, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(10283, 84, '            onaroll = 0;\n', 5),
(10284, 85, '        }\n', 0),
(10285, 86, '        repaint();\n', 0),
(10286, 87, '    }\n', 0),
(10287, 88, '\n', 0),
(10288, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(10289, 90, '\n', 0),
(10290, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(10291, 92, '        repaint();\n', 0),
(10292, 93, '    }\n', 0),
(10293, 94, '\n', 0),
(10294, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(10295, 96, '        repaint();\n', 0),
(10296, 97, '    }\n', 0),
(10297, 98, '\n', 0),
(10298, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(10299, 100, '\n', 0),
(10300, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(10301, 102, ' \n', 0),
(10302, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(10303, 104, ' \n', 0),
(10304, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(10305, 106, '        repaint();\n', 0),
(10306, 107, '    }\n', 0),
(10307, 108, ' \n', 0),
(10308, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(10309, 110, '        repaint();\n', 0),
(10310, 111, '    }\n', 0),
(10311, 112, '  \n', 0),
(10312, 113, '    public void destroy() {\n', 6),
(10313, 114, '        removeMouseListener(this);\n', 2),
(10314, 115, '        removeMouseMotionListener(this);\n', 2),
(10315, 116, '    }\n', 0),
(10316, 117, '\n', 0),
(10317, 118, '    public String getAppletInfo() {\n', 4),
(10318, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(10319, 120, '    }\n', 0),
(10320, 121, '}\n', 0),
(10321, 0, 'import java.awt.event.*;\n', 0),
(10322, 1, 'import java.awt.*;\n', 0),
(10323, 2, '\n', 0),
(10324, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(10325, 4, '\n', 0),
(10326, 5, '    private int mx, my;\n', 4),
(10327, 6, '    private Dimension size;\n', 2),
(10328, 7, '    private int onaroll;\n', 2),
(10329, 8, '\n', 0),
(10330, 9, '    public void init() {\n', 6),
(10331, 10, '        onaroll = 0;\n', 5),
(10332, 11, '        setSize(500, 500);\n', 5),
(10333, 12, '        size = getSize();\n', 2),
(10334, 13, '        addMouseListener(this);\n', 2),
(10335, 14, '        addMouseMotionListener(this);\n', 2),
(10336, 15, '        addComponentListener(this);\n', 4),
(10337, 16, '    }\n', 0),
(10338, 17, '\n', 0),
(10339, 18, '    public void update(Graphics g) {\n', 6),
(10340, 19, '        Dimension newSize = getSize();\n', 4),
(10341, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(10342, 21, '            g.setColor(getBackground());\n', 6),
(10343, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(10344, 23, '        } else {\n', 2),
(10345, 24, '            size = newSize;\n', 4),
(10346, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(10347, 26, '        } // Calculate new position\n', 11),
(10348, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(10349, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(10350, 29, '        paint(g);\n', 0),
(10351, 30, '    }\n', 0),
(10352, 31, '  \n', 0),
(10353, 32, '    public void paint(Graphics g) {\n', 6),
(10354, 33, '        g.setColor(Color.black);\n', 6),
(10355, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(10356, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(10357, 36, '    }\n', 0),
(10358, 37, '\n', 0),
(10359, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(10360, 39, '\n', 0),
(10361, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(10362, 41, '        e.consume();\n', 6),
(10363, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(10364, 43, '            repaint();\n', 0),
(10365, 44, '        }\n', 0),
(10366, 45, '    }\n', 0),
(10367, 46, '\n', 0),
(10368, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(10369, 48, '        int x = e.getX();\n', 8),
(10370, 49, '        int y = e.getY();\n', 8),
(10371, 50, '        e.consume();\n', 6),
(10372, 51, '        requestFocus();\n', 0),
(10373, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(10374, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(10375, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(10376, 55, '                case 0:\n', 5),
(10377, 56, '                    play(getCodeBase(), \n', 2),
(10378, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(10379, 58, '                    break;\n', 2),
(10380, 59, '                case 1:\n', 5),
(10381, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(10382, 61, '                    break;\n', 2),
(10383, 62, '                case 2:\n', 5),
(10384, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(10385, 64, '                    break;\n', 2),
(10386, 65, '                case 3:\n', 5),
(10387, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(10388, 67, '                    break;\n', 2),
(10389, 68, '                }\n', 0),
(10390, 69, '                onaroll++;\n', 2),
(10391, 70, '                if (onaroll > 5) {\n', 7),
(10392, 72, '                } else {\n', 2),
(10393, 74, '                }\n', 0),
(10394, 75, '            } else {   //first hit\n', 0),
(10395, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(10396, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(10397, 78, '                onaroll = 1;\n', 5),
(10398, 79, '            }\n', 0),
(10399, 80, '        } else {   //miss\n', 0),
(10400, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(10401, 82, '			\n', 0),
(10402, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(10403, 84, '            onaroll = 0;\n', 5),
(10404, 85, '        }\n', 0),
(10405, 86, '        repaint();\n', 0),
(10406, 87, '    }\n', 0),
(10407, 88, '\n', 0),
(10408, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(10409, 90, '\n', 0),
(10410, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(10411, 92, '        repaint();\n', 0),
(10412, 93, '    }\n', 0),
(10413, 94, '\n', 0),
(10414, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(10415, 96, '        repaint();\n', 0),
(10416, 97, '    }\n', 0),
(10417, 98, '\n', 0),
(10418, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(10419, 100, '\n', 0),
(10420, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(10421, 102, ' \n', 0),
(10422, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(10423, 104, ' \n', 0),
(10424, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(10425, 106, '        repaint();\n', 0),
(10426, 107, '    }\n', 0),
(10427, 108, ' \n', 0),
(10428, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(10429, 110, '        repaint();\n', 0),
(10430, 111, '    }\n', 0),
(10431, 112, '  \n', 0),
(10432, 113, '    public void destroy() {\n', 6),
(10433, 114, '        removeMouseListener(this);\n', 2),
(10434, 115, '        removeMouseMotionListener(this);\n', 2),
(10435, 116, '    }\n', 0),
(10436, 117, '\n', 0),
(10437, 118, '    public String getAppletInfo() {\n', 4),
(10438, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(10439, 120, '    }\n', 0),
(10440, 121, '}\n', 0),
(10441, 0, 'import java.util.Scanner;\r\n', 0),
(10442, 1, ' class Years{\r\n', 2),
(10443, 2, '   public int getYear(){\r\n', 4),
(10444, 3, '	int year;\r\n', 0),
(10445, 4, '	String enteredYear;\r\n', 0),
(10446, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(10447, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(10448, 7, '	enteredYear = sc.next();\r\n', 8),
(10449, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(10450, 9, '	return year;\r\n', 2),
(10451, 10, '   }\r\n', 0),
(10452, 11, ' }\r\n', 0),
(10453, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10454, 13, ' class Months extends Years{\r\n', 4),
(10455, 14, '   public int getMonth(){\r\n', 4),
(10456, 15, '	int month;\r\n', 0),
(10457, 16, '	String enteredMonthNumber;\r\n', 0),
(10458, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(10459, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(10460, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(10461, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(10462, 21, '	return month;\r\n', 2),
(10463, 22, '   }\r\n', 0),
(10464, 23, ' }\r\n', 0),
(10465, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10466, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(10467, 26, ' static int numDays = 0;\r\n', 7),
(10468, 27, ' public static void main(String[] args) {\r\n', 8),
(10469, 28, '   int year;\r\n', 0),
(10470, 29, '   Months m = new Months();\r\n', 4),
(10471, 30, '   int month = m.getMonth();\r\n', 8),
(10472, 31, '   \r\n', 0),
(10473, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(10474, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(10475, 34, '   }\r\n', 0),
(10476, 35, '   else {\r\n', 2),
(10477, 36, '    switch (month) {\r\n', 2),
(10478, 37, '      case 1:\r\n', 5),
(10479, 38, '      case 3:\r\n', 5),
(10480, 39, '      case 5:\r\n', 5),
(10481, 40, '      case 7:\r\n', 5),
(10482, 41, '      case 8:\r\n', 5),
(10483, 42, '      case 10:\r\n', 5),
(10484, 43, '      case 12:\r\n', 5),
(10485, 44, '        numDays = 31;\r\n', 5),
(10486, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(10487, 46, '        break;\r\n', 2),
(10488, 47, '      case 4:\r\n', 5),
(10489, 48, '      case 6:\r\n', 5),
(10490, 49, '      case 9:\r\n', 5),
(10491, 50, '      case 11:\r\n', 5),
(10492, 51, '       numDays = 30;\r\n', 5),
(10493, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(10494, 53, '       break;\r\n', 2),
(10495, 54, '      case 2:\r\n', 5),
(10496, 55, '       year = m.getYear();\r\n', 8),
(10497, 56, '       if(year < 1) {\r\n', 5),
(10498, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(10499, 58, '       }\r\n', 0),
(10500, 59, '       else{\r\n', 2),
(10501, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(10502, 61, '         numDays = 29;\r\n', 5),
(10503, 62, '		 if(year > 2020){\r\n', 7),
(10504, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(10505, 64, '         }\r\n', 0),
(10506, 65, '         else{\r\n', 2),
(10507, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(10508, 67, '         }\r\n', 0),
(10509, 68, '        }//if at line 61\r\n', 0),
(10510, 69, '        else{\r\n', 2),
(10511, 70, '         numDays = 28;\r\n', 5),
(10512, 71, '         if (year > 2020){\r\n', 7),
(10513, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(10514, 73, '         }\r\n', 0),
(10515, 74, '         else{\r\n', 2),
(10516, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(10517, 76, '         }\r\n', 0),
(10518, 77, '         break;  \r\n', 2),
(10519, 78, '        }//else at line 70\r\n', 2),
(10520, 79, '       }//else at line 60\r\n', 2),
(10521, 80, '    }//switch at line 37\r\n', 2),
(10522, 81, '   }//else at line 36\r\n', 2),
(10523, 82, '  }//method\r\n', 2),
(10524, 83, ' }//class', 2),
(10525, 0, 'public class RecursionExample2 {  \r\n', 9),
(10526, 1, 'static int count=0;  \r\n', 7),
(10527, 2, 'public int p(){  \r\n', 4),
(10528, 3, 'count++;  \r\n', 2),
(10529, 4, 'if(count<=5){  \r\n', 9),
(10530, 5, 'System.out.println("hello "+count);  \r\n', 8),
(10531, 6, 'public int p();  \r\n', 4),
(10532, 7, '}  \r\n', 0),
(10533, 8, '}  \r\n', 0),
(10534, 9, 'public static void main(String[] args) {  \r\n', 8),
(10535, 10, 'p();  \r\n', 0),
(10536, 11, '}  \r\n', 0),
(10537, 12, '}  ', 0),
(10538, 0, 'import java.awt.event.*;\n', 0),
(10539, 1, 'import java.awt.*;\n', 0),
(10540, 2, '\n', 0),
(10541, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(10542, 4, '\n', 0),
(10543, 5, '    private int mx, my;\n', 4),
(10544, 6, '    private Dimension size;\n', 2),
(10545, 7, '    private int onaroll;\n', 2),
(10546, 8, '\n', 0),
(10547, 9, '    public void init() {\n', 6),
(10548, 10, '        onaroll = 0;\n', 5),
(10549, 11, '        setSize(500, 500);\n', 5),
(10550, 12, '        size = getSize();\n', 2),
(10551, 13, '        addMouseListener(this);\n', 2),
(10552, 14, '        addMouseMotionListener(this);\n', 2),
(10553, 15, '        addComponentListener(this);\n', 4),
(10554, 16, '    }\n', 0),
(10555, 17, '\n', 0),
(10556, 18, '    public void update(Graphics g) {\n', 6),
(10557, 19, '        Dimension newSize = getSize();\n', 4),
(10558, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(10559, 21, '            g.setColor(getBackground());\n', 6),
(10560, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(10561, 23, '        } else {\n', 2),
(10562, 24, '            size = newSize;\n', 4),
(10563, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(10564, 26, '        } // Calculate new position\n', 11),
(10565, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(10566, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(10567, 29, '        paint(g);\n', 0),
(10568, 30, '    }\n', 0),
(10569, 31, '  \n', 0),
(10570, 32, '    public void paint(Graphics g) {\n', 6),
(10571, 33, '        g.setColor(Color.black);\n', 6),
(10572, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(10573, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(10574, 36, '    }\n', 0),
(10575, 37, '\n', 0),
(10576, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(10577, 39, '\n', 0),
(10578, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(10579, 41, '        e.consume();\n', 6),
(10580, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(10581, 43, '            repaint();\n', 0),
(10582, 44, '        }\n', 0),
(10583, 45, '    }\n', 0),
(10584, 46, '\n', 0),
(10585, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(10586, 48, '        int x = e.getX();\n', 8),
(10587, 49, '        int y = e.getY();\n', 8),
(10588, 50, '        e.consume();\n', 6),
(10589, 51, '        requestFocus();\n', 0),
(10590, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(10591, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(10592, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(10593, 55, '                case 0:\n', 5),
(10594, 56, '                    play(getCodeBase(), \n', 2),
(10595, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(10596, 58, '                    break;\n', 2),
(10597, 59, '                case 1:\n', 5),
(10598, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(10599, 61, '                    break;\n', 2),
(10600, 62, '                case 2:\n', 5),
(10601, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(10602, 64, '                    break;\n', 2),
(10603, 65, '                case 3:\n', 5),
(10604, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(10605, 67, '                    break;\n', 2),
(10606, 68, '                }\n', 0),
(10607, 69, '                onaroll++;\n', 2),
(10608, 70, '                if (onaroll > 5) {\n', 7),
(10609, 72, '                } else {\n', 2),
(10610, 74, '                }\n', 0),
(10611, 75, '            } else {   //first hit\n', 0),
(10612, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(10613, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(10614, 78, '                onaroll = 1;\n', 5),
(10615, 79, '            }\n', 0),
(10616, 80, '        } else {   //miss\n', 0),
(10617, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(10618, 82, '			\n', 0),
(10619, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(10620, 84, '            onaroll = 0;\n', 5),
(10621, 85, '        }\n', 0),
(10622, 86, '        repaint();\n', 0),
(10623, 87, '    }\n', 0),
(10624, 88, '\n', 0),
(10625, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(10626, 90, '\n', 0),
(10627, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(10628, 92, '        repaint();\n', 0),
(10629, 93, '    }\n', 0),
(10630, 94, '\n', 0),
(10631, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(10632, 96, '        repaint();\n', 0),
(10633, 97, '    }\n', 0),
(10634, 98, '\n', 0),
(10635, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(10636, 100, '\n', 0),
(10637, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(10638, 102, ' \n', 0),
(10639, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(10640, 104, ' \n', 0),
(10641, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(10642, 106, '        repaint();\n', 0),
(10643, 107, '    }\n', 0),
(10644, 108, ' \n', 0),
(10645, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(10646, 110, '        repaint();\n', 0),
(10647, 111, '    }\n', 0),
(10648, 112, '  \n', 0),
(10649, 113, '    public void destroy() {\n', 6),
(10650, 114, '        removeMouseListener(this);\n', 2),
(10651, 115, '        removeMouseMotionListener(this);\n', 2),
(10652, 116, '    }\n', 0),
(10653, 117, '\n', 0),
(10654, 118, '    public String getAppletInfo() {\n', 4),
(10655, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(10656, 120, '    }\n', 0),
(10657, 121, '}\n', 0),
(10658, 0, 'import java.awt.event.*;\n', 0),
(10659, 1, 'import java.awt.*;\n', 0),
(10660, 2, '\n', 0),
(10661, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(10662, 4, '\n', 0),
(10663, 5, '    private int mx, my;\n', 4),
(10664, 6, '    private Dimension size;\n', 2),
(10665, 7, '    private int onaroll;\n', 2),
(10666, 8, '\n', 0),
(10667, 9, '    public void init() {\n', 6),
(10668, 10, '        onaroll = 0;\n', 5),
(10669, 11, '        setSize(500, 500);\n', 5),
(10670, 12, '        size = getSize();\n', 2),
(10671, 13, '        addMouseListener(this);\n', 2),
(10672, 14, '        addMouseMotionListener(this);\n', 2),
(10673, 15, '        addComponentListener(this);\n', 4),
(10674, 16, '    }\n', 0),
(10675, 17, '\n', 0),
(10676, 18, '    public void update(Graphics g) {\n', 6),
(10677, 19, '        Dimension newSize = getSize();\n', 4),
(10678, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(10679, 21, '            g.setColor(getBackground());\n', 6),
(10680, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(10681, 23, '        } else {\n', 2),
(10682, 24, '            size = newSize;\n', 4),
(10683, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(10684, 26, '        } // Calculate new position\n', 11),
(10685, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(10686, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(10687, 29, '        paint(g);\n', 0),
(10688, 30, '    }\n', 0),
(10689, 31, '  \n', 0),
(10690, 32, '    public void paint(Graphics g) {\n', 6),
(10691, 33, '        g.setColor(Color.black);\n', 6),
(10692, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(10693, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(10694, 36, '    }\n', 0),
(10695, 37, '\n', 0),
(10696, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(10697, 39, '\n', 0),
(10698, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(10699, 41, '        e.consume();\n', 6),
(10700, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(10701, 43, '            repaint();\n', 0),
(10702, 44, '        }\n', 0),
(10703, 45, '    }\n', 0),
(10704, 46, '\n', 0),
(10705, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(10706, 48, '        int x = e.getX();\n', 8),
(10707, 49, '        int y = e.getY();\n', 8),
(10708, 50, '        e.consume();\n', 6),
(10709, 51, '        requestFocus();\n', 0),
(10710, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(10711, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(10712, 54, '                switch (onaroll%4) {   //play a sound\n', 0);
INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(10713, 55, '                case 0:\n', 5),
(10714, 56, '                    play(getCodeBase(), \n', 2),
(10715, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(10716, 58, '                    break;\n', 2),
(10717, 59, '                case 1:\n', 5),
(10718, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(10719, 61, '                    break;\n', 2),
(10720, 62, '                case 2:\n', 5),
(10721, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(10722, 64, '                    break;\n', 2),
(10723, 65, '                case 3:\n', 5),
(10724, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(10725, 67, '                    break;\n', 2),
(10726, 68, '                }\n', 0),
(10727, 69, '                onaroll++;\n', 2),
(10728, 70, '                if (onaroll > 5) {\n', 7),
(10729, 72, '                } else {\n', 2),
(10730, 74, '                }\n', 0),
(10731, 75, '            } else {   //first hit\n', 0),
(10732, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(10733, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(10734, 78, '                onaroll = 1;\n', 5),
(10735, 79, '            }\n', 0),
(10736, 80, '        } else {   //miss\n', 0),
(10737, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(10738, 82, '			\n', 0),
(10739, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(10740, 84, '            onaroll = 0;\n', 5),
(10741, 85, '        }\n', 0),
(10742, 86, '        repaint();\n', 0),
(10743, 87, '    }\n', 0),
(10744, 88, '\n', 0),
(10745, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(10746, 90, '\n', 0),
(10747, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(10748, 92, '        repaint();\n', 0),
(10749, 93, '    }\n', 0),
(10750, 94, '\n', 0),
(10751, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(10752, 96, '        repaint();\n', 0),
(10753, 97, '    }\n', 0),
(10754, 98, '\n', 0),
(10755, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(10756, 100, '\n', 0),
(10757, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(10758, 102, ' \n', 0),
(10759, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(10760, 104, ' \n', 0),
(10761, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(10762, 106, '        repaint();\n', 0),
(10763, 107, '    }\n', 0),
(10764, 108, ' \n', 0),
(10765, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(10766, 110, '        repaint();\n', 0),
(10767, 111, '    }\n', 0),
(10768, 112, '  \n', 0),
(10769, 113, '    public void destroy() {\n', 6),
(10770, 114, '        removeMouseListener(this);\n', 2),
(10771, 115, '        removeMouseMotionListener(this);\n', 2),
(10772, 116, '    }\n', 0),
(10773, 117, '\n', 0),
(10774, 118, '    public String getAppletInfo() {\n', 4),
(10775, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(10776, 120, '    }\n', 0),
(10777, 121, '}\n', 0),
(10778, 0, 'import java.util.Scanner;\r\n', 0),
(10779, 1, ' class Years{\r\n', 2),
(10780, 2, '   public int getYear(){\r\n', 4),
(10781, 3, '	int year;\r\n', 0),
(10782, 4, '	String enteredYear;\r\n', 0),
(10783, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(10784, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(10785, 7, '	enteredYear = sc.next();\r\n', 8),
(10786, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(10787, 9, '	return year;\r\n', 2),
(10788, 10, '   }\r\n', 0),
(10789, 11, ' }\r\n', 0),
(10790, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10791, 13, ' class Months extends Years{\r\n', 4),
(10792, 14, '   public int getMonth(){\r\n', 4),
(10793, 15, '	int month;\r\n', 0),
(10794, 16, '	String enteredMonthNumber;\r\n', 0),
(10795, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(10796, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(10797, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(10798, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(10799, 21, '	return month;\r\n', 2),
(10800, 22, '   }\r\n', 0),
(10801, 23, ' }\r\n', 0),
(10802, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10803, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(10804, 26, ' static int numDays = 0;\r\n', 7),
(10805, 27, ' public static void main(String[] args) {\r\n', 8),
(10806, 28, '   int year;\r\n', 0),
(10807, 29, '   Months m = new Months();\r\n', 4),
(10808, 30, '   int month = m.getMonth();\r\n', 8),
(10809, 31, '   \r\n', 0),
(10810, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(10811, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(10812, 34, '   }\r\n', 0),
(10813, 35, '   else {\r\n', 2),
(10814, 36, '    switch (month) {\r\n', 2),
(10815, 37, '      case 1:\r\n', 5),
(10816, 38, '      case 3:\r\n', 5),
(10817, 39, '      case 5:\r\n', 5),
(10818, 40, '      case 7:\r\n', 5),
(10819, 41, '      case 8:\r\n', 5),
(10820, 42, '      case 10:\r\n', 5),
(10821, 43, '      case 12:\r\n', 5),
(10822, 44, '        numDays = 31;\r\n', 5),
(10823, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(10824, 46, '        break;\r\n', 2),
(10825, 47, '      case 4:\r\n', 5),
(10826, 48, '      case 6:\r\n', 5),
(10827, 49, '      case 9:\r\n', 5),
(10828, 50, '      case 11:\r\n', 5),
(10829, 51, '       numDays = 30;\r\n', 5),
(10830, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(10831, 53, '       break;\r\n', 2),
(10832, 54, '      case 2:\r\n', 5),
(10833, 55, '       year = m.getYear();\r\n', 8),
(10834, 56, '       if(year < 1) {\r\n', 5),
(10835, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(10836, 58, '       }\r\n', 0),
(10837, 59, '       else{\r\n', 2),
(10838, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(10839, 61, '         numDays = 29;\r\n', 5),
(10840, 62, '		 if(year > 2020){\r\n', 7),
(10841, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(10842, 64, '         }\r\n', 0),
(10843, 65, '         else{\r\n', 2),
(10844, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(10845, 67, '         }\r\n', 0),
(10846, 68, '        }//if at line 61\r\n', 0),
(10847, 69, '        else{\r\n', 2),
(10848, 70, '         numDays = 28;\r\n', 5),
(10849, 71, '         if (year > 2020){\r\n', 7),
(10850, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(10851, 73, '         }\r\n', 0),
(10852, 74, '         else{\r\n', 2),
(10853, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(10854, 76, '         }\r\n', 0),
(10855, 77, '         break;  \r\n', 2),
(10856, 78, '        }//else at line 70\r\n', 2),
(10857, 79, '       }//else at line 60\r\n', 2),
(10858, 80, '    }//switch at line 37\r\n', 2),
(10859, 81, '   }//else at line 36\r\n', 2),
(10860, 0, 'import java.util.Scanner;\r\n', 0),
(10861, 1, ' class Years{\r\n', 2),
(10862, 2, '   public int getYear(){\r\n', 4),
(10863, 3, '	int year;\r\n', 0),
(10864, 4, '	String enteredYear;\r\n', 0),
(10865, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(10866, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(10867, 7, '	enteredYear = sc.next();\r\n', 8),
(10868, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(10869, 9, '	return year;\r\n', 2),
(10870, 10, '   }\r\n', 0),
(10871, 11, ' }\r\n', 0),
(10872, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10873, 13, ' class Months extends Years{\r\n', 4),
(10874, 14, '   public int getMonth(){\r\n', 4),
(10875, 15, '	int month;\r\n', 0),
(10876, 16, '	String enteredMonthNumber;\r\n', 0),
(10877, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(10878, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(10879, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(10880, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(10881, 21, '	return month;\r\n', 2),
(10882, 22, '   }\r\n', 0),
(10883, 23, ' }\r\n', 0),
(10884, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10885, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(10886, 26, ' static int numDays = 0;\r\n', 7),
(10887, 27, ' public static void main(String[] args) {\r\n', 8),
(10888, 28, '   int year;\r\n', 0),
(10889, 29, '   Months m = new Months();\r\n', 4),
(10890, 30, '   int month = m.getMonth();\r\n', 8),
(10891, 31, '   \r\n', 0),
(10892, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(10893, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(10894, 34, '   }\r\n', 0),
(10895, 35, '   else {\r\n', 2),
(10896, 36, '    switch (month) {\r\n', 2),
(10897, 37, '      case 1:\r\n', 5),
(10898, 38, '      case 3:\r\n', 5),
(10899, 39, '      case 5:\r\n', 5),
(10900, 40, '      case 7:\r\n', 5),
(10901, 41, '      case 8:\r\n', 5),
(10902, 42, '      case 10:\r\n', 5),
(10903, 43, '      case 12:\r\n', 5),
(10904, 44, '        numDays = 31;\r\n', 5),
(10905, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(10906, 46, '        break;\r\n', 2),
(10907, 47, '      case 4:\r\n', 5),
(10908, 48, '      case 6:\r\n', 5),
(10909, 49, '      case 9:\r\n', 5),
(10910, 50, '      case 11:\r\n', 5),
(10911, 51, '       numDays = 30;\r\n', 5),
(10912, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(10913, 53, '       break;\r\n', 2),
(10914, 54, '      case 2:\r\n', 5),
(10915, 55, '       year = m.getYear();\r\n', 8),
(10916, 56, '       if(year < 1) {\r\n', 5),
(10917, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(10918, 58, '       }\r\n', 0),
(10919, 59, '       else{\r\n', 2),
(10920, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(10921, 61, '         numDays = 29;\r\n', 5),
(10922, 62, '		 if(year > 2020){\r\n', 7),
(10923, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(10924, 64, '         }\r\n', 0),
(10925, 65, '         else{\r\n', 2),
(10926, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(10927, 67, '         }\r\n', 0),
(10928, 68, '        }//if at line 61\r\n', 0),
(10929, 69, '        else{\r\n', 2),
(10930, 70, '         numDays = 28;\r\n', 5),
(10931, 71, '         if (year > 2020){\r\n', 7),
(10932, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(10933, 73, '         }\r\n', 0),
(10934, 74, '         else{\r\n', 2),
(10935, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(10936, 76, '         }\r\n', 0),
(10937, 77, '         break;  \r\n', 2),
(10938, 78, '        }//else at line 70\r\n', 2),
(10939, 79, '       }//else at line 60\r\n', 2),
(10940, 80, '    }//switch at line 37\r\n', 2),
(10941, 81, '   }//else at line 36\r\n', 2),
(10942, 82, '  }//method\r\n', 2),
(10943, 83, ' }//class', 2),
(10944, 0, 'public class RecursionExample2 {  \r\n', 9),
(10945, 1, 'static int count=0;  \r\n', 7),
(10946, 2, 'public int p(){  \r\n', 4),
(10947, 3, 'count++;  \r\n', 2),
(10948, 4, 'if(count<=5){  \r\n', 9),
(10949, 5, 'System.out.println("hello "+count);  \r\n', 8),
(10950, 6, 'public int p();  \r\n', 4),
(10951, 7, '}  \r\n', 0),
(10952, 8, '}  \r\n', 0),
(10953, 9, 'public static void main(String[] args) {  \r\n', 8),
(10954, 10, 'p();  \r\n', 0),
(10955, 11, '}  \r\n', 0),
(10956, 12, '}  ', 0),
(10957, 0, 'import java.awt.event.*;\n', 0),
(10958, 1, 'import java.awt.*;\n', 0),
(10959, 2, '\n', 0),
(10960, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(10961, 4, '\n', 0),
(10962, 5, '    private int mx, my;\n', 4),
(10963, 6, '    private Dimension size;\n', 2),
(10964, 7, '    private int onaroll;\n', 2),
(10965, 8, '\n', 0),
(10966, 9, '    public void init() {\n', 6),
(10967, 10, '        onaroll = 0;\n', 5),
(10968, 11, '        setSize(500, 500);\n', 5),
(10969, 12, '        size = getSize();\n', 2),
(10970, 13, '        addMouseListener(this);\n', 2),
(10971, 14, '        addMouseMotionListener(this);\n', 2),
(10972, 15, '        addComponentListener(this);\n', 4),
(10973, 16, '    }\n', 0),
(10974, 17, '\n', 0),
(10975, 18, '    public void update(Graphics g) {\n', 6),
(10976, 19, '        Dimension newSize = getSize();\n', 4),
(10977, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(10978, 21, '            g.setColor(getBackground());\n', 6),
(10979, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(10980, 23, '        } else {\n', 2),
(10981, 24, '            size = newSize;\n', 4),
(10982, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(10983, 26, '        } // Calculate new position\n', 11),
(10984, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(10985, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(10986, 29, '        paint(g);\n', 0),
(10987, 30, '    }\n', 0),
(10988, 31, '  \n', 0),
(10989, 32, '    public void paint(Graphics g) {\n', 6),
(10990, 33, '        g.setColor(Color.black);\n', 6),
(10991, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(10992, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(10993, 36, '    }\n', 0),
(10994, 37, '\n', 0),
(10995, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(10996, 39, '\n', 0),
(10997, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(10998, 41, '        e.consume();\n', 6),
(10999, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(11000, 43, '            repaint();\n', 0),
(11001, 44, '        }\n', 0),
(11002, 45, '    }\n', 0),
(11003, 46, '\n', 0),
(11004, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(11005, 48, '        int x = e.getX();\n', 8),
(11006, 49, '        int y = e.getY();\n', 8),
(11007, 50, '        e.consume();\n', 6),
(11008, 51, '        requestFocus();\n', 0),
(11009, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(11010, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(11011, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(11012, 55, '                case 0:\n', 5),
(11013, 56, '                    play(getCodeBase(), \n', 2),
(11014, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(11015, 58, '                    break;\n', 2),
(11016, 59, '                case 1:\n', 5),
(11017, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(11018, 61, '                    break;\n', 2),
(11019, 62, '                case 2:\n', 5),
(11020, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(11021, 64, '                    break;\n', 2),
(11022, 65, '                case 3:\n', 5),
(11023, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(11024, 67, '                    break;\n', 2),
(11025, 68, '                }\n', 0),
(11026, 69, '                onaroll++;\n', 2),
(11027, 70, '                if (onaroll > 5) {\n', 7),
(11028, 72, '                } else {\n', 2),
(11029, 74, '                }\n', 0),
(11030, 75, '            } else {   //first hit\n', 0),
(11031, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(11032, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(11033, 78, '                onaroll = 1;\n', 5),
(11034, 79, '            }\n', 0),
(11035, 80, '        } else {   //miss\n', 0),
(11036, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(11037, 82, '			\n', 0),
(11038, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(11039, 84, '            onaroll = 0;\n', 5),
(11040, 85, '        }\n', 0),
(11041, 86, '        repaint();\n', 0),
(11042, 87, '    }\n', 0),
(11043, 88, '\n', 0),
(11044, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(11045, 90, '\n', 0),
(11046, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(11047, 92, '        repaint();\n', 0),
(11048, 93, '    }\n', 0),
(11049, 94, '\n', 0),
(11050, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(11051, 96, '        repaint();\n', 0),
(11052, 97, '    }\n', 0),
(11053, 98, '\n', 0),
(11054, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(11055, 100, '\n', 0),
(11056, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(11057, 102, ' \n', 0),
(11058, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(11059, 104, ' \n', 0),
(11060, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(11061, 106, '        repaint();\n', 0),
(11062, 107, '    }\n', 0),
(11063, 108, ' \n', 0),
(11064, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(11065, 110, '        repaint();\n', 0),
(11066, 111, '    }\n', 0),
(11067, 112, '  \n', 0),
(11068, 113, '    public void destroy() {\n', 6),
(11069, 114, '        removeMouseListener(this);\n', 2),
(11070, 115, '        removeMouseMotionListener(this);\n', 2),
(11071, 116, '    }\n', 0),
(11072, 117, '\n', 0),
(11073, 118, '    public String getAppletInfo() {\n', 4),
(11074, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(11075, 120, '    }\n', 0),
(11076, 121, '}\n', 0),
(11077, 0, 'import java.awt.event.*;\n', 0),
(11078, 1, 'import java.awt.*;\n', 0),
(11079, 2, '\n', 0),
(11080, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(11081, 4, '\n', 0),
(11082, 5, '    private int mx, my;\n', 4),
(11083, 6, '    private Dimension size;\n', 2),
(11084, 7, '    private int onaroll;\n', 2),
(11085, 8, '\n', 0),
(11086, 9, '    public void init() {\n', 6),
(11087, 10, '        onaroll = 0;\n', 5),
(11088, 11, '        setSize(500, 500);\n', 5),
(11089, 12, '        size = getSize();\n', 2),
(11090, 13, '        addMouseListener(this);\n', 2),
(11091, 14, '        addMouseMotionListener(this);\n', 2),
(11092, 15, '        addComponentListener(this);\n', 4),
(11093, 16, '    }\n', 0),
(11094, 17, '\n', 0),
(11095, 18, '    public void update(Graphics g) {\n', 6),
(11096, 19, '        Dimension newSize = getSize();\n', 4),
(11097, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(11098, 21, '            g.setColor(getBackground());\n', 6),
(11099, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(11100, 23, '        } else {\n', 2),
(11101, 24, '            size = newSize;\n', 4),
(11102, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(11103, 26, '        } // Calculate new position\n', 11),
(11104, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(11105, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(11106, 29, '        paint(g);\n', 0),
(11107, 30, '    }\n', 0),
(11108, 31, '  \n', 0),
(11109, 32, '    public void paint(Graphics g) {\n', 6),
(11110, 33, '        g.setColor(Color.black);\n', 6),
(11111, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(11112, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(11113, 36, '    }\n', 0),
(11114, 37, '\n', 0),
(11115, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(11116, 39, '\n', 0),
(11117, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(11118, 41, '        e.consume();\n', 6),
(11119, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(11120, 43, '            repaint();\n', 0),
(11121, 44, '        }\n', 0),
(11122, 45, '    }\n', 0),
(11123, 46, '\n', 0),
(11124, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(11125, 48, '        int x = e.getX();\n', 8),
(11126, 49, '        int y = e.getY();\n', 8),
(11127, 50, '        e.consume();\n', 6),
(11128, 51, '        requestFocus();\n', 0),
(11129, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(11130, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(11131, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(11132, 55, '                case 0:\n', 5),
(11133, 56, '                    play(getCodeBase(), \n', 2),
(11134, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(11135, 58, '                    break;\n', 2),
(11136, 59, '                case 1:\n', 5),
(11137, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(11138, 61, '                    break;\n', 2),
(11139, 62, '                case 2:\n', 5),
(11140, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(11141, 64, '                    break;\n', 2),
(11142, 65, '                case 3:\n', 5),
(11143, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(11144, 67, '                    break;\n', 2),
(11145, 68, '                }\n', 0),
(11146, 69, '                onaroll++;\n', 2),
(11147, 70, '                if (onaroll > 5) {\n', 7),
(11148, 72, '                } else {\n', 2),
(11149, 74, '                }\n', 0),
(11150, 75, '            } else {   //first hit\n', 0),
(11151, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(11152, 0, 'import java.util.Scanner;\r\n', 0),
(11153, 1, ' class Years{\r\n', 2),
(11154, 2, '   public int getYear(){\r\n', 4),
(11155, 3, '	int year;\r\n', 0),
(11156, 4, '	String enteredYear;\r\n', 0),
(11157, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(11158, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(11159, 7, '	enteredYear = sc.next();\r\n', 8),
(11160, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(11161, 9, '	return year;\r\n', 2),
(11162, 10, '   }\r\n', 0),
(11163, 11, ' }\r\n', 0),
(11164, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11165, 13, ' class Months extends Years{\r\n', 4),
(11166, 14, '   public int getMonth(){\r\n', 4),
(11167, 15, '	int month;\r\n', 0),
(11168, 16, '	String enteredMonthNumber;\r\n', 0),
(11169, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(11170, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(11171, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(11172, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(11173, 21, '	return month;\r\n', 2),
(11174, 22, '   }\r\n', 0),
(11175, 23, ' }\r\n', 0),
(11176, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11177, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(11178, 26, ' static int numDays = 0;\r\n', 7),
(11179, 27, ' public static void main(String[] args) {\r\n', 8),
(11180, 28, '   int year;\r\n', 0),
(11181, 29, '   Months m = new Months();\r\n', 4),
(11182, 30, '   int month = m.getMonth();\r\n', 8),
(11183, 31, '   \r\n', 0),
(11184, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(11185, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(11186, 34, '   }\r\n', 0),
(11187, 35, '   else {\r\n', 2),
(11188, 36, '    switch (month) {\r\n', 2),
(11189, 37, '      case 1:\r\n', 5),
(11190, 38, '      case 3:\r\n', 5),
(11191, 39, '      case 5:\r\n', 5),
(11192, 40, '      case 7:\r\n', 5),
(11193, 41, '      case 8:\r\n', 5),
(11194, 42, '      case 10:\r\n', 5),
(11195, 43, '      case 12:\r\n', 5),
(11196, 44, '        numDays = 31;\r\n', 5),
(11197, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(11198, 46, '        break;\r\n', 2),
(11199, 47, '      case 4:\r\n', 5),
(11200, 48, '      case 6:\r\n', 5),
(11201, 49, '      case 9:\r\n', 5),
(11202, 50, '      case 11:\r\n', 5),
(11203, 51, '       numDays = 30;\r\n', 5),
(11204, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(11205, 53, '       break;\r\n', 2),
(11206, 54, '      case 2:\r\n', 5),
(11207, 55, '       year = m.getYear();\r\n', 8),
(11208, 56, '       if(year < 1) {\r\n', 5),
(11209, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(11210, 58, '       }\r\n', 0),
(11211, 59, '       else{\r\n', 2),
(11212, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(11213, 61, '         numDays = 29;\r\n', 5),
(11214, 62, '		 if(year > 2020){\r\n', 7),
(11215, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(11216, 64, '         }\r\n', 0),
(11217, 65, '         else{\r\n', 2),
(11218, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(11219, 67, '         }\r\n', 0),
(11220, 68, '        }//if at line 61\r\n', 0),
(11221, 69, '        else{\r\n', 2),
(11222, 70, '         numDays = 28;\r\n', 5),
(11223, 71, '         if (year > 2020){\r\n', 7),
(11224, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(11225, 73, '         }\r\n', 0),
(11226, 74, '         else{\r\n', 2),
(11227, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(11228, 76, '         }\r\n', 0),
(11229, 77, '         break;  \r\n', 2),
(11230, 78, '        }//else at line 70\r\n', 2),
(11231, 79, '       }//else at line 60\r\n', 2),
(11232, 80, '    }//switch at line 37\r\n', 2),
(11233, 81, '   }//else at line 36\r\n', 2),
(11234, 82, '  }//method\r\n', 2),
(11235, 83, ' }//class', 2),
(11236, 0, 'public class RecursionExample2 {  \r\n', 9),
(11237, 1, 'static int count=0;  \r\n', 7),
(11238, 2, 'public int p(){  \r\n', 4),
(11239, 3, 'count++;  \r\n', 2),
(11240, 4, 'if(count<=5){  \r\n', 9),
(11241, 5, 'System.out.println("hello "+count);  \r\n', 8),
(11242, 6, 'public int p();  \r\n', 4),
(11243, 7, '}  \r\n', 0),
(11244, 8, '}  \r\n', 0),
(11245, 9, 'public static void main(String[] args) {  \r\n', 8),
(11246, 10, 'p();  \r\n', 0),
(11247, 11, '}  \r\n', 0),
(11248, 12, '}  ', 0),
(11249, 0, 'import java.awt.event.*;\n', 0),
(11250, 1, 'import java.awt.*;\n', 0),
(11251, 2, '\n', 0),
(11252, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(11253, 4, '\n', 0),
(11254, 5, '    private int mx, my;\n', 4),
(11255, 6, '    private Dimension size;\n', 2),
(11256, 7, '    private int onaroll;\n', 2),
(11257, 8, '\n', 0),
(11258, 9, '    public void init() {\n', 6),
(11259, 10, '        onaroll = 0;\n', 5),
(11260, 11, '        setSize(500, 500);\n', 5),
(11261, 12, '        size = getSize();\n', 2),
(11262, 13, '        addMouseListener(this);\n', 2),
(11263, 14, '        addMouseMotionListener(this);\n', 2),
(11264, 15, '        addComponentListener(this);\n', 4),
(11265, 16, '    }\n', 0),
(11266, 17, '\n', 0),
(11267, 18, '    public void update(Graphics g) {\n', 6),
(11268, 19, '        Dimension newSize = getSize();\n', 4),
(11269, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(11270, 21, '            g.setColor(getBackground());\n', 6),
(11271, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(11272, 23, '        } else {\n', 2),
(11273, 24, '            size = newSize;\n', 4),
(11274, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(11275, 26, '        } // Calculate new position\n', 11),
(11276, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(11277, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(11278, 29, '        paint(g);\n', 0),
(11279, 30, '    }\n', 0),
(11280, 31, '  \n', 0),
(11281, 32, '    public void paint(Graphics g) {\n', 6),
(11282, 33, '        g.setColor(Color.black);\n', 6),
(11283, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(11284, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(11285, 36, '    }\n', 0),
(11286, 37, '\n', 0),
(11287, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(11288, 39, '\n', 0),
(11289, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(11290, 41, '        e.consume();\n', 6),
(11291, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(11292, 43, '            repaint();\n', 0),
(11293, 44, '        }\n', 0),
(11294, 45, '    }\n', 0),
(11295, 46, '\n', 0),
(11296, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(11297, 48, '        int x = e.getX();\n', 8),
(11298, 49, '        int y = e.getY();\n', 8),
(11299, 50, '        e.consume();\n', 6),
(11300, 51, '        requestFocus();\n', 0),
(11301, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(11302, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(11303, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(11304, 55, '                case 0:\n', 5),
(11305, 56, '                    play(getCodeBase(), \n', 2),
(11306, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(11307, 58, '                    break;\n', 2),
(11308, 59, '                case 1:\n', 5),
(11309, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(11310, 61, '                    break;\n', 2),
(11311, 62, '                case 2:\n', 5),
(11312, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(11313, 64, '                    break;\n', 2),
(11314, 65, '                case 3:\n', 5),
(11315, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(11316, 67, '                    break;\n', 2),
(11317, 68, '                }\n', 0),
(11318, 69, '                onaroll++;\n', 2),
(11319, 70, '                if (onaroll > 5) {\n', 7),
(11320, 72, '                } else {\n', 2),
(11321, 74, '                }\n', 0),
(11322, 75, '            } else {   //first hit\n', 0),
(11323, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(11324, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(11325, 78, '                onaroll = 1;\n', 5),
(11326, 79, '            }\n', 0),
(11327, 80, '        } else {   //miss\n', 0),
(11328, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(11329, 82, '			\n', 0),
(11330, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(11331, 84, '            onaroll = 0;\n', 5),
(11332, 85, '        }\n', 0),
(11333, 86, '        repaint();\n', 0),
(11334, 87, '    }\n', 0),
(11335, 88, '\n', 0),
(11336, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(11337, 90, '\n', 0),
(11338, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(11339, 92, '        repaint();\n', 0),
(11340, 93, '    }\n', 0),
(11341, 94, '\n', 0),
(11342, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(11343, 96, '        repaint();\n', 0),
(11344, 97, '    }\n', 0),
(11345, 98, '\n', 0),
(11346, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(11347, 100, '\n', 0),
(11348, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(11349, 102, ' \n', 0),
(11350, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(11351, 104, ' \n', 0),
(11352, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(11353, 106, '        repaint();\n', 0),
(11354, 107, '    }\n', 0),
(11355, 108, ' \n', 0),
(11356, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(11357, 110, '        repaint();\n', 0),
(11358, 111, '    }\n', 0),
(11359, 112, '  \n', 0),
(11360, 113, '    public void destroy() {\n', 6),
(11361, 114, '        removeMouseListener(this);\n', 2),
(11362, 115, '        removeMouseMotionListener(this);\n', 2),
(11363, 116, '    }\n', 0),
(11364, 117, '\n', 0),
(11365, 118, '    public String getAppletInfo() {\n', 4),
(11366, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(11367, 120, '    }\n', 0),
(11368, 121, '}\n', 0),
(11369, 0, 'import java.awt.event.*;\n', 0),
(11370, 1, 'import java.awt.*;\n', 0),
(11371, 2, '\n', 0),
(11372, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(11373, 4, '\n', 0),
(11374, 5, '    private int mx, my;\n', 4),
(11375, 6, '    private Dimension size;\n', 2),
(11376, 7, '    private int onaroll;\n', 2),
(11377, 8, '\n', 0),
(11378, 9, '    public void init() {\n', 6),
(11379, 10, '        onaroll = 0;\n', 5),
(11380, 11, '        setSize(500, 500);\n', 5),
(11381, 12, '        size = getSize();\n', 2),
(11382, 13, '        addMouseListener(this);\n', 2),
(11383, 14, '        addMouseMotionListener(this);\n', 2),
(11384, 15, '        addComponentListener(this);\n', 4),
(11385, 16, '    }\n', 0),
(11386, 17, '\n', 0),
(11387, 18, '    public void update(Graphics g) {\n', 6),
(11388, 19, '        Dimension newSize = getSize();\n', 4),
(11389, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(11390, 21, '            g.setColor(getBackground());\n', 6),
(11391, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(11392, 23, '        } else {\n', 2),
(11393, 24, '            size = newSize;\n', 4),
(11394, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(11395, 26, '        } // Calculate new position\n', 11),
(11396, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(11397, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(11398, 29, '        paint(g);\n', 0),
(11399, 30, '    }\n', 0),
(11400, 31, '  \n', 0),
(11401, 32, '    public void paint(Graphics g) {\n', 6),
(11402, 33, '        g.setColor(Color.black);\n', 6),
(11403, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(11404, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(11405, 36, '    }\n', 0),
(11406, 37, '\n', 0),
(11407, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(11408, 39, '\n', 0),
(11409, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(11410, 41, '        e.consume();\n', 6),
(11411, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(11412, 43, '            repaint();\n', 0),
(11413, 44, '        }\n', 0),
(11414, 45, '    }\n', 0),
(11415, 46, '\n', 0),
(11416, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(11417, 48, '        int x = e.getX();\n', 8),
(11418, 49, '        int y = e.getY();\n', 8),
(11419, 50, '        e.consume();\n', 6),
(11420, 51, '        requestFocus();\n', 0),
(11421, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(11422, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(11423, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(11424, 55, '                case 0:\n', 5),
(11425, 56, '                    play(getCodeBase(), \n', 2),
(11426, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(11427, 58, '                    break;\n', 2),
(11428, 59, '                case 1:\n', 5),
(11429, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(11430, 61, '                    break;\n', 2),
(11431, 62, '                case 2:\n', 5),
(11432, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(11433, 64, '                    break;\n', 2),
(11434, 65, '                case 3:\n', 5),
(11435, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(11436, 67, '                    break;\n', 2),
(11437, 68, '                }\n', 0),
(11438, 69, '                onaroll++;\n', 2),
(11439, 70, '                if (onaroll > 5) {\n', 7),
(11440, 72, '                } else {\n', 2),
(11441, 74, '                }\n', 0),
(11442, 75, '            } else {   //first hit\n', 0),
(11443, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(11444, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(11445, 78, '                onaroll = 1;\n', 5),
(11446, 79, '            }\n', 0),
(11447, 80, '        } else {   //miss\n', 0),
(11448, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(11449, 82, '			\n', 0),
(11450, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(11451, 84, '            onaroll = 0;\n', 5),
(11452, 85, '        }\n', 0),
(11453, 86, '        repaint();\n', 0),
(11454, 87, '    }\n', 0),
(11455, 88, '\n', 0),
(11456, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(11457, 90, '\n', 0),
(11458, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(11459, 92, '        repaint();\n', 0),
(11460, 93, '    }\n', 0),
(11461, 94, '\n', 0),
(11462, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(11463, 96, '        repaint();\n', 0),
(11464, 97, '    }\n', 0),
(11465, 98, '\n', 0),
(11466, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(11467, 100, '\n', 0),
(11468, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(11469, 102, ' \n', 0),
(11470, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(11471, 104, ' \n', 0),
(11472, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(11473, 106, '        repaint();\n', 0),
(11474, 107, '    }\n', 0),
(11475, 108, ' \n', 0),
(11476, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(11477, 110, '        repaint();\n', 0),
(11478, 111, '    }\n', 0),
(11479, 112, '  \n', 0),
(11480, 113, '    public void destroy() {\n', 6),
(11481, 114, '        removeMouseListener(this);\n', 2),
(11482, 115, '        removeMouseMotionListener(this);\n', 2),
(11483, 116, '    }\n', 0),
(11484, 117, '\n', 0),
(11485, 118, '    public String getAppletInfo() {\n', 4),
(11486, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(11487, 120, '    }\n', 0),
(11488, 121, '}\n', 0),
(11489, 0, 'import java.util.Scanner;\r\n', 0),
(11490, 1, ' class Years{\r\n', 2),
(11491, 2, '   public int getYear(){\r\n', 4),
(11492, 3, '	int year;\r\n', 0),
(11493, 4, '	String enteredYear;\r\n', 0),
(11494, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(11495, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(11496, 7, '	enteredYear = sc.next();\r\n', 8),
(11497, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(11498, 9, '	return year;\r\n', 2),
(11499, 10, '   }\r\n', 0),
(11500, 11, ' }\r\n', 0),
(11501, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11502, 13, ' class Months extends Years{\r\n', 4),
(11503, 14, '   public int getMonth(){\r\n', 4),
(11504, 15, '	int month;\r\n', 0),
(11505, 16, '	String enteredMonthNumber;\r\n', 0),
(11506, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(11507, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(11508, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(11509, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(11510, 21, '	return month;\r\n', 2),
(11511, 22, '   }\r\n', 0),
(11512, 23, ' }\r\n', 0),
(11513, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11514, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(11515, 26, ' static int numDays = 0;\r\n', 7),
(11516, 27, ' public static void main(String[] args) {\r\n', 8),
(11517, 28, '   int year;\r\n', 0),
(11518, 29, '   Months m = new Months();\r\n', 4),
(11519, 30, '   int month = m.getMonth();\r\n', 8),
(11520, 31, '   \r\n', 0),
(11521, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(11522, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(11523, 34, '   }\r\n', 0),
(11524, 35, '   else {\r\n', 2),
(11525, 36, '    switch (month) {\r\n', 2),
(11526, 37, '      case 1:\r\n', 5),
(11527, 38, '      case 3:\r\n', 5),
(11528, 39, '      case 5:\r\n', 5),
(11529, 40, '      case 7:\r\n', 5),
(11530, 41, '      case 8:\r\n', 5),
(11531, 42, '      case 10:\r\n', 5),
(11532, 43, '      case 12:\r\n', 5),
(11533, 44, '        numDays = 31;\r\n', 5),
(11534, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(11535, 46, '        break;\r\n', 2),
(11536, 47, '      case 4:\r\n', 5),
(11537, 48, '      case 6:\r\n', 5),
(11538, 49, '      case 9:\r\n', 5),
(11539, 50, '      case 11:\r\n', 5),
(11540, 51, '       numDays = 30;\r\n', 5),
(11541, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(11542, 53, '       break;\r\n', 2),
(11543, 54, '      case 2:\r\n', 5),
(11544, 55, '       year = m.getYear();\r\n', 8),
(11545, 56, '       if(year < 1) {\r\n', 5),
(11546, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(11547, 58, '       }\r\n', 0),
(11548, 59, '       else{\r\n', 2),
(11549, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(11550, 61, '         numDays = 29;\r\n', 5),
(11551, 62, '		 if(year > 2020){\r\n', 7),
(11552, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(11553, 64, '         }\r\n', 0),
(11554, 65, '         else{\r\n', 2),
(11555, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(11556, 67, '         }\r\n', 0),
(11557, 68, '        }//if at line 61\r\n', 0),
(11558, 69, '        else{\r\n', 2),
(11559, 70, '         numDays = 28;\r\n', 5),
(11560, 71, '         if (year > 2020){\r\n', 7),
(11561, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(11562, 73, '         }\r\n', 0),
(11563, 74, '         else{\r\n', 2),
(11564, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(11565, 76, '         }\r\n', 0),
(11566, 77, '         break;  \r\n', 2),
(11567, 78, '        }//else at line 70\r\n', 2),
(11568, 79, '       }//else at line 60\r\n', 2),
(11569, 80, '    }//switch at line 37\r\n', 2),
(11570, 81, '   }//else at line 36\r\n', 2),
(11571, 82, '  }//method\r\n', 2),
(11572, 83, ' }//class', 2),
(11573, 0, 'class Pattern{ \r\n', 2),
(11574, 1, 'public static void main(String[] args) { \r\n', 8),
(11575, 2, '	 int rows = 5;\r\n', 5),
(11576, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(11577, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(11578, 5, '	 System.out.print(j + " "); \r\n', 13),
(11579, 6, '	 } \r\n', 0),
(11580, 7, '	 System.out.println(""); \r\n', 11),
(11581, 8, ' 	} \r\n', 0),
(11582, 9, ' 	} \r\n', 0),
(11583, 10, '} ', 0),
(11584, 0, 'import java.util.Scanner;\r\n', 0),
(11585, 1, ' class Years{\r\n', 2),
(11586, 2, '   public int getYear(){\r\n', 4),
(11587, 3, '	int year;\r\n', 0),
(11588, 4, '	String enteredYear;\r\n', 0),
(11589, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(11590, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(11591, 7, '	enteredYear = sc.next();\r\n', 8),
(11592, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(11593, 9, '	return year;\r\n', 2),
(11594, 10, '   }\r\n', 0),
(11595, 11, ' }\r\n', 0),
(11596, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11597, 13, ' class Months extends Years{\r\n', 4),
(11598, 14, '   public int getMonth(){\r\n', 4),
(11599, 15, '	int month;\r\n', 0),
(11600, 16, '	String enteredMonthNumber;\r\n', 0),
(11601, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(11602, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(11603, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(11604, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(11605, 21, '	return month;\r\n', 2),
(11606, 22, '   }\r\n', 0),
(11607, 23, ' }\r\n', 0),
(11608, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11609, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(11610, 26, ' static int numDays = 0;\r\n', 7),
(11611, 27, ' public static void main(String[] args) {\r\n', 8),
(11612, 28, '   int year;\r\n', 0),
(11613, 29, '   Months m = new Months();\r\n', 4),
(11614, 30, '   int month = m.getMonth();\r\n', 8),
(11615, 31, '   \r\n', 0),
(11616, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(11617, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(11618, 34, '   }\r\n', 0),
(11619, 35, '   else {\r\n', 2),
(11620, 36, '    switch (month) {\r\n', 2),
(11621, 37, '      case 1:\r\n', 5),
(11622, 38, '      case 3:\r\n', 5),
(11623, 39, '      case 5:\r\n', 5),
(11624, 40, '      case 7:\r\n', 5),
(11625, 41, '      case 8:\r\n', 5),
(11626, 42, '      case 10:\r\n', 5),
(11627, 43, '      case 12:\r\n', 5),
(11628, 44, '        numDays = 31;\r\n', 5),
(11629, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(11630, 46, '        break;\r\n', 2),
(11631, 47, '      case 4:\r\n', 5),
(11632, 48, '      case 6:\r\n', 5),
(11633, 49, '      case 9:\r\n', 5),
(11634, 50, '      case 11:\r\n', 5),
(11635, 51, '       numDays = 30;\r\n', 5),
(11636, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(11637, 53, '       break;\r\n', 2),
(11638, 54, '      case 2:\r\n', 5),
(11639, 55, '       year = m.getYear();\r\n', 8),
(11640, 56, '       if(year < 1) {\r\n', 5),
(11641, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(11642, 58, '       }\r\n', 0),
(11643, 59, '       else{\r\n', 2),
(11644, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(11645, 61, '         numDays = 29;\r\n', 5),
(11646, 62, '		 if(year > 2020){\r\n', 7),
(11647, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(11648, 64, '         }\r\n', 0),
(11649, 65, '         else{\r\n', 2),
(11650, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(11651, 67, '         }\r\n', 0),
(11652, 68, '        }//if at line 61\r\n', 0),
(11653, 69, '        else{\r\n', 2),
(11654, 70, '         numDays = 28;\r\n', 5),
(11655, 71, '         if (year > 2020){\r\n', 7),
(11656, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(11657, 73, '         }\r\n', 0),
(11658, 74, '         else{\r\n', 2),
(11659, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(11660, 76, '         }\r\n', 0),
(11661, 77, '         break;  \r\n', 2),
(11662, 78, '        }//else at line 70\r\n', 2),
(11663, 79, '       }//else at line 60\r\n', 2),
(11664, 80, '    }//switch at line 37\r\n', 2),
(11665, 81, '   }//else at line 36\r\n', 2),
(11666, 82, '  }//method\r\n', 2),
(11667, 83, ' }//class', 2),
(11668, 0, 'class HelloWorld { \r\n', 2),
(11669, 1, '	public static void main(String args[]) \r\n', 8),
(11670, 2, '	{ \r\n', 0),
(11671, 3, '		System.out.println("Hello World"); \r\n', 11),
(11672, 4, '	} \r\n', 0),
(11673, 5, '} \r\n', 0),
(11674, 0, 'import java.awt.event.*;\n', 0),
(11675, 1, 'import java.awt.*;\n', 0),
(11676, 2, '\n', 0),
(11677, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(11678, 4, '\n', 0),
(11679, 5, '    private int mx, my;\n', 4),
(11680, 6, '    private Dimension size;\n', 2),
(11681, 7, '    private int onaroll;\n', 2),
(11682, 8, '\n', 0),
(11683, 9, '    public void init() {\n', 6),
(11684, 10, '        onaroll = 0;\n', 5),
(11685, 11, '        setSize(500, 500);\n', 5),
(11686, 12, '        size = getSize();\n', 2),
(11687, 13, '        addMouseListener(this);\n', 2),
(11688, 14, '        addMouseMotionListener(this);\n', 2),
(11689, 15, '        addComponentListener(this);\n', 4),
(11690, 16, '    }\n', 0),
(11691, 17, '\n', 0),
(11692, 18, '    public void update(Graphics g) {\n', 6),
(11693, 19, '        Dimension newSize = getSize();\n', 4),
(11694, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(11695, 21, '            g.setColor(getBackground());\n', 6),
(11696, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(11697, 23, '        } else {\n', 2),
(11698, 24, '            size = newSize;\n', 4),
(11699, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(11700, 26, '        } // Calculate new position\n', 11),
(11701, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(11702, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(11703, 29, '        paint(g);\n', 0),
(11704, 30, '    }\n', 0),
(11705, 31, '  \n', 0),
(11706, 32, '    public void paint(Graphics g) {\n', 6),
(11707, 33, '        g.setColor(Color.black);\n', 6),
(11708, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(11709, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(11710, 36, '    }\n', 0),
(11711, 37, '\n', 0);
INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(11712, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(11713, 39, '\n', 0),
(11714, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(11715, 41, '        e.consume();\n', 6),
(11716, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(11717, 43, '            repaint();\n', 0),
(11718, 44, '        }\n', 0),
(11719, 45, '    }\n', 0),
(11720, 46, '\n', 0),
(11721, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(11722, 48, '        int x = e.getX();\n', 8),
(11723, 49, '        int y = e.getY();\n', 8),
(11724, 50, '        e.consume();\n', 6),
(11725, 51, '        requestFocus();\n', 0),
(11726, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(11727, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(11728, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(11729, 55, '                case 0:\n', 5),
(11730, 56, '                    play(getCodeBase(), \n', 2),
(11731, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(11732, 58, '                    break;\n', 2),
(11733, 59, '                case 1:\n', 5),
(11734, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(11735, 61, '                    break;\n', 2),
(11736, 62, '                case 2:\n', 5),
(11737, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(11738, 64, '                    break;\n', 2),
(11739, 65, '                case 3:\n', 5),
(11740, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(11741, 67, '                    break;\n', 2),
(11742, 68, '                }\n', 0),
(11743, 69, '                onaroll++;\n', 2),
(11744, 70, '                if (onaroll > 5) {\n', 7),
(11745, 72, '                } else {\n', 2),
(11746, 74, '                }\n', 0),
(11747, 75, '            } else {   //first hit\n', 0),
(11748, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(11749, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(11750, 78, '                onaroll = 1;\n', 5),
(11751, 79, '            }\n', 0),
(11752, 80, '        } else {   //miss\n', 0),
(11753, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(11754, 82, '			\n', 0),
(11755, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(11756, 84, '            onaroll = 0;\n', 5),
(11757, 85, '        }\n', 0),
(11758, 86, '        repaint();\n', 0),
(11759, 87, '    }\n', 0),
(11760, 88, '\n', 0),
(11761, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(11762, 90, '\n', 0),
(11763, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(11764, 92, '        repaint();\n', 0),
(11765, 93, '    }\n', 0),
(11766, 94, '\n', 0),
(11767, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(11768, 96, '        repaint();\n', 0),
(11769, 97, '    }\n', 0),
(11770, 98, '\n', 0),
(11771, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(11772, 100, '\n', 0),
(11773, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(11774, 102, ' \n', 0),
(11775, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(11776, 104, ' \n', 0),
(11777, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(11778, 106, '        repaint();\n', 0),
(11779, 107, '    }\n', 0),
(11780, 108, ' \n', 0),
(11781, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(11782, 110, '        repaint();\n', 0),
(11783, 111, '    }\n', 0),
(11784, 112, '  \n', 0),
(11785, 113, '    public void destroy() {\n', 6),
(11786, 114, '        removeMouseListener(this);\n', 2),
(11787, 115, '        removeMouseMotionListener(this);\n', 2),
(11788, 116, '    }\n', 0),
(11789, 117, '\n', 0),
(11790, 118, '    public String getAppletInfo() {\n', 4),
(11791, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(11792, 120, '    }\n', 0),
(11793, 121, '}\n', 0),
(11794, 0, 'import java.awt.event.*;\n', 0),
(11795, 1, 'import java.awt.*;\n', 0),
(11796, 2, '\n', 0),
(11797, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(11798, 4, '\n', 0),
(11799, 5, '    private int mx, my;\n', 4),
(11800, 6, '    private Dimension size;\n', 2),
(11801, 7, '    private int onaroll;\n', 2),
(11802, 8, '\n', 0),
(11803, 9, '    public void init() {\n', 6),
(11804, 10, '        onaroll = 0;\n', 5),
(11805, 11, '        setSize(500, 500);\n', 5),
(11806, 12, '        size = getSize();\n', 2),
(11807, 13, '        addMouseListener(this);\n', 2),
(11808, 14, '        addMouseMotionListener(this);\n', 2),
(11809, 15, '        addComponentListener(this);\n', 4),
(11810, 16, '    }\n', 0),
(11811, 17, '\n', 0),
(11812, 18, '    public void update(Graphics g) {\n', 6),
(11813, 19, '        Dimension newSize = getSize();\n', 4),
(11814, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(11815, 21, '            g.setColor(getBackground());\n', 6),
(11816, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(11817, 23, '        } else {\n', 2),
(11818, 24, '            size = newSize;\n', 4),
(11819, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(11820, 26, '        } // Calculate new position\n', 11),
(11821, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(11822, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(11823, 29, '        paint(g);\n', 0),
(11824, 30, '    }\n', 0),
(11825, 31, '  \n', 0),
(11826, 32, '    public void paint(Graphics g) {\n', 6),
(11827, 33, '        g.setColor(Color.black);\n', 6),
(11828, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(11829, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(11830, 36, '    }\n', 0),
(11831, 37, '\n', 0),
(11832, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(11833, 39, '\n', 0),
(11834, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(11835, 41, '        e.consume();\n', 6),
(11836, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(11837, 43, '            repaint();\n', 0),
(11838, 44, '        }\n', 0),
(11839, 45, '    }\n', 0),
(11840, 46, '\n', 0),
(11841, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(11842, 48, '        int x = e.getX();\n', 8),
(11843, 49, '        int y = e.getY();\n', 8),
(11844, 50, '        e.consume();\n', 6),
(11845, 51, '        requestFocus();\n', 0),
(11846, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(11847, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(11848, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(11849, 55, '                case 0:\n', 5),
(11850, 56, '                    play(getCodeBase(), \n', 2),
(11851, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(11852, 58, '                    break;\n', 2),
(11853, 59, '                case 1:\n', 5),
(11854, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(11855, 61, '                    break;\n', 2),
(11856, 62, '                case 2:\n', 5),
(11857, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(11858, 64, '                    break;\n', 2),
(11859, 65, '                case 3:\n', 5),
(11860, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(11861, 67, '                    break;\n', 2),
(11862, 68, '                }\n', 0),
(11863, 69, '                onaroll++;\n', 2),
(11864, 70, '                if (onaroll > 5) {\n', 7),
(11865, 72, '                } else {\n', 2),
(11866, 74, '                }\n', 0),
(11867, 75, '            } else {   //first hit\n', 0),
(11868, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(11869, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(11870, 78, '                onaroll = 1;\n', 5),
(11871, 79, '            }\n', 0),
(11872, 80, '        } else {   //miss\n', 0),
(11873, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(11874, 82, '			\n', 0),
(11875, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(11876, 84, '            onaroll = 0;\n', 5),
(11877, 85, '        }\n', 0),
(11878, 86, '        repaint();\n', 0),
(11879, 87, '    }\n', 0),
(11880, 88, '\n', 0),
(11881, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(11882, 90, '\n', 0),
(11883, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(11884, 92, '        repaint();\n', 0),
(11885, 93, '    }\n', 0),
(11886, 94, '\n', 0),
(11887, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(11888, 96, '        repaint();\n', 0),
(11889, 97, '    }\n', 0),
(11890, 98, '\n', 0),
(11891, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(11892, 100, '\n', 0),
(11893, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(11894, 102, ' \n', 0),
(11895, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(11896, 104, ' \n', 0),
(11897, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(11898, 106, '        repaint();\n', 0),
(11899, 107, '    }\n', 0),
(11900, 108, ' \n', 0),
(11901, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(11902, 110, '        repaint();\n', 0),
(11903, 111, '    }\n', 0),
(11904, 112, '  \n', 0),
(11905, 113, '    public void destroy() {\n', 6),
(11906, 114, '        removeMouseListener(this);\n', 2),
(11907, 115, '        removeMouseMotionListener(this);\n', 2),
(11908, 116, '    }\n', 0),
(11909, 117, '\n', 0),
(11910, 118, '    public String getAppletInfo() {\n', 4),
(11911, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(11912, 120, '    }\n', 0),
(11913, 121, '}\n', 0),
(11914, 0, 'import java.util.Scanner;\r\n', 0),
(11915, 1, ' class Years{\r\n', 2),
(11916, 2, '   public int getYear(){\r\n', 4),
(11917, 3, '	int year;\r\n', 0),
(11918, 4, '	String enteredYear;\r\n', 0),
(11919, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(11920, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(11921, 7, '	enteredYear = sc.next();\r\n', 8),
(11922, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(11923, 9, '	return year;\r\n', 2),
(11924, 10, '   }\r\n', 0),
(11925, 11, ' }\r\n', 0),
(11926, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11927, 13, ' class Months extends Years{\r\n', 4),
(11928, 14, '   public int getMonth(){\r\n', 4),
(11929, 15, '	int month;\r\n', 0),
(11930, 16, '	String enteredMonthNumber;\r\n', 0),
(11931, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(11932, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(11933, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(11934, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(11935, 21, '	return month;\r\n', 2),
(11936, 22, '   }\r\n', 0),
(11937, 23, ' }\r\n', 0),
(11938, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11939, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(11940, 26, ' static int numDays = 0;\r\n', 7),
(11941, 27, ' public static void main(String[] args) {\r\n', 8),
(11942, 28, '   int year;\r\n', 0),
(11943, 29, '   Months m = new Months();\r\n', 4),
(11944, 30, '   int month = m.getMonth();\r\n', 8),
(11945, 31, '   \r\n', 0),
(11946, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(11947, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(11948, 34, '   }\r\n', 0),
(11949, 35, '   else {\r\n', 2),
(11950, 36, '    switch (month) {\r\n', 2),
(11951, 37, '      case 1:\r\n', 5),
(11952, 38, '      case 3:\r\n', 5),
(11953, 39, '      case 5:\r\n', 5),
(11954, 40, '      case 7:\r\n', 5),
(11955, 41, '      case 8:\r\n', 5),
(11956, 42, '      case 10:\r\n', 5),
(11957, 43, '      case 12:\r\n', 5),
(11958, 44, '        numDays = 31;\r\n', 5),
(11959, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(11960, 46, '        break;\r\n', 2),
(11961, 47, '      case 4:\r\n', 5),
(11962, 48, '      case 6:\r\n', 5),
(11963, 49, '      case 9:\r\n', 5),
(11964, 50, '      case 11:\r\n', 5),
(11965, 51, '       numDays = 30;\r\n', 5),
(11966, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(11967, 53, '       break;\r\n', 2),
(11968, 54, '      case 2:\r\n', 5),
(11969, 55, '       year = m.getYear();\r\n', 8),
(11970, 56, '       if(year < 1) {\r\n', 5),
(11971, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(11972, 58, '       }\r\n', 0),
(11973, 59, '       else{\r\n', 2),
(11974, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(11975, 61, '         numDays = 29;\r\n', 5),
(11976, 62, '		 if(year > 2020){\r\n', 7),
(11977, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(11978, 64, '         }\r\n', 0),
(11979, 65, '         else{\r\n', 2),
(11980, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(11981, 67, '         }\r\n', 0),
(11982, 68, '        }//if at line 61\r\n', 0),
(11983, 69, '        else{\r\n', 2),
(11984, 70, '         numDays = 28;\r\n', 5),
(11985, 71, '         if (year > 2020){\r\n', 7),
(11986, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(11987, 73, '         }\r\n', 0),
(11988, 74, '         else{\r\n', 2),
(11989, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(11990, 76, '         }\r\n', 0),
(11991, 77, '         break;  \r\n', 2),
(11992, 78, '        }//else at line 70\r\n', 2),
(11993, 79, '       }//else at line 60\r\n', 2),
(11994, 80, '    }//switch at line 37\r\n', 2),
(11995, 81, '   }//else at line 36\r\n', 2),
(11996, 82, '  }//method\r\n', 2),
(11997, 83, ' }//class', 2),
(11998, 0, 'public class RecursionExample2 {  \r\n', 9),
(11999, 1, 'static int count=0;  \r\n', 7),
(12000, 2, 'public int p(){  \r\n', 4),
(12001, 3, 'count++;  \r\n', 2),
(12002, 4, 'if(count<=5){  \r\n', 9),
(12003, 5, 'System.out.println("hello "+count);  \r\n', 8),
(12004, 6, 'public int p();  \r\n', 4),
(12005, 7, '}  \r\n', 0),
(12006, 8, '}  \r\n', 0),
(12007, 9, 'public static void main(String[] args) {  \r\n', 8),
(12008, 10, 'p();  \r\n', 0),
(12009, 11, '}  \r\n', 0),
(12010, 12, '}  ', 0),
(12011, 0, 'import java.awt.event.*;\n', 0),
(12012, 1, 'import java.awt.*;\n', 0),
(12013, 2, '\n', 0),
(12014, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(12015, 4, '\n', 0),
(12016, 5, '    private int mx, my;\n', 4),
(12017, 6, '    private Dimension size;\n', 2),
(12018, 7, '    private int onaroll;\n', 2),
(12019, 8, '\n', 0),
(12020, 9, '    public void init() {\n', 6),
(12021, 10, '        onaroll = 0;\n', 5),
(12022, 11, '        setSize(500, 500);\n', 5),
(12023, 12, '        size = getSize();\n', 2),
(12024, 13, '        addMouseListener(this);\n', 2),
(12025, 14, '        addMouseMotionListener(this);\n', 2),
(12026, 15, '        addComponentListener(this);\n', 4),
(12027, 16, '    }\n', 0),
(12028, 17, '\n', 0),
(12029, 18, '    public void update(Graphics g) {\n', 6),
(12030, 19, '        Dimension newSize = getSize();\n', 4),
(12031, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(12032, 21, '            g.setColor(getBackground());\n', 6),
(12033, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(12034, 23, '        } else {\n', 2),
(12035, 24, '            size = newSize;\n', 4),
(12036, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(12037, 26, '        } // Calculate new position\n', 11),
(12038, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(12039, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(12040, 29, '        paint(g);\n', 0),
(12041, 30, '    }\n', 0),
(12042, 31, '  \n', 0),
(12043, 32, '    public void paint(Graphics g) {\n', 6),
(12044, 33, '        g.setColor(Color.black);\n', 6),
(12045, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(12046, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(12047, 36, '    }\n', 0),
(12048, 37, '\n', 0),
(12049, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(12050, 39, '\n', 0),
(12051, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(12052, 41, '        e.consume();\n', 6),
(12053, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(12054, 43, '            repaint();\n', 0),
(12055, 44, '        }\n', 0),
(12056, 45, '    }\n', 0),
(12057, 46, '\n', 0),
(12058, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(12059, 48, '        int x = e.getX();\n', 8),
(12060, 49, '        int y = e.getY();\n', 8),
(12061, 50, '        e.consume();\n', 6),
(12062, 51, '        requestFocus();\n', 0),
(12063, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(12064, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(12065, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(12066, 55, '                case 0:\n', 5),
(12067, 56, '                    play(getCodeBase(), \n', 2),
(12068, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(12069, 58, '                    break;\n', 2),
(12070, 59, '                case 1:\n', 5),
(12071, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(12072, 61, '                    break;\n', 2),
(12073, 62, '                case 2:\n', 5),
(12074, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(12075, 64, '                    break;\n', 2),
(12076, 65, '                case 3:\n', 5),
(12077, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(12078, 67, '                    break;\n', 2),
(12079, 68, '                }\n', 0),
(12080, 69, '                onaroll++;\n', 2),
(12081, 70, '                if (onaroll > 5) {\n', 7),
(12082, 72, '                } else {\n', 2),
(12083, 74, '                }\n', 0),
(12084, 75, '            } else {   //first hit\n', 0),
(12085, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(12086, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(12087, 78, '                onaroll = 1;\n', 5),
(12088, 79, '            }\n', 0),
(12089, 80, '        } else {   //miss\n', 0),
(12090, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(12091, 82, '			\n', 0),
(12092, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(12093, 84, '            onaroll = 0;\n', 5),
(12094, 85, '        }\n', 0),
(12095, 86, '        repaint();\n', 0),
(12096, 87, '    }\n', 0),
(12097, 88, '\n', 0),
(12098, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(12099, 90, '\n', 0),
(12100, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(12101, 92, '        repaint();\n', 0),
(12102, 93, '    }\n', 0),
(12103, 94, '\n', 0),
(12104, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(12105, 96, '        repaint();\n', 0),
(12106, 97, '    }\n', 0),
(12107, 98, '\n', 0),
(12108, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(12109, 100, '\n', 0),
(12110, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(12111, 102, ' \n', 0),
(12112, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(12113, 104, ' \n', 0),
(12114, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(12115, 106, '        repaint();\n', 0),
(12116, 107, '    }\n', 0),
(12117, 108, ' \n', 0),
(12118, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(12119, 110, '        repaint();\n', 0),
(12120, 111, '    }\n', 0),
(12121, 112, '  \n', 0),
(12122, 113, '    public void destroy() {\n', 6),
(12123, 114, '        removeMouseListener(this);\n', 2),
(12124, 115, '        removeMouseMotionListener(this);\n', 2),
(12125, 116, '    }\n', 0),
(12126, 117, '\n', 0),
(12127, 118, '    public String getAppletInfo() {\n', 4),
(12128, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(12129, 120, '    }\n', 0),
(12130, 121, '}\n', 0),
(12131, 0, 'import java.awt.event.*;\n', 0),
(12132, 1, 'import java.awt.*;\n', 0),
(12133, 2, '\n', 0),
(12134, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(12135, 4, '\n', 0),
(12136, 5, '    private int mx, my;\n', 4),
(12137, 6, '    private Dimension size;\n', 2),
(12138, 7, '    private int onaroll;\n', 2),
(12139, 8, '\n', 0),
(12140, 9, '    public void init() {\n', 6),
(12141, 10, '        onaroll = 0;\n', 5),
(12142, 11, '        setSize(500, 500);\n', 5),
(12143, 12, '        size = getSize();\n', 2),
(12144, 13, '        addMouseListener(this);\n', 2),
(12145, 14, '        addMouseMotionListener(this);\n', 2),
(12146, 15, '        addComponentListener(this);\n', 4),
(12147, 16, '    }\n', 0),
(12148, 17, '\n', 0),
(12149, 18, '    public void update(Graphics g) {\n', 6),
(12150, 19, '        Dimension newSize = getSize();\n', 4),
(12151, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(12152, 21, '            g.setColor(getBackground());\n', 6),
(12153, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(12154, 23, '        } else {\n', 2),
(12155, 24, '            size = newSize;\n', 4),
(12156, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(12157, 26, '        } // Calculate new position\n', 11),
(12158, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(12159, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(12160, 29, '        paint(g);\n', 0),
(12161, 30, '    }\n', 0),
(12162, 31, '  \n', 0),
(12163, 32, '    public void paint(Graphics g) {\n', 6),
(12164, 33, '        g.setColor(Color.black);\n', 6),
(12165, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(12166, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(12167, 36, '    }\n', 0),
(12168, 37, '\n', 0),
(12169, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(12170, 39, '\n', 0),
(12171, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(12172, 41, '        e.consume();\n', 6),
(12173, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(12174, 43, '            repaint();\n', 0),
(12175, 44, '        }\n', 0),
(12176, 45, '    }\n', 0),
(12177, 46, '\n', 0),
(12178, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(12179, 48, '        int x = e.getX();\n', 8),
(12180, 49, '        int y = e.getY();\n', 8),
(12181, 50, '        e.consume();\n', 6),
(12182, 51, '        requestFocus();\n', 0),
(12183, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(12184, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(12185, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(12186, 55, '                case 0:\n', 5),
(12187, 56, '                    play(getCodeBase(), \n', 2),
(12188, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(12189, 58, '                    break;\n', 2),
(12190, 59, '                case 1:\n', 5),
(12191, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(12192, 61, '                    break;\n', 2),
(12193, 62, '                case 2:\n', 5),
(12194, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(12195, 64, '                    break;\n', 2),
(12196, 65, '                case 3:\n', 5),
(12197, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(12198, 67, '                    break;\n', 2),
(12199, 68, '                }\n', 0),
(12200, 69, '                onaroll++;\n', 2),
(12201, 70, '                if (onaroll > 5) {\n', 7),
(12202, 72, '                } else {\n', 2),
(12203, 74, '                }\n', 0),
(12204, 75, '            } else {   //first hit\n', 0),
(12205, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(12206, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(12207, 78, '                onaroll = 1;\n', 5),
(12208, 79, '            }\n', 0),
(12209, 80, '        } else {   //miss\n', 0),
(12210, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(12211, 0, 'import java.util.Scanner;\r\n', 0),
(12212, 82, '			\n', 0),
(12213, 1, ' class Years{\r\n', 2),
(12214, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(12215, 2, '   public int getYear(){\r\n', 4),
(12216, 84, '            onaroll = 0;\n', 5),
(12217, 3, '	int year;\r\n', 0),
(12218, 85, '        }\n', 0),
(12219, 4, '	String enteredYear;\r\n', 0),
(12220, 86, '        repaint();\n', 0),
(12221, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(12222, 87, '    }\n', 0),
(12223, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(12224, 88, '\n', 0),
(12225, 7, '	enteredYear = sc.next();\r\n', 8),
(12226, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(12227, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(12228, 90, '\n', 0),
(12229, 9, '	return year;\r\n', 2),
(12230, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(12231, 10, '   }\r\n', 0),
(12232, 92, '        repaint();\n', 0),
(12233, 11, ' }\r\n', 0),
(12234, 93, '    }\n', 0),
(12235, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12236, 94, '\n', 0),
(12237, 13, ' class Months extends Years{\r\n', 4),
(12238, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(12239, 14, '   public int getMonth(){\r\n', 4),
(12240, 96, '        repaint();\n', 0),
(12241, 15, '	int month;\r\n', 0),
(12242, 97, '    }\n', 0),
(12243, 16, '	String enteredMonthNumber;\r\n', 0),
(12244, 98, '\n', 0),
(12245, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(12246, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(12247, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(12248, 100, '\n', 0),
(12249, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(12250, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(12251, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(12252, 102, ' \n', 0),
(12253, 21, '	return month;\r\n', 2),
(12254, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(12255, 22, '   }\r\n', 0),
(12256, 104, ' \n', 0),
(12257, 23, ' }\r\n', 0),
(12258, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12259, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(12260, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(12261, 106, '        repaint();\n', 0),
(12262, 26, ' static int numDays = 0;\r\n', 7),
(12263, 107, '    }\n', 0),
(12264, 27, ' public static void main(String[] args) {\r\n', 8),
(12265, 108, ' \n', 0),
(12266, 28, '   int year;\r\n', 0),
(12267, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(12268, 29, '   Months m = new Months();\r\n', 4),
(12269, 110, '        repaint();\n', 0),
(12270, 30, '   int month = m.getMonth();\r\n', 8),
(12271, 111, '    }\n', 0),
(12272, 31, '   \r\n', 0),
(12273, 112, '  \n', 0),
(12274, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(12275, 113, '    public void destroy() {\n', 6),
(12276, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(12277, 114, '        removeMouseListener(this);\n', 2),
(12278, 34, '   }\r\n', 0),
(12279, 115, '        removeMouseMotionListener(this);\n', 2),
(12280, 35, '   else {\r\n', 2),
(12281, 116, '    }\n', 0),
(12282, 36, '    switch (month) {\r\n', 2),
(12283, 117, '\n', 0),
(12284, 37, '      case 1:\r\n', 5),
(12285, 118, '    public String getAppletInfo() {\n', 4),
(12286, 38, '      case 3:\r\n', 5),
(12287, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(12288, 39, '      case 5:\r\n', 5),
(12289, 40, '      case 7:\r\n', 5),
(12290, 41, '      case 8:\r\n', 5),
(12291, 42, '      case 10:\r\n', 5),
(12292, 43, '      case 12:\r\n', 5),
(12293, 44, '        numDays = 31;\r\n', 5),
(12294, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(12295, 46, '        break;\r\n', 2),
(12296, 47, '      case 4:\r\n', 5),
(12297, 48, '      case 6:\r\n', 5),
(12298, 49, '      case 9:\r\n', 5),
(12299, 50, '      case 11:\r\n', 5),
(12300, 51, '       numDays = 30;\r\n', 5),
(12301, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(12302, 53, '       break;\r\n', 2),
(12303, 54, '      case 2:\r\n', 5),
(12304, 55, '       year = m.getYear();\r\n', 8),
(12305, 56, '       if(year < 1) {\r\n', 5),
(12306, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(12307, 58, '       }\r\n', 0),
(12308, 59, '       else{\r\n', 2),
(12309, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(12310, 61, '         numDays = 29;\r\n', 5),
(12311, 62, '		 if(year > 2020){\r\n', 7),
(12312, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(12313, 64, '         }\r\n', 0),
(12314, 65, '         else{\r\n', 2),
(12315, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(12316, 67, '         }\r\n', 0),
(12317, 68, '        }//if at line 61\r\n', 0),
(12318, 69, '        else{\r\n', 2),
(12319, 70, '         numDays = 28;\r\n', 5),
(12320, 71, '         if (year > 2020){\r\n', 7),
(12321, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(12322, 73, '         }\r\n', 0),
(12323, 74, '         else{\r\n', 2),
(12324, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(12325, 76, '         }\r\n', 0),
(12326, 77, '         break;  \r\n', 2),
(12327, 78, '        }//else at line 70\r\n', 2),
(12328, 79, '       }//else at line 60\r\n', 2),
(12329, 80, '    }//switch at line 37\r\n', 2),
(12330, 81, '   }//else at line 36\r\n', 2),
(12331, 82, '  }//method\r\n', 2),
(12332, 83, ' }//class', 2),
(12333, 0, 'public class RecursionExample2 {  \r\n', 9),
(12334, 1, 'static int count=0;  \r\n', 7),
(12335, 2, 'public int p(){  \r\n', 4),
(12336, 3, 'count++;  \r\n', 2),
(12337, 4, 'if(count<=5){  \r\n', 9),
(12338, 5, 'System.out.println("hello "+count);  \r\n', 8),
(12339, 6, 'public int p();  \r\n', 4),
(12340, 7, '}  \r\n', 0),
(12341, 8, '}  \r\n', 0),
(12342, 9, 'public static void main(String[] args) {  \r\n', 8),
(12343, 10, 'p();  \r\n', 0),
(12344, 11, '}  \r\n', 0),
(12345, 12, '}  ', 0),
(12346, 0, 'import java.awt.event.*;\n', 0),
(12347, 1, 'import java.awt.*;\n', 0),
(12348, 2, '\n', 0),
(12349, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(12350, 4, '\n', 0),
(12351, 5, '    private int mx, my;\n', 4),
(12352, 6, '    private Dimension size;\n', 2),
(12353, 7, '    private int onaroll;\n', 2),
(12354, 8, '\n', 0),
(12355, 9, '    public void init() {\n', 6),
(12356, 10, '        onaroll = 0;\n', 5),
(12357, 11, '        setSize(500, 500);\n', 5),
(12358, 12, '        size = getSize();\n', 2),
(12359, 13, '        addMouseListener(this);\n', 2),
(12360, 14, '        addMouseMotionListener(this);\n', 2),
(12361, 15, '        addComponentListener(this);\n', 4),
(12362, 16, '    }\n', 0),
(12363, 17, '\n', 0),
(12364, 18, '    public void update(Graphics g) {\n', 6),
(12365, 19, '        Dimension newSize = getSize();\n', 4),
(12366, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(12367, 21, '            g.setColor(getBackground());\n', 6),
(12368, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(12369, 23, '        } else {\n', 2),
(12370, 24, '            size = newSize;\n', 4),
(12371, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(12372, 26, '        } // Calculate new position\n', 11),
(12373, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(12374, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(12375, 29, '        paint(g);\n', 0),
(12376, 30, '    }\n', 0),
(12377, 31, '  \n', 0),
(12378, 32, '    public void paint(Graphics g) {\n', 6),
(12379, 33, '        g.setColor(Color.black);\n', 6),
(12380, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(12381, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(12382, 36, '    }\n', 0),
(12383, 37, '\n', 0),
(12384, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(12385, 39, '\n', 0),
(12386, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(12387, 41, '        e.consume();\n', 6),
(12388, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(12389, 43, '            repaint();\n', 0),
(12390, 44, '        }\n', 0),
(12391, 45, '    }\n', 0),
(12392, 46, '\n', 0),
(12393, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(12394, 48, '        int x = e.getX();\n', 8),
(12395, 49, '        int y = e.getY();\n', 8),
(12396, 50, '        e.consume();\n', 6),
(12397, 51, '        requestFocus();\n', 0),
(12398, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(12399, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(12400, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(12401, 55, '                case 0:\n', 5),
(12402, 56, '                    play(getCodeBase(), \n', 2),
(12403, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(12404, 58, '                    break;\n', 2),
(12405, 59, '                case 1:\n', 5),
(12406, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(12407, 61, '                    break;\n', 2),
(12408, 62, '                case 2:\n', 5),
(12409, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(12410, 64, '                    break;\n', 2),
(12411, 65, '                case 3:\n', 5),
(12412, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(12413, 67, '                    break;\n', 2),
(12414, 68, '                }\n', 0),
(12415, 69, '                onaroll++;\n', 2),
(12416, 70, '                if (onaroll > 5) {\n', 7),
(12417, 72, '                } else {\n', 2),
(12418, 74, '                }\n', 0),
(12419, 75, '            } else {   //first hit\n', 0),
(12420, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(12421, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(12422, 78, '                onaroll = 1;\n', 5),
(12423, 79, '            }\n', 0),
(12424, 80, '        } else {   //miss\n', 0),
(12425, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(12426, 82, '			\n', 0),
(12427, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(12428, 84, '            onaroll = 0;\n', 5),
(12429, 85, '        }\n', 0),
(12430, 86, '        repaint();\n', 0),
(12431, 87, '    }\n', 0),
(12432, 88, '\n', 0),
(12433, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(12434, 90, '\n', 0),
(12435, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(12436, 92, '        repaint();\n', 0),
(12437, 93, '    }\n', 0),
(12438, 94, '\n', 0),
(12439, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(12440, 96, '        repaint();\n', 0),
(12441, 97, '    }\n', 0),
(12442, 98, '\n', 0),
(12443, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(12444, 100, '\n', 0),
(12445, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(12446, 102, ' \n', 0),
(12447, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(12448, 104, ' \n', 0),
(12449, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(12450, 106, '        repaint();\n', 0),
(12451, 107, '    }\n', 0),
(12452, 108, ' \n', 0),
(12453, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(12454, 110, '        repaint();\n', 0),
(12455, 111, '    }\n', 0),
(12456, 112, '  \n', 0),
(12457, 113, '    public void destroy() {\n', 6),
(12458, 114, '        removeMouseListener(this);\n', 2),
(12459, 115, '        removeMouseMotionListener(this);\n', 2),
(12460, 116, '    }\n', 0),
(12461, 117, '\n', 0),
(12462, 118, '    public String getAppletInfo() {\n', 4),
(12463, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(12464, 120, '    }\n', 0),
(12465, 121, '}\n', 0),
(12466, 0, 'import java.awt.event.*;\n', 0),
(12467, 1, 'import java.awt.*;\n', 0),
(12468, 2, '\n', 0),
(12469, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(12470, 4, '\n', 0),
(12471, 5, '    private int mx, my;\n', 4),
(12472, 6, '    private Dimension size;\n', 2),
(12473, 7, '    private int onaroll;\n', 2),
(12474, 8, '\n', 0),
(12475, 9, '    public void init() {\n', 6),
(12476, 10, '        onaroll = 0;\n', 5),
(12477, 11, '        setSize(500, 500);\n', 5),
(12478, 12, '        size = getSize();\n', 2),
(12479, 13, '        addMouseListener(this);\n', 2),
(12480, 14, '        addMouseMotionListener(this);\n', 2),
(12481, 15, '        addComponentListener(this);\n', 4),
(12482, 16, '    }\n', 0),
(12483, 17, '\n', 0),
(12484, 18, '    public void update(Graphics g) {\n', 6),
(12485, 19, '        Dimension newSize = getSize();\n', 4),
(12486, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(12487, 21, '            g.setColor(getBackground());\n', 6),
(12488, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(12489, 23, '        } else {\n', 2),
(12490, 24, '            size = newSize;\n', 4),
(12491, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(12492, 26, '        } // Calculate new position\n', 11),
(12493, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(12494, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(12495, 29, '        paint(g);\n', 0),
(12496, 30, '    }\n', 0),
(12497, 31, '  \n', 0),
(12498, 32, '    public void paint(Graphics g) {\n', 6),
(12499, 33, '        g.setColor(Color.black);\n', 6),
(12500, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(12501, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(12502, 36, '    }\n', 0),
(12503, 0, 'import java.util.Scanner;\r\n', 0),
(12504, 1, ' class Years{\r\n', 2),
(12505, 2, '   public int getYear(){\r\n', 4),
(12506, 3, '	int year;\r\n', 0),
(12507, 4, '	String enteredYear;\r\n', 0),
(12508, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(12509, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(12510, 7, '	enteredYear = sc.next();\r\n', 8),
(12511, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(12512, 9, '	return year;\r\n', 2),
(12513, 10, '   }\r\n', 0),
(12514, 11, ' }\r\n', 0),
(12515, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12516, 13, ' class Months extends Years{\r\n', 4),
(12517, 14, '   public int getMonth(){\r\n', 4),
(12518, 15, '	int month;\r\n', 0),
(12519, 16, '	String enteredMonthNumber;\r\n', 0),
(12520, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(12521, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(12522, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(12523, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(12524, 21, '	return month;\r\n', 2),
(12525, 22, '   }\r\n', 0),
(12526, 23, ' }\r\n', 0),
(12527, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12528, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(12529, 26, ' static int numDays = 0;\r\n', 7),
(12530, 27, ' public static void main(String[] args) {\r\n', 8),
(12531, 28, '   int year;\r\n', 0),
(12532, 29, '   Months m = new Months();\r\n', 4),
(12533, 30, '   int month = m.getMonth();\r\n', 8),
(12534, 31, '   \r\n', 0),
(12535, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(12536, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(12537, 34, '   }\r\n', 0),
(12538, 35, '   else {\r\n', 2),
(12539, 36, '    switch (month) {\r\n', 2),
(12540, 37, '      case 1:\r\n', 5),
(12541, 38, '      case 3:\r\n', 5),
(12542, 39, '      case 5:\r\n', 5),
(12543, 40, '      case 7:\r\n', 5),
(12544, 41, '      case 8:\r\n', 5),
(12545, 42, '      case 10:\r\n', 5),
(12546, 43, '      case 12:\r\n', 5),
(12547, 44, '        numDays = 31;\r\n', 5),
(12548, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(12549, 46, '        break;\r\n', 2),
(12550, 47, '      case 4:\r\n', 5),
(12551, 48, '      case 6:\r\n', 5),
(12552, 49, '      case 9:\r\n', 5),
(12553, 50, '      case 11:\r\n', 5),
(12554, 51, '       numDays = 30;\r\n', 5),
(12555, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(12556, 53, '       break;\r\n', 2),
(12557, 54, '      case 2:\r\n', 5),
(12558, 55, '       year = m.getYear();\r\n', 8),
(12559, 56, '       if(year < 1) {\r\n', 5),
(12560, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(12561, 58, '       }\r\n', 0),
(12562, 59, '       else{\r\n', 2),
(12563, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(12564, 61, '         numDays = 29;\r\n', 5),
(12565, 62, '		 if(year > 2020){\r\n', 7),
(12566, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(12567, 64, '         }\r\n', 0),
(12568, 65, '         else{\r\n', 2),
(12569, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(12570, 67, '         }\r\n', 0),
(12571, 68, '        }//if at line 61\r\n', 0),
(12572, 69, '        else{\r\n', 2),
(12573, 70, '         numDays = 28;\r\n', 5),
(12574, 71, '         if (year > 2020){\r\n', 7),
(12575, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(12576, 73, '         }\r\n', 0),
(12577, 74, '         else{\r\n', 2),
(12578, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(12579, 76, '         }\r\n', 0),
(12580, 77, '         break;  \r\n', 2),
(12581, 78, '        }//else at line 70\r\n', 2),
(12582, 79, '       }//else at line 60\r\n', 2),
(12583, 80, '    }//switch at line 37\r\n', 2),
(12584, 81, '   }//else at line 36\r\n', 2),
(12585, 82, '  }//method\r\n', 2),
(12586, 83, ' }//class', 2),
(12587, 0, 'public class RecursionExample2 {  \r\n', 9),
(12588, 1, 'static int count=0;  \r\n', 7),
(12589, 2, 'public int p(){  \r\n', 4),
(12590, 3, 'count++;  \r\n', 2),
(12591, 4, 'if(count<=5){  \r\n', 9),
(12592, 5, 'System.out.println("hello "+count);  \r\n', 8),
(12593, 6, 'public int p();  \r\n', 4),
(12594, 7, '}  \r\n', 0),
(12595, 8, '}  \r\n', 0),
(12596, 9, 'public static void main(String[] args) {  \r\n', 8),
(12597, 10, 'p();  \r\n', 0),
(12598, 11, '}  \r\n', 0),
(12599, 12, '}  ', 0),
(12600, 0, 'import java.awt.event.*;\n', 0),
(12601, 1, 'import java.awt.*;\n', 0),
(12602, 2, '\n', 0),
(12603, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(12604, 4, '\n', 0),
(12605, 5, '    private int mx, my;\n', 4),
(12606, 6, '    private Dimension size;\n', 2),
(12607, 7, '    private int onaroll;\n', 2),
(12608, 8, '\n', 0),
(12609, 9, '    public void init() {\n', 6),
(12610, 10, '        onaroll = 0;\n', 5),
(12611, 11, '        setSize(500, 500);\n', 5),
(12612, 12, '        size = getSize();\n', 2),
(12613, 13, '        addMouseListener(this);\n', 2),
(12614, 14, '        addMouseMotionListener(this);\n', 2),
(12615, 15, '        addComponentListener(this);\n', 4),
(12616, 16, '    }\n', 0),
(12617, 17, '\n', 0),
(12618, 18, '    public void update(Graphics g) {\n', 6),
(12619, 19, '        Dimension newSize = getSize();\n', 4),
(12620, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(12621, 21, '            g.setColor(getBackground());\n', 6),
(12622, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(12623, 23, '        } else {\n', 2),
(12624, 24, '            size = newSize;\n', 4),
(12625, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(12626, 26, '        } // Calculate new position\n', 11),
(12627, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(12628, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(12629, 29, '        paint(g);\n', 0),
(12630, 30, '    }\n', 0),
(12631, 31, '  \n', 0),
(12632, 32, '    public void paint(Graphics g) {\n', 6),
(12633, 33, '        g.setColor(Color.black);\n', 6),
(12634, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(12635, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(12636, 36, '    }\n', 0),
(12637, 37, '\n', 0),
(12638, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(12639, 39, '\n', 0),
(12640, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(12641, 41, '        e.consume();\n', 6),
(12642, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(12643, 43, '            repaint();\n', 0),
(12644, 44, '        }\n', 0),
(12645, 45, '    }\n', 0),
(12646, 46, '\n', 0),
(12647, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(12648, 48, '        int x = e.getX();\n', 8),
(12649, 49, '        int y = e.getY();\n', 8),
(12650, 50, '        e.consume();\n', 6),
(12651, 51, '        requestFocus();\n', 0),
(12652, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(12653, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(12654, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(12655, 55, '                case 0:\n', 5),
(12656, 56, '                    play(getCodeBase(), \n', 2),
(12657, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(12658, 58, '                    break;\n', 2),
(12659, 59, '                case 1:\n', 5),
(12660, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(12661, 61, '                    break;\n', 2),
(12662, 62, '                case 2:\n', 5),
(12663, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(12664, 64, '                    break;\n', 2),
(12665, 65, '                case 3:\n', 5),
(12666, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(12667, 67, '                    break;\n', 2),
(12668, 68, '                }\n', 0),
(12669, 69, '                onaroll++;\n', 2),
(12670, 70, '                if (onaroll > 5) {\n', 7),
(12671, 72, '                } else {\n', 2),
(12672, 74, '                }\n', 0),
(12673, 75, '            } else {   //first hit\n', 0),
(12674, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(12675, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(12676, 78, '                onaroll = 1;\n', 5),
(12677, 79, '            }\n', 0),
(12678, 80, '        } else {   //miss\n', 0),
(12679, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(12680, 82, '			\n', 0),
(12681, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(12682, 84, '            onaroll = 0;\n', 5),
(12683, 85, '        }\n', 0),
(12684, 86, '        repaint();\n', 0),
(12685, 87, '    }\n', 0),
(12686, 88, '\n', 0),
(12687, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(12688, 90, '\n', 0),
(12689, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(12690, 92, '        repaint();\n', 0),
(12691, 93, '    }\n', 0),
(12692, 94, '\n', 0),
(12693, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(12694, 96, '        repaint();\n', 0),
(12695, 97, '    }\n', 0),
(12696, 98, '\n', 0),
(12697, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(12698, 100, '\n', 0),
(12699, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(12700, 102, ' \n', 0),
(12701, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(12702, 104, ' \n', 0),
(12703, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(12704, 106, '        repaint();\n', 0),
(12705, 107, '    }\n', 0),
(12706, 108, ' \n', 0),
(12707, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(12708, 110, '        repaint();\n', 0),
(12709, 111, '    }\n', 0),
(12710, 112, '  \n', 0),
(12711, 113, '    public void destroy() {\n', 6),
(12712, 114, '        removeMouseListener(this);\n', 2),
(12713, 115, '        removeMouseMotionListener(this);\n', 2),
(12714, 116, '    }\n', 0),
(12715, 117, '\n', 0),
(12716, 118, '    public String getAppletInfo() {\n', 4),
(12717, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(12718, 120, '    }\n', 0),
(12719, 121, '}\n', 0),
(12720, 0, 'import java.awt.event.*;\n', 0);
INSERT INTO `size` (`id`, `line_num`, `line`, `cs`) VALUES
(12721, 1, 'import java.awt.*;\n', 0),
(12722, 2, '\n', 0),
(12723, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(12724, 4, '\n', 0),
(12725, 5, '    private int mx, my;\n', 4),
(12726, 6, '    private Dimension size;\n', 2),
(12727, 7, '    private int onaroll;\n', 2),
(12728, 8, '\n', 0),
(12729, 9, '    public void init() {\n', 6),
(12730, 10, '        onaroll = 0;\n', 5),
(12731, 11, '        setSize(500, 500);\n', 5),
(12732, 12, '        size = getSize();\n', 2),
(12733, 13, '        addMouseListener(this);\n', 2),
(12734, 14, '        addMouseMotionListener(this);\n', 2),
(12735, 15, '        addComponentListener(this);\n', 4),
(12736, 16, '    }\n', 0),
(12737, 17, '\n', 0),
(12738, 18, '    public void update(Graphics g) {\n', 6),
(12739, 19, '        Dimension newSize = getSize();\n', 4),
(12740, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(12741, 21, '            g.setColor(getBackground());\n', 6),
(12742, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(12743, 23, '        } else {\n', 2),
(12744, 24, '            size = newSize;\n', 4),
(12745, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(12746, 26, '        } // Calculate new position\n', 11),
(12747, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(12748, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(12749, 29, '        paint(g);\n', 0),
(12750, 30, '    }\n', 0),
(12751, 31, '  \n', 0),
(12752, 32, '    public void paint(Graphics g) {\n', 6),
(12753, 33, '        g.setColor(Color.black);\n', 6),
(12754, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(12755, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(12756, 36, '    }\n', 0),
(12757, 37, '\n', 0),
(12758, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(12759, 39, '\n', 0),
(12760, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(12761, 41, '        e.consume();\n', 6),
(12762, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(12763, 43, '            repaint();\n', 0),
(12764, 44, '        }\n', 0),
(12765, 45, '    }\n', 0),
(12766, 46, '\n', 0),
(12767, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(12768, 48, '        int x = e.getX();\n', 8),
(12769, 49, '        int y = e.getY();\n', 8),
(12770, 50, '        e.consume();\n', 6),
(12771, 51, '        requestFocus();\n', 0),
(12772, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(12773, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(12774, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(12775, 55, '                case 0:\n', 5),
(12776, 56, '                    play(getCodeBase(), \n', 2),
(12777, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(12778, 58, '                    break;\n', 2),
(12779, 59, '                case 1:\n', 5),
(12780, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(12781, 61, '                    break;\n', 2),
(12782, 62, '                case 2:\n', 5),
(12783, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(12784, 64, '                    break;\n', 2),
(12785, 65, '                case 3:\n', 5),
(12786, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(12787, 67, '                    break;\n', 2),
(12788, 68, '                }\n', 0),
(12789, 69, '                onaroll++;\n', 2),
(12790, 70, '                if (onaroll > 5) {\n', 7),
(12791, 72, '                } else {\n', 2),
(12792, 74, '                }\n', 0),
(12793, 75, '            } else {   //first hit\n', 0),
(12794, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(12795, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(12796, 78, '                onaroll = 1;\n', 5),
(12797, 79, '            }\n', 0),
(12798, 80, '        } else {   //miss\n', 0),
(12799, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(12800, 82, '			\n', 0),
(12801, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(12802, 84, '            onaroll = 0;\n', 5),
(12803, 85, '        }\n', 0),
(12804, 86, '        repaint();\n', 0),
(12805, 87, '    }\n', 0),
(12806, 88, '\n', 0),
(12807, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(12808, 90, '\n', 0),
(12809, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(12810, 92, '        repaint();\n', 0),
(12811, 93, '    }\n', 0),
(12812, 94, '\n', 0),
(12813, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(12814, 96, '        repaint();\n', 0),
(12815, 97, '    }\n', 0),
(12816, 98, '\n', 0),
(12817, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(12818, 100, '\n', 0),
(12819, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(12820, 102, ' \n', 0),
(12821, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(12822, 104, ' \n', 0),
(12823, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(12824, 106, '        repaint();\n', 0),
(12825, 107, '    }\n', 0),
(12826, 108, ' \n', 0),
(12827, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(12828, 110, '        repaint();\n', 0),
(12829, 111, '    }\n', 0),
(12830, 112, '  \n', 0),
(12831, 113, '    public void destroy() {\n', 6),
(12832, 114, '        removeMouseListener(this);\n', 2),
(12833, 115, '        removeMouseMotionListener(this);\n', 2),
(12834, 116, '    }\n', 0),
(12835, 117, '\n', 0),
(12836, 118, '    public String getAppletInfo() {\n', 4),
(12837, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(12838, 120, '    }\n', 0),
(12839, 121, '}\n', 0),
(12840, 0, 'import java.util.Scanner;\r\n', 0),
(12841, 1, ' class Years{\r\n', 2),
(12842, 2, '   public int getYear(){\r\n', 4),
(12843, 3, '	int year;\r\n', 0),
(12844, 4, '	String enteredYear;\r\n', 0),
(12845, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(12846, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(12847, 7, '	enteredYear = sc.next();\r\n', 8),
(12848, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(12849, 9, '	return year;\r\n', 2),
(12850, 10, '   }\r\n', 0),
(12851, 11, ' }\r\n', 0),
(12852, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12853, 13, ' class Months extends Years{\r\n', 4),
(12854, 14, '   public int getMonth(){\r\n', 4),
(12855, 15, '	int month;\r\n', 0),
(12856, 16, '	String enteredMonthNumber;\r\n', 0),
(12857, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(12858, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(12859, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(12860, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(12861, 21, '	return month;\r\n', 2),
(12862, 22, '   }\r\n', 0),
(12863, 23, ' }\r\n', 0),
(12864, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12865, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(12866, 26, ' static int numDays = 0;\r\n', 7),
(12867, 27, ' public static void main(String[] args) {\r\n', 8),
(12868, 28, '   int year;\r\n', 0),
(12869, 29, '   Months m = new Months();\r\n', 4),
(12870, 30, '   int month = m.getMonth();\r\n', 8),
(12871, 31, '   \r\n', 0),
(12872, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(12873, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(12874, 34, '   }\r\n', 0),
(12875, 35, '   else {\r\n', 2),
(12876, 36, '    switch (month) {\r\n', 2),
(12877, 37, '      case 1:\r\n', 5),
(12878, 38, '      case 3:\r\n', 5),
(12879, 39, '      case 5:\r\n', 5),
(12880, 40, '      case 7:\r\n', 5),
(12881, 41, '      case 8:\r\n', 5),
(12882, 42, '      case 10:\r\n', 5),
(12883, 43, '      case 12:\r\n', 5),
(12884, 44, '        numDays = 31;\r\n', 5),
(12885, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(12886, 46, '        break;\r\n', 2),
(12887, 47, '      case 4:\r\n', 5),
(12888, 48, '      case 6:\r\n', 5),
(12889, 49, '      case 9:\r\n', 5),
(12890, 50, '      case 11:\r\n', 5),
(12891, 51, '       numDays = 30;\r\n', 5),
(12892, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(12893, 53, '       break;\r\n', 2),
(12894, 54, '      case 2:\r\n', 5),
(12895, 55, '       year = m.getYear();\r\n', 8),
(12896, 56, '       if(year < 1) {\r\n', 5),
(12897, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(12898, 58, '       }\r\n', 0),
(12899, 59, '       else{\r\n', 2),
(12900, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(12901, 61, '         numDays = 29;\r\n', 5),
(12902, 62, '		 if(year > 2020){\r\n', 7),
(12903, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(12904, 64, '         }\r\n', 0),
(12905, 65, '         else{\r\n', 2),
(12906, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(12907, 67, '         }\r\n', 0),
(12908, 68, '        }//if at line 61\r\n', 0),
(12909, 69, '        else{\r\n', 2),
(12910, 70, '         numDays = 28;\r\n', 5),
(12911, 71, '         if (year > 2020){\r\n', 7),
(12912, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(12913, 73, '         }\r\n', 0),
(12914, 74, '         else{\r\n', 2),
(12915, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(12916, 76, '         }\r\n', 0),
(12917, 77, '         break;  \r\n', 2),
(12918, 78, '        }//else at line 70\r\n', 2),
(12919, 79, '       }//else at line 60\r\n', 2),
(12920, 80, '    }//switch at line 37\r\n', 2),
(12921, 81, '   }//else at line 36\r\n', 2),
(12922, 82, '  }//method\r\n', 2),
(12923, 83, ' }//class', 2),
(12924, 0, 'class Pattern{ \r\n', 2),
(12925, 1, 'public static void main(String[] args) { \r\n', 8),
(12926, 2, '	 int rows = 5;\r\n', 5),
(12927, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 9),
(12928, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 9),
(12929, 5, '	 System.out.print(j + " "); \r\n', 13),
(12930, 6, '	 } \r\n', 0),
(12931, 7, '	 System.out.println(""); \r\n', 11),
(12932, 8, ' 	} \r\n', 0),
(12933, 9, ' 	} \r\n', 0),
(12934, 10, '} ', 0),
(12935, 0, 'import java.util.Scanner;\r\n', 0),
(12936, 1, ' class Years{\r\n', 2),
(12937, 2, '   public int getYear(){\r\n', 4),
(12938, 3, '	int year;\r\n', 0),
(12939, 4, '	String enteredYear;\r\n', 0),
(12940, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(12941, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(12942, 7, '	enteredYear = sc.next();\r\n', 8),
(12943, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(12944, 9, '	return year;\r\n', 2),
(12945, 10, '   }\r\n', 0),
(12946, 11, ' }\r\n', 0),
(12947, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12948, 13, ' class Months extends Years{\r\n', 4),
(12949, 14, '   public int getMonth(){\r\n', 4),
(12950, 15, '	int month;\r\n', 0),
(12951, 16, '	String enteredMonthNumber;\r\n', 0),
(12952, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(12953, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(12954, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(12955, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(12956, 21, '	return month;\r\n', 2),
(12957, 22, '   }\r\n', 0),
(12958, 23, ' }\r\n', 0),
(12959, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12960, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(12961, 26, ' static int numDays = 0;\r\n', 7),
(12962, 27, ' public static void main(String[] args) {\r\n', 8),
(12963, 28, '   int year;\r\n', 0),
(12964, 29, '   Months m = new Months();\r\n', 4),
(12965, 30, '   int month = m.getMonth();\r\n', 8),
(12966, 31, '   \r\n', 0),
(12967, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(12968, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(12969, 34, '   }\r\n', 0),
(12970, 35, '   else {\r\n', 2),
(12971, 36, '    switch (month) {\r\n', 2),
(12972, 37, '      case 1:\r\n', 5),
(12973, 38, '      case 3:\r\n', 5),
(12974, 39, '      case 5:\r\n', 5),
(12975, 40, '      case 7:\r\n', 5),
(12976, 41, '      case 8:\r\n', 5),
(12977, 42, '      case 10:\r\n', 5),
(12978, 43, '      case 12:\r\n', 5),
(12979, 44, '        numDays = 31;\r\n', 5),
(12980, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(12981, 46, '        break;\r\n', 2),
(12982, 47, '      case 4:\r\n', 5),
(12983, 48, '      case 6:\r\n', 5),
(12984, 49, '      case 9:\r\n', 5),
(12985, 50, '      case 11:\r\n', 5),
(12986, 51, '       numDays = 30;\r\n', 5),
(12987, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(12988, 53, '       break;\r\n', 2),
(12989, 54, '      case 2:\r\n', 5),
(12990, 55, '       year = m.getYear();\r\n', 8),
(12991, 56, '       if(year < 1) {\r\n', 5),
(12992, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(12993, 58, '       }\r\n', 0),
(12994, 59, '       else{\r\n', 2),
(12995, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(12996, 61, '         numDays = 29;\r\n', 5),
(12997, 62, '		 if(year > 2020){\r\n', 7),
(12998, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(12999, 64, '         }\r\n', 0),
(13000, 65, '         else{\r\n', 2),
(13001, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(13002, 67, '         }\r\n', 0),
(13003, 68, '        }//if at line 61\r\n', 0),
(13004, 69, '        else{\r\n', 2),
(13005, 70, '         numDays = 28;\r\n', 5),
(13006, 71, '         if (year > 2020){\r\n', 7),
(13007, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(13008, 73, '         }\r\n', 0),
(13009, 74, '         else{\r\n', 2),
(13010, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(13011, 76, '         }\r\n', 0),
(13012, 77, '         break;  \r\n', 2),
(13013, 78, '        }//else at line 70\r\n', 2),
(13014, 79, '       }//else at line 60\r\n', 2),
(13015, 80, '    }//switch at line 37\r\n', 2),
(13016, 81, '   }//else at line 36\r\n', 2),
(13017, 82, '  }//method\r\n', 2),
(13018, 83, ' }//class', 2),
(13019, 0, 'class HelloWorld { \r\n', 2),
(13020, 1, '	public static void main(String args[]) \r\n', 8),
(13021, 2, '	{ \r\n', 0),
(13022, 3, '		System.out.println("Hello World"); \r\n', 11),
(13023, 4, '	} \r\n', 0),
(13024, 5, '} \r\n', 0),
(13025, 0, 'import java.awt.event.*;\n', 0),
(13026, 1, 'import java.awt.*;\n', 0),
(13027, 2, '\n', 0),
(13028, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(13029, 4, '\n', 0),
(13030, 5, '    private int mx, my;\n', 4),
(13031, 6, '    private Dimension size;\n', 2),
(13032, 7, '    private int onaroll;\n', 2),
(13033, 8, '\n', 0),
(13034, 9, '    public void init() {\n', 6),
(13035, 10, '        onaroll = 0;\n', 5),
(13036, 11, '        setSize(500, 500);\n', 5),
(13037, 12, '        size = getSize();\n', 2),
(13038, 13, '        addMouseListener(this);\n', 2),
(13039, 14, '        addMouseMotionListener(this);\n', 2),
(13040, 15, '        addComponentListener(this);\n', 4),
(13041, 16, '    }\n', 0),
(13042, 17, '\n', 0),
(13043, 18, '    public void update(Graphics g) {\n', 6),
(13044, 19, '        Dimension newSize = getSize();\n', 4),
(13045, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(13046, 21, '            g.setColor(getBackground());\n', 6),
(13047, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(13048, 23, '        } else {\n', 2),
(13049, 24, '            size = newSize;\n', 4),
(13050, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(13051, 26, '        } // Calculate new position\n', 11),
(13052, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(13053, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(13054, 29, '        paint(g);\n', 0),
(13055, 30, '    }\n', 0),
(13056, 31, '  \n', 0),
(13057, 32, '    public void paint(Graphics g) {\n', 6),
(13058, 33, '        g.setColor(Color.black);\n', 6),
(13059, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(13060, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(13061, 36, '    }\n', 0),
(13062, 37, '\n', 0),
(13063, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(13064, 39, '\n', 0),
(13065, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(13066, 41, '        e.consume();\n', 6),
(13067, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(13068, 43, '            repaint();\n', 0),
(13069, 44, '        }\n', 0),
(13070, 45, '    }\n', 0),
(13071, 46, '\n', 0),
(13072, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(13073, 48, '        int x = e.getX();\n', 8),
(13074, 49, '        int y = e.getY();\n', 8),
(13075, 50, '        e.consume();\n', 6),
(13076, 51, '        requestFocus();\n', 0),
(13077, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(13078, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(13079, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(13080, 55, '                case 0:\n', 5),
(13081, 56, '                    play(getCodeBase(), \n', 2),
(13082, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(13083, 58, '                    break;\n', 2),
(13084, 59, '                case 1:\n', 5),
(13085, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(13086, 61, '                    break;\n', 2),
(13087, 62, '                case 2:\n', 5),
(13088, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(13089, 64, '                    break;\n', 2),
(13090, 65, '                case 3:\n', 5),
(13091, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(13092, 67, '                    break;\n', 2),
(13093, 68, '                }\n', 0),
(13094, 69, '                onaroll++;\n', 2),
(13095, 70, '                if (onaroll > 5) {\n', 7),
(13096, 72, '                } else {\n', 2),
(13097, 74, '                }\n', 0),
(13098, 75, '            } else {   //first hit\n', 0),
(13099, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(13100, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(13101, 78, '                onaroll = 1;\n', 5),
(13102, 79, '            }\n', 0),
(13103, 80, '        } else {   //miss\n', 0),
(13104, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(13105, 82, '			\n', 0),
(13106, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(13107, 84, '            onaroll = 0;\n', 5),
(13108, 85, '        }\n', 0),
(13109, 86, '        repaint();\n', 0),
(13110, 87, '    }\n', 0),
(13111, 88, '\n', 0),
(13112, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(13113, 90, '\n', 0),
(13114, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(13115, 92, '        repaint();\n', 0),
(13116, 93, '    }\n', 0),
(13117, 94, '\n', 0),
(13118, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(13119, 96, '        repaint();\n', 0),
(13120, 97, '    }\n', 0),
(13121, 98, '\n', 0),
(13122, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(13123, 100, '\n', 0),
(13124, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(13125, 102, ' \n', 0),
(13126, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(13127, 104, ' \n', 0),
(13128, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(13129, 106, '        repaint();\n', 0),
(13130, 107, '    }\n', 0),
(13131, 108, ' \n', 0),
(13132, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(13133, 110, '        repaint();\n', 0),
(13134, 111, '    }\n', 0),
(13135, 112, '  \n', 0),
(13136, 113, '    public void destroy() {\n', 6),
(13137, 114, '        removeMouseListener(this);\n', 2),
(13138, 115, '        removeMouseMotionListener(this);\n', 2),
(13139, 116, '    }\n', 0),
(13140, 117, '\n', 0),
(13141, 118, '    public String getAppletInfo() {\n', 4),
(13142, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(13143, 120, '    }\n', 0),
(13144, 121, '}\n', 0),
(13145, 0, 'import java.awt.event.*;\n', 0),
(13146, 1, 'import java.awt.*;\n', 0),
(13147, 2, '\n', 0),
(13148, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(13149, 4, '\n', 0),
(13150, 5, '    private int mx, my;\n', 4),
(13151, 6, '    private Dimension size;\n', 2),
(13152, 7, '    private int onaroll;\n', 2),
(13153, 8, '\n', 0),
(13154, 9, '    public void init() {\n', 6),
(13155, 10, '        onaroll = 0;\n', 5),
(13156, 11, '        setSize(500, 500);\n', 5),
(13157, 12, '        size = getSize();\n', 2),
(13158, 13, '        addMouseListener(this);\n', 2),
(13159, 14, '        addMouseMotionListener(this);\n', 2),
(13160, 15, '        addComponentListener(this);\n', 4),
(13161, 16, '    }\n', 0),
(13162, 17, '\n', 0),
(13163, 18, '    public void update(Graphics g) {\n', 6),
(13164, 19, '        Dimension newSize = getSize();\n', 4),
(13165, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(13166, 21, '            g.setColor(getBackground());\n', 6),
(13167, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(13168, 23, '        } else {\n', 2),
(13169, 24, '            size = newSize;\n', 4),
(13170, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(13171, 26, '        } // Calculate new position\n', 11),
(13172, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(13173, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(13174, 29, '        paint(g);\n', 0),
(13175, 30, '    }\n', 0),
(13176, 31, '  \n', 0),
(13177, 32, '    public void paint(Graphics g) {\n', 6),
(13178, 33, '        g.setColor(Color.black);\n', 6),
(13179, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(13180, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(13181, 36, '    }\n', 0),
(13182, 37, '\n', 0),
(13183, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(13184, 39, '\n', 0),
(13185, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(13186, 41, '        e.consume();\n', 6),
(13187, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(13188, 43, '            repaint();\n', 0),
(13189, 44, '        }\n', 0),
(13190, 45, '    }\n', 0),
(13191, 46, '\n', 0),
(13192, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(13193, 48, '        int x = e.getX();\n', 8),
(13194, 49, '        int y = e.getY();\n', 8),
(13195, 50, '        e.consume();\n', 6),
(13196, 51, '        requestFocus();\n', 0),
(13197, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(13198, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(13199, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(13200, 55, '                case 0:\n', 5),
(13201, 56, '                    play(getCodeBase(), \n', 2),
(13202, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(13203, 58, '                    break;\n', 2),
(13204, 59, '                case 1:\n', 5),
(13205, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(13206, 61, '                    break;\n', 2),
(13207, 62, '                case 2:\n', 5),
(13208, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(13209, 64, '                    break;\n', 2),
(13210, 65, '                case 3:\n', 5),
(13211, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(13212, 67, '                    break;\n', 2),
(13213, 68, '                }\n', 0),
(13214, 69, '                onaroll++;\n', 2),
(13215, 70, '                if (onaroll > 5) {\n', 7),
(13216, 72, '                } else {\n', 2),
(13217, 74, '                }\n', 0),
(13218, 75, '            } else {   //first hit\n', 0),
(13219, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(13220, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(13221, 78, '                onaroll = 1;\n', 5),
(13222, 79, '            }\n', 0),
(13223, 80, '        } else {   //miss\n', 0),
(13224, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(13225, 82, '			\n', 0),
(13226, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(13227, 84, '            onaroll = 0;\n', 5),
(13228, 85, '        }\n', 0),
(13229, 86, '        repaint();\n', 0),
(13230, 87, '    }\n', 0),
(13231, 88, '\n', 0),
(13232, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(13233, 90, '\n', 0),
(13234, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(13235, 92, '        repaint();\n', 0),
(13236, 93, '    }\n', 0),
(13237, 94, '\n', 0),
(13238, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(13239, 96, '        repaint();\n', 0),
(13240, 97, '    }\n', 0),
(13241, 98, '\n', 0),
(13242, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(13243, 100, '\n', 0),
(13244, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(13245, 102, ' \n', 0),
(13246, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(13247, 104, ' \n', 0),
(13248, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(13249, 106, '        repaint();\n', 0),
(13250, 107, '    }\n', 0),
(13251, 108, ' \n', 0),
(13252, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(13253, 110, '        repaint();\n', 0),
(13254, 111, '    }\n', 0),
(13255, 112, '  \n', 0),
(13256, 113, '    public void destroy() {\n', 6),
(13257, 114, '        removeMouseListener(this);\n', 2),
(13258, 115, '        removeMouseMotionListener(this);\n', 2),
(13259, 116, '    }\n', 0),
(13260, 117, '\n', 0),
(13261, 118, '    public String getAppletInfo() {\n', 4),
(13262, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(13263, 120, '    }\n', 0),
(13264, 121, '}\n', 0),
(13265, 0, 'import java.util.Scanner;\r\n', 0),
(13266, 1, ' class Years{\r\n', 2),
(13267, 2, '   public int getYear(){\r\n', 4),
(13268, 3, '	int year;\r\n', 0),
(13269, 4, '	String enteredYear;\r\n', 0),
(13270, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(13271, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(13272, 7, '	enteredYear = sc.next();\r\n', 8),
(13273, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(13274, 9, '	return year;\r\n', 2),
(13275, 10, '   }\r\n', 0),
(13276, 11, ' }\r\n', 0),
(13277, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13278, 13, ' class Months extends Years{\r\n', 4),
(13279, 14, '   public int getMonth(){\r\n', 4),
(13280, 15, '	int month;\r\n', 0),
(13281, 16, '	String enteredMonthNumber;\r\n', 0),
(13282, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(13283, 18, '	System.out.println("Enter the month number :");\r\n', 6),
(13284, 19, '	enteredMonthNumber = sc.next();\r\n', 8),
(13285, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 8),
(13286, 21, '	return month;\r\n', 2),
(13287, 22, '   }\r\n', 0),
(13288, 23, ' }\r\n', 0),
(13289, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13290, 25, 'class DaysPerMonth extends Months{ \r\n', 4),
(13291, 26, ' static int numDays = 0;\r\n', 7),
(13292, 27, ' public static void main(String[] args) {\r\n', 8),
(13293, 28, '   int year;\r\n', 0),
(13294, 29, '   Months m = new Months();\r\n', 4),
(13295, 30, '   int month = m.getMonth();\r\n', 8),
(13296, 31, '   \r\n', 0),
(13297, 32, '   if((month < 1) || (month > 12)){ \r\n', 11),
(13298, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 9),
(13299, 34, '   }\r\n', 0),
(13300, 35, '   else {\r\n', 2),
(13301, 36, '    switch (month) {\r\n', 2),
(13302, 37, '      case 1:\r\n', 5),
(13303, 38, '      case 3:\r\n', 5),
(13304, 39, '      case 5:\r\n', 5),
(13305, 40, '      case 7:\r\n', 5),
(13306, 41, '      case 8:\r\n', 5),
(13307, 42, '      case 10:\r\n', 5),
(13308, 43, '      case 12:\r\n', 5),
(13309, 44, '        numDays = 31;\r\n', 5),
(13310, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(13311, 46, '        break;\r\n', 2),
(13312, 47, '      case 4:\r\n', 5),
(13313, 48, '      case 6:\r\n', 5),
(13314, 49, '      case 9:\r\n', 5),
(13315, 50, '      case 11:\r\n', 5),
(13316, 51, '       numDays = 30;\r\n', 5),
(13317, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 8),
(13318, 53, '       break;\r\n', 2),
(13319, 54, '      case 2:\r\n', 5),
(13320, 55, '       year = m.getYear();\r\n', 8),
(13321, 56, '       if(year < 1) {\r\n', 5),
(13322, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 6),
(13323, 58, '       }\r\n', 0),
(13324, 59, '       else{\r\n', 2),
(13325, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 19),
(13326, 61, '         numDays = 29;\r\n', 5),
(13327, 62, '		 if(year > 2020){\r\n', 7),
(13328, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(13329, 64, '         }\r\n', 0),
(13330, 65, '         else{\r\n', 2),
(13331, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(13332, 67, '         }\r\n', 0),
(13333, 68, '        }//if at line 61\r\n', 0),
(13334, 69, '        else{\r\n', 2),
(13335, 70, '         numDays = 28;\r\n', 5),
(13336, 71, '         if (year > 2020){\r\n', 7),
(13337, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 8),
(13338, 73, '         }\r\n', 0),
(13339, 74, '         else{\r\n', 2),
(13340, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 8),
(13341, 76, '         }\r\n', 0),
(13342, 77, '         break;  \r\n', 2),
(13343, 78, '        }//else at line 70\r\n', 2),
(13344, 79, '       }//else at line 60\r\n', 2),
(13345, 80, '    }//switch at line 37\r\n', 2),
(13346, 81, '   }//else at line 36\r\n', 2),
(13347, 82, '  }//method\r\n', 2),
(13348, 83, ' }//class', 2),
(13349, 0, 'public class RecursionExample2 {  \r\n', 9),
(13350, 1, 'static int count=0;  \r\n', 7),
(13351, 2, 'public int p(){  \r\n', 4),
(13352, 3, 'count++;  \r\n', 2),
(13353, 4, 'if(count<=5){  \r\n', 9),
(13354, 5, 'System.out.println("hello "+count);  \r\n', 8),
(13355, 6, 'public int p();  \r\n', 4),
(13356, 7, '}  \r\n', 0),
(13357, 8, '}  \r\n', 0),
(13358, 9, 'public static void main(String[] args) {  \r\n', 8),
(13359, 10, 'p();  \r\n', 0),
(13360, 11, '}  \r\n', 0),
(13361, 12, '}  ', 0),
(13362, 0, 'import java.awt.event.*;\n', 0),
(13363, 1, 'import java.awt.*;\n', 0),
(13364, 2, '\n', 0),
(13365, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(13366, 4, '\n', 0),
(13367, 5, '    private int mx, my;\n', 4),
(13368, 6, '    private Dimension size;\n', 2),
(13369, 7, '    private int onaroll;\n', 2),
(13370, 8, '\n', 0),
(13371, 9, '    public void init() {\n', 6),
(13372, 10, '        onaroll = 0;\n', 5),
(13373, 11, '        setSize(500, 500);\n', 5),
(13374, 12, '        size = getSize();\n', 2),
(13375, 13, '        addMouseListener(this);\n', 2),
(13376, 14, '        addMouseMotionListener(this);\n', 2),
(13377, 15, '        addComponentListener(this);\n', 4),
(13378, 16, '    }\n', 0),
(13379, 17, '\n', 0),
(13380, 18, '    public void update(Graphics g) {\n', 6),
(13381, 19, '        Dimension newSize = getSize();\n', 4),
(13382, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(13383, 21, '            g.setColor(getBackground());\n', 6),
(13384, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(13385, 23, '        } else {\n', 2),
(13386, 24, '            size = newSize;\n', 4),
(13387, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(13388, 26, '        } // Calculate new position\n', 11),
(13389, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(13390, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(13391, 29, '        paint(g);\n', 0),
(13392, 30, '    }\n', 0),
(13393, 31, '  \n', 0),
(13394, 32, '    public void paint(Graphics g) {\n', 6),
(13395, 33, '        g.setColor(Color.black);\n', 6),
(13396, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(13397, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(13398, 36, '    }\n', 0),
(13399, 37, '\n', 0),
(13400, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(13401, 39, '\n', 0),
(13402, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(13403, 41, '        e.consume();\n', 6),
(13404, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(13405, 43, '            repaint();\n', 0),
(13406, 44, '        }\n', 0),
(13407, 45, '    }\n', 0),
(13408, 46, '\n', 0),
(13409, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(13410, 48, '        int x = e.getX();\n', 8),
(13411, 49, '        int y = e.getY();\n', 8),
(13412, 50, '        e.consume();\n', 6),
(13413, 51, '        requestFocus();\n', 0),
(13414, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(13415, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(13416, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(13417, 55, '                case 0:\n', 5),
(13418, 56, '                    play(getCodeBase(), \n', 2),
(13419, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(13420, 58, '                    break;\n', 2),
(13421, 59, '                case 1:\n', 5),
(13422, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(13423, 61, '                    break;\n', 2),
(13424, 62, '                case 2:\n', 5),
(13425, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(13426, 64, '                    break;\n', 2),
(13427, 65, '                case 3:\n', 5),
(13428, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(13429, 67, '                    break;\n', 2),
(13430, 68, '                }\n', 0),
(13431, 69, '                onaroll++;\n', 2),
(13432, 70, '                if (onaroll > 5) {\n', 7),
(13433, 72, '                } else {\n', 2),
(13434, 74, '                }\n', 0),
(13435, 75, '            } else {   //first hit\n', 0),
(13436, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(13437, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(13438, 78, '                onaroll = 1;\n', 5),
(13439, 79, '            }\n', 0),
(13440, 80, '        } else {   //miss\n', 0),
(13441, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(13442, 82, '			\n', 0),
(13443, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(13444, 84, '            onaroll = 0;\n', 5),
(13445, 85, '        }\n', 0),
(13446, 86, '        repaint();\n', 0),
(13447, 87, '    }\n', 0),
(13448, 88, '\n', 0),
(13449, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(13450, 90, '\n', 0),
(13451, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(13452, 92, '        repaint();\n', 0),
(13453, 93, '    }\n', 0),
(13454, 94, '\n', 0),
(13455, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(13456, 96, '        repaint();\n', 0),
(13457, 97, '    }\n', 0),
(13458, 98, '\n', 0),
(13459, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(13460, 100, '\n', 0),
(13461, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(13462, 102, ' \n', 0),
(13463, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(13464, 104, ' \n', 0),
(13465, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(13466, 106, '        repaint();\n', 0),
(13467, 107, '    }\n', 0),
(13468, 108, ' \n', 0),
(13469, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(13470, 110, '        repaint();\n', 0),
(13471, 111, '    }\n', 0),
(13472, 112, '  \n', 0),
(13473, 113, '    public void destroy() {\n', 6),
(13474, 114, '        removeMouseListener(this);\n', 2),
(13475, 115, '        removeMouseMotionListener(this);\n', 2),
(13476, 116, '    }\n', 0),
(13477, 117, '\n', 0),
(13478, 118, '    public String getAppletInfo() {\n', 4),
(13479, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(13480, 120, '    }\n', 0),
(13481, 121, '}\n', 0),
(13482, 0, 'import java.awt.event.*;\n', 0),
(13483, 1, 'import java.awt.*;\n', 0),
(13484, 2, '\n', 0),
(13485, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 30),
(13486, 4, '\n', 0),
(13487, 5, '    private int mx, my;\n', 4),
(13488, 6, '    private Dimension size;\n', 2),
(13489, 7, '    private int onaroll;\n', 2),
(13490, 8, '\n', 0),
(13491, 9, '    public void init() {\n', 6),
(13492, 10, '        onaroll = 0;\n', 5),
(13493, 11, '        setSize(500, 500);\n', 5),
(13494, 12, '        size = getSize();\n', 2),
(13495, 13, '        addMouseListener(this);\n', 2),
(13496, 14, '        addMouseMotionListener(this);\n', 2),
(13497, 15, '        addComponentListener(this);\n', 4),
(13498, 16, '    }\n', 0),
(13499, 17, '\n', 0),
(13500, 18, '    public void update(Graphics g) {\n', 6),
(13501, 19, '        Dimension newSize = getSize();\n', 4),
(13502, 20, '        if (size.equals(newSize)) { // Erase old box\n', 4),
(13503, 21, '            g.setColor(getBackground());\n', 6),
(13504, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(13505, 23, '        } else {\n', 2),
(13506, 24, '            size = newSize;\n', 4),
(13507, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 11),
(13508, 26, '        } // Calculate new position\n', 11),
(13509, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 23),
(13510, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 23),
(13511, 29, '        paint(g);\n', 0),
(13512, 30, '    }\n', 0),
(13513, 31, '  \n', 0),
(13514, 32, '    public void paint(Graphics g) {\n', 6),
(13515, 33, '        g.setColor(Color.black);\n', 6),
(13516, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 15),
(13517, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 17),
(13518, 36, '    }\n', 0),
(13519, 37, '\n', 0),
(13520, 38, '    public void mouseDragged(MouseEvent e) {}\n', 6),
(13521, 39, '\n', 0),
(13522, 40, '    public void mouseMoved(MouseEvent e) {\n', 6),
(13523, 41, '        e.consume();\n', 6),
(13524, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 19),
(13525, 43, '            repaint();\n', 0),
(13526, 44, '        }\n', 0),
(13527, 45, '    }\n', 0),
(13528, 46, '\n', 0),
(13529, 47, '    public void mousePressed(MouseEvent e) {\n', 6),
(13530, 48, '        int x = e.getX();\n', 8),
(13531, 49, '        int y = e.getY();\n', 8),
(13532, 50, '        e.consume();\n', 6),
(13533, 51, '        requestFocus();\n', 0),
(13534, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(13535, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(13536, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(13537, 55, '                case 0:\n', 5),
(13538, 56, '                    play(getCodeBase(), \n', 2),
(13539, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 8),
(13540, 58, '                    break;\n', 2),
(13541, 59, '                case 1:\n', 5),
(13542, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 10),
(13543, 61, '                    break;\n', 2),
(13544, 62, '                case 2:\n', 5),
(13545, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 14),
(13546, 64, '                    break;\n', 2),
(13547, 65, '                case 3:\n', 5),
(13548, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 10),
(13549, 67, '                    break;\n', 2),
(13550, 68, '                }\n', 0),
(13551, 69, '                onaroll++;\n', 2),
(13552, 70, '                if (onaroll > 5) {\n', 7),
(13553, 72, '                } else {\n', 2),
(13554, 74, '                }\n', 0),
(13555, 75, '            } else {   //first hit\n', 0),
(13556, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 8),
(13557, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 10),
(13558, 78, '                onaroll = 1;\n', 5),
(13559, 79, '            }\n', 0),
(13560, 80, '        } else {   //miss\n', 0),
(13561, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 10),
(13562, 82, '			\n', 0),
(13563, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 10),
(13564, 84, '            onaroll = 0;\n', 5),
(13565, 85, '        }\n', 0),
(13566, 86, '        repaint();\n', 0),
(13567, 87, '    }\n', 0),
(13568, 88, '\n', 0),
(13569, 89, '    public void mouseReleased(MouseEvent e) {}\n', 6),
(13570, 90, '\n', 0),
(13571, 91, '    public void mouseEntered(MouseEvent e) {\n', 6),
(13572, 92, '        repaint();\n', 0),
(13573, 93, '    }\n', 0),
(13574, 94, '\n', 0),
(13575, 95, '    public void mouseExited(MouseEvent e) {\n', 6),
(13576, 96, '        repaint();\n', 0),
(13577, 97, '    }\n', 0),
(13578, 98, '\n', 0),
(13579, 99, '    public void mouseClicked(MouseEvent e) {}\n', 6),
(13580, 100, '\n', 0),
(13581, 101, '    public void componentHidden(ComponentEvent e) {}\n', 11),
(13582, 102, ' \n', 0),
(13583, 103, '    public void componentMoved(ComponentEvent e) {}\n', 6),
(13584, 104, ' \n', 0),
(13585, 105, '    public void componentResized(ComponentEvent e) {\n', 6),
(13586, 106, '        repaint();\n', 0),
(13587, 107, '    }\n', 0),
(13588, 108, ' \n', 0),
(13589, 109, '    public void componentShown(ComponentEvent e) {\n', 6),
(13590, 110, '        repaint();\n', 0),
(13591, 111, '    }\n', 0),
(13592, 112, '  \n', 0),
(13593, 113, '    public void destroy() {\n', 6),
(13594, 114, '        removeMouseListener(this);\n', 2),
(13595, 115, '        removeMouseMotionListener(this);\n', 2),
(13596, 116, '    }\n', 0),
(13597, 117, '\n', 0),
(13598, 118, '    public String getAppletInfo() {\n', 4),
(13599, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 4),
(13600, 120, '    }\n', 0),
(13601, 121, '}\n', 0),
(13602, 0, 'import java.util.Scanner;\r\n', 0),
(13603, 1, ' class Years{\r\n', 2),
(13604, 2, '   public int getYear(){\r\n', 4),
(13605, 3, '	int year;\r\n', 0),
(13606, 4, '	String enteredYear;\r\n', 0),
(13607, 5, '	Scanner sc = new Scanner(System.in);\r\n', 10),
(13608, 6, '	System.out.println("Enter the year as a number :");\r\n', 6),
(13609, 7, '	enteredYear = sc.next();\r\n', 8),
(13610, 8, '	year = Integer.parseInt(enteredYear);\r\n', 8),
(13611, 9, '	return year;\r\n', 2),
(13612, 10, '   }\r\n', 0),
(13613, 11, ' }\r\n', 0),
(13614, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13615, 13, ' class Months extends Years{\r\n', 4),
(13616, 14, '   public int getMonth(){\r\n', 4),
(13617, 15, '	int month;\r\n', 0),
(13618, 16, '	String enteredMonthNumber;\r\n', 0),
(13619, 17, '	Scanner sc = new Scanner(System.in);\r\n', 10);

-- --------------------------------------------------------

--
-- Table structure for table `sizecoupling`
--

CREATE TABLE IF NOT EXISTS `sizecoupling` (
  `CupID` int(11) NOT NULL AUTO_INCREMENT,
  `Wr` int(11) NOT NULL,
  `Wmcms` int(11) NOT NULL,
  `Wmcmd` int(11) NOT NULL,
  `Wmcrms` int(11) NOT NULL,
  `Wmcrmd` int(11) NOT NULL,
  `Wrmcrms` int(11) NOT NULL,
  `Wrmcrmd` int(11) NOT NULL,
  `Wrmcms` int(11) NOT NULL,
  `Wrmcmd` int(11) NOT NULL,
  `Wmrgvs` int(11) NOT NULL,
  `Wmrgvd` int(11) NOT NULL,
  `Wrmrgvs` int(11) NOT NULL,
  `Wrmrgvd` int(11) NOT NULL,
  PRIMARY KEY (`CupID`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=6 ;

--
-- Dumping data for table `sizecoupling`
--

INSERT INTO `sizecoupling` (`CupID`, `Wr`, `Wmcms`, `Wmcmd`, `Wmcrms`, `Wmcrmd`, `Wrmcrms`, `Wrmcrmd`, `Wrmcms`, `Wrmcmd`, `Wmrgvs`, `Wmrgvd`, `Wrmrgvs`, `Wrmrgvd`) VALUES
(1, 2, 2, 3, 3, 4, 4, 5, 3, 4, 2, 2, 1, 2),
(2, 2, 2, 3, 3, 4, 4, 5, 3, 4, 2, 2, 1, 2),
(3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5),
(4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6),
(5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8);

-- --------------------------------------------------------

--
-- Table structure for table `sizeweigths`
--

CREATE TABLE IF NOT EXISTS `sizeweigths` (
  `s_id` int(11) NOT NULL AUTO_INCREMENT,
  `keyword` int(11) NOT NULL,
  `identifier` int(11) NOT NULL,
  `operator` int(11) NOT NULL,
  `num_value` int(11) NOT NULL,
  `string_value` int(11) NOT NULL,
  PRIMARY KEY (`s_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=49 ;

--
-- Dumping data for table `sizeweigths`
--

INSERT INTO `sizeweigths` (`s_id`, `keyword`, `identifier`, `operator`, `num_value`, `string_value`) VALUES
(1, 0, 0, 0, 0, 0),
(2, 2, 5, 5, 6, 6),
(3, 2, 5, 5, 6, 6),
(4, 0, 0, 0, 0, 0),
(5, 0, 0, 0, 0, 0),
(6, 0, 0, 0, 0, 0),
(7, 5, 7, 9, 5, 4),
(8, 5, 7, 9, 5, 4),
(9, 5, 5, 5, 5, 5),
(10, 6, 7, 8, 9, 10),
(11, 6, 7, 8, 9, 10),
(12, 6, 8, 9, 10, 11),
(13, 5, 6, 7, 4, 4),
(14, 4, 4, 4, 4, 4),
(15, 4, 4, 4, 4, 4),
(16, 5, 10, 15, 10, 10),
(17, 5, 10, 15, 10, 10),
(18, 5, 6, 7, 8, 10),
(19, 10, 10, 10, 10, 10),
(20, 10, 10, 10, 10, 10),
(21, 10, 10, 10, 10, 10),
(22, 10, 10, 10, 10, 10),
(23, 10, 10, 10, 10, 10),
(24, 10, 10, 10, 10, 10),
(25, 10, 10, 10, 10, 10),
(26, 10, 10, 10, 10, 10),
(27, 5, 5, 5, 5, 5),
(28, 20, 20, 20, 20, 20),
(29, 20, 20, 120, 20, 20),
(30, 20, 20, 20, 20, 20),
(31, 20, 20, 20, 20, 20),
(32, 25, 25, 25, 25, 25),
(33, 5, 5, 5, 5, 5),
(34, 5, 6, 7, 8, 9),
(35, 1, 1, 1, 1, 1),
(36, 2, 2, 2, 2, 2),
(37, 1, 1, 1, 1, 1),
(38, 2, 2, 2, 2, 2),
(39, 2, 3, 4, 5, 6),
(40, 5, 10, 15, 20, 25),
(41, 2, 3, 2, 3, 2),
(42, 2, 2, 2, 3, 5),
(43, 2, 2, 2, 3, 4),
(44, 2, 2, 2, 2, 2),
(45, 10, 10, 20, 2, 5),
(46, 5, 6, 7, 8, 9),
(47, 2, 3, 4, 5, 6),
(48, 5, 6, 7, 8, 10);

-- --------------------------------------------------------

--
-- Table structure for table `tbl_array`
--

CREATE TABLE IF NOT EXISTS `tbl_array` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `arr_test` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=7 ;

--
-- Dumping data for table `tbl_array`
--

INSERT INTO `tbl_array` (`id`, `arr_test`) VALUES
(1, 'a:0:{}'),
(2, 'a:0:{}'),
(3, 'a:0:{}'),
(4, 'a:0:{}'),
(5, 'a:0:{}'),
(6, 'a:0:{}');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_files`
--

CREATE TABLE IF NOT EXISTS `tbl_files` (
  `id` int(9) NOT NULL AUTO_INCREMENT,
  `filename` varchar(255) NOT NULL,
  `created` datetime NOT NULL,
  `location` varchar(255) NOT NULL,
  `store` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=46 ;

--
-- Dumping data for table `tbl_files`
--

INSERT INTO `tbl_files` (`id`, `filename`, `created`, `location`, `store`) VALUES
(25, 'testitpm.txt', '2020-05-08 15:24:08', 'C:wamp	mpphp51C2.tmp', 'upload/'),
(26, 're.txt', '2020-05-08 15:25:47', 'C:wamp	mpphpD71C.tmp', 'upload/'),
(27, 'JumpingBox.java', '2020-05-08 15:26:03', 'C:wamp	mpphp12ED.tmp', 'upload/'),
(28, 'JumpingBox.java', '2020-05-08 15:51:31', 'C:wamp	mpphp6610.tmp', 'upload/'),
(31, 'DaysPerMonth.java', '2020-05-09 13:13:10', 'C:wamp	mpphpC65A.tmp', 'upload/'),
(40, 'samplex.txt', '2020-05-09 18:20:38', 'C:wamp	mpphp46E6.tmp', 'upload/'),
(41, 'DaysPerMonth.java', '2020-05-11 12:59:28', 'C:wamp	mpphpF695.tmp', 'upload/'),
(42, 'HelloWorld.java', '2020-05-16 07:15:39', 'C:wamp	mpphp2F50.tmp', 'upload/'),
(43, 'JumpingBox.java', '2020-05-16 07:16:02', 'C:wamp	mpphp8909.tmp', 'upload/'),
(44, 'JumpingBox.java', '2020-05-16 18:50:45', 'C:wamp	mpphp8F7F.tmp', 'upload/'),
(45, 'testitpm.txt', '2020-05-20 18:39:28', 'C:wamp	mpphpB3A8.tmp', 'upload/');

-- --------------------------------------------------------

--
-- Table structure for table `variable`
--

CREATE TABLE IF NOT EXISTS `variable` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `line_num` int(11) NOT NULL,
  `line` varchar(255) NOT NULL,
  `cv` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=19766 ;

--
-- Dumping data for table `variable`
--

INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(1, 0, 'import java.util.Scanner;\r\n', 0),
(2, 1, ' class Years{\r\n', 0),
(3, 2, '   public int getYear(){\r\n', 0),
(4, 3, '	int year;\r\n', 2),
(5, 4, '	String enteredYear;\r\n', 2),
(6, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(7, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(8, 7, '	enteredYear = sc.next();\r\n', 0),
(9, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(10, 9, '	return year;\r\n', 0),
(11, 10, '   }\r\n', 0),
(12, 11, ' }\r\n', 0),
(13, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(14, 13, ' class Months extends Years{\r\n', 0),
(15, 14, '   public int getMonth(){\r\n', 0),
(16, 15, '	int month;\r\n', 2),
(17, 16, '	String enteredMonthNumber;\r\n', 2),
(18, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(19, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(20, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(21, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(22, 21, '	return month;\r\n', 0),
(23, 22, '   }\r\n', 0),
(24, 23, ' }\r\n', 0),
(25, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(26, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(27, 26, ' static int numDays = 0;\r\n', 4),
(28, 27, ' public static void main(String[] args) {\r\n', 0),
(29, 28, '   int year;\r\n', 2),
(30, 29, '   Months m = new Months();\r\n', 0),
(31, 30, '   int month = m.getMonth();\r\n', 0),
(32, 31, '   \r\n', 0),
(33, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(34, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(35, 34, '   }\r\n', 0),
(36, 35, '   else {\r\n', 0),
(37, 36, '    switch (month) {\r\n', 0),
(38, 37, '      case 1:\r\n', 0),
(39, 38, '      case 3:\r\n', 0),
(40, 39, '      case 5:\r\n', 0),
(41, 40, '      case 7:\r\n', 0),
(42, 41, '      case 8:\r\n', 0),
(43, 42, '      case 10:\r\n', 0),
(44, 43, '      case 12:\r\n', 0),
(45, 44, '        numDays = 31;\r\n', 0),
(46, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(47, 46, '        break;\r\n', 0),
(48, 47, '      case 4:\r\n', 0),
(49, 48, '      case 6:\r\n', 0),
(50, 49, '      case 9:\r\n', 0),
(51, 50, '      case 11:\r\n', 0),
(52, 51, '       numDays = 30;\r\n', 0),
(53, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(54, 53, '       break;\r\n', 0),
(55, 54, '      case 2:\r\n', 0),
(56, 55, '       year = m.getYear();\r\n', 0),
(57, 56, '       if(year < 1) {\r\n', 0),
(58, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(59, 58, '       }\r\n', 0),
(60, 59, '       else{\r\n', 0),
(61, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(62, 61, '         numDays = 29;\r\n', 0),
(63, 62, '		 if(year > 2020){\r\n', 0),
(64, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(65, 64, '         }\r\n', 0),
(66, 65, '         else{\r\n', 0),
(67, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(68, 67, '         }\r\n', 0),
(69, 68, '        }//if at line 61\r\n', 0),
(70, 69, '        else{\r\n', 0),
(71, 70, '         numDays = 28;\r\n', 0),
(72, 71, '         if (year > 2020){\r\n', 0),
(73, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(74, 73, '         }\r\n', 0),
(75, 74, '         else{\r\n', 0),
(76, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(77, 76, '         }\r\n', 0),
(78, 77, '         break;  \r\n', 0),
(79, 78, '        }//else at line 70\r\n', 0),
(80, 79, '       }//else at line 60\r\n', 0),
(81, 80, '    }//switch at line 37\r\n', 0),
(82, 81, '   }//else at line 36\r\n', 0),
(83, 82, '  }//method\r\n', 0),
(84, 83, ' }//class', 0),
(85, 0, 'public class RecursionExample2 {  \r\n', 0),
(86, 1, 'static int count=0;  \r\n', 4),
(87, 2, 'public int p(){  \r\n', 0),
(88, 3, 'count++;  \r\n', 0),
(89, 4, 'if(count<=5){  \r\n', 0),
(90, 5, 'System.out.println("hello "+count);  \r\n', 0),
(91, 6, 'public int p();  \r\n', 0),
(92, 7, '}  \r\n', 0),
(93, 8, '}  \r\n', 0),
(94, 9, 'public static void main(String[] args) {  \r\n', 0),
(95, 10, 'p();  \r\n', 0),
(96, 11, '}  \r\n', 0),
(97, 12, '}  ', 0),
(98, 0, 'import java.awt.event.*;\n', 0),
(99, 1, 'import java.awt.*;\n', 0),
(100, 2, '\n', 0),
(101, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(102, 4, '\n', 0),
(103, 5, '    private int mx, my;\n', 4),
(104, 6, '    private Dimension size;\n', 8),
(105, 7, '    private int onaroll;\n', 2),
(106, 8, '\n', 0),
(107, 9, '    public void init() {\n', 0),
(108, 10, '        onaroll = 0;\n', 0),
(109, 11, '        setSize(500, 500);\n', 0),
(110, 12, '        size = getSize();\n', 0),
(111, 13, '        addMouseListener(this);\n', 0),
(112, 14, '        addMouseMotionListener(this);\n', 0),
(113, 15, '        addComponentListener(this);\n', 0),
(114, 16, '    }\n', 0),
(115, 17, '\n', 0),
(116, 18, '    public void update(Graphics g) {\n', 0),
(117, 19, '        Dimension newSize = getSize();\n', 8),
(118, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(119, 21, '            g.setColor(getBackground());\n', 0),
(120, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(121, 23, '        } else {\n', 0),
(122, 24, '            size = newSize;\n', 0),
(123, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(124, 26, '        } // Calculate new position\n', 0),
(125, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(126, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(127, 29, '        paint(g);\n', 0),
(128, 30, '    }\n', 0),
(129, 31, '  \n', 0),
(130, 32, '    public void paint(Graphics g) {\n', 0),
(131, 33, '        g.setColor(Color.black);\n', 0),
(132, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(133, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(134, 36, '    }\n', 0),
(135, 37, '\n', 0),
(136, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(137, 39, '\n', 0),
(138, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(139, 41, '        e.consume();\n', 0),
(140, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(141, 43, '            repaint();\n', 0),
(142, 44, '        }\n', 0),
(143, 45, '    }\n', 0),
(144, 46, '\n', 0),
(145, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(146, 48, '        int x = e.getX();\n', 0),
(147, 49, '        int y = e.getY();\n', 0),
(148, 50, '        e.consume();\n', 0),
(149, 51, '        requestFocus();\n', 0),
(150, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(151, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(152, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(153, 55, '                case 0:\n', 0),
(154, 56, '                    play(getCodeBase(), \n', 0),
(155, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(156, 58, '                    break;\n', 0),
(157, 59, '                case 1:\n', 0),
(158, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(159, 61, '                    break;\n', 0),
(160, 62, '                case 2:\n', 0),
(161, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(162, 64, '                    break;\n', 0),
(163, 65, '                case 3:\n', 0),
(164, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(165, 67, '                    break;\n', 0),
(166, 68, '                }\n', 0),
(167, 69, '                onaroll++;\n', 0),
(168, 70, '                if (onaroll > 5) {\n', 0),
(169, 72, '                } else {\n', 0),
(170, 74, '                }\n', 0),
(171, 75, '            } else {   //first hit\n', 0),
(172, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(173, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(174, 78, '                onaroll = 1;\n', 0),
(175, 79, '            }\n', 0),
(176, 80, '        } else {   //miss\n', 0),
(177, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(178, 82, '			\n', 0),
(179, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(180, 84, '            onaroll = 0;\n', 0),
(181, 85, '        }\n', 0),
(182, 86, '        repaint();\n', 0),
(183, 87, '    }\n', 0),
(184, 88, '\n', 0),
(185, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(186, 90, '\n', 0),
(187, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(188, 92, '        repaint();\n', 0),
(189, 93, '    }\n', 0),
(190, 94, '\n', 0),
(191, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(192, 96, '        repaint();\n', 0),
(193, 97, '    }\n', 0),
(194, 98, '\n', 0),
(195, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(196, 100, '\n', 0),
(197, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(198, 102, ' \n', 0),
(199, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(200, 104, ' \n', 0),
(201, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(202, 106, '        repaint();\n', 0),
(203, 107, '    }\n', 0),
(204, 108, ' \n', 0),
(205, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(206, 110, '        repaint();\n', 0),
(207, 111, '    }\n', 0),
(208, 112, '  \n', 0),
(209, 113, '    public void destroy() {\n', 0),
(210, 114, '        removeMouseListener(this);\n', 0),
(211, 115, '        removeMouseMotionListener(this);\n', 0),
(212, 116, '    }\n', 0),
(213, 117, '\n', 0),
(214, 118, '    public String getAppletInfo() {\n', 0),
(215, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(216, 120, '    }\n', 0),
(217, 121, '}\n', 0),
(218, 0, 'import java.awt.event.*;\n', 0),
(219, 1, 'import java.awt.*;\n', 0),
(220, 2, '\n', 0),
(221, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(222, 4, '\n', 0),
(223, 5, '    private int mx, my;\n', 4),
(224, 6, '    private Dimension size;\n', 8),
(225, 7, '    private int onaroll;\n', 2),
(226, 8, '\n', 0),
(227, 9, '    public void init() {\n', 0),
(228, 10, '        onaroll = 0;\n', 0),
(229, 11, '        setSize(500, 500);\n', 0),
(230, 12, '        size = getSize();\n', 0),
(231, 13, '        addMouseListener(this);\n', 0),
(232, 14, '        addMouseMotionListener(this);\n', 0),
(233, 15, '        addComponentListener(this);\n', 0),
(234, 16, '    }\n', 0),
(235, 17, '\n', 0),
(236, 18, '    public void update(Graphics g) {\n', 0),
(237, 19, '        Dimension newSize = getSize();\n', 8),
(238, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(239, 21, '            g.setColor(getBackground());\n', 0),
(240, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(241, 23, '        } else {\n', 0),
(242, 24, '            size = newSize;\n', 0),
(243, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(244, 26, '        } // Calculate new position\n', 0),
(245, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(246, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(247, 29, '        paint(g);\n', 0),
(248, 30, '    }\n', 0),
(249, 31, '  \n', 0),
(250, 32, '    public void paint(Graphics g) {\n', 0),
(251, 33, '        g.setColor(Color.black);\n', 0),
(252, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(253, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(254, 36, '    }\n', 0),
(255, 37, '\n', 0),
(256, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(257, 39, '\n', 0),
(258, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(259, 41, '        e.consume();\n', 0),
(260, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(261, 43, '            repaint();\n', 0),
(262, 44, '        }\n', 0),
(263, 45, '    }\n', 0),
(264, 46, '\n', 0),
(265, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(266, 48, '        int x = e.getX();\n', 0),
(267, 49, '        int y = e.getY();\n', 0),
(268, 50, '        e.consume();\n', 0),
(269, 51, '        requestFocus();\n', 0),
(270, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(271, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(272, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(273, 55, '                case 0:\n', 0),
(274, 56, '                    play(getCodeBase(), \n', 0),
(275, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(276, 58, '                    break;\n', 0),
(277, 59, '                case 1:\n', 0),
(278, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(279, 61, '                    break;\n', 0),
(280, 62, '                case 2:\n', 0),
(281, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(282, 64, '                    break;\n', 0),
(283, 65, '                case 3:\n', 0),
(284, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(285, 67, '                    break;\n', 0),
(286, 68, '                }\n', 0),
(287, 69, '                onaroll++;\n', 0),
(288, 70, '                if (onaroll > 5) {\n', 0),
(289, 72, '                } else {\n', 0),
(290, 74, '                }\n', 0),
(291, 75, '            } else {   //first hit\n', 0),
(292, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(293, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(294, 78, '                onaroll = 1;\n', 0),
(295, 79, '            }\n', 0),
(296, 80, '        } else {   //miss\n', 0),
(297, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(298, 82, '			\n', 0),
(299, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(300, 84, '            onaroll = 0;\n', 0),
(301, 85, '        }\n', 0),
(302, 86, '        repaint();\n', 0),
(303, 87, '    }\n', 0),
(304, 88, '\n', 0),
(305, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(306, 90, '\n', 0),
(307, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(308, 92, '        repaint();\n', 0),
(309, 93, '    }\n', 0),
(310, 94, '\n', 0),
(311, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(312, 96, '        repaint();\n', 0),
(313, 97, '    }\n', 0),
(314, 98, '\n', 0),
(315, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(316, 100, '\n', 0),
(317, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(318, 102, ' \n', 0),
(319, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(320, 104, ' \n', 0),
(321, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(322, 106, '        repaint();\n', 0),
(323, 107, '    }\n', 0),
(324, 108, ' \n', 0),
(325, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(326, 110, '        repaint();\n', 0),
(327, 111, '    }\n', 0),
(328, 112, '  \n', 0),
(329, 113, '    public void destroy() {\n', 0),
(330, 114, '        removeMouseListener(this);\n', 0),
(331, 115, '        removeMouseMotionListener(this);\n', 0),
(332, 116, '    }\n', 0),
(333, 117, '\n', 0),
(334, 118, '    public String getAppletInfo() {\n', 0),
(335, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(336, 120, '    }\n', 0),
(337, 121, '}\n', 0),
(338, 0, 'import java.util.Scanner;\r\n', 0),
(339, 1, ' class Years{\r\n', 0),
(340, 2, '   public int getYear(){\r\n', 0),
(341, 3, '	int year;\r\n', 2),
(342, 4, '	String enteredYear;\r\n', 2),
(343, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(344, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(345, 7, '	enteredYear = sc.next();\r\n', 0),
(346, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(347, 9, '	return year;\r\n', 0),
(348, 10, '   }\r\n', 0),
(349, 11, ' }\r\n', 0),
(350, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(351, 13, ' class Months extends Years{\r\n', 0),
(352, 14, '   public int getMonth(){\r\n', 0),
(353, 15, '	int month;\r\n', 2),
(354, 16, '	String enteredMonthNumber;\r\n', 2),
(355, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(356, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(357, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(358, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(359, 21, '	return month;\r\n', 0),
(360, 22, '   }\r\n', 0),
(361, 23, ' }\r\n', 0),
(362, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(363, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(364, 26, ' static int numDays = 0;\r\n', 4),
(365, 27, ' public static void main(String[] args) {\r\n', 0),
(366, 28, '   int year;\r\n', 2),
(367, 29, '   Months m = new Months();\r\n', 0),
(368, 30, '   int month = m.getMonth();\r\n', 0),
(369, 31, '   \r\n', 0),
(370, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(371, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(372, 34, '   }\r\n', 0),
(373, 35, '   else {\r\n', 0),
(374, 36, '    switch (month) {\r\n', 0),
(375, 37, '      case 1:\r\n', 0),
(376, 38, '      case 3:\r\n', 0),
(377, 39, '      case 5:\r\n', 0),
(378, 40, '      case 7:\r\n', 0),
(379, 41, '      case 8:\r\n', 0),
(380, 42, '      case 10:\r\n', 0),
(381, 43, '      case 12:\r\n', 0),
(382, 44, '        numDays = 31;\r\n', 0),
(383, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(384, 46, '        break;\r\n', 0),
(385, 47, '      case 4:\r\n', 0),
(386, 48, '      case 6:\r\n', 0),
(387, 49, '      case 9:\r\n', 0),
(388, 50, '      case 11:\r\n', 0),
(389, 51, '       numDays = 30;\r\n', 0),
(390, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(391, 53, '       break;\r\n', 0),
(392, 54, '      case 2:\r\n', 0),
(393, 55, '       year = m.getYear();\r\n', 0),
(394, 56, '       if(year < 1) {\r\n', 0),
(395, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(396, 58, '       }\r\n', 0),
(397, 59, '       else{\r\n', 0),
(398, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(399, 61, '         numDays = 29;\r\n', 0),
(400, 62, '		 if(year > 2020){\r\n', 0),
(401, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(402, 64, '         }\r\n', 0),
(403, 65, '         else{\r\n', 0),
(404, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(405, 67, '         }\r\n', 0),
(406, 68, '        }//if at line 61\r\n', 0),
(407, 69, '        else{\r\n', 0),
(408, 70, '         numDays = 28;\r\n', 0),
(409, 71, '         if (year > 2020){\r\n', 0),
(410, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(411, 73, '         }\r\n', 0),
(412, 74, '         else{\r\n', 0),
(413, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(414, 76, '         }\r\n', 0),
(415, 77, '         break;  \r\n', 0),
(416, 78, '        }//else at line 70\r\n', 0),
(417, 79, '       }//else at line 60\r\n', 0),
(418, 80, '    }//switch at line 37\r\n', 0),
(419, 81, '   }//else at line 36\r\n', 0),
(420, 82, '  }//method\r\n', 0),
(421, 83, ' }//class', 0),
(422, 0, 'class Pattern{ \r\n', 0),
(423, 1, 'public static void main(String[] args) { \r\n', 0),
(424, 2, '	 int rows = 5;\r\n', 2),
(425, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(426, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(427, 5, '	 System.out.print(j + " "); \r\n', 0),
(428, 6, '	 } \r\n', 0),
(429, 7, '	 System.out.println(""); \r\n', 0),
(430, 8, ' 	} \r\n', 0),
(431, 9, ' 	} \r\n', 0),
(432, 10, '} ', 0),
(433, 0, 'import java.util.Scanner;\r\n', 0),
(434, 1, ' class Years{\r\n', 0),
(435, 2, '   public int getYear(){\r\n', 0),
(436, 3, '	int year;\r\n', 2),
(437, 4, '	String enteredYear;\r\n', 2),
(438, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(439, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(440, 7, '	enteredYear = sc.next();\r\n', 0),
(441, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(442, 9, '	return year;\r\n', 0),
(443, 10, '   }\r\n', 0),
(444, 11, ' }\r\n', 0),
(445, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(446, 13, ' class Months extends Years{\r\n', 0),
(447, 14, '   public int getMonth(){\r\n', 0),
(448, 15, '	int month;\r\n', 2),
(449, 16, '	String enteredMonthNumber;\r\n', 2),
(450, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(451, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(452, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(453, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(454, 21, '	return month;\r\n', 0),
(455, 22, '   }\r\n', 0),
(456, 23, ' }\r\n', 0),
(457, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(458, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(459, 26, ' static int numDays = 0;\r\n', 4),
(460, 27, ' public static void main(String[] args) {\r\n', 0),
(461, 28, '   int year;\r\n', 2),
(462, 29, '   Months m = new Months();\r\n', 0),
(463, 30, '   int month = m.getMonth();\r\n', 0),
(464, 31, '   \r\n', 0),
(465, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(466, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(467, 34, '   }\r\n', 0),
(468, 35, '   else {\r\n', 0),
(469, 36, '    switch (month) {\r\n', 0),
(470, 37, '      case 1:\r\n', 0),
(471, 38, '      case 3:\r\n', 0),
(472, 39, '      case 5:\r\n', 0),
(473, 40, '      case 7:\r\n', 0),
(474, 41, '      case 8:\r\n', 0),
(475, 42, '      case 10:\r\n', 0),
(476, 43, '      case 12:\r\n', 0),
(477, 44, '        numDays = 31;\r\n', 0),
(478, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(479, 46, '        break;\r\n', 0),
(480, 47, '      case 4:\r\n', 0),
(481, 48, '      case 6:\r\n', 0),
(482, 49, '      case 9:\r\n', 0),
(483, 50, '      case 11:\r\n', 0),
(484, 51, '       numDays = 30;\r\n', 0),
(485, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(486, 53, '       break;\r\n', 0),
(487, 54, '      case 2:\r\n', 0),
(488, 55, '       year = m.getYear();\r\n', 0),
(489, 56, '       if(year < 1) {\r\n', 0),
(490, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(491, 58, '       }\r\n', 0),
(492, 59, '       else{\r\n', 0),
(493, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(494, 61, '         numDays = 29;\r\n', 0),
(495, 62, '		 if(year > 2020){\r\n', 0),
(496, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(497, 64, '         }\r\n', 0),
(498, 65, '         else{\r\n', 0),
(499, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(500, 67, '         }\r\n', 0),
(501, 68, '        }//if at line 61\r\n', 0),
(502, 69, '        else{\r\n', 0),
(503, 70, '         numDays = 28;\r\n', 0),
(504, 71, '         if (year > 2020){\r\n', 0),
(505, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(506, 73, '         }\r\n', 0),
(507, 74, '         else{\r\n', 0),
(508, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(509, 76, '         }\r\n', 0),
(510, 77, '         break;  \r\n', 0),
(511, 78, '        }//else at line 70\r\n', 0),
(512, 79, '       }//else at line 60\r\n', 0),
(513, 80, '    }//switch at line 37\r\n', 0),
(514, 81, '   }//else at line 36\r\n', 0),
(515, 82, '  }//method\r\n', 0),
(516, 83, ' }//class', 0),
(517, 0, 'class HelloWorld { \r\n', 0),
(518, 1, '	public static void main(String args[]) \r\n', 0),
(519, 2, '	{ \r\n', 0),
(520, 3, '		System.out.println("Hello World"); \r\n', 0),
(521, 4, '	} \r\n', 0),
(522, 5, '} \r\n', 0),
(523, 0, 'import java.awt.event.*;\n', 0),
(524, 1, 'import java.awt.*;\n', 0),
(525, 2, '\n', 0),
(526, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(527, 4, '\n', 0),
(528, 5, '    private int mx, my;\n', 4),
(529, 6, '    private Dimension size;\n', 8),
(530, 7, '    private int onaroll;\n', 2),
(531, 8, '\n', 0),
(532, 9, '    public void init() {\n', 0),
(533, 10, '        onaroll = 0;\n', 0),
(534, 11, '        setSize(500, 500);\n', 0),
(535, 12, '        size = getSize();\n', 0),
(536, 13, '        addMouseListener(this);\n', 0),
(537, 14, '        addMouseMotionListener(this);\n', 0),
(538, 15, '        addComponentListener(this);\n', 0),
(539, 16, '    }\n', 0),
(540, 17, '\n', 0),
(541, 18, '    public void update(Graphics g) {\n', 0),
(542, 19, '        Dimension newSize = getSize();\n', 8),
(543, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(544, 21, '            g.setColor(getBackground());\n', 0),
(545, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(546, 23, '        } else {\n', 0),
(547, 24, '            size = newSize;\n', 0),
(548, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(549, 26, '        } // Calculate new position\n', 0),
(550, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(551, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(552, 29, '        paint(g);\n', 0),
(553, 30, '    }\n', 0),
(554, 31, '  \n', 0),
(555, 32, '    public void paint(Graphics g) {\n', 0),
(556, 33, '        g.setColor(Color.black);\n', 0),
(557, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(558, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(559, 36, '    }\n', 0),
(560, 37, '\n', 0),
(561, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(562, 39, '\n', 0),
(563, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(564, 41, '        e.consume();\n', 0),
(565, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(566, 43, '            repaint();\n', 0),
(567, 44, '        }\n', 0),
(568, 45, '    }\n', 0),
(569, 46, '\n', 0),
(570, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(571, 48, '        int x = e.getX();\n', 0),
(572, 49, '        int y = e.getY();\n', 0),
(573, 50, '        e.consume();\n', 0),
(574, 51, '        requestFocus();\n', 0),
(575, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(576, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(577, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(578, 55, '                case 0:\n', 0),
(579, 56, '                    play(getCodeBase(), \n', 0),
(580, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(581, 58, '                    break;\n', 0),
(582, 59, '                case 1:\n', 0),
(583, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(584, 61, '                    break;\n', 0),
(585, 62, '                case 2:\n', 0),
(586, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(587, 64, '                    break;\n', 0),
(588, 65, '                case 3:\n', 0),
(589, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(590, 67, '                    break;\n', 0),
(591, 68, '                }\n', 0),
(592, 69, '                onaroll++;\n', 0),
(593, 70, '                if (onaroll > 5) {\n', 0),
(594, 72, '                } else {\n', 0),
(595, 74, '                }\n', 0),
(596, 75, '            } else {   //first hit\n', 0),
(597, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(598, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(599, 78, '                onaroll = 1;\n', 0),
(600, 79, '            }\n', 0),
(601, 80, '        } else {   //miss\n', 0),
(602, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(603, 82, '			\n', 0),
(604, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(605, 84, '            onaroll = 0;\n', 0),
(606, 85, '        }\n', 0),
(607, 86, '        repaint();\n', 0),
(608, 87, '    }\n', 0),
(609, 88, '\n', 0),
(610, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(611, 90, '\n', 0),
(612, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(613, 92, '        repaint();\n', 0),
(614, 93, '    }\n', 0),
(615, 94, '\n', 0),
(616, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(617, 96, '        repaint();\n', 0),
(618, 97, '    }\n', 0),
(619, 98, '\n', 0),
(620, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(621, 100, '\n', 0),
(622, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(623, 102, ' \n', 0),
(624, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(625, 104, ' \n', 0),
(626, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(627, 106, '        repaint();\n', 0),
(628, 107, '    }\n', 0),
(629, 108, ' \n', 0),
(630, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(631, 110, '        repaint();\n', 0),
(632, 111, '    }\n', 0),
(633, 112, '  \n', 0),
(634, 113, '    public void destroy() {\n', 0),
(635, 114, '        removeMouseListener(this);\n', 0),
(636, 115, '        removeMouseMotionListener(this);\n', 0),
(637, 116, '    }\n', 0),
(638, 117, '\n', 0),
(639, 118, '    public String getAppletInfo() {\n', 0),
(640, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(641, 120, '    }\n', 0),
(642, 121, '}\n', 0),
(643, 0, 'import java.awt.event.*;\n', 0),
(644, 1, 'import java.awt.*;\n', 0),
(645, 2, '\n', 0),
(646, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(647, 4, '\n', 0),
(648, 5, '    private int mx, my;\n', 4),
(649, 6, '    private Dimension size;\n', 8),
(650, 7, '    private int onaroll;\n', 2),
(651, 8, '\n', 0),
(652, 9, '    public void init() {\n', 0),
(653, 10, '        onaroll = 0;\n', 0),
(654, 11, '        setSize(500, 500);\n', 0),
(655, 12, '        size = getSize();\n', 0),
(656, 13, '        addMouseListener(this);\n', 0),
(657, 14, '        addMouseMotionListener(this);\n', 0),
(658, 15, '        addComponentListener(this);\n', 0),
(659, 16, '    }\n', 0),
(660, 17, '\n', 0),
(661, 18, '    public void update(Graphics g) {\n', 0),
(662, 19, '        Dimension newSize = getSize();\n', 8),
(663, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(664, 21, '            g.setColor(getBackground());\n', 0),
(665, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(666, 23, '        } else {\n', 0),
(667, 24, '            size = newSize;\n', 0),
(668, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(669, 26, '        } // Calculate new position\n', 0),
(670, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(671, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(672, 29, '        paint(g);\n', 0),
(673, 30, '    }\n', 0),
(674, 31, '  \n', 0),
(675, 32, '    public void paint(Graphics g) {\n', 0),
(676, 33, '        g.setColor(Color.black);\n', 0),
(677, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(678, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(679, 36, '    }\n', 0),
(680, 37, '\n', 0),
(681, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(682, 39, '\n', 0),
(683, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(684, 41, '        e.consume();\n', 0),
(685, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(686, 43, '            repaint();\n', 0),
(687, 44, '        }\n', 0),
(688, 45, '    }\n', 0),
(689, 46, '\n', 0),
(690, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(691, 48, '        int x = e.getX();\n', 0),
(692, 49, '        int y = e.getY();\n', 0),
(693, 50, '        e.consume();\n', 0),
(694, 51, '        requestFocus();\n', 0),
(695, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(696, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(697, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(698, 55, '                case 0:\n', 0),
(699, 56, '                    play(getCodeBase(), \n', 0),
(700, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(701, 58, '                    break;\n', 0),
(702, 59, '                case 1:\n', 0),
(703, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(704, 61, '                    break;\n', 0),
(705, 62, '                case 2:\n', 0),
(706, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(707, 64, '                    break;\n', 0),
(708, 65, '                case 3:\n', 0),
(709, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(710, 67, '                    break;\n', 0),
(711, 68, '                }\n', 0),
(712, 69, '                onaroll++;\n', 0),
(713, 70, '                if (onaroll > 5) {\n', 0),
(714, 72, '                } else {\n', 0),
(715, 74, '                }\n', 0),
(716, 75, '            } else {   //first hit\n', 0),
(717, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(718, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(719, 78, '                onaroll = 1;\n', 0),
(720, 79, '            }\n', 0),
(721, 80, '        } else {   //miss\n', 0),
(722, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(723, 82, '			\n', 0),
(724, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(725, 84, '            onaroll = 0;\n', 0),
(726, 85, '        }\n', 0),
(727, 86, '        repaint();\n', 0),
(728, 87, '    }\n', 0),
(729, 88, '\n', 0),
(730, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(731, 90, '\n', 0),
(732, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(733, 92, '        repaint();\n', 0),
(734, 93, '    }\n', 0),
(735, 94, '\n', 0),
(736, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(737, 96, '        repaint();\n', 0),
(738, 97, '    }\n', 0),
(739, 98, '\n', 0),
(740, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(741, 100, '\n', 0),
(742, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(743, 102, ' \n', 0),
(744, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(745, 104, ' \n', 0),
(746, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(747, 106, '        repaint();\n', 0),
(748, 107, '    }\n', 0),
(749, 108, ' \n', 0),
(750, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(751, 110, '        repaint();\n', 0),
(752, 111, '    }\n', 0),
(753, 112, '  \n', 0),
(754, 113, '    public void destroy() {\n', 0),
(755, 114, '        removeMouseListener(this);\n', 0),
(756, 115, '        removeMouseMotionListener(this);\n', 0),
(757, 116, '    }\n', 0),
(758, 117, '\n', 0),
(759, 118, '    public String getAppletInfo() {\n', 0),
(760, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(761, 120, '    }\n', 0),
(762, 121, '}\n', 0),
(763, 0, 'import java.util.Scanner;\r\n', 0),
(764, 1, ' class Years{\r\n', 0),
(765, 2, '   public int getYear(){\r\n', 0),
(766, 3, '	int year;\r\n', 2),
(767, 4, '	String enteredYear;\r\n', 2),
(768, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(769, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(770, 7, '	enteredYear = sc.next();\r\n', 0),
(771, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(772, 9, '	return year;\r\n', 0),
(773, 10, '   }\r\n', 0),
(774, 11, ' }\r\n', 0),
(775, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(776, 13, ' class Months extends Years{\r\n', 0),
(777, 14, '   public int getMonth(){\r\n', 0),
(778, 15, '	int month;\r\n', 2),
(779, 16, '	String enteredMonthNumber;\r\n', 2),
(780, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(781, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(782, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(783, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(784, 21, '	return month;\r\n', 0),
(785, 22, '   }\r\n', 0),
(786, 23, ' }\r\n', 0),
(787, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(788, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(789, 26, ' static int numDays = 0;\r\n', 4),
(790, 27, ' public static void main(String[] args) {\r\n', 0),
(791, 28, '   int year;\r\n', 2),
(792, 29, '   Months m = new Months();\r\n', 0),
(793, 30, '   int month = m.getMonth();\r\n', 0),
(794, 31, '   \r\n', 0),
(795, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(796, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(797, 34, '   }\r\n', 0),
(798, 35, '   else {\r\n', 0),
(799, 36, '    switch (month) {\r\n', 0),
(800, 37, '      case 1:\r\n', 0),
(801, 38, '      case 3:\r\n', 0),
(802, 39, '      case 5:\r\n', 0),
(803, 40, '      case 7:\r\n', 0),
(804, 41, '      case 8:\r\n', 0),
(805, 42, '      case 10:\r\n', 0),
(806, 43, '      case 12:\r\n', 0),
(807, 44, '        numDays = 31;\r\n', 0),
(808, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(809, 46, '        break;\r\n', 0),
(810, 47, '      case 4:\r\n', 0),
(811, 48, '      case 6:\r\n', 0),
(812, 49, '      case 9:\r\n', 0),
(813, 50, '      case 11:\r\n', 0),
(814, 51, '       numDays = 30;\r\n', 0),
(815, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(816, 53, '       break;\r\n', 0),
(817, 54, '      case 2:\r\n', 0),
(818, 55, '       year = m.getYear();\r\n', 0),
(819, 56, '       if(year < 1) {\r\n', 0),
(820, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(821, 58, '       }\r\n', 0),
(822, 59, '       else{\r\n', 0),
(823, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(824, 61, '         numDays = 29;\r\n', 0),
(825, 62, '		 if(year > 2020){\r\n', 0),
(826, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(827, 64, '         }\r\n', 0),
(828, 65, '         else{\r\n', 0),
(829, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(830, 67, '         }\r\n', 0),
(831, 68, '        }//if at line 61\r\n', 0),
(832, 69, '        else{\r\n', 0),
(833, 70, '         numDays = 28;\r\n', 0),
(834, 71, '         if (year > 2020){\r\n', 0),
(835, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(836, 73, '         }\r\n', 0),
(837, 74, '         else{\r\n', 0),
(838, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(839, 76, '         }\r\n', 0),
(840, 77, '         break;  \r\n', 0),
(841, 78, '        }//else at line 70\r\n', 0),
(842, 79, '       }//else at line 60\r\n', 0),
(843, 80, '    }//switch at line 37\r\n', 0),
(844, 81, '   }//else at line 36\r\n', 0),
(845, 82, '  }//method\r\n', 0),
(846, 83, ' }//class', 0),
(847, 0, 'public class RecursionExample2 {  \r\n', 0),
(848, 1, 'static int count=0;  \r\n', 4),
(849, 2, 'public int p(){  \r\n', 0),
(850, 3, 'count++;  \r\n', 0),
(851, 4, 'if(count<=5){  \r\n', 0),
(852, 5, 'System.out.println("hello "+count);  \r\n', 0),
(853, 6, 'public int p();  \r\n', 0),
(854, 7, '}  \r\n', 0),
(855, 8, '}  \r\n', 0),
(856, 9, 'public static void main(String[] args) {  \r\n', 0),
(857, 10, 'p();  \r\n', 0),
(858, 11, '}  \r\n', 0),
(859, 12, '}  ', 0),
(860, 0, 'import java.awt.event.*;\n', 0),
(861, 1, 'import java.awt.*;\n', 0),
(862, 2, '\n', 0),
(863, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(864, 4, '\n', 0),
(865, 5, '    private int mx, my;\n', 4),
(866, 6, '    private Dimension size;\n', 8),
(867, 7, '    private int onaroll;\n', 2),
(868, 8, '\n', 0),
(869, 9, '    public void init() {\n', 0),
(870, 10, '        onaroll = 0;\n', 0),
(871, 11, '        setSize(500, 500);\n', 0),
(872, 12, '        size = getSize();\n', 0),
(873, 13, '        addMouseListener(this);\n', 0),
(874, 14, '        addMouseMotionListener(this);\n', 0),
(875, 15, '        addComponentListener(this);\n', 0),
(876, 16, '    }\n', 0),
(877, 17, '\n', 0),
(878, 18, '    public void update(Graphics g) {\n', 0),
(879, 19, '        Dimension newSize = getSize();\n', 8),
(880, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(881, 21, '            g.setColor(getBackground());\n', 0),
(882, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(883, 23, '        } else {\n', 0),
(884, 24, '            size = newSize;\n', 0),
(885, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(886, 26, '        } // Calculate new position\n', 0),
(887, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(888, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(889, 29, '        paint(g);\n', 0),
(890, 30, '    }\n', 0),
(891, 31, '  \n', 0),
(892, 32, '    public void paint(Graphics g) {\n', 0),
(893, 33, '        g.setColor(Color.black);\n', 0),
(894, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(895, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(896, 36, '    }\n', 0),
(897, 37, '\n', 0),
(898, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(899, 39, '\n', 0),
(900, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(901, 41, '        e.consume();\n', 0),
(902, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(903, 43, '            repaint();\n', 0),
(904, 44, '        }\n', 0),
(905, 45, '    }\n', 0),
(906, 46, '\n', 0),
(907, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(908, 48, '        int x = e.getX();\n', 0),
(909, 49, '        int y = e.getY();\n', 0),
(910, 50, '        e.consume();\n', 0),
(911, 51, '        requestFocus();\n', 0),
(912, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(913, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(914, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(915, 55, '                case 0:\n', 0),
(916, 56, '                    play(getCodeBase(), \n', 0),
(917, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(918, 58, '                    break;\n', 0),
(919, 59, '                case 1:\n', 0),
(920, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(921, 61, '                    break;\n', 0),
(922, 62, '                case 2:\n', 0),
(923, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(924, 64, '                    break;\n', 0),
(925, 65, '                case 3:\n', 0),
(926, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(927, 67, '                    break;\n', 0),
(928, 68, '                }\n', 0),
(929, 69, '                onaroll++;\n', 0),
(930, 70, '                if (onaroll > 5) {\n', 0),
(931, 72, '                } else {\n', 0),
(932, 74, '                }\n', 0),
(933, 75, '            } else {   //first hit\n', 0),
(934, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(935, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(936, 78, '                onaroll = 1;\n', 0),
(937, 79, '            }\n', 0),
(938, 80, '        } else {   //miss\n', 0),
(939, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(940, 82, '			\n', 0),
(941, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(942, 84, '            onaroll = 0;\n', 0),
(943, 85, '        }\n', 0),
(944, 86, '        repaint();\n', 0),
(945, 87, '    }\n', 0),
(946, 88, '\n', 0),
(947, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(948, 90, '\n', 0),
(949, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(950, 92, '        repaint();\n', 0),
(951, 93, '    }\n', 0),
(952, 94, '\n', 0),
(953, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(954, 96, '        repaint();\n', 0),
(955, 97, '    }\n', 0),
(956, 98, '\n', 0),
(957, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(958, 100, '\n', 0),
(959, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(960, 102, ' \n', 0),
(961, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(962, 104, ' \n', 0),
(963, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(964, 106, '        repaint();\n', 0),
(965, 107, '    }\n', 0),
(966, 108, ' \n', 0),
(967, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(968, 110, '        repaint();\n', 0),
(969, 111, '    }\n', 0),
(970, 112, '  \n', 0),
(971, 113, '    public void destroy() {\n', 0),
(972, 114, '        removeMouseListener(this);\n', 0),
(973, 115, '        removeMouseMotionListener(this);\n', 0),
(974, 116, '    }\n', 0),
(975, 117, '\n', 0),
(976, 118, '    public String getAppletInfo() {\n', 0),
(977, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(978, 120, '    }\n', 0),
(979, 121, '}\n', 0),
(980, 0, 'import java.awt.event.*;\n', 0),
(981, 1, 'import java.awt.*;\n', 0),
(982, 2, '\n', 0),
(983, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(984, 4, '\n', 0),
(985, 5, '    private int mx, my;\n', 4),
(986, 6, '    private Dimension size;\n', 8),
(987, 7, '    private int onaroll;\n', 2),
(988, 8, '\n', 0),
(989, 9, '    public void init() {\n', 0),
(990, 10, '        onaroll = 0;\n', 0),
(991, 11, '        setSize(500, 500);\n', 0),
(992, 12, '        size = getSize();\n', 0),
(993, 13, '        addMouseListener(this);\n', 0),
(994, 14, '        addMouseMotionListener(this);\n', 0),
(995, 15, '        addComponentListener(this);\n', 0),
(996, 16, '    }\n', 0),
(997, 17, '\n', 0),
(998, 18, '    public void update(Graphics g) {\n', 0),
(999, 19, '        Dimension newSize = getSize();\n', 8),
(1000, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(1001, 21, '            g.setColor(getBackground());\n', 0),
(1002, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(1003, 23, '        } else {\n', 0),
(1004, 24, '            size = newSize;\n', 0),
(1005, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(1006, 26, '        } // Calculate new position\n', 0),
(1007, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(1008, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(1009, 29, '        paint(g);\n', 0),
(1010, 30, '    }\n', 0),
(1011, 31, '  \n', 0),
(1012, 32, '    public void paint(Graphics g) {\n', 0),
(1013, 33, '        g.setColor(Color.black);\n', 0),
(1014, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(1015, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(1016, 36, '    }\n', 0),
(1017, 37, '\n', 0),
(1018, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(1019, 39, '\n', 0),
(1020, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(1021, 41, '        e.consume();\n', 0),
(1022, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(1023, 43, '            repaint();\n', 0),
(1024, 44, '        }\n', 0),
(1025, 45, '    }\n', 0),
(1026, 46, '\n', 0),
(1027, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(1028, 48, '        int x = e.getX();\n', 0),
(1029, 49, '        int y = e.getY();\n', 0),
(1030, 50, '        e.consume();\n', 0),
(1031, 51, '        requestFocus();\n', 0),
(1032, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(1033, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(1034, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(1035, 55, '                case 0:\n', 0),
(1036, 56, '                    play(getCodeBase(), \n', 0),
(1037, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(1038, 58, '                    break;\n', 0),
(1039, 59, '                case 1:\n', 0),
(1040, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(1041, 61, '                    break;\n', 0),
(1042, 62, '                case 2:\n', 0),
(1043, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(1044, 64, '                    break;\n', 0),
(1045, 65, '                case 3:\n', 0),
(1046, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(1047, 67, '                    break;\n', 0),
(1048, 68, '                }\n', 0),
(1049, 69, '                onaroll++;\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(1050, 70, '                if (onaroll > 5) {\n', 0),
(1051, 72, '                } else {\n', 0),
(1052, 74, '                }\n', 0),
(1053, 75, '            } else {   //first hit\n', 0),
(1054, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(1055, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(1056, 78, '                onaroll = 1;\n', 0),
(1057, 79, '            }\n', 0),
(1058, 80, '        } else {   //miss\n', 0),
(1059, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(1060, 82, '			\n', 0),
(1061, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(1062, 84, '            onaroll = 0;\n', 0),
(1063, 85, '        }\n', 0),
(1064, 86, '        repaint();\n', 0),
(1065, 87, '    }\n', 0),
(1066, 88, '\n', 0),
(1067, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(1068, 90, '\n', 0),
(1069, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(1070, 92, '        repaint();\n', 0),
(1071, 93, '    }\n', 0),
(1072, 94, '\n', 0),
(1073, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(1074, 96, '        repaint();\n', 0),
(1075, 97, '    }\n', 0),
(1076, 98, '\n', 0),
(1077, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(1078, 100, '\n', 0),
(1079, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(1080, 102, ' \n', 0),
(1081, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(1082, 104, ' \n', 0),
(1083, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(1084, 106, '        repaint();\n', 0),
(1085, 107, '    }\n', 0),
(1086, 108, ' \n', 0),
(1087, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(1088, 110, '        repaint();\n', 0),
(1089, 111, '    }\n', 0),
(1090, 112, '  \n', 0),
(1091, 113, '    public void destroy() {\n', 0),
(1092, 114, '        removeMouseListener(this);\n', 0),
(1093, 115, '        removeMouseMotionListener(this);\n', 0),
(1094, 116, '    }\n', 0),
(1095, 117, '\n', 0),
(1096, 118, '    public String getAppletInfo() {\n', 0),
(1097, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(1098, 120, '    }\n', 0),
(1099, 121, '}\n', 0),
(1100, 0, 'import java.util.Scanner;\r\n', 0),
(1101, 1, ' class Years{\r\n', 0),
(1102, 2, '   public int getYear(){\r\n', 0),
(1103, 3, '	int year;\r\n', 2),
(1104, 4, '	String enteredYear;\r\n', 2),
(1105, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(1106, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(1107, 7, '	enteredYear = sc.next();\r\n', 0),
(1108, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(1109, 9, '	return year;\r\n', 0),
(1110, 10, '   }\r\n', 0),
(1111, 11, ' }\r\n', 0),
(1112, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1113, 13, ' class Months extends Years{\r\n', 0),
(1114, 14, '   public int getMonth(){\r\n', 0),
(1115, 15, '	int month;\r\n', 2),
(1116, 16, '	String enteredMonthNumber;\r\n', 2),
(1117, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(1118, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(1119, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(1120, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(1121, 21, '	return month;\r\n', 0),
(1122, 22, '   }\r\n', 0),
(1123, 23, ' }\r\n', 0),
(1124, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1125, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(1126, 26, ' static int numDays = 0;\r\n', 4),
(1127, 27, ' public static void main(String[] args) {\r\n', 0),
(1128, 28, '   int year;\r\n', 2),
(1129, 29, '   Months m = new Months();\r\n', 0),
(1130, 30, '   int month = m.getMonth();\r\n', 0),
(1131, 31, '   \r\n', 0),
(1132, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(1133, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(1134, 34, '   }\r\n', 0),
(1135, 35, '   else {\r\n', 0),
(1136, 36, '    switch (month) {\r\n', 0),
(1137, 37, '      case 1:\r\n', 0),
(1138, 38, '      case 3:\r\n', 0),
(1139, 39, '      case 5:\r\n', 0),
(1140, 40, '      case 7:\r\n', 0),
(1141, 41, '      case 8:\r\n', 0),
(1142, 42, '      case 10:\r\n', 0),
(1143, 43, '      case 12:\r\n', 0),
(1144, 44, '        numDays = 31;\r\n', 0),
(1145, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(1146, 46, '        break;\r\n', 0),
(1147, 47, '      case 4:\r\n', 0),
(1148, 48, '      case 6:\r\n', 0),
(1149, 49, '      case 9:\r\n', 0),
(1150, 50, '      case 11:\r\n', 0),
(1151, 51, '       numDays = 30;\r\n', 0),
(1152, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(1153, 53, '       break;\r\n', 0),
(1154, 54, '      case 2:\r\n', 0),
(1155, 55, '       year = m.getYear();\r\n', 0),
(1156, 56, '       if(year < 1) {\r\n', 0),
(1157, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(1158, 58, '       }\r\n', 0),
(1159, 59, '       else{\r\n', 0),
(1160, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(1161, 61, '         numDays = 29;\r\n', 0),
(1162, 62, '		 if(year > 2020){\r\n', 0),
(1163, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(1164, 64, '         }\r\n', 0),
(1165, 65, '         else{\r\n', 0),
(1166, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(1167, 67, '         }\r\n', 0),
(1168, 68, '        }//if at line 61\r\n', 0),
(1169, 69, '        else{\r\n', 0),
(1170, 70, '         numDays = 28;\r\n', 0),
(1171, 71, '         if (year > 2020){\r\n', 0),
(1172, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(1173, 73, '         }\r\n', 0),
(1174, 74, '         else{\r\n', 0),
(1175, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(1176, 76, '         }\r\n', 0),
(1177, 77, '         break;  \r\n', 0),
(1178, 78, '        }//else at line 70\r\n', 0),
(1179, 79, '       }//else at line 60\r\n', 0),
(1180, 80, '    }//switch at line 37\r\n', 0),
(1181, 81, '   }//else at line 36\r\n', 0),
(1182, 82, '  }//method\r\n', 0),
(1183, 83, ' }//class', 0),
(1184, 0, 'class Pattern{ \r\n', 0),
(1185, 1, 'public static void main(String[] args) { \r\n', 0),
(1186, 2, '	 int rows = 5;\r\n', 2),
(1187, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(1188, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(1189, 5, '	 System.out.print(j + " "); \r\n', 0),
(1190, 6, '	 } \r\n', 0),
(1191, 7, '	 System.out.println(""); \r\n', 0),
(1192, 8, ' 	} \r\n', 0),
(1193, 9, ' 	} \r\n', 0),
(1194, 10, '} ', 0),
(1195, 0, 'import java.util.Scanner;\r\n', 0),
(1196, 1, ' class Years{\r\n', 0),
(1197, 2, '   public int getYear(){\r\n', 0),
(1198, 3, '	int year;\r\n', 2),
(1199, 4, '	String enteredYear;\r\n', 2),
(1200, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(1201, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(1202, 7, '	enteredYear = sc.next();\r\n', 0),
(1203, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(1204, 9, '	return year;\r\n', 0),
(1205, 10, '   }\r\n', 0),
(1206, 11, ' }\r\n', 0),
(1207, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1208, 13, ' class Months extends Years{\r\n', 0),
(1209, 14, '   public int getMonth(){\r\n', 0),
(1210, 15, '	int month;\r\n', 2),
(1211, 16, '	String enteredMonthNumber;\r\n', 2),
(1212, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(1213, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(1214, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(1215, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(1216, 21, '	return month;\r\n', 0),
(1217, 22, '   }\r\n', 0),
(1218, 23, ' }\r\n', 0),
(1219, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1220, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(1221, 26, ' static int numDays = 0;\r\n', 4),
(1222, 27, ' public static void main(String[] args) {\r\n', 0),
(1223, 28, '   int year;\r\n', 2),
(1224, 29, '   Months m = new Months();\r\n', 0),
(1225, 30, '   int month = m.getMonth();\r\n', 0),
(1226, 31, '   \r\n', 0),
(1227, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(1228, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(1229, 34, '   }\r\n', 0),
(1230, 35, '   else {\r\n', 0),
(1231, 36, '    switch (month) {\r\n', 0),
(1232, 37, '      case 1:\r\n', 0),
(1233, 38, '      case 3:\r\n', 0),
(1234, 39, '      case 5:\r\n', 0),
(1235, 40, '      case 7:\r\n', 0),
(1236, 41, '      case 8:\r\n', 0),
(1237, 42, '      case 10:\r\n', 0),
(1238, 43, '      case 12:\r\n', 0),
(1239, 44, '        numDays = 31;\r\n', 0),
(1240, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(1241, 46, '        break;\r\n', 0),
(1242, 47, '      case 4:\r\n', 0),
(1243, 48, '      case 6:\r\n', 0),
(1244, 49, '      case 9:\r\n', 0),
(1245, 50, '      case 11:\r\n', 0),
(1246, 51, '       numDays = 30;\r\n', 0),
(1247, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(1248, 53, '       break;\r\n', 0),
(1249, 54, '      case 2:\r\n', 0),
(1250, 55, '       year = m.getYear();\r\n', 0),
(1251, 56, '       if(year < 1) {\r\n', 0),
(1252, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(1253, 58, '       }\r\n', 0),
(1254, 59, '       else{\r\n', 0),
(1255, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(1256, 61, '         numDays = 29;\r\n', 0),
(1257, 62, '		 if(year > 2020){\r\n', 0),
(1258, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(1259, 64, '         }\r\n', 0),
(1260, 65, '         else{\r\n', 0),
(1261, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(1262, 67, '         }\r\n', 0),
(1263, 68, '        }//if at line 61\r\n', 0),
(1264, 69, '        else{\r\n', 0),
(1265, 70, '         numDays = 28;\r\n', 0),
(1266, 71, '         if (year > 2020){\r\n', 0),
(1267, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(1268, 73, '         }\r\n', 0),
(1269, 74, '         else{\r\n', 0),
(1270, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(1271, 76, '         }\r\n', 0),
(1272, 77, '         break;  \r\n', 0),
(1273, 78, '        }//else at line 70\r\n', 0),
(1274, 79, '       }//else at line 60\r\n', 0),
(1275, 80, '    }//switch at line 37\r\n', 0),
(1276, 81, '   }//else at line 36\r\n', 0),
(1277, 82, '  }//method\r\n', 0),
(1278, 83, ' }//class', 0),
(1279, 0, 'class HelloWorld { \r\n', 0),
(1280, 1, '	public static void main(String args[]) \r\n', 0),
(1281, 2, '	{ \r\n', 0),
(1282, 3, '		System.out.println("Hello World"); \r\n', 0),
(1283, 4, '	} \r\n', 0),
(1284, 5, '} \r\n', 0),
(1285, 0, 'import java.awt.event.*;\n', 0),
(1286, 1, 'import java.awt.*;\n', 0),
(1287, 2, '\n', 0),
(1288, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(1289, 4, '\n', 0),
(1290, 5, '    private int mx, my;\n', 4),
(1291, 6, '    private Dimension size;\n', 8),
(1292, 7, '    private int onaroll;\n', 2),
(1293, 8, '\n', 0),
(1294, 9, '    public void init() {\n', 0),
(1295, 10, '        onaroll = 0;\n', 0),
(1296, 11, '        setSize(500, 500);\n', 0),
(1297, 12, '        size = getSize();\n', 0),
(1298, 13, '        addMouseListener(this);\n', 0),
(1299, 14, '        addMouseMotionListener(this);\n', 0),
(1300, 15, '        addComponentListener(this);\n', 0),
(1301, 16, '    }\n', 0),
(1302, 17, '\n', 0),
(1303, 18, '    public void update(Graphics g) {\n', 0),
(1304, 19, '        Dimension newSize = getSize();\n', 8),
(1305, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(1306, 21, '            g.setColor(getBackground());\n', 0),
(1307, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(1308, 23, '        } else {\n', 0),
(1309, 24, '            size = newSize;\n', 0),
(1310, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(1311, 26, '        } // Calculate new position\n', 0),
(1312, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(1313, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(1314, 29, '        paint(g);\n', 0),
(1315, 30, '    }\n', 0),
(1316, 31, '  \n', 0),
(1317, 32, '    public void paint(Graphics g) {\n', 0),
(1318, 33, '        g.setColor(Color.black);\n', 0),
(1319, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(1320, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(1321, 36, '    }\n', 0),
(1322, 37, '\n', 0),
(1323, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(1324, 39, '\n', 0),
(1325, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(1326, 41, '        e.consume();\n', 0),
(1327, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(1328, 43, '            repaint();\n', 0),
(1329, 44, '        }\n', 0),
(1330, 45, '    }\n', 0),
(1331, 46, '\n', 0),
(1332, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(1333, 48, '        int x = e.getX();\n', 0),
(1334, 49, '        int y = e.getY();\n', 0),
(1335, 50, '        e.consume();\n', 0),
(1336, 51, '        requestFocus();\n', 0),
(1337, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(1338, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(1339, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(1340, 55, '                case 0:\n', 0),
(1341, 56, '                    play(getCodeBase(), \n', 0),
(1342, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(1343, 58, '                    break;\n', 0),
(1344, 59, '                case 1:\n', 0),
(1345, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(1346, 61, '                    break;\n', 0),
(1347, 62, '                case 2:\n', 0),
(1348, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(1349, 64, '                    break;\n', 0),
(1350, 65, '                case 3:\n', 0),
(1351, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(1352, 67, '                    break;\n', 0),
(1353, 68, '                }\n', 0),
(1354, 69, '                onaroll++;\n', 0),
(1355, 70, '                if (onaroll > 5) {\n', 0),
(1356, 72, '                } else {\n', 0),
(1357, 74, '                }\n', 0),
(1358, 75, '            } else {   //first hit\n', 0),
(1359, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(1360, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(1361, 78, '                onaroll = 1;\n', 0),
(1362, 79, '            }\n', 0),
(1363, 80, '        } else {   //miss\n', 0),
(1364, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(1365, 82, '			\n', 0),
(1366, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(1367, 84, '            onaroll = 0;\n', 0),
(1368, 85, '        }\n', 0),
(1369, 86, '        repaint();\n', 0),
(1370, 87, '    }\n', 0),
(1371, 88, '\n', 0),
(1372, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(1373, 90, '\n', 0),
(1374, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(1375, 92, '        repaint();\n', 0),
(1376, 93, '    }\n', 0),
(1377, 94, '\n', 0),
(1378, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(1379, 96, '        repaint();\n', 0),
(1380, 97, '    }\n', 0),
(1381, 98, '\n', 0),
(1382, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(1383, 100, '\n', 0),
(1384, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(1385, 102, ' \n', 0),
(1386, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(1387, 104, ' \n', 0),
(1388, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(1389, 106, '        repaint();\n', 0),
(1390, 107, '    }\n', 0),
(1391, 108, ' \n', 0),
(1392, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(1393, 110, '        repaint();\n', 0),
(1394, 111, '    }\n', 0),
(1395, 112, '  \n', 0),
(1396, 113, '    public void destroy() {\n', 0),
(1397, 114, '        removeMouseListener(this);\n', 0),
(1398, 115, '        removeMouseMotionListener(this);\n', 0),
(1399, 116, '    }\n', 0),
(1400, 117, '\n', 0),
(1401, 118, '    public String getAppletInfo() {\n', 0),
(1402, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(1403, 120, '    }\n', 0),
(1404, 121, '}\n', 0),
(1405, 0, 'import java.awt.event.*;\n', 0),
(1406, 1, 'import java.awt.*;\n', 0),
(1407, 2, '\n', 0),
(1408, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(1409, 4, '\n', 0),
(1410, 5, '    private int mx, my;\n', 4),
(1411, 6, '    private Dimension size;\n', 8),
(1412, 7, '    private int onaroll;\n', 2),
(1413, 8, '\n', 0),
(1414, 9, '    public void init() {\n', 0),
(1415, 10, '        onaroll = 0;\n', 0),
(1416, 11, '        setSize(500, 500);\n', 0),
(1417, 12, '        size = getSize();\n', 0),
(1418, 13, '        addMouseListener(this);\n', 0),
(1419, 14, '        addMouseMotionListener(this);\n', 0),
(1420, 15, '        addComponentListener(this);\n', 0),
(1421, 16, '    }\n', 0),
(1422, 17, '\n', 0),
(1423, 18, '    public void update(Graphics g) {\n', 0),
(1424, 19, '        Dimension newSize = getSize();\n', 8),
(1425, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(1426, 21, '            g.setColor(getBackground());\n', 0),
(1427, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(1428, 23, '        } else {\n', 0),
(1429, 24, '            size = newSize;\n', 0),
(1430, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(1431, 26, '        } // Calculate new position\n', 0),
(1432, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(1433, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(1434, 29, '        paint(g);\n', 0),
(1435, 30, '    }\n', 0),
(1436, 31, '  \n', 0),
(1437, 32, '    public void paint(Graphics g) {\n', 0),
(1438, 33, '        g.setColor(Color.black);\n', 0),
(1439, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(1440, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(1441, 36, '    }\n', 0),
(1442, 37, '\n', 0),
(1443, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(1444, 39, '\n', 0),
(1445, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(1446, 41, '        e.consume();\n', 0),
(1447, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(1448, 43, '            repaint();\n', 0),
(1449, 44, '        }\n', 0),
(1450, 45, '    }\n', 0),
(1451, 46, '\n', 0),
(1452, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(1453, 0, 'import java.util.Scanner;\r\n', 0),
(1454, 1, ' class Years{\r\n', 0),
(1455, 2, '   public int getYear(){\r\n', 0),
(1456, 3, '	int year;\r\n', 2),
(1457, 4, '	String enteredYear;\r\n', 2),
(1458, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(1459, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(1460, 7, '	enteredYear = sc.next();\r\n', 0),
(1461, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(1462, 9, '	return year;\r\n', 0),
(1463, 10, '   }\r\n', 0),
(1464, 11, ' }\r\n', 0),
(1465, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1466, 13, ' class Months extends Years{\r\n', 0),
(1467, 14, '   public int getMonth(){\r\n', 0),
(1468, 15, '	int month;\r\n', 2),
(1469, 16, '	String enteredMonthNumber;\r\n', 2),
(1470, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(1471, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(1472, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(1473, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(1474, 21, '	return month;\r\n', 0),
(1475, 22, '   }\r\n', 0),
(1476, 23, ' }\r\n', 0),
(1477, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1478, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(1479, 26, ' static int numDays = 0;\r\n', 4),
(1480, 27, ' public static void main(String[] args) {\r\n', 0),
(1481, 28, '   int year;\r\n', 2),
(1482, 29, '   Months m = new Months();\r\n', 0),
(1483, 30, '   int month = m.getMonth();\r\n', 0),
(1484, 31, '   \r\n', 0),
(1485, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(1486, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(1487, 34, '   }\r\n', 0),
(1488, 35, '   else {\r\n', 0),
(1489, 36, '    switch (month) {\r\n', 0),
(1490, 37, '      case 1:\r\n', 0),
(1491, 38, '      case 3:\r\n', 0),
(1492, 39, '      case 5:\r\n', 0),
(1493, 40, '      case 7:\r\n', 0),
(1494, 41, '      case 8:\r\n', 0),
(1495, 42, '      case 10:\r\n', 0),
(1496, 43, '      case 12:\r\n', 0),
(1497, 44, '        numDays = 31;\r\n', 0),
(1498, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(1499, 46, '        break;\r\n', 0),
(1500, 47, '      case 4:\r\n', 0),
(1501, 48, '      case 6:\r\n', 0),
(1502, 49, '      case 9:\r\n', 0),
(1503, 50, '      case 11:\r\n', 0),
(1504, 51, '       numDays = 30;\r\n', 0),
(1505, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(1506, 53, '       break;\r\n', 0),
(1507, 54, '      case 2:\r\n', 0),
(1508, 55, '       year = m.getYear();\r\n', 0),
(1509, 56, '       if(year < 1) {\r\n', 0),
(1510, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(1511, 58, '       }\r\n', 0),
(1512, 59, '       else{\r\n', 0),
(1513, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(1514, 61, '         numDays = 29;\r\n', 0),
(1515, 62, '		 if(year > 2020){\r\n', 0),
(1516, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(1517, 64, '         }\r\n', 0),
(1518, 65, '         else{\r\n', 0),
(1519, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(1520, 67, '         }\r\n', 0),
(1521, 68, '        }//if at line 61\r\n', 0),
(1522, 69, '        else{\r\n', 0),
(1523, 70, '         numDays = 28;\r\n', 0),
(1524, 71, '         if (year > 2020){\r\n', 0),
(1525, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(1526, 73, '         }\r\n', 0),
(1527, 74, '         else{\r\n', 0),
(1528, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(1529, 76, '         }\r\n', 0),
(1530, 77, '         break;  \r\n', 0),
(1531, 78, '        }//else at line 70\r\n', 0),
(1532, 79, '       }//else at line 60\r\n', 0),
(1533, 80, '    }//switch at line 37\r\n', 0),
(1534, 81, '   }//else at line 36\r\n', 0),
(1535, 82, '  }//method\r\n', 0),
(1536, 83, ' }//class', 0),
(1537, 0, 'public class RecursionExample2 {  \r\n', 0),
(1538, 1, 'static int count=0;  \r\n', 4),
(1539, 2, 'public int p(){  \r\n', 0),
(1540, 3, 'count++;  \r\n', 0),
(1541, 4, 'if(count<=5){  \r\n', 0),
(1542, 5, 'System.out.println("hello "+count);  \r\n', 0),
(1543, 6, 'public int p();  \r\n', 0),
(1544, 7, '}  \r\n', 0),
(1545, 8, '}  \r\n', 0),
(1546, 9, 'public static void main(String[] args) {  \r\n', 0),
(1547, 10, 'p();  \r\n', 0),
(1548, 11, '}  \r\n', 0),
(1549, 12, '}  ', 0),
(1550, 0, 'import java.awt.event.*;\n', 0),
(1551, 1, 'import java.awt.*;\n', 0),
(1552, 2, '\n', 0),
(1553, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(1554, 4, '\n', 0),
(1555, 5, '    private int mx, my;\n', 4),
(1556, 6, '    private Dimension size;\n', 8),
(1557, 7, '    private int onaroll;\n', 2),
(1558, 8, '\n', 0),
(1559, 9, '    public void init() {\n', 0),
(1560, 10, '        onaroll = 0;\n', 0),
(1561, 11, '        setSize(500, 500);\n', 0),
(1562, 12, '        size = getSize();\n', 0),
(1563, 13, '        addMouseListener(this);\n', 0),
(1564, 14, '        addMouseMotionListener(this);\n', 0),
(1565, 15, '        addComponentListener(this);\n', 0),
(1566, 16, '    }\n', 0),
(1567, 17, '\n', 0),
(1568, 18, '    public void update(Graphics g) {\n', 0),
(1569, 19, '        Dimension newSize = getSize();\n', 8),
(1570, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(1571, 21, '            g.setColor(getBackground());\n', 0),
(1572, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(1573, 23, '        } else {\n', 0),
(1574, 24, '            size = newSize;\n', 0),
(1575, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(1576, 26, '        } // Calculate new position\n', 0),
(1577, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(1578, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(1579, 29, '        paint(g);\n', 0),
(1580, 30, '    }\n', 0),
(1581, 31, '  \n', 0),
(1582, 32, '    public void paint(Graphics g) {\n', 0),
(1583, 33, '        g.setColor(Color.black);\n', 0),
(1584, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(1585, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(1586, 36, '    }\n', 0),
(1587, 37, '\n', 0),
(1588, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(1589, 39, '\n', 0),
(1590, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(1591, 41, '        e.consume();\n', 0),
(1592, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(1593, 43, '            repaint();\n', 0),
(1594, 44, '        }\n', 0),
(1595, 45, '    }\n', 0),
(1596, 46, '\n', 0),
(1597, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(1598, 48, '        int x = e.getX();\n', 0),
(1599, 49, '        int y = e.getY();\n', 0),
(1600, 50, '        e.consume();\n', 0),
(1601, 51, '        requestFocus();\n', 0),
(1602, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(1603, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(1604, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(1605, 55, '                case 0:\n', 0),
(1606, 56, '                    play(getCodeBase(), \n', 0),
(1607, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(1608, 58, '                    break;\n', 0),
(1609, 59, '                case 1:\n', 0),
(1610, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(1611, 61, '                    break;\n', 0),
(1612, 62, '                case 2:\n', 0),
(1613, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(1614, 64, '                    break;\n', 0),
(1615, 65, '                case 3:\n', 0),
(1616, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(1617, 67, '                    break;\n', 0),
(1618, 68, '                }\n', 0),
(1619, 69, '                onaroll++;\n', 0),
(1620, 70, '                if (onaroll > 5) {\n', 0),
(1621, 72, '                } else {\n', 0),
(1622, 74, '                }\n', 0),
(1623, 75, '            } else {   //first hit\n', 0),
(1624, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(1625, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(1626, 78, '                onaroll = 1;\n', 0),
(1627, 79, '            }\n', 0),
(1628, 80, '        } else {   //miss\n', 0),
(1629, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(1630, 82, '			\n', 0),
(1631, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(1632, 84, '            onaroll = 0;\n', 0),
(1633, 85, '        }\n', 0),
(1634, 86, '        repaint();\n', 0),
(1635, 87, '    }\n', 0),
(1636, 88, '\n', 0),
(1637, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(1638, 90, '\n', 0),
(1639, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(1640, 92, '        repaint();\n', 0),
(1641, 93, '    }\n', 0),
(1642, 94, '\n', 0),
(1643, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(1644, 96, '        repaint();\n', 0),
(1645, 97, '    }\n', 0),
(1646, 98, '\n', 0),
(1647, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(1648, 100, '\n', 0),
(1649, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(1650, 102, ' \n', 0),
(1651, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(1652, 104, ' \n', 0),
(1653, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(1654, 106, '        repaint();\n', 0),
(1655, 107, '    }\n', 0),
(1656, 108, ' \n', 0),
(1657, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(1658, 110, '        repaint();\n', 0),
(1659, 111, '    }\n', 0),
(1660, 112, '  \n', 0),
(1661, 113, '    public void destroy() {\n', 0),
(1662, 114, '        removeMouseListener(this);\n', 0),
(1663, 115, '        removeMouseMotionListener(this);\n', 0),
(1664, 116, '    }\n', 0),
(1665, 117, '\n', 0),
(1666, 118, '    public String getAppletInfo() {\n', 0),
(1667, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(1668, 120, '    }\n', 0),
(1669, 121, '}\n', 0),
(1670, 0, 'import java.awt.event.*;\n', 0),
(1671, 1, 'import java.awt.*;\n', 0),
(1672, 2, '\n', 0),
(1673, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(1674, 4, '\n', 0),
(1675, 5, '    private int mx, my;\n', 4),
(1676, 6, '    private Dimension size;\n', 8),
(1677, 7, '    private int onaroll;\n', 2),
(1678, 8, '\n', 0),
(1679, 9, '    public void init() {\n', 0),
(1680, 10, '        onaroll = 0;\n', 0),
(1681, 11, '        setSize(500, 500);\n', 0),
(1682, 12, '        size = getSize();\n', 0),
(1683, 13, '        addMouseListener(this);\n', 0),
(1684, 14, '        addMouseMotionListener(this);\n', 0),
(1685, 15, '        addComponentListener(this);\n', 0),
(1686, 16, '    }\n', 0),
(1687, 17, '\n', 0),
(1688, 18, '    public void update(Graphics g) {\n', 0),
(1689, 19, '        Dimension newSize = getSize();\n', 8),
(1690, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(1691, 21, '            g.setColor(getBackground());\n', 0),
(1692, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(1693, 23, '        } else {\n', 0),
(1694, 24, '            size = newSize;\n', 0),
(1695, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(1696, 26, '        } // Calculate new position\n', 0),
(1697, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(1698, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(1699, 29, '        paint(g);\n', 0),
(1700, 30, '    }\n', 0),
(1701, 31, '  \n', 0),
(1702, 32, '    public void paint(Graphics g) {\n', 0),
(1703, 33, '        g.setColor(Color.black);\n', 0),
(1704, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(1705, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(1706, 36, '    }\n', 0),
(1707, 37, '\n', 0),
(1708, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(1709, 39, '\n', 0),
(1710, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(1711, 41, '        e.consume();\n', 0),
(1712, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(1713, 43, '            repaint();\n', 0),
(1714, 44, '        }\n', 0),
(1715, 45, '    }\n', 0),
(1716, 46, '\n', 0),
(1717, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(1718, 48, '        int x = e.getX();\n', 0),
(1719, 49, '        int y = e.getY();\n', 0),
(1720, 50, '        e.consume();\n', 0),
(1721, 51, '        requestFocus();\n', 0),
(1722, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(1723, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(1724, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(1725, 55, '                case 0:\n', 0),
(1726, 56, '                    play(getCodeBase(), \n', 0),
(1727, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(1728, 58, '                    break;\n', 0),
(1729, 59, '                case 1:\n', 0),
(1730, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(1731, 61, '                    break;\n', 0),
(1732, 62, '                case 2:\n', 0),
(1733, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(1734, 64, '                    break;\n', 0),
(1735, 65, '                case 3:\n', 0),
(1736, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(1737, 67, '                    break;\n', 0),
(1738, 68, '                }\n', 0),
(1739, 69, '                onaroll++;\n', 0),
(1740, 70, '                if (onaroll > 5) {\n', 0),
(1741, 72, '                } else {\n', 0),
(1742, 74, '                }\n', 0),
(1743, 75, '            } else {   //first hit\n', 0),
(1744, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(1745, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(1746, 78, '                onaroll = 1;\n', 0),
(1747, 79, '            }\n', 0),
(1748, 80, '        } else {   //miss\n', 0),
(1749, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(1750, 82, '			\n', 0),
(1751, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(1752, 84, '            onaroll = 0;\n', 0),
(1753, 85, '        }\n', 0),
(1754, 86, '        repaint();\n', 0),
(1755, 87, '    }\n', 0),
(1756, 88, '\n', 0),
(1757, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(1758, 90, '\n', 0),
(1759, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(1760, 92, '        repaint();\n', 0),
(1761, 93, '    }\n', 0),
(1762, 94, '\n', 0),
(1763, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(1764, 96, '        repaint();\n', 0),
(1765, 97, '    }\n', 0),
(1766, 98, '\n', 0),
(1767, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(1768, 100, '\n', 0),
(1769, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(1770, 102, ' \n', 0),
(1771, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(1772, 104, ' \n', 0),
(1773, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(1774, 106, '        repaint();\n', 0),
(1775, 107, '    }\n', 0),
(1776, 108, ' \n', 0),
(1777, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(1778, 110, '        repaint();\n', 0),
(1779, 111, '    }\n', 0),
(1780, 112, '  \n', 0),
(1781, 113, '    public void destroy() {\n', 0),
(1782, 114, '        removeMouseListener(this);\n', 0),
(1783, 115, '        removeMouseMotionListener(this);\n', 0),
(1784, 116, '    }\n', 0),
(1785, 117, '\n', 0),
(1786, 118, '    public String getAppletInfo() {\n', 0),
(1787, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(1788, 120, '    }\n', 0),
(1789, 121, '}\n', 0),
(1790, 0, 'import java.util.Scanner;\r\n', 0),
(1791, 1, ' class Years{\r\n', 0),
(1792, 2, '   public int getYear(){\r\n', 0),
(1793, 3, '	int year;\r\n', 2),
(1794, 4, '	String enteredYear;\r\n', 2),
(1795, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(1796, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(1797, 7, '	enteredYear = sc.next();\r\n', 0),
(1798, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(1799, 9, '	return year;\r\n', 0),
(1800, 10, '   }\r\n', 0),
(1801, 11, ' }\r\n', 0),
(1802, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1803, 13, ' class Months extends Years{\r\n', 0),
(1804, 14, '   public int getMonth(){\r\n', 0),
(1805, 15, '	int month;\r\n', 2),
(1806, 16, '	String enteredMonthNumber;\r\n', 2),
(1807, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(1808, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(1809, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(1810, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(1811, 21, '	return month;\r\n', 0),
(1812, 22, '   }\r\n', 0),
(1813, 23, ' }\r\n', 0),
(1814, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1815, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(1816, 26, ' static int numDays = 0;\r\n', 4),
(1817, 27, ' public static void main(String[] args) {\r\n', 0),
(1818, 28, '   int year;\r\n', 2),
(1819, 29, '   Months m = new Months();\r\n', 0),
(1820, 30, '   int month = m.getMonth();\r\n', 0),
(1821, 31, '   \r\n', 0),
(1822, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(1823, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(1824, 34, '   }\r\n', 0),
(1825, 35, '   else {\r\n', 0),
(1826, 36, '    switch (month) {\r\n', 0),
(1827, 37, '      case 1:\r\n', 0),
(1828, 38, '      case 3:\r\n', 0),
(1829, 39, '      case 5:\r\n', 0),
(1830, 40, '      case 7:\r\n', 0),
(1831, 0, 'import java.util.Scanner;\r\n', 0),
(1832, 1, ' class Years{\r\n', 0),
(1833, 2, '   public int getYear(){\r\n', 0),
(1834, 3, '	int year;\r\n', 2),
(1835, 4, '	String enteredYear;\r\n', 2),
(1836, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(1837, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(1838, 7, '	enteredYear = sc.next();\r\n', 0),
(1839, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(1840, 9, '	return year;\r\n', 0),
(1841, 10, '   }\r\n', 0),
(1842, 11, ' }\r\n', 0),
(1843, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1844, 13, ' class Months extends Years{\r\n', 0),
(1845, 14, '   public int getMonth(){\r\n', 0),
(1846, 15, '	int month;\r\n', 2),
(1847, 16, '	String enteredMonthNumber;\r\n', 2),
(1848, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(1849, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(1850, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(1851, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(1852, 21, '	return month;\r\n', 0),
(1853, 22, '   }\r\n', 0),
(1854, 23, ' }\r\n', 0),
(1855, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(1856, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(1857, 26, ' static int numDays = 0;\r\n', 4),
(1858, 27, ' public static void main(String[] args) {\r\n', 0),
(1859, 28, '   int year;\r\n', 2),
(1860, 29, '   Months m = new Months();\r\n', 0),
(1861, 30, '   int month = m.getMonth();\r\n', 0),
(1862, 31, '   \r\n', 0),
(1863, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(1864, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(1865, 34, '   }\r\n', 0),
(1866, 35, '   else {\r\n', 0),
(1867, 36, '    switch (month) {\r\n', 0),
(1868, 37, '      case 1:\r\n', 0),
(1869, 38, '      case 3:\r\n', 0),
(1870, 39, '      case 5:\r\n', 0),
(1871, 40, '      case 7:\r\n', 0),
(1872, 41, '      case 8:\r\n', 0),
(1873, 42, '      case 10:\r\n', 0),
(1874, 43, '      case 12:\r\n', 0),
(1875, 44, '        numDays = 31;\r\n', 0),
(1876, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(1877, 46, '        break;\r\n', 0),
(1878, 47, '      case 4:\r\n', 0),
(1879, 48, '      case 6:\r\n', 0),
(1880, 49, '      case 9:\r\n', 0),
(1881, 50, '      case 11:\r\n', 0),
(1882, 51, '       numDays = 30;\r\n', 0),
(1883, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(1884, 53, '       break;\r\n', 0),
(1885, 54, '      case 2:\r\n', 0),
(1886, 55, '       year = m.getYear();\r\n', 0),
(1887, 56, '       if(year < 1) {\r\n', 0),
(1888, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(1889, 58, '       }\r\n', 0),
(1890, 59, '       else{\r\n', 0),
(1891, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(1892, 61, '         numDays = 29;\r\n', 0),
(1893, 62, '		 if(year > 2020){\r\n', 0),
(1894, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(1895, 64, '         }\r\n', 0),
(1896, 65, '         else{\r\n', 0),
(1897, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(1898, 67, '         }\r\n', 0),
(1899, 68, '        }//if at line 61\r\n', 0),
(1900, 69, '        else{\r\n', 0),
(1901, 70, '         numDays = 28;\r\n', 0),
(1902, 71, '         if (year > 2020){\r\n', 0),
(1903, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(1904, 73, '         }\r\n', 0),
(1905, 74, '         else{\r\n', 0),
(1906, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(1907, 76, '         }\r\n', 0),
(1908, 77, '         break;  \r\n', 0),
(1909, 78, '        }//else at line 70\r\n', 0),
(1910, 79, '       }//else at line 60\r\n', 0),
(1911, 80, '    }//switch at line 37\r\n', 0),
(1912, 81, '   }//else at line 36\r\n', 0),
(1913, 82, '  }//method\r\n', 0),
(1914, 83, ' }//class', 0),
(1915, 0, 'public class RecursionExample2 {  \r\n', 0),
(1916, 1, 'static int count=0;  \r\n', 4),
(1917, 2, 'public int p(){  \r\n', 0),
(1918, 3, 'count++;  \r\n', 0),
(1919, 4, 'if(count<=5){  \r\n', 0),
(1920, 5, 'System.out.println("hello "+count);  \r\n', 0),
(1921, 6, 'public int p();  \r\n', 0),
(1922, 7, '}  \r\n', 0),
(1923, 8, '}  \r\n', 0),
(1924, 9, 'public static void main(String[] args) {  \r\n', 0),
(1925, 10, 'p();  \r\n', 0),
(1926, 11, '}  \r\n', 0),
(1927, 12, '}  ', 0),
(1928, 0, 'import java.awt.event.*;\n', 0),
(1929, 1, 'import java.awt.*;\n', 0),
(1930, 2, '\n', 0),
(1931, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(1932, 4, '\n', 0),
(1933, 5, '    private int mx, my;\n', 4),
(1934, 6, '    private Dimension size;\n', 8),
(1935, 7, '    private int onaroll;\n', 2),
(1936, 8, '\n', 0),
(1937, 9, '    public void init() {\n', 0),
(1938, 10, '        onaroll = 0;\n', 0),
(1939, 11, '        setSize(500, 500);\n', 0),
(1940, 12, '        size = getSize();\n', 0),
(1941, 13, '        addMouseListener(this);\n', 0),
(1942, 14, '        addMouseMotionListener(this);\n', 0),
(1943, 15, '        addComponentListener(this);\n', 0),
(1944, 16, '    }\n', 0),
(1945, 17, '\n', 0),
(1946, 18, '    public void update(Graphics g) {\n', 0),
(1947, 19, '        Dimension newSize = getSize();\n', 8),
(1948, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(1949, 21, '            g.setColor(getBackground());\n', 0),
(1950, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(1951, 23, '        } else {\n', 0),
(1952, 24, '            size = newSize;\n', 0),
(1953, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(1954, 26, '        } // Calculate new position\n', 0),
(1955, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(1956, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(1957, 29, '        paint(g);\n', 0),
(1958, 30, '    }\n', 0),
(1959, 31, '  \n', 0),
(1960, 32, '    public void paint(Graphics g) {\n', 0),
(1961, 33, '        g.setColor(Color.black);\n', 0),
(1962, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(1963, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(1964, 36, '    }\n', 0),
(1965, 37, '\n', 0),
(1966, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(1967, 39, '\n', 0),
(1968, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(1969, 41, '        e.consume();\n', 0),
(1970, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(1971, 43, '            repaint();\n', 0),
(1972, 44, '        }\n', 0),
(1973, 45, '    }\n', 0),
(1974, 46, '\n', 0),
(1975, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(1976, 48, '        int x = e.getX();\n', 0),
(1977, 49, '        int y = e.getY();\n', 0),
(1978, 50, '        e.consume();\n', 0),
(1979, 51, '        requestFocus();\n', 0),
(1980, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(1981, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(1982, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(1983, 55, '                case 0:\n', 0),
(1984, 56, '                    play(getCodeBase(), \n', 0),
(1985, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(1986, 58, '                    break;\n', 0),
(1987, 59, '                case 1:\n', 0),
(1988, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(1989, 61, '                    break;\n', 0),
(1990, 62, '                case 2:\n', 0),
(1991, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(1992, 64, '                    break;\n', 0),
(1993, 65, '                case 3:\n', 0),
(1994, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(1995, 67, '                    break;\n', 0),
(1996, 68, '                }\n', 0),
(1997, 69, '                onaroll++;\n', 0),
(1998, 70, '                if (onaroll > 5) {\n', 0),
(1999, 72, '                } else {\n', 0),
(2000, 74, '                }\n', 0),
(2001, 75, '            } else {   //first hit\n', 0),
(2002, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(2003, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(2004, 78, '                onaroll = 1;\n', 0),
(2005, 79, '            }\n', 0),
(2006, 80, '        } else {   //miss\n', 0),
(2007, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(2008, 82, '			\n', 0),
(2009, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(2010, 84, '            onaroll = 0;\n', 0),
(2011, 85, '        }\n', 0),
(2012, 86, '        repaint();\n', 0),
(2013, 87, '    }\n', 0),
(2014, 88, '\n', 0),
(2015, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(2016, 90, '\n', 0),
(2017, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(2018, 92, '        repaint();\n', 0),
(2019, 93, '    }\n', 0),
(2020, 94, '\n', 0),
(2021, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(2022, 96, '        repaint();\n', 0),
(2023, 97, '    }\n', 0),
(2024, 98, '\n', 0),
(2025, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(2026, 100, '\n', 0),
(2027, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(2028, 102, ' \n', 0),
(2029, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(2030, 104, ' \n', 0),
(2031, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(2032, 106, '        repaint();\n', 0),
(2033, 107, '    }\n', 0),
(2034, 108, ' \n', 0),
(2035, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(2036, 110, '        repaint();\n', 0),
(2037, 111, '    }\n', 0),
(2038, 112, '  \n', 0),
(2039, 113, '    public void destroy() {\n', 0),
(2040, 114, '        removeMouseListener(this);\n', 0),
(2041, 115, '        removeMouseMotionListener(this);\n', 0),
(2042, 116, '    }\n', 0),
(2043, 117, '\n', 0),
(2044, 118, '    public String getAppletInfo() {\n', 0),
(2045, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(2046, 120, '    }\n', 0),
(2047, 121, '}\n', 0),
(2048, 0, 'import java.awt.event.*;\n', 0),
(2049, 1, 'import java.awt.*;\n', 0),
(2050, 2, '\n', 0),
(2051, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(2052, 4, '\n', 0),
(2053, 5, '    private int mx, my;\n', 4),
(2054, 6, '    private Dimension size;\n', 8),
(2055, 7, '    private int onaroll;\n', 2),
(2056, 8, '\n', 0),
(2057, 9, '    public void init() {\n', 0),
(2058, 10, '        onaroll = 0;\n', 0),
(2059, 11, '        setSize(500, 500);\n', 0),
(2060, 12, '        size = getSize();\n', 0),
(2061, 13, '        addMouseListener(this);\n', 0),
(2062, 14, '        addMouseMotionListener(this);\n', 0),
(2063, 15, '        addComponentListener(this);\n', 0),
(2064, 16, '    }\n', 0),
(2065, 17, '\n', 0),
(2066, 18, '    public void update(Graphics g) {\n', 0),
(2067, 19, '        Dimension newSize = getSize();\n', 8),
(2068, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(2069, 21, '            g.setColor(getBackground());\n', 0),
(2070, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(2071, 23, '        } else {\n', 0),
(2072, 24, '            size = newSize;\n', 0),
(2073, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(2074, 26, '        } // Calculate new position\n', 0),
(2075, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(2076, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(2077, 29, '        paint(g);\n', 0),
(2078, 30, '    }\n', 0),
(2079, 31, '  \n', 0),
(2080, 32, '    public void paint(Graphics g) {\n', 0),
(2081, 33, '        g.setColor(Color.black);\n', 0),
(2082, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(2083, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(2084, 36, '    }\n', 0),
(2085, 37, '\n', 0),
(2086, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(2087, 39, '\n', 0),
(2088, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(2089, 41, '        e.consume();\n', 0),
(2090, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(2091, 43, '            repaint();\n', 0),
(2092, 44, '        }\n', 0),
(2093, 45, '    }\n', 0),
(2094, 46, '\n', 0),
(2095, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(2096, 48, '        int x = e.getX();\n', 0),
(2097, 49, '        int y = e.getY();\n', 0),
(2098, 50, '        e.consume();\n', 0),
(2099, 51, '        requestFocus();\n', 0),
(2100, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(2101, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(2102, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(2103, 55, '                case 0:\n', 0),
(2104, 56, '                    play(getCodeBase(), \n', 0),
(2105, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(2106, 58, '                    break;\n', 0),
(2107, 59, '                case 1:\n', 0),
(2108, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(2109, 61, '                    break;\n', 0),
(2110, 62, '                case 2:\n', 0),
(2111, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(2112, 64, '                    break;\n', 0),
(2113, 65, '                case 3:\n', 0),
(2114, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(2115, 67, '                    break;\n', 0),
(2116, 68, '                }\n', 0),
(2117, 69, '                onaroll++;\n', 0),
(2118, 70, '                if (onaroll > 5) {\n', 0),
(2119, 72, '                } else {\n', 0),
(2120, 74, '                }\n', 0),
(2121, 75, '            } else {   //first hit\n', 0),
(2122, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(2123, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(2124, 78, '                onaroll = 1;\n', 0),
(2125, 79, '            }\n', 0),
(2126, 80, '        } else {   //miss\n', 0),
(2127, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(2128, 82, '			\n', 0),
(2129, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(2130, 84, '            onaroll = 0;\n', 0),
(2131, 85, '        }\n', 0),
(2132, 86, '        repaint();\n', 0),
(2133, 87, '    }\n', 0),
(2134, 88, '\n', 0),
(2135, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(2136, 90, '\n', 0),
(2137, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(2138, 92, '        repaint();\n', 0),
(2139, 93, '    }\n', 0),
(2140, 94, '\n', 0),
(2141, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(2142, 96, '        repaint();\n', 0),
(2143, 97, '    }\n', 0),
(2144, 98, '\n', 0),
(2145, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(2146, 100, '\n', 0),
(2147, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(2148, 102, ' \n', 0),
(2149, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(2150, 104, ' \n', 0),
(2151, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(2152, 106, '        repaint();\n', 0),
(2153, 107, '    }\n', 0),
(2154, 108, ' \n', 0),
(2155, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(2156, 110, '        repaint();\n', 0),
(2157, 111, '    }\n', 0),
(2158, 112, '  \n', 0),
(2159, 113, '    public void destroy() {\n', 0),
(2160, 114, '        removeMouseListener(this);\n', 0),
(2161, 115, '        removeMouseMotionListener(this);\n', 0),
(2162, 116, '    }\n', 0),
(2163, 117, '\n', 0),
(2164, 118, '    public String getAppletInfo() {\n', 0),
(2165, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(2166, 120, '    }\n', 0),
(2167, 121, '}\n', 0),
(2168, 0, 'import java.util.Scanner;\r\n', 0),
(2169, 1, ' class Years{\r\n', 0),
(2170, 2, '   public int getYear(){\r\n', 0),
(2171, 3, '	int year;\r\n', 2),
(2172, 4, '	String enteredYear;\r\n', 2),
(2173, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(2174, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(2175, 7, '	enteredYear = sc.next();\r\n', 0),
(2176, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(2177, 9, '	return year;\r\n', 0),
(2178, 10, '   }\r\n', 0),
(2179, 11, ' }\r\n', 0),
(2180, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2181, 13, ' class Months extends Years{\r\n', 0),
(2182, 14, '   public int getMonth(){\r\n', 0),
(2183, 15, '	int month;\r\n', 2),
(2184, 16, '	String enteredMonthNumber;\r\n', 2),
(2185, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(2186, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(2187, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(2188, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(2189, 21, '	return month;\r\n', 0),
(2190, 22, '   }\r\n', 0),
(2191, 23, ' }\r\n', 0),
(2192, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2193, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(2194, 26, ' static int numDays = 0;\r\n', 4),
(2195, 27, ' public static void main(String[] args) {\r\n', 0),
(2196, 28, '   int year;\r\n', 2),
(2197, 29, '   Months m = new Months();\r\n', 0),
(2198, 30, '   int month = m.getMonth();\r\n', 0),
(2199, 31, '   \r\n', 0),
(2200, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(2201, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(2202, 34, '   }\r\n', 0),
(2203, 35, '   else {\r\n', 0),
(2204, 36, '    switch (month) {\r\n', 0),
(2205, 37, '      case 1:\r\n', 0),
(2206, 38, '      case 3:\r\n', 0),
(2207, 39, '      case 5:\r\n', 0),
(2208, 40, '      case 7:\r\n', 0),
(2209, 41, '      case 8:\r\n', 0),
(2210, 42, '      case 10:\r\n', 0),
(2211, 43, '      case 12:\r\n', 0),
(2212, 44, '        numDays = 31;\r\n', 0),
(2213, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(2214, 46, '        break;\r\n', 0),
(2215, 47, '      case 4:\r\n', 0),
(2216, 48, '      case 6:\r\n', 0),
(2217, 49, '      case 9:\r\n', 0),
(2218, 50, '      case 11:\r\n', 0),
(2219, 51, '       numDays = 30;\r\n', 0),
(2220, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(2221, 53, '       break;\r\n', 0),
(2222, 54, '      case 2:\r\n', 0),
(2223, 55, '       year = m.getYear();\r\n', 0),
(2224, 56, '       if(year < 1) {\r\n', 0),
(2225, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(2226, 58, '       }\r\n', 0),
(2227, 59, '       else{\r\n', 0),
(2228, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(2229, 61, '         numDays = 29;\r\n', 0),
(2230, 62, '		 if(year > 2020){\r\n', 0),
(2231, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(2232, 64, '         }\r\n', 0),
(2233, 65, '         else{\r\n', 0),
(2234, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(2235, 67, '         }\r\n', 0),
(2236, 68, '        }//if at line 61\r\n', 0),
(2237, 69, '        else{\r\n', 0),
(2238, 70, '         numDays = 28;\r\n', 0),
(2239, 71, '         if (year > 2020){\r\n', 0),
(2240, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(2241, 73, '         }\r\n', 0),
(2242, 74, '         else{\r\n', 0),
(2243, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(2244, 76, '         }\r\n', 0),
(2245, 77, '         break;  \r\n', 0),
(2246, 78, '        }//else at line 70\r\n', 0),
(2247, 79, '       }//else at line 60\r\n', 0),
(2248, 80, '    }//switch at line 37\r\n', 0),
(2249, 81, '   }//else at line 36\r\n', 0),
(2250, 82, '  }//method\r\n', 0),
(2251, 83, ' }//class', 0),
(2252, 0, 'class Pattern{ \r\n', 0),
(2253, 1, 'public static void main(String[] args) { \r\n', 0),
(2254, 2, '	 int rows = 5;\r\n', 2),
(2255, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(2256, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(2257, 5, '	 System.out.print(j + " "); \r\n', 0),
(2258, 6, '	 } \r\n', 0),
(2259, 7, '	 System.out.println(""); \r\n', 0),
(2260, 8, ' 	} \r\n', 0),
(2261, 9, ' 	} \r\n', 0),
(2262, 10, '} ', 0),
(2263, 0, 'import java.util.Scanner;\r\n', 0),
(2264, 1, ' class Years{\r\n', 0),
(2265, 2, '   public int getYear(){\r\n', 0),
(2266, 3, '	int year;\r\n', 2),
(2267, 4, '	String enteredYear;\r\n', 2),
(2268, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(2269, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(2270, 7, '	enteredYear = sc.next();\r\n', 0),
(2271, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(2272, 9, '	return year;\r\n', 0),
(2273, 10, '   }\r\n', 0),
(2274, 11, ' }\r\n', 0),
(2275, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2276, 13, ' class Months extends Years{\r\n', 0),
(2277, 14, '   public int getMonth(){\r\n', 0),
(2278, 15, '	int month;\r\n', 2),
(2279, 16, '	String enteredMonthNumber;\r\n', 2),
(2280, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(2281, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(2282, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(2283, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(2284, 21, '	return month;\r\n', 0),
(2285, 22, '   }\r\n', 0),
(2286, 23, ' }\r\n', 0),
(2287, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2288, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(2289, 26, ' static int numDays = 0;\r\n', 4),
(2290, 27, ' public static void main(String[] args) {\r\n', 0),
(2291, 28, '   int year;\r\n', 2),
(2292, 29, '   Months m = new Months();\r\n', 0),
(2293, 30, '   int month = m.getMonth();\r\n', 0),
(2294, 31, '   \r\n', 0),
(2295, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(2296, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(2297, 34, '   }\r\n', 0),
(2298, 35, '   else {\r\n', 0),
(2299, 36, '    switch (month) {\r\n', 0),
(2300, 37, '      case 1:\r\n', 0),
(2301, 38, '      case 3:\r\n', 0),
(2302, 39, '      case 5:\r\n', 0),
(2303, 40, '      case 7:\r\n', 0),
(2304, 41, '      case 8:\r\n', 0),
(2305, 42, '      case 10:\r\n', 0),
(2306, 43, '      case 12:\r\n', 0),
(2307, 44, '        numDays = 31;\r\n', 0),
(2308, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(2309, 46, '        break;\r\n', 0),
(2310, 47, '      case 4:\r\n', 0),
(2311, 48, '      case 6:\r\n', 0),
(2312, 49, '      case 9:\r\n', 0),
(2313, 50, '      case 11:\r\n', 0),
(2314, 51, '       numDays = 30;\r\n', 0),
(2315, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(2316, 53, '       break;\r\n', 0),
(2317, 54, '      case 2:\r\n', 0),
(2318, 55, '       year = m.getYear();\r\n', 0),
(2319, 56, '       if(year < 1) {\r\n', 0),
(2320, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(2321, 58, '       }\r\n', 0),
(2322, 59, '       else{\r\n', 0),
(2323, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(2324, 61, '         numDays = 29;\r\n', 0),
(2325, 62, '		 if(year > 2020){\r\n', 0),
(2326, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(2327, 64, '         }\r\n', 0),
(2328, 65, '         else{\r\n', 0),
(2329, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(2330, 67, '         }\r\n', 0),
(2331, 68, '        }//if at line 61\r\n', 0),
(2332, 69, '        else{\r\n', 0),
(2333, 70, '         numDays = 28;\r\n', 0),
(2334, 71, '         if (year > 2020){\r\n', 0),
(2335, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(2336, 73, '         }\r\n', 0),
(2337, 74, '         else{\r\n', 0),
(2338, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(2339, 76, '         }\r\n', 0),
(2340, 77, '         break;  \r\n', 0),
(2341, 78, '        }//else at line 70\r\n', 0),
(2342, 79, '       }//else at line 60\r\n', 0),
(2343, 80, '    }//switch at line 37\r\n', 0),
(2344, 81, '   }//else at line 36\r\n', 0),
(2345, 82, '  }//method\r\n', 0),
(2346, 83, ' }//class', 0),
(2347, 0, 'class HelloWorld { \r\n', 0),
(2348, 1, '	public static void main(String args[]) \r\n', 0),
(2349, 2, '	{ \r\n', 0),
(2350, 3, '		System.out.println("Hello World"); \r\n', 0),
(2351, 4, '	} \r\n', 0),
(2352, 5, '} \r\n', 0),
(2353, 0, 'import java.awt.event.*;\n', 0),
(2354, 1, 'import java.awt.*;\n', 0),
(2355, 2, '\n', 0),
(2356, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(2357, 4, '\n', 0),
(2358, 5, '    private int mx, my;\n', 4),
(2359, 6, '    private Dimension size;\n', 8),
(2360, 7, '    private int onaroll;\n', 2),
(2361, 8, '\n', 0),
(2362, 9, '    public void init() {\n', 0),
(2363, 10, '        onaroll = 0;\n', 0),
(2364, 11, '        setSize(500, 500);\n', 0),
(2365, 12, '        size = getSize();\n', 0),
(2366, 13, '        addMouseListener(this);\n', 0),
(2367, 14, '        addMouseMotionListener(this);\n', 0),
(2368, 15, '        addComponentListener(this);\n', 0),
(2369, 16, '    }\n', 0),
(2370, 17, '\n', 0),
(2371, 18, '    public void update(Graphics g) {\n', 0),
(2372, 19, '        Dimension newSize = getSize();\n', 8),
(2373, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(2374, 21, '            g.setColor(getBackground());\n', 0),
(2375, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(2376, 23, '        } else {\n', 0),
(2377, 24, '            size = newSize;\n', 0),
(2378, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(2379, 26, '        } // Calculate new position\n', 0),
(2380, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(2381, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(2382, 29, '        paint(g);\n', 0),
(2383, 30, '    }\n', 0),
(2384, 31, '  \n', 0),
(2385, 32, '    public void paint(Graphics g) {\n', 0),
(2386, 33, '        g.setColor(Color.black);\n', 0),
(2387, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(2388, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(2389, 36, '    }\n', 0),
(2390, 37, '\n', 0),
(2391, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(2392, 39, '\n', 0),
(2393, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(2394, 41, '        e.consume();\n', 0),
(2395, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(2396, 43, '            repaint();\n', 0),
(2397, 44, '        }\n', 0),
(2398, 45, '    }\n', 0),
(2399, 46, '\n', 0),
(2400, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(2401, 48, '        int x = e.getX();\n', 0),
(2402, 49, '        int y = e.getY();\n', 0),
(2403, 50, '        e.consume();\n', 0),
(2404, 51, '        requestFocus();\n', 0),
(2405, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(2406, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(2407, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(2408, 55, '                case 0:\n', 0),
(2409, 56, '                    play(getCodeBase(), \n', 0),
(2410, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(2411, 58, '                    break;\n', 0),
(2412, 59, '                case 1:\n', 0),
(2413, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(2414, 61, '                    break;\n', 0),
(2415, 62, '                case 2:\n', 0),
(2416, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(2417, 64, '                    break;\n', 0),
(2418, 65, '                case 3:\n', 0),
(2419, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(2420, 67, '                    break;\n', 0),
(2421, 68, '                }\n', 0),
(2422, 69, '                onaroll++;\n', 0),
(2423, 70, '                if (onaroll > 5) {\n', 0),
(2424, 72, '                } else {\n', 0),
(2425, 74, '                }\n', 0),
(2426, 75, '            } else {   //first hit\n', 0),
(2427, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(2428, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(2429, 78, '                onaroll = 1;\n', 0),
(2430, 79, '            }\n', 0),
(2431, 80, '        } else {   //miss\n', 0),
(2432, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(2433, 82, '			\n', 0),
(2434, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(2435, 84, '            onaroll = 0;\n', 0),
(2436, 85, '        }\n', 0),
(2437, 86, '        repaint();\n', 0),
(2438, 87, '    }\n', 0),
(2439, 88, '\n', 0),
(2440, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(2441, 90, '\n', 0),
(2442, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(2443, 92, '        repaint();\n', 0),
(2444, 93, '    }\n', 0),
(2445, 94, '\n', 0),
(2446, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(2447, 96, '        repaint();\n', 0),
(2448, 97, '    }\n', 0),
(2449, 98, '\n', 0),
(2450, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(2451, 100, '\n', 0),
(2452, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(2453, 102, ' \n', 0),
(2454, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(2455, 104, ' \n', 0),
(2456, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(2457, 106, '        repaint();\n', 0),
(2458, 107, '    }\n', 0),
(2459, 108, ' \n', 0),
(2460, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(2461, 110, '        repaint();\n', 0),
(2462, 111, '    }\n', 0),
(2463, 112, '  \n', 0),
(2464, 113, '    public void destroy() {\n', 0),
(2465, 114, '        removeMouseListener(this);\n', 0),
(2466, 115, '        removeMouseMotionListener(this);\n', 0),
(2467, 116, '    }\n', 0),
(2468, 117, '\n', 0),
(2469, 118, '    public String getAppletInfo() {\n', 0),
(2470, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(2471, 120, '    }\n', 0),
(2472, 121, '}\n', 0),
(2473, 0, 'import java.awt.event.*;\n', 0),
(2474, 1, 'import java.awt.*;\n', 0),
(2475, 2, '\n', 0),
(2476, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(2477, 4, '\n', 0),
(2478, 5, '    private int mx, my;\n', 4),
(2479, 6, '    private Dimension size;\n', 8),
(2480, 7, '    private int onaroll;\n', 2),
(2481, 8, '\n', 0),
(2482, 9, '    public void init() {\n', 0),
(2483, 10, '        onaroll = 0;\n', 0),
(2484, 11, '        setSize(500, 500);\n', 0),
(2485, 12, '        size = getSize();\n', 0),
(2486, 13, '        addMouseListener(this);\n', 0),
(2487, 14, '        addMouseMotionListener(this);\n', 0),
(2488, 15, '        addComponentListener(this);\n', 0),
(2489, 16, '    }\n', 0),
(2490, 17, '\n', 0),
(2491, 18, '    public void update(Graphics g) {\n', 0),
(2492, 19, '        Dimension newSize = getSize();\n', 8),
(2493, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(2494, 21, '            g.setColor(getBackground());\n', 0),
(2495, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(2496, 23, '        } else {\n', 0),
(2497, 24, '            size = newSize;\n', 0),
(2498, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(2499, 26, '        } // Calculate new position\n', 0),
(2500, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(2501, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(2502, 29, '        paint(g);\n', 0),
(2503, 30, '    }\n', 0),
(2504, 31, '  \n', 0),
(2505, 32, '    public void paint(Graphics g) {\n', 0),
(2506, 33, '        g.setColor(Color.black);\n', 0),
(2507, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(2508, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(2509, 36, '    }\n', 0),
(2510, 37, '\n', 0),
(2511, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(2512, 39, '\n', 0),
(2513, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(2514, 41, '        e.consume();\n', 0),
(2515, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(2516, 43, '            repaint();\n', 0),
(2517, 44, '        }\n', 0),
(2518, 45, '    }\n', 0),
(2519, 46, '\n', 0),
(2520, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(2521, 48, '        int x = e.getX();\n', 0),
(2522, 49, '        int y = e.getY();\n', 0),
(2523, 50, '        e.consume();\n', 0),
(2524, 51, '        requestFocus();\n', 0),
(2525, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(2526, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(2527, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(2528, 55, '                case 0:\n', 0),
(2529, 56, '                    play(getCodeBase(), \n', 0),
(2530, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(2531, 58, '                    break;\n', 0),
(2532, 59, '                case 1:\n', 0),
(2533, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(2534, 61, '                    break;\n', 0),
(2535, 62, '                case 2:\n', 0),
(2536, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(2537, 64, '                    break;\n', 0),
(2538, 65, '                case 3:\n', 0),
(2539, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(2540, 67, '                    break;\n', 0),
(2541, 68, '                }\n', 0),
(2542, 69, '                onaroll++;\n', 0),
(2543, 70, '                if (onaroll > 5) {\n', 0),
(2544, 72, '                } else {\n', 0),
(2545, 74, '                }\n', 0),
(2546, 75, '            } else {   //first hit\n', 0),
(2547, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(2548, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(2549, 78, '                onaroll = 1;\n', 0),
(2550, 79, '            }\n', 0),
(2551, 80, '        } else {   //miss\n', 0),
(2552, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(2553, 82, '			\n', 0),
(2554, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(2555, 84, '            onaroll = 0;\n', 0),
(2556, 85, '        }\n', 0),
(2557, 86, '        repaint();\n', 0),
(2558, 87, '    }\n', 0),
(2559, 88, '\n', 0),
(2560, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(2561, 90, '\n', 0),
(2562, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(2563, 92, '        repaint();\n', 0),
(2564, 93, '    }\n', 0),
(2565, 94, '\n', 0),
(2566, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(2567, 96, '        repaint();\n', 0),
(2568, 97, '    }\n', 0),
(2569, 98, '\n', 0),
(2570, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(2571, 100, '\n', 0),
(2572, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(2573, 102, ' \n', 0),
(2574, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(2575, 104, ' \n', 0),
(2576, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(2577, 106, '        repaint();\n', 0),
(2578, 107, '    }\n', 0),
(2579, 108, ' \n', 0),
(2580, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(2581, 110, '        repaint();\n', 0),
(2582, 111, '    }\n', 0),
(2583, 112, '  \n', 0),
(2584, 113, '    public void destroy() {\n', 0),
(2585, 114, '        removeMouseListener(this);\n', 0),
(2586, 115, '        removeMouseMotionListener(this);\n', 0),
(2587, 116, '    }\n', 0),
(2588, 117, '\n', 0),
(2589, 118, '    public String getAppletInfo() {\n', 0),
(2590, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(2591, 120, '    }\n', 0),
(2592, 121, '}\n', 0),
(2593, 0, 'import java.util.Scanner;\r\n', 0),
(2594, 1, ' class Years{\r\n', 0),
(2595, 2, '   public int getYear(){\r\n', 0),
(2596, 3, '	int year;\r\n', 2),
(2597, 4, '	String enteredYear;\r\n', 2),
(2598, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(2599, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(2600, 7, '	enteredYear = sc.next();\r\n', 0),
(2601, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(2602, 9, '	return year;\r\n', 0),
(2603, 10, '   }\r\n', 0),
(2604, 11, ' }\r\n', 0),
(2605, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2606, 13, ' class Months extends Years{\r\n', 0),
(2607, 14, '   public int getMonth(){\r\n', 0),
(2608, 15, '	int month;\r\n', 2),
(2609, 16, '	String enteredMonthNumber;\r\n', 2),
(2610, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(2611, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(2612, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(2613, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(2614, 21, '	return month;\r\n', 0),
(2615, 22, '   }\r\n', 0),
(2616, 23, ' }\r\n', 0),
(2617, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2618, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(2619, 26, ' static int numDays = 0;\r\n', 4),
(2620, 27, ' public static void main(String[] args) {\r\n', 0),
(2621, 28, '   int year;\r\n', 2),
(2622, 29, '   Months m = new Months();\r\n', 0),
(2623, 30, '   int month = m.getMonth();\r\n', 0),
(2624, 31, '   \r\n', 0),
(2625, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(2626, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(2627, 34, '   }\r\n', 0),
(2628, 35, '   else {\r\n', 0),
(2629, 36, '    switch (month) {\r\n', 0),
(2630, 37, '      case 1:\r\n', 0),
(2631, 38, '      case 3:\r\n', 0),
(2632, 39, '      case 5:\r\n', 0),
(2633, 40, '      case 7:\r\n', 0),
(2634, 41, '      case 8:\r\n', 0),
(2635, 42, '      case 10:\r\n', 0),
(2636, 43, '      case 12:\r\n', 0),
(2637, 44, '        numDays = 31;\r\n', 0),
(2638, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(2639, 46, '        break;\r\n', 0),
(2640, 47, '      case 4:\r\n', 0),
(2641, 48, '      case 6:\r\n', 0),
(2642, 49, '      case 9:\r\n', 0),
(2643, 50, '      case 11:\r\n', 0),
(2644, 51, '       numDays = 30;\r\n', 0),
(2645, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(2646, 53, '       break;\r\n', 0),
(2647, 54, '      case 2:\r\n', 0),
(2648, 55, '       year = m.getYear();\r\n', 0),
(2649, 56, '       if(year < 1) {\r\n', 0),
(2650, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(2651, 58, '       }\r\n', 0),
(2652, 59, '       else{\r\n', 0),
(2653, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(2654, 61, '         numDays = 29;\r\n', 0),
(2655, 62, '		 if(year > 2020){\r\n', 0),
(2656, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(2657, 64, '         }\r\n', 0),
(2658, 65, '         else{\r\n', 0),
(2659, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(2660, 67, '         }\r\n', 0),
(2661, 68, '        }//if at line 61\r\n', 0),
(2662, 69, '        else{\r\n', 0),
(2663, 70, '         numDays = 28;\r\n', 0),
(2664, 71, '         if (year > 2020){\r\n', 0),
(2665, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(2666, 73, '         }\r\n', 0),
(2667, 74, '         else{\r\n', 0),
(2668, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(2669, 76, '         }\r\n', 0),
(2670, 77, '         break;  \r\n', 0),
(2671, 78, '        }//else at line 70\r\n', 0),
(2672, 79, '       }//else at line 60\r\n', 0),
(2673, 80, '    }//switch at line 37\r\n', 0),
(2674, 81, '   }//else at line 36\r\n', 0),
(2675, 82, '  }//method\r\n', 0),
(2676, 83, ' }//class', 0),
(2677, 0, 'public class RecursionExample2 {  \r\n', 0),
(2678, 1, 'static int count=0;  \r\n', 4),
(2679, 2, 'public int p(){  \r\n', 0),
(2680, 3, 'count++;  \r\n', 0),
(2681, 4, 'if(count<=5){  \r\n', 0),
(2682, 5, 'System.out.println("hello "+count);  \r\n', 0),
(2683, 6, 'public int p();  \r\n', 0),
(2684, 7, '}  \r\n', 0),
(2685, 8, '}  \r\n', 0),
(2686, 9, 'public static void main(String[] args) {  \r\n', 0),
(2687, 10, 'p();  \r\n', 0),
(2688, 11, '}  \r\n', 0),
(2689, 12, '}  ', 0),
(2690, 0, 'import java.awt.event.*;\n', 0),
(2691, 1, 'import java.awt.*;\n', 0),
(2692, 2, '\n', 0),
(2693, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(2694, 4, '\n', 0),
(2695, 5, '    private int mx, my;\n', 4),
(2696, 6, '    private Dimension size;\n', 8),
(2697, 7, '    private int onaroll;\n', 2),
(2698, 8, '\n', 0),
(2699, 9, '    public void init() {\n', 0),
(2700, 10, '        onaroll = 0;\n', 0),
(2701, 11, '        setSize(500, 500);\n', 0),
(2702, 12, '        size = getSize();\n', 0),
(2703, 13, '        addMouseListener(this);\n', 0),
(2704, 14, '        addMouseMotionListener(this);\n', 0),
(2705, 15, '        addComponentListener(this);\n', 0),
(2706, 16, '    }\n', 0),
(2707, 17, '\n', 0),
(2708, 18, '    public void update(Graphics g) {\n', 0),
(2709, 19, '        Dimension newSize = getSize();\n', 8),
(2710, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(2711, 21, '            g.setColor(getBackground());\n', 0),
(2712, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(2713, 23, '        } else {\n', 0),
(2714, 24, '            size = newSize;\n', 0),
(2715, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(2716, 26, '        } // Calculate new position\n', 0),
(2717, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(2718, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(2719, 29, '        paint(g);\n', 0),
(2720, 30, '    }\n', 0),
(2721, 31, '  \n', 0),
(2722, 32, '    public void paint(Graphics g) {\n', 0),
(2723, 33, '        g.setColor(Color.black);\n', 0),
(2724, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(2725, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(2726, 36, '    }\n', 0),
(2727, 37, '\n', 0),
(2728, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(2729, 39, '\n', 0),
(2730, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(2731, 41, '        e.consume();\n', 0),
(2732, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(2733, 43, '            repaint();\n', 0),
(2734, 44, '        }\n', 0),
(2735, 45, '    }\n', 0),
(2736, 46, '\n', 0),
(2737, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(2738, 48, '        int x = e.getX();\n', 0),
(2739, 49, '        int y = e.getY();\n', 0),
(2740, 50, '        e.consume();\n', 0),
(2741, 51, '        requestFocus();\n', 0),
(2742, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(2743, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(2744, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(2745, 55, '                case 0:\n', 0),
(2746, 56, '                    play(getCodeBase(), \n', 0),
(2747, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(2748, 58, '                    break;\n', 0),
(2749, 59, '                case 1:\n', 0),
(2750, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(2751, 61, '                    break;\n', 0),
(2752, 62, '                case 2:\n', 0),
(2753, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(2754, 64, '                    break;\n', 0),
(2755, 65, '                case 3:\n', 0),
(2756, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(2757, 67, '                    break;\n', 0),
(2758, 68, '                }\n', 0),
(2759, 69, '                onaroll++;\n', 0),
(2760, 70, '                if (onaroll > 5) {\n', 0),
(2761, 72, '                } else {\n', 0),
(2762, 74, '                }\n', 0),
(2763, 75, '            } else {   //first hit\n', 0),
(2764, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(2765, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(2766, 78, '                onaroll = 1;\n', 0),
(2767, 79, '            }\n', 0),
(2768, 80, '        } else {   //miss\n', 0),
(2769, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(2770, 82, '			\n', 0),
(2771, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(2772, 84, '            onaroll = 0;\n', 0),
(2773, 85, '        }\n', 0),
(2774, 86, '        repaint();\n', 0),
(2775, 87, '    }\n', 0),
(2776, 88, '\n', 0),
(2777, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(2778, 90, '\n', 0),
(2779, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(2780, 92, '        repaint();\n', 0),
(2781, 93, '    }\n', 0),
(2782, 94, '\n', 0),
(2783, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(2784, 96, '        repaint();\n', 0),
(2785, 97, '    }\n', 0),
(2786, 98, '\n', 0),
(2787, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(2788, 100, '\n', 0),
(2789, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(2790, 102, ' \n', 0),
(2791, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(2792, 104, ' \n', 0),
(2793, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(2794, 106, '        repaint();\n', 0),
(2795, 107, '    }\n', 0),
(2796, 108, ' \n', 0),
(2797, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(2798, 110, '        repaint();\n', 0),
(2799, 111, '    }\n', 0),
(2800, 112, '  \n', 0),
(2801, 113, '    public void destroy() {\n', 0),
(2802, 114, '        removeMouseListener(this);\n', 0),
(2803, 115, '        removeMouseMotionListener(this);\n', 0),
(2804, 116, '    }\n', 0),
(2805, 117, '\n', 0),
(2806, 118, '    public String getAppletInfo() {\n', 0),
(2807, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(2808, 120, '    }\n', 0),
(2809, 121, '}\n', 0),
(2810, 0, 'import java.awt.event.*;\n', 0),
(2811, 1, 'import java.awt.*;\n', 0),
(2812, 2, '\n', 0),
(2813, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(2814, 4, '\n', 0),
(2815, 5, '    private int mx, my;\n', 4),
(2816, 6, '    private Dimension size;\n', 8),
(2817, 7, '    private int onaroll;\n', 2),
(2818, 8, '\n', 0),
(2819, 9, '    public void init() {\n', 0),
(2820, 10, '        onaroll = 0;\n', 0),
(2821, 11, '        setSize(500, 500);\n', 0),
(2822, 12, '        size = getSize();\n', 0),
(2823, 13, '        addMouseListener(this);\n', 0),
(2824, 14, '        addMouseMotionListener(this);\n', 0),
(2825, 15, '        addComponentListener(this);\n', 0),
(2826, 16, '    }\n', 0),
(2827, 17, '\n', 0),
(2828, 18, '    public void update(Graphics g) {\n', 0),
(2829, 19, '        Dimension newSize = getSize();\n', 8),
(2830, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(2831, 21, '            g.setColor(getBackground());\n', 0),
(2832, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(2833, 23, '        } else {\n', 0),
(2834, 24, '            size = newSize;\n', 0),
(2835, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(2836, 26, '        } // Calculate new position\n', 0),
(2837, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(2838, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(2839, 29, '        paint(g);\n', 0),
(2840, 30, '    }\n', 0),
(2841, 31, '  \n', 0),
(2842, 32, '    public void paint(Graphics g) {\n', 0),
(2843, 33, '        g.setColor(Color.black);\n', 0),
(2844, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(2845, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(2846, 36, '    }\n', 0),
(2847, 37, '\n', 0),
(2848, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(2849, 39, '\n', 0),
(2850, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(2851, 41, '        e.consume();\n', 0),
(2852, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(2853, 43, '            repaint();\n', 0),
(2854, 44, '        }\n', 0),
(2855, 45, '    }\n', 0),
(2856, 46, '\n', 0),
(2857, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(2858, 48, '        int x = e.getX();\n', 0),
(2859, 49, '        int y = e.getY();\n', 0),
(2860, 50, '        e.consume();\n', 0),
(2861, 51, '        requestFocus();\n', 0),
(2862, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(2863, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(2864, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(2865, 55, '                case 0:\n', 0),
(2866, 56, '                    play(getCodeBase(), \n', 0),
(2867, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(2868, 58, '                    break;\n', 0),
(2869, 59, '                case 1:\n', 0),
(2870, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(2871, 61, '                    break;\n', 0),
(2872, 62, '                case 2:\n', 0),
(2873, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(2874, 64, '                    break;\n', 0),
(2875, 65, '                case 3:\n', 0),
(2876, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(2877, 67, '                    break;\n', 0),
(2878, 68, '                }\n', 0),
(2879, 69, '                onaroll++;\n', 0),
(2880, 70, '                if (onaroll > 5) {\n', 0),
(2881, 72, '                } else {\n', 0),
(2882, 74, '                }\n', 0),
(2883, 75, '            } else {   //first hit\n', 0),
(2884, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(2885, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(2886, 78, '                onaroll = 1;\n', 0),
(2887, 79, '            }\n', 0),
(2888, 80, '        } else {   //miss\n', 0),
(2889, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(2890, 82, '			\n', 0),
(2891, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(2892, 84, '            onaroll = 0;\n', 0),
(2893, 85, '        }\n', 0),
(2894, 86, '        repaint();\n', 0),
(2895, 87, '    }\n', 0),
(2896, 88, '\n', 0),
(2897, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(2898, 90, '\n', 0),
(2899, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(2900, 92, '        repaint();\n', 0),
(2901, 93, '    }\n', 0),
(2902, 94, '\n', 0),
(2903, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(2904, 96, '        repaint();\n', 0),
(2905, 97, '    }\n', 0),
(2906, 98, '\n', 0),
(2907, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(2908, 100, '\n', 0),
(2909, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(2910, 102, ' \n', 0),
(2911, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(2912, 104, ' \n', 0),
(2913, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(2914, 106, '        repaint();\n', 0),
(2915, 107, '    }\n', 0),
(2916, 108, ' \n', 0),
(2917, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(2918, 110, '        repaint();\n', 0),
(2919, 111, '    }\n', 0),
(2920, 112, '  \n', 0),
(2921, 113, '    public void destroy() {\n', 0),
(2922, 114, '        removeMouseListener(this);\n', 0),
(2923, 115, '        removeMouseMotionListener(this);\n', 0),
(2924, 116, '    }\n', 0),
(2925, 117, '\n', 0),
(2926, 118, '    public String getAppletInfo() {\n', 0),
(2927, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(2928, 120, '    }\n', 0),
(2929, 121, '}\n', 0),
(2930, 0, 'import java.util.Scanner;\r\n', 0),
(2931, 1, ' class Years{\r\n', 0),
(2932, 2, '   public int getYear(){\r\n', 0),
(2933, 3, '	int year;\r\n', 2),
(2934, 4, '	String enteredYear;\r\n', 2),
(2935, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(2936, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(2937, 7, '	enteredYear = sc.next();\r\n', 0),
(2938, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(2939, 9, '	return year;\r\n', 0),
(2940, 10, '   }\r\n', 0),
(2941, 11, ' }\r\n', 0),
(2942, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2943, 13, ' class Months extends Years{\r\n', 0),
(2944, 14, '   public int getMonth(){\r\n', 0),
(2945, 15, '	int month;\r\n', 2),
(2946, 16, '	String enteredMonthNumber;\r\n', 2),
(2947, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(2948, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(2949, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(2950, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(2951, 21, '	return month;\r\n', 0),
(2952, 22, '   }\r\n', 0),
(2953, 23, ' }\r\n', 0),
(2954, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(2955, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(2956, 26, ' static int numDays = 0;\r\n', 4),
(2957, 27, ' public static void main(String[] args) {\r\n', 0),
(2958, 28, '   int year;\r\n', 2),
(2959, 29, '   Months m = new Months();\r\n', 0),
(2960, 30, '   int month = m.getMonth();\r\n', 0),
(2961, 31, '   \r\n', 0),
(2962, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(2963, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(2964, 34, '   }\r\n', 0),
(2965, 35, '   else {\r\n', 0),
(2966, 36, '    switch (month) {\r\n', 0),
(2967, 37, '      case 1:\r\n', 0),
(2968, 38, '      case 3:\r\n', 0),
(2969, 39, '      case 5:\r\n', 0),
(2970, 40, '      case 7:\r\n', 0),
(2971, 41, '      case 8:\r\n', 0),
(2972, 42, '      case 10:\r\n', 0),
(2973, 43, '      case 12:\r\n', 0),
(2974, 44, '        numDays = 31;\r\n', 0),
(2975, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(2976, 46, '        break;\r\n', 0),
(2977, 47, '      case 4:\r\n', 0),
(2978, 48, '      case 6:\r\n', 0),
(2979, 49, '      case 9:\r\n', 0),
(2980, 50, '      case 11:\r\n', 0),
(2981, 51, '       numDays = 30;\r\n', 0),
(2982, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(2983, 53, '       break;\r\n', 0),
(2984, 54, '      case 2:\r\n', 0),
(2985, 55, '       year = m.getYear();\r\n', 0),
(2986, 56, '       if(year < 1) {\r\n', 0),
(2987, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(2988, 58, '       }\r\n', 0),
(2989, 59, '       else{\r\n', 0),
(2990, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(2991, 61, '         numDays = 29;\r\n', 0),
(2992, 62, '		 if(year > 2020){\r\n', 0),
(2993, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(2994, 64, '         }\r\n', 0),
(2995, 65, '         else{\r\n', 0),
(2996, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(2997, 67, '         }\r\n', 0),
(2998, 68, '        }//if at line 61\r\n', 0),
(2999, 69, '        else{\r\n', 0),
(3000, 70, '         numDays = 28;\r\n', 0),
(3001, 71, '         if (year > 2020){\r\n', 0),
(3002, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(3003, 73, '         }\r\n', 0),
(3004, 74, '         else{\r\n', 0),
(3005, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(3006, 76, '         }\r\n', 0),
(3007, 77, '         break;  \r\n', 0),
(3008, 78, '        }//else at line 70\r\n', 0),
(3009, 79, '       }//else at line 60\r\n', 0),
(3010, 80, '    }//switch at line 37\r\n', 0),
(3011, 81, '   }//else at line 36\r\n', 0),
(3012, 82, '  }//method\r\n', 0),
(3013, 83, ' }//class', 0),
(3014, 0, 'class Pattern{ \r\n', 0),
(3015, 1, 'public static void main(String[] args) { \r\n', 0),
(3016, 2, '	 int rows = 5;\r\n', 2),
(3017, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(3018, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(3019, 5, '	 System.out.print(j + " "); \r\n', 0),
(3020, 6, '	 } \r\n', 0),
(3021, 7, '	 System.out.println(""); \r\n', 0),
(3022, 8, ' 	} \r\n', 0),
(3023, 9, ' 	} \r\n', 0),
(3024, 10, '} ', 0),
(3025, 0, 'import java.util.Scanner;\r\n', 0),
(3026, 1, ' class Years{\r\n', 0),
(3027, 2, '   public int getYear(){\r\n', 0),
(3028, 3, '	int year;\r\n', 2),
(3029, 4, '	String enteredYear;\r\n', 2),
(3030, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(3031, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(3032, 7, '	enteredYear = sc.next();\r\n', 0),
(3033, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(3034, 9, '	return year;\r\n', 0),
(3035, 10, '   }\r\n', 0),
(3036, 11, ' }\r\n', 0),
(3037, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3038, 13, ' class Months extends Years{\r\n', 0),
(3039, 14, '   public int getMonth(){\r\n', 0),
(3040, 15, '	int month;\r\n', 2),
(3041, 16, '	String enteredMonthNumber;\r\n', 2),
(3042, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(3043, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(3044, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(3045, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(3046, 21, '	return month;\r\n', 0),
(3047, 22, '   }\r\n', 0),
(3048, 23, ' }\r\n', 0),
(3049, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3050, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(3051, 26, ' static int numDays = 0;\r\n', 4),
(3052, 27, ' public static void main(String[] args) {\r\n', 0),
(3053, 28, '   int year;\r\n', 2),
(3054, 29, '   Months m = new Months();\r\n', 0),
(3055, 30, '   int month = m.getMonth();\r\n', 0),
(3056, 31, '   \r\n', 0),
(3057, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(3058, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(3059, 34, '   }\r\n', 0),
(3060, 35, '   else {\r\n', 0),
(3061, 36, '    switch (month) {\r\n', 0),
(3062, 37, '      case 1:\r\n', 0),
(3063, 38, '      case 3:\r\n', 0),
(3064, 39, '      case 5:\r\n', 0),
(3065, 40, '      case 7:\r\n', 0),
(3066, 41, '      case 8:\r\n', 0),
(3067, 42, '      case 10:\r\n', 0),
(3068, 43, '      case 12:\r\n', 0),
(3069, 44, '        numDays = 31;\r\n', 0),
(3070, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(3071, 46, '        break;\r\n', 0),
(3072, 47, '      case 4:\r\n', 0),
(3073, 48, '      case 6:\r\n', 0),
(3074, 49, '      case 9:\r\n', 0),
(3075, 50, '      case 11:\r\n', 0),
(3076, 51, '       numDays = 30;\r\n', 0),
(3077, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(3078, 53, '       break;\r\n', 0),
(3079, 54, '      case 2:\r\n', 0),
(3080, 55, '       year = m.getYear();\r\n', 0),
(3081, 56, '       if(year < 1) {\r\n', 0),
(3082, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(3083, 58, '       }\r\n', 0),
(3084, 59, '       else{\r\n', 0),
(3085, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(3086, 61, '         numDays = 29;\r\n', 0),
(3087, 62, '		 if(year > 2020){\r\n', 0),
(3088, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(3089, 64, '         }\r\n', 0),
(3090, 65, '         else{\r\n', 0),
(3091, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(3092, 67, '         }\r\n', 0),
(3093, 68, '        }//if at line 61\r\n', 0),
(3094, 69, '        else{\r\n', 0),
(3095, 70, '         numDays = 28;\r\n', 0),
(3096, 71, '         if (year > 2020){\r\n', 0),
(3097, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(3098, 73, '         }\r\n', 0),
(3099, 74, '         else{\r\n', 0),
(3100, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(3101, 76, '         }\r\n', 0),
(3102, 77, '         break;  \r\n', 0),
(3103, 78, '        }//else at line 70\r\n', 0),
(3104, 79, '       }//else at line 60\r\n', 0),
(3105, 80, '    }//switch at line 37\r\n', 0),
(3106, 81, '   }//else at line 36\r\n', 0),
(3107, 82, '  }//method\r\n', 0),
(3108, 83, ' }//class', 0),
(3109, 0, 'class HelloWorld { \r\n', 0),
(3110, 1, '	public static void main(String args[]) \r\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(3111, 2, '	{ \r\n', 0),
(3112, 3, '		System.out.println("Hello World"); \r\n', 0),
(3113, 4, '	} \r\n', 0),
(3114, 5, '} \r\n', 0),
(3115, 0, 'import java.awt.event.*;\n', 0),
(3116, 1, 'import java.awt.*;\n', 0),
(3117, 2, '\n', 0),
(3118, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(3119, 4, '\n', 0),
(3120, 5, '    private int mx, my;\n', 4),
(3121, 6, '    private Dimension size;\n', 8),
(3122, 7, '    private int onaroll;\n', 2),
(3123, 8, '\n', 0),
(3124, 9, '    public void init() {\n', 0),
(3125, 10, '        onaroll = 0;\n', 0),
(3126, 11, '        setSize(500, 500);\n', 0),
(3127, 12, '        size = getSize();\n', 0),
(3128, 13, '        addMouseListener(this);\n', 0),
(3129, 14, '        addMouseMotionListener(this);\n', 0),
(3130, 15, '        addComponentListener(this);\n', 0),
(3131, 16, '    }\n', 0),
(3132, 17, '\n', 0),
(3133, 18, '    public void update(Graphics g) {\n', 0),
(3134, 19, '        Dimension newSize = getSize();\n', 8),
(3135, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(3136, 21, '            g.setColor(getBackground());\n', 0),
(3137, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(3138, 23, '        } else {\n', 0),
(3139, 24, '            size = newSize;\n', 0),
(3140, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(3141, 26, '        } // Calculate new position\n', 0),
(3142, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(3143, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(3144, 29, '        paint(g);\n', 0),
(3145, 30, '    }\n', 0),
(3146, 31, '  \n', 0),
(3147, 32, '    public void paint(Graphics g) {\n', 0),
(3148, 33, '        g.setColor(Color.black);\n', 0),
(3149, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(3150, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(3151, 36, '    }\n', 0),
(3152, 37, '\n', 0),
(3153, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(3154, 39, '\n', 0),
(3155, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(3156, 41, '        e.consume();\n', 0),
(3157, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(3158, 43, '            repaint();\n', 0),
(3159, 44, '        }\n', 0),
(3160, 45, '    }\n', 0),
(3161, 46, '\n', 0),
(3162, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(3163, 48, '        int x = e.getX();\n', 0),
(3164, 49, '        int y = e.getY();\n', 0),
(3165, 50, '        e.consume();\n', 0),
(3166, 51, '        requestFocus();\n', 0),
(3167, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(3168, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(3169, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(3170, 55, '                case 0:\n', 0),
(3171, 56, '                    play(getCodeBase(), \n', 0),
(3172, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(3173, 58, '                    break;\n', 0),
(3174, 59, '                case 1:\n', 0),
(3175, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(3176, 61, '                    break;\n', 0),
(3177, 62, '                case 2:\n', 0),
(3178, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(3179, 64, '                    break;\n', 0),
(3180, 65, '                case 3:\n', 0),
(3181, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(3182, 67, '                    break;\n', 0),
(3183, 68, '                }\n', 0),
(3184, 69, '                onaroll++;\n', 0),
(3185, 70, '                if (onaroll > 5) {\n', 0),
(3186, 72, '                } else {\n', 0),
(3187, 74, '                }\n', 0),
(3188, 75, '            } else {   //first hit\n', 0),
(3189, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(3190, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(3191, 78, '                onaroll = 1;\n', 0),
(3192, 79, '            }\n', 0),
(3193, 80, '        } else {   //miss\n', 0),
(3194, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(3195, 82, '			\n', 0),
(3196, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(3197, 84, '            onaroll = 0;\n', 0),
(3198, 85, '        }\n', 0),
(3199, 86, '        repaint();\n', 0),
(3200, 87, '    }\n', 0),
(3201, 88, '\n', 0),
(3202, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(3203, 90, '\n', 0),
(3204, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(3205, 92, '        repaint();\n', 0),
(3206, 93, '    }\n', 0),
(3207, 94, '\n', 0),
(3208, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(3209, 96, '        repaint();\n', 0),
(3210, 97, '    }\n', 0),
(3211, 98, '\n', 0),
(3212, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(3213, 100, '\n', 0),
(3214, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(3215, 102, ' \n', 0),
(3216, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(3217, 104, ' \n', 0),
(3218, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(3219, 106, '        repaint();\n', 0),
(3220, 107, '    }\n', 0),
(3221, 108, ' \n', 0),
(3222, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(3223, 110, '        repaint();\n', 0),
(3224, 111, '    }\n', 0),
(3225, 112, '  \n', 0),
(3226, 113, '    public void destroy() {\n', 0),
(3227, 114, '        removeMouseListener(this);\n', 0),
(3228, 115, '        removeMouseMotionListener(this);\n', 0),
(3229, 116, '    }\n', 0),
(3230, 117, '\n', 0),
(3231, 118, '    public String getAppletInfo() {\n', 0),
(3232, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(3233, 120, '    }\n', 0),
(3234, 121, '}\n', 0),
(3235, 0, 'import java.awt.event.*;\n', 0),
(3236, 1, 'import java.awt.*;\n', 0),
(3237, 2, '\n', 0),
(3238, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(3239, 4, '\n', 0),
(3240, 5, '    private int mx, my;\n', 4),
(3241, 6, '    private Dimension size;\n', 8),
(3242, 7, '    private int onaroll;\n', 2),
(3243, 8, '\n', 0),
(3244, 9, '    public void init() {\n', 0),
(3245, 10, '        onaroll = 0;\n', 0),
(3246, 11, '        setSize(500, 500);\n', 0),
(3247, 12, '        size = getSize();\n', 0),
(3248, 13, '        addMouseListener(this);\n', 0),
(3249, 14, '        addMouseMotionListener(this);\n', 0),
(3250, 15, '        addComponentListener(this);\n', 0),
(3251, 16, '    }\n', 0),
(3252, 17, '\n', 0),
(3253, 18, '    public void update(Graphics g) {\n', 0),
(3254, 19, '        Dimension newSize = getSize();\n', 8),
(3255, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(3256, 21, '            g.setColor(getBackground());\n', 0),
(3257, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(3258, 23, '        } else {\n', 0),
(3259, 24, '            size = newSize;\n', 0),
(3260, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(3261, 26, '        } // Calculate new position\n', 0),
(3262, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(3263, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(3264, 29, '        paint(g);\n', 0),
(3265, 30, '    }\n', 0),
(3266, 31, '  \n', 0),
(3267, 32, '    public void paint(Graphics g) {\n', 0),
(3268, 33, '        g.setColor(Color.black);\n', 0),
(3269, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(3270, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(3271, 36, '    }\n', 0),
(3272, 37, '\n', 0),
(3273, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(3274, 39, '\n', 0),
(3275, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(3276, 41, '        e.consume();\n', 0),
(3277, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(3278, 43, '            repaint();\n', 0),
(3279, 44, '        }\n', 0),
(3280, 45, '    }\n', 0),
(3281, 46, '\n', 0),
(3282, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(3283, 48, '        int x = e.getX();\n', 0),
(3284, 49, '        int y = e.getY();\n', 0),
(3285, 50, '        e.consume();\n', 0),
(3286, 51, '        requestFocus();\n', 0),
(3287, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(3288, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(3289, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(3290, 55, '                case 0:\n', 0),
(3291, 56, '                    play(getCodeBase(), \n', 0),
(3292, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(3293, 58, '                    break;\n', 0),
(3294, 59, '                case 1:\n', 0),
(3295, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(3296, 61, '                    break;\n', 0),
(3297, 62, '                case 2:\n', 0),
(3298, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(3299, 64, '                    break;\n', 0),
(3300, 65, '                case 3:\n', 0),
(3301, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(3302, 67, '                    break;\n', 0),
(3303, 68, '                }\n', 0),
(3304, 69, '                onaroll++;\n', 0),
(3305, 70, '                if (onaroll > 5) {\n', 0),
(3306, 72, '                } else {\n', 0),
(3307, 74, '                }\n', 0),
(3308, 75, '            } else {   //first hit\n', 0),
(3309, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(3310, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(3311, 78, '                onaroll = 1;\n', 0),
(3312, 79, '            }\n', 0),
(3313, 80, '        } else {   //miss\n', 0),
(3314, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(3315, 82, '			\n', 0),
(3316, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(3317, 84, '            onaroll = 0;\n', 0),
(3318, 85, '        }\n', 0),
(3319, 86, '        repaint();\n', 0),
(3320, 87, '    }\n', 0),
(3321, 88, '\n', 0),
(3322, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(3323, 90, '\n', 0),
(3324, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(3325, 92, '        repaint();\n', 0),
(3326, 93, '    }\n', 0),
(3327, 94, '\n', 0),
(3328, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(3329, 96, '        repaint();\n', 0),
(3330, 97, '    }\n', 0),
(3331, 98, '\n', 0),
(3332, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(3333, 100, '\n', 0),
(3334, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(3335, 102, ' \n', 0),
(3336, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(3337, 104, ' \n', 0),
(3338, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(3339, 106, '        repaint();\n', 0),
(3340, 107, '    }\n', 0),
(3341, 108, ' \n', 0),
(3342, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(3343, 110, '        repaint();\n', 0),
(3344, 111, '    }\n', 0),
(3345, 112, '  \n', 0),
(3346, 113, '    public void destroy() {\n', 0),
(3347, 114, '        removeMouseListener(this);\n', 0),
(3348, 115, '        removeMouseMotionListener(this);\n', 0),
(3349, 116, '    }\n', 0),
(3350, 117, '\n', 0),
(3351, 118, '    public String getAppletInfo() {\n', 0),
(3352, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(3353, 120, '    }\n', 0),
(3354, 121, '}\n', 0),
(3355, 0, 'import java.util.Scanner;\r\n', 0),
(3356, 1, ' class Years{\r\n', 0),
(3357, 2, '   public int getYear(){\r\n', 0),
(3358, 3, '	int year;\r\n', 2),
(3359, 4, '	String enteredYear;\r\n', 2),
(3360, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(3361, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(3362, 7, '	enteredYear = sc.next();\r\n', 0),
(3363, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(3364, 9, '	return year;\r\n', 0),
(3365, 10, '   }\r\n', 0),
(3366, 11, ' }\r\n', 0),
(3367, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3368, 13, ' class Months extends Years{\r\n', 0),
(3369, 14, '   public int getMonth(){\r\n', 0),
(3370, 15, '	int month;\r\n', 2),
(3371, 16, '	String enteredMonthNumber;\r\n', 2),
(3372, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(3373, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(3374, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(3375, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(3376, 21, '	return month;\r\n', 0),
(3377, 22, '   }\r\n', 0),
(3378, 23, ' }\r\n', 0),
(3379, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3380, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(3381, 26, ' static int numDays = 0;\r\n', 4),
(3382, 27, ' public static void main(String[] args) {\r\n', 0),
(3383, 28, '   int year;\r\n', 2),
(3384, 29, '   Months m = new Months();\r\n', 0),
(3385, 30, '   int month = m.getMonth();\r\n', 0),
(3386, 31, '   \r\n', 0),
(3387, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(3388, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(3389, 34, '   }\r\n', 0),
(3390, 35, '   else {\r\n', 0),
(3391, 36, '    switch (month) {\r\n', 0),
(3392, 37, '      case 1:\r\n', 0),
(3393, 38, '      case 3:\r\n', 0),
(3394, 39, '      case 5:\r\n', 0),
(3395, 40, '      case 7:\r\n', 0),
(3396, 41, '      case 8:\r\n', 0),
(3397, 42, '      case 10:\r\n', 0),
(3398, 43, '      case 12:\r\n', 0),
(3399, 44, '        numDays = 31;\r\n', 0),
(3400, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(3401, 46, '        break;\r\n', 0),
(3402, 47, '      case 4:\r\n', 0),
(3403, 48, '      case 6:\r\n', 0),
(3404, 49, '      case 9:\r\n', 0),
(3405, 50, '      case 11:\r\n', 0),
(3406, 51, '       numDays = 30;\r\n', 0),
(3407, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(3408, 53, '       break;\r\n', 0),
(3409, 54, '      case 2:\r\n', 0),
(3410, 55, '       year = m.getYear();\r\n', 0),
(3411, 56, '       if(year < 1) {\r\n', 0),
(3412, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(3413, 58, '       }\r\n', 0),
(3414, 59, '       else{\r\n', 0),
(3415, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(3416, 61, '         numDays = 29;\r\n', 0),
(3417, 62, '		 if(year > 2020){\r\n', 0),
(3418, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(3419, 64, '         }\r\n', 0),
(3420, 65, '         else{\r\n', 0),
(3421, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(3422, 67, '         }\r\n', 0),
(3423, 68, '        }//if at line 61\r\n', 0),
(3424, 69, '        else{\r\n', 0),
(3425, 70, '         numDays = 28;\r\n', 0),
(3426, 71, '         if (year > 2020){\r\n', 0),
(3427, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(3428, 73, '         }\r\n', 0),
(3429, 74, '         else{\r\n', 0),
(3430, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(3431, 76, '         }\r\n', 0),
(3432, 77, '         break;  \r\n', 0),
(3433, 78, '        }//else at line 70\r\n', 0),
(3434, 79, '       }//else at line 60\r\n', 0),
(3435, 80, '    }//switch at line 37\r\n', 0),
(3436, 81, '   }//else at line 36\r\n', 0),
(3437, 82, '  }//method\r\n', 0),
(3438, 83, ' }//class', 0),
(3439, 0, 'public class RecursionExample2 {  \r\n', 0),
(3440, 1, 'static int count=0;  \r\n', 4),
(3441, 2, 'public int p(){  \r\n', 0),
(3442, 3, 'count++;  \r\n', 0),
(3443, 4, 'if(count<=5){  \r\n', 0),
(3444, 5, 'System.out.println("hello "+count);  \r\n', 0),
(3445, 6, 'public int p();  \r\n', 0),
(3446, 7, '}  \r\n', 0),
(3447, 8, '}  \r\n', 0),
(3448, 9, 'public static void main(String[] args) {  \r\n', 0),
(3449, 10, 'p();  \r\n', 0),
(3450, 11, '}  \r\n', 0),
(3451, 12, '}  ', 0),
(3452, 0, 'import java.awt.event.*;\n', 0),
(3453, 1, 'import java.awt.*;\n', 0),
(3454, 2, '\n', 0),
(3455, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(3456, 4, '\n', 0),
(3457, 5, '    private int mx, my;\n', 4),
(3458, 6, '    private Dimension size;\n', 8),
(3459, 7, '    private int onaroll;\n', 2),
(3460, 8, '\n', 0),
(3461, 9, '    public void init() {\n', 0),
(3462, 10, '        onaroll = 0;\n', 0),
(3463, 11, '        setSize(500, 500);\n', 0),
(3464, 12, '        size = getSize();\n', 0),
(3465, 13, '        addMouseListener(this);\n', 0),
(3466, 14, '        addMouseMotionListener(this);\n', 0),
(3467, 15, '        addComponentListener(this);\n', 0),
(3468, 16, '    }\n', 0),
(3469, 17, '\n', 0),
(3470, 18, '    public void update(Graphics g) {\n', 0),
(3471, 19, '        Dimension newSize = getSize();\n', 8),
(3472, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(3473, 21, '            g.setColor(getBackground());\n', 0),
(3474, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(3475, 23, '        } else {\n', 0),
(3476, 24, '            size = newSize;\n', 0),
(3477, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(3478, 26, '        } // Calculate new position\n', 0),
(3479, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(3480, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(3481, 29, '        paint(g);\n', 0),
(3482, 30, '    }\n', 0),
(3483, 31, '  \n', 0),
(3484, 32, '    public void paint(Graphics g) {\n', 0),
(3485, 33, '        g.setColor(Color.black);\n', 0),
(3486, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(3487, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(3488, 36, '    }\n', 0),
(3489, 37, '\n', 0),
(3490, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(3491, 39, '\n', 0),
(3492, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(3493, 41, '        e.consume();\n', 0),
(3494, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(3495, 43, '            repaint();\n', 0),
(3496, 44, '        }\n', 0),
(3497, 45, '    }\n', 0),
(3498, 46, '\n', 0),
(3499, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(3500, 48, '        int x = e.getX();\n', 0),
(3501, 49, '        int y = e.getY();\n', 0),
(3502, 50, '        e.consume();\n', 0),
(3503, 51, '        requestFocus();\n', 0),
(3504, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(3505, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(3506, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(3507, 55, '                case 0:\n', 0),
(3508, 56, '                    play(getCodeBase(), \n', 0),
(3509, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(3510, 58, '                    break;\n', 0),
(3511, 59, '                case 1:\n', 0),
(3512, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(3513, 61, '                    break;\n', 0),
(3514, 62, '                case 2:\n', 0),
(3515, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(3516, 64, '                    break;\n', 0),
(3517, 65, '                case 3:\n', 0),
(3518, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(3519, 67, '                    break;\n', 0),
(3520, 68, '                }\n', 0),
(3521, 69, '                onaroll++;\n', 0),
(3522, 70, '                if (onaroll > 5) {\n', 0),
(3523, 72, '                } else {\n', 0),
(3524, 74, '                }\n', 0),
(3525, 75, '            } else {   //first hit\n', 0),
(3526, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(3527, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(3528, 78, '                onaroll = 1;\n', 0),
(3529, 79, '            }\n', 0),
(3530, 80, '        } else {   //miss\n', 0),
(3531, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(3532, 82, '			\n', 0),
(3533, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(3534, 84, '            onaroll = 0;\n', 0),
(3535, 85, '        }\n', 0),
(3536, 86, '        repaint();\n', 0),
(3537, 87, '    }\n', 0),
(3538, 88, '\n', 0),
(3539, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(3540, 90, '\n', 0),
(3541, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(3542, 92, '        repaint();\n', 0),
(3543, 93, '    }\n', 0),
(3544, 94, '\n', 0),
(3545, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(3546, 96, '        repaint();\n', 0),
(3547, 97, '    }\n', 0),
(3548, 98, '\n', 0),
(3549, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(3550, 100, '\n', 0),
(3551, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(3552, 102, ' \n', 0),
(3553, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(3554, 104, ' \n', 0),
(3555, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(3556, 106, '        repaint();\n', 0),
(3557, 107, '    }\n', 0),
(3558, 108, ' \n', 0),
(3559, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(3560, 110, '        repaint();\n', 0),
(3561, 111, '    }\n', 0),
(3562, 112, '  \n', 0),
(3563, 113, '    public void destroy() {\n', 0),
(3564, 114, '        removeMouseListener(this);\n', 0),
(3565, 115, '        removeMouseMotionListener(this);\n', 0),
(3566, 116, '    }\n', 0),
(3567, 117, '\n', 0),
(3568, 118, '    public String getAppletInfo() {\n', 0),
(3569, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(3570, 120, '    }\n', 0),
(3571, 121, '}\n', 0),
(3572, 0, 'import java.awt.event.*;\n', 0),
(3573, 1, 'import java.awt.*;\n', 0),
(3574, 2, '\n', 0),
(3575, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(3576, 4, '\n', 0),
(3577, 5, '    private int mx, my;\n', 4),
(3578, 6, '    private Dimension size;\n', 8),
(3579, 7, '    private int onaroll;\n', 2),
(3580, 8, '\n', 0),
(3581, 9, '    public void init() {\n', 0),
(3582, 10, '        onaroll = 0;\n', 0),
(3583, 11, '        setSize(500, 500);\n', 0),
(3584, 12, '        size = getSize();\n', 0),
(3585, 13, '        addMouseListener(this);\n', 0),
(3586, 14, '        addMouseMotionListener(this);\n', 0),
(3587, 15, '        addComponentListener(this);\n', 0),
(3588, 16, '    }\n', 0),
(3589, 17, '\n', 0),
(3590, 18, '    public void update(Graphics g) {\n', 0),
(3591, 19, '        Dimension newSize = getSize();\n', 8),
(3592, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(3593, 21, '            g.setColor(getBackground());\n', 0),
(3594, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(3595, 23, '        } else {\n', 0),
(3596, 24, '            size = newSize;\n', 0),
(3597, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(3598, 26, '        } // Calculate new position\n', 0),
(3599, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(3600, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(3601, 29, '        paint(g);\n', 0),
(3602, 30, '    }\n', 0),
(3603, 31, '  \n', 0),
(3604, 32, '    public void paint(Graphics g) {\n', 0),
(3605, 33, '        g.setColor(Color.black);\n', 0),
(3606, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(3607, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(3608, 36, '    }\n', 0),
(3609, 37, '\n', 0),
(3610, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(3611, 39, '\n', 0),
(3612, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(3613, 41, '        e.consume();\n', 0),
(3614, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(3615, 43, '            repaint();\n', 0),
(3616, 44, '        }\n', 0),
(3617, 45, '    }\n', 0),
(3618, 46, '\n', 0),
(3619, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(3620, 48, '        int x = e.getX();\n', 0),
(3621, 49, '        int y = e.getY();\n', 0),
(3622, 50, '        e.consume();\n', 0),
(3623, 51, '        requestFocus();\n', 0),
(3624, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(3625, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(3626, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(3627, 55, '                case 0:\n', 0),
(3628, 56, '                    play(getCodeBase(), \n', 0),
(3629, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(3630, 58, '                    break;\n', 0),
(3631, 59, '                case 1:\n', 0),
(3632, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(3633, 61, '                    break;\n', 0),
(3634, 62, '                case 2:\n', 0),
(3635, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(3636, 64, '                    break;\n', 0),
(3637, 65, '                case 3:\n', 0),
(3638, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(3639, 67, '                    break;\n', 0),
(3640, 68, '                }\n', 0),
(3641, 69, '                onaroll++;\n', 0),
(3642, 70, '                if (onaroll > 5) {\n', 0),
(3643, 72, '                } else {\n', 0),
(3644, 74, '                }\n', 0),
(3645, 75, '            } else {   //first hit\n', 0),
(3646, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(3647, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(3648, 78, '                onaroll = 1;\n', 0),
(3649, 79, '            }\n', 0),
(3650, 80, '        } else {   //miss\n', 0),
(3651, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(3652, 82, '			\n', 0),
(3653, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(3654, 84, '            onaroll = 0;\n', 0),
(3655, 85, '        }\n', 0),
(3656, 86, '        repaint();\n', 0),
(3657, 87, '    }\n', 0),
(3658, 88, '\n', 0),
(3659, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(3660, 90, '\n', 0),
(3661, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(3662, 92, '        repaint();\n', 0),
(3663, 93, '    }\n', 0),
(3664, 94, '\n', 0),
(3665, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(3666, 96, '        repaint();\n', 0),
(3667, 97, '    }\n', 0),
(3668, 98, '\n', 0),
(3669, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(3670, 100, '\n', 0),
(3671, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(3672, 102, ' \n', 0),
(3673, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(3674, 104, ' \n', 0),
(3675, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(3676, 106, '        repaint();\n', 0),
(3677, 107, '    }\n', 0),
(3678, 108, ' \n', 0),
(3679, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(3680, 110, '        repaint();\n', 0),
(3681, 111, '    }\n', 0),
(3682, 112, '  \n', 0),
(3683, 113, '    public void destroy() {\n', 0),
(3684, 114, '        removeMouseListener(this);\n', 0),
(3685, 115, '        removeMouseMotionListener(this);\n', 0),
(3686, 116, '    }\n', 0),
(3687, 117, '\n', 0),
(3688, 118, '    public String getAppletInfo() {\n', 0),
(3689, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(3690, 120, '    }\n', 0),
(3691, 121, '}\n', 0),
(3692, 0, 'import java.util.Scanner;\r\n', 0),
(3693, 1, ' class Years{\r\n', 0),
(3694, 2, '   public int getYear(){\r\n', 0),
(3695, 3, '	int year;\r\n', 2),
(3696, 4, '	String enteredYear;\r\n', 2),
(3697, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(3698, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(3699, 7, '	enteredYear = sc.next();\r\n', 0),
(3700, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(3701, 9, '	return year;\r\n', 0),
(3702, 10, '   }\r\n', 0),
(3703, 11, ' }\r\n', 0),
(3704, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3705, 13, ' class Months extends Years{\r\n', 0),
(3706, 14, '   public int getMonth(){\r\n', 0),
(3707, 15, '	int month;\r\n', 2),
(3708, 16, '	String enteredMonthNumber;\r\n', 2),
(3709, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(3710, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(3711, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(3712, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(3713, 21, '	return month;\r\n', 0),
(3714, 22, '   }\r\n', 0),
(3715, 23, ' }\r\n', 0),
(3716, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3717, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(3718, 26, ' static int numDays = 0;\r\n', 4),
(3719, 27, ' public static void main(String[] args) {\r\n', 0),
(3720, 28, '   int year;\r\n', 2),
(3721, 29, '   Months m = new Months();\r\n', 0),
(3722, 30, '   int month = m.getMonth();\r\n', 0),
(3723, 31, '   \r\n', 0),
(3724, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(3725, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(3726, 34, '   }\r\n', 0),
(3727, 35, '   else {\r\n', 0),
(3728, 36, '    switch (month) {\r\n', 0),
(3729, 37, '      case 1:\r\n', 0),
(3730, 38, '      case 3:\r\n', 0),
(3731, 39, '      case 5:\r\n', 0),
(3732, 40, '      case 7:\r\n', 0),
(3733, 41, '      case 8:\r\n', 0),
(3734, 42, '      case 10:\r\n', 0),
(3735, 43, '      case 12:\r\n', 0),
(3736, 44, '        numDays = 31;\r\n', 0),
(3737, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(3738, 46, '        break;\r\n', 0),
(3739, 47, '      case 4:\r\n', 0),
(3740, 48, '      case 6:\r\n', 0),
(3741, 49, '      case 9:\r\n', 0),
(3742, 50, '      case 11:\r\n', 0),
(3743, 51, '       numDays = 30;\r\n', 0),
(3744, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(3745, 53, '       break;\r\n', 0),
(3746, 54, '      case 2:\r\n', 0),
(3747, 55, '       year = m.getYear();\r\n', 0),
(3748, 56, '       if(year < 1) {\r\n', 0),
(3749, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(3750, 58, '       }\r\n', 0),
(3751, 59, '       else{\r\n', 0),
(3752, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(3753, 61, '         numDays = 29;\r\n', 0),
(3754, 62, '		 if(year > 2020){\r\n', 0),
(3755, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(3756, 64, '         }\r\n', 0),
(3757, 65, '         else{\r\n', 0),
(3758, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(3759, 67, '         }\r\n', 0),
(3760, 68, '        }//if at line 61\r\n', 0),
(3761, 69, '        else{\r\n', 0),
(3762, 70, '         numDays = 28;\r\n', 0),
(3763, 71, '         if (year > 2020){\r\n', 0),
(3764, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(3765, 73, '         }\r\n', 0),
(3766, 74, '         else{\r\n', 0),
(3767, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(3768, 76, '         }\r\n', 0),
(3769, 77, '         break;  \r\n', 0),
(3770, 78, '        }//else at line 70\r\n', 0),
(3771, 79, '       }//else at line 60\r\n', 0),
(3772, 80, '    }//switch at line 37\r\n', 0),
(3773, 81, '   }//else at line 36\r\n', 0),
(3774, 82, '  }//method\r\n', 0),
(3775, 83, ' }//class', 0),
(3776, 0, 'class Pattern{ \r\n', 0),
(3777, 1, 'public static void main(String[] args) { \r\n', 0),
(3778, 2, '	 int rows = 5;\r\n', 2),
(3779, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(3780, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(3781, 5, '	 System.out.print(j + " "); \r\n', 0),
(3782, 6, '	 } \r\n', 0),
(3783, 7, '	 System.out.println(""); \r\n', 0),
(3784, 8, ' 	} \r\n', 0),
(3785, 9, ' 	} \r\n', 0),
(3786, 10, '} ', 0),
(3787, 0, 'import java.util.Scanner;\r\n', 0),
(3788, 1, ' class Years{\r\n', 0),
(3789, 2, '   public int getYear(){\r\n', 0),
(3790, 3, '	int year;\r\n', 2),
(3791, 4, '	String enteredYear;\r\n', 2),
(3792, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(3793, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(3794, 7, '	enteredYear = sc.next();\r\n', 0),
(3795, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(3796, 9, '	return year;\r\n', 0),
(3797, 10, '   }\r\n', 0),
(3798, 11, ' }\r\n', 0),
(3799, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3800, 13, ' class Months extends Years{\r\n', 0),
(3801, 14, '   public int getMonth(){\r\n', 0),
(3802, 15, '	int month;\r\n', 2),
(3803, 16, '	String enteredMonthNumber;\r\n', 2),
(3804, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(3805, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(3806, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(3807, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(3808, 21, '	return month;\r\n', 0),
(3809, 22, '   }\r\n', 0),
(3810, 23, ' }\r\n', 0),
(3811, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(3812, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(3813, 26, ' static int numDays = 0;\r\n', 4),
(3814, 27, ' public static void main(String[] args) {\r\n', 0),
(3815, 28, '   int year;\r\n', 2),
(3816, 29, '   Months m = new Months();\r\n', 0),
(3817, 30, '   int month = m.getMonth();\r\n', 0),
(3818, 31, '   \r\n', 0),
(3819, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(3820, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(3821, 34, '   }\r\n', 0),
(3822, 35, '   else {\r\n', 0),
(3823, 36, '    switch (month) {\r\n', 0),
(3824, 37, '      case 1:\r\n', 0),
(3825, 38, '      case 3:\r\n', 0),
(3826, 39, '      case 5:\r\n', 0),
(3827, 40, '      case 7:\r\n', 0),
(3828, 41, '      case 8:\r\n', 0),
(3829, 42, '      case 10:\r\n', 0),
(3830, 43, '      case 12:\r\n', 0),
(3831, 44, '        numDays = 31;\r\n', 0),
(3832, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(3833, 46, '        break;\r\n', 0),
(3834, 47, '      case 4:\r\n', 0),
(3835, 48, '      case 6:\r\n', 0),
(3836, 49, '      case 9:\r\n', 0),
(3837, 50, '      case 11:\r\n', 0),
(3838, 51, '       numDays = 30;\r\n', 0),
(3839, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(3840, 53, '       break;\r\n', 0),
(3841, 54, '      case 2:\r\n', 0),
(3842, 55, '       year = m.getYear();\r\n', 0),
(3843, 56, '       if(year < 1) {\r\n', 0),
(3844, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(3845, 58, '       }\r\n', 0),
(3846, 59, '       else{\r\n', 0),
(3847, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(3848, 61, '         numDays = 29;\r\n', 0),
(3849, 62, '		 if(year > 2020){\r\n', 0),
(3850, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(3851, 64, '         }\r\n', 0),
(3852, 65, '         else{\r\n', 0),
(3853, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(3854, 67, '         }\r\n', 0),
(3855, 68, '        }//if at line 61\r\n', 0),
(3856, 69, '        else{\r\n', 0),
(3857, 70, '         numDays = 28;\r\n', 0),
(3858, 71, '         if (year > 2020){\r\n', 0),
(3859, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(3860, 73, '         }\r\n', 0),
(3861, 74, '         else{\r\n', 0),
(3862, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(3863, 76, '         }\r\n', 0),
(3864, 77, '         break;  \r\n', 0),
(3865, 78, '        }//else at line 70\r\n', 0),
(3866, 79, '       }//else at line 60\r\n', 0),
(3867, 80, '    }//switch at line 37\r\n', 0),
(3868, 81, '   }//else at line 36\r\n', 0),
(3869, 82, '  }//method\r\n', 0),
(3870, 83, ' }//class', 0),
(3871, 0, 'class HelloWorld { \r\n', 0),
(3872, 1, '	public static void main(String args[]) \r\n', 0),
(3873, 2, '	{ \r\n', 0),
(3874, 3, '		System.out.println("Hello World"); \r\n', 0),
(3875, 4, '	} \r\n', 0),
(3876, 5, '} \r\n', 0),
(3877, 0, 'import java.awt.event.*;\n', 0),
(3878, 1, 'import java.awt.*;\n', 0),
(3879, 2, '\n', 0),
(3880, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(3881, 4, '\n', 0),
(3882, 5, '    private int mx, my;\n', 4),
(3883, 6, '    private Dimension size;\n', 8),
(3884, 7, '    private int onaroll;\n', 2),
(3885, 8, '\n', 0),
(3886, 9, '    public void init() {\n', 0),
(3887, 10, '        onaroll = 0;\n', 0),
(3888, 11, '        setSize(500, 500);\n', 0),
(3889, 12, '        size = getSize();\n', 0),
(3890, 13, '        addMouseListener(this);\n', 0),
(3891, 14, '        addMouseMotionListener(this);\n', 0),
(3892, 15, '        addComponentListener(this);\n', 0),
(3893, 16, '    }\n', 0),
(3894, 17, '\n', 0),
(3895, 18, '    public void update(Graphics g) {\n', 0),
(3896, 19, '        Dimension newSize = getSize();\n', 8),
(3897, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(3898, 21, '            g.setColor(getBackground());\n', 0),
(3899, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(3900, 23, '        } else {\n', 0),
(3901, 24, '            size = newSize;\n', 0),
(3902, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(3903, 26, '        } // Calculate new position\n', 0),
(3904, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(3905, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(3906, 29, '        paint(g);\n', 0),
(3907, 30, '    }\n', 0),
(3908, 31, '  \n', 0),
(3909, 32, '    public void paint(Graphics g) {\n', 0),
(3910, 33, '        g.setColor(Color.black);\n', 0),
(3911, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(3912, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(3913, 36, '    }\n', 0),
(3914, 37, '\n', 0),
(3915, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(3916, 39, '\n', 0),
(3917, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(3918, 41, '        e.consume();\n', 0),
(3919, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(3920, 43, '            repaint();\n', 0),
(3921, 44, '        }\n', 0),
(3922, 45, '    }\n', 0),
(3923, 46, '\n', 0),
(3924, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(3925, 48, '        int x = e.getX();\n', 0),
(3926, 49, '        int y = e.getY();\n', 0),
(3927, 50, '        e.consume();\n', 0),
(3928, 51, '        requestFocus();\n', 0),
(3929, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(3930, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(3931, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(3932, 55, '                case 0:\n', 0),
(3933, 56, '                    play(getCodeBase(), \n', 0),
(3934, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(3935, 58, '                    break;\n', 0),
(3936, 59, '                case 1:\n', 0),
(3937, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(3938, 61, '                    break;\n', 0),
(3939, 62, '                case 2:\n', 0),
(3940, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(3941, 64, '                    break;\n', 0),
(3942, 65, '                case 3:\n', 0),
(3943, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(3944, 67, '                    break;\n', 0),
(3945, 68, '                }\n', 0),
(3946, 69, '                onaroll++;\n', 0),
(3947, 70, '                if (onaroll > 5) {\n', 0),
(3948, 72, '                } else {\n', 0),
(3949, 74, '                }\n', 0),
(3950, 75, '            } else {   //first hit\n', 0),
(3951, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(3952, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(3953, 78, '                onaroll = 1;\n', 0),
(3954, 79, '            }\n', 0),
(3955, 80, '        } else {   //miss\n', 0),
(3956, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(3957, 82, '			\n', 0),
(3958, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(3959, 84, '            onaroll = 0;\n', 0),
(3960, 85, '        }\n', 0),
(3961, 86, '        repaint();\n', 0),
(3962, 87, '    }\n', 0),
(3963, 88, '\n', 0),
(3964, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(3965, 90, '\n', 0),
(3966, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(3967, 92, '        repaint();\n', 0),
(3968, 93, '    }\n', 0),
(3969, 94, '\n', 0),
(3970, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(3971, 96, '        repaint();\n', 0),
(3972, 97, '    }\n', 0),
(3973, 98, '\n', 0),
(3974, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(3975, 100, '\n', 0),
(3976, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(3977, 102, ' \n', 0),
(3978, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(3979, 104, ' \n', 0),
(3980, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(3981, 106, '        repaint();\n', 0),
(3982, 107, '    }\n', 0),
(3983, 108, ' \n', 0),
(3984, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(3985, 110, '        repaint();\n', 0),
(3986, 111, '    }\n', 0),
(3987, 112, '  \n', 0),
(3988, 113, '    public void destroy() {\n', 0),
(3989, 114, '        removeMouseListener(this);\n', 0),
(3990, 115, '        removeMouseMotionListener(this);\n', 0),
(3991, 116, '    }\n', 0),
(3992, 117, '\n', 0),
(3993, 118, '    public String getAppletInfo() {\n', 0),
(3994, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(3995, 120, '    }\n', 0),
(3996, 121, '}\n', 0),
(3997, 0, 'import java.awt.event.*;\n', 0),
(3998, 1, 'import java.awt.*;\n', 0),
(3999, 2, '\n', 0),
(4000, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(4001, 4, '\n', 0),
(4002, 5, '    private int mx, my;\n', 4),
(4003, 6, '    private Dimension size;\n', 8),
(4004, 7, '    private int onaroll;\n', 2),
(4005, 8, '\n', 0),
(4006, 9, '    public void init() {\n', 0),
(4007, 10, '        onaroll = 0;\n', 0),
(4008, 11, '        setSize(500, 500);\n', 0),
(4009, 12, '        size = getSize();\n', 0),
(4010, 13, '        addMouseListener(this);\n', 0),
(4011, 14, '        addMouseMotionListener(this);\n', 0),
(4012, 15, '        addComponentListener(this);\n', 0),
(4013, 16, '    }\n', 0),
(4014, 17, '\n', 0),
(4015, 18, '    public void update(Graphics g) {\n', 0),
(4016, 19, '        Dimension newSize = getSize();\n', 8),
(4017, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(4018, 21, '            g.setColor(getBackground());\n', 0),
(4019, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(4020, 23, '        } else {\n', 0),
(4021, 24, '            size = newSize;\n', 0),
(4022, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(4023, 26, '        } // Calculate new position\n', 0),
(4024, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(4025, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(4026, 29, '        paint(g);\n', 0),
(4027, 30, '    }\n', 0),
(4028, 31, '  \n', 0),
(4029, 32, '    public void paint(Graphics g) {\n', 0),
(4030, 33, '        g.setColor(Color.black);\n', 0),
(4031, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(4032, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(4033, 36, '    }\n', 0),
(4034, 37, '\n', 0),
(4035, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(4036, 39, '\n', 0),
(4037, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(4038, 41, '        e.consume();\n', 0),
(4039, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(4040, 43, '            repaint();\n', 0),
(4041, 44, '        }\n', 0),
(4042, 45, '    }\n', 0),
(4043, 46, '\n', 0),
(4044, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(4045, 48, '        int x = e.getX();\n', 0),
(4046, 49, '        int y = e.getY();\n', 0),
(4047, 50, '        e.consume();\n', 0),
(4048, 51, '        requestFocus();\n', 0),
(4049, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(4050, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(4051, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(4052, 55, '                case 0:\n', 0),
(4053, 56, '                    play(getCodeBase(), \n', 0),
(4054, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(4055, 58, '                    break;\n', 0),
(4056, 59, '                case 1:\n', 0),
(4057, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(4058, 61, '                    break;\n', 0),
(4059, 62, '                case 2:\n', 0),
(4060, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(4061, 64, '                    break;\n', 0),
(4062, 65, '                case 3:\n', 0),
(4063, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(4064, 67, '                    break;\n', 0),
(4065, 68, '                }\n', 0),
(4066, 69, '                onaroll++;\n', 0),
(4067, 70, '                if (onaroll > 5) {\n', 0),
(4068, 72, '                } else {\n', 0),
(4069, 74, '                }\n', 0),
(4070, 75, '            } else {   //first hit\n', 0),
(4071, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(4072, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(4073, 78, '                onaroll = 1;\n', 0),
(4074, 79, '            }\n', 0),
(4075, 80, '        } else {   //miss\n', 0),
(4076, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(4077, 82, '			\n', 0),
(4078, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(4079, 84, '            onaroll = 0;\n', 0),
(4080, 85, '        }\n', 0),
(4081, 86, '        repaint();\n', 0),
(4082, 87, '    }\n', 0),
(4083, 88, '\n', 0),
(4084, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(4085, 90, '\n', 0),
(4086, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(4087, 92, '        repaint();\n', 0),
(4088, 93, '    }\n', 0),
(4089, 94, '\n', 0),
(4090, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(4091, 96, '        repaint();\n', 0),
(4092, 97, '    }\n', 0),
(4093, 98, '\n', 0),
(4094, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(4095, 100, '\n', 0),
(4096, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(4097, 102, ' \n', 0),
(4098, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(4099, 104, ' \n', 0),
(4100, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(4101, 106, '        repaint();\n', 0),
(4102, 107, '    }\n', 0),
(4103, 108, ' \n', 0),
(4104, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(4105, 110, '        repaint();\n', 0),
(4106, 111, '    }\n', 0),
(4107, 112, '  \n', 0),
(4108, 113, '    public void destroy() {\n', 0),
(4109, 114, '        removeMouseListener(this);\n', 0),
(4110, 115, '        removeMouseMotionListener(this);\n', 0),
(4111, 116, '    }\n', 0),
(4112, 117, '\n', 0),
(4113, 118, '    public String getAppletInfo() {\n', 0),
(4114, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(4115, 120, '    }\n', 0),
(4116, 121, '}\n', 0),
(4117, 0, 'import java.util.Scanner;\r\n', 0),
(4118, 1, ' class Years{\r\n', 0),
(4119, 2, '   public int getYear(){\r\n', 0),
(4120, 3, '	int year;\r\n', 2),
(4121, 4, '	String enteredYear;\r\n', 2),
(4122, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(4123, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(4124, 7, '	enteredYear = sc.next();\r\n', 0),
(4125, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(4126, 9, '	return year;\r\n', 0),
(4127, 10, '   }\r\n', 0),
(4128, 11, ' }\r\n', 0),
(4129, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4130, 13, ' class Months extends Years{\r\n', 0),
(4131, 14, '   public int getMonth(){\r\n', 0),
(4132, 15, '	int month;\r\n', 2),
(4133, 16, '	String enteredMonthNumber;\r\n', 2),
(4134, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(4135, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(4136, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(4137, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(4138, 21, '	return month;\r\n', 0),
(4139, 22, '   }\r\n', 0),
(4140, 23, ' }\r\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(4141, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4142, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(4143, 26, ' static int numDays = 0;\r\n', 4),
(4144, 27, ' public static void main(String[] args) {\r\n', 0),
(4145, 28, '   int year;\r\n', 2),
(4146, 29, '   Months m = new Months();\r\n', 0),
(4147, 30, '   int month = m.getMonth();\r\n', 0),
(4148, 31, '   \r\n', 0),
(4149, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(4150, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(4151, 34, '   }\r\n', 0),
(4152, 35, '   else {\r\n', 0),
(4153, 36, '    switch (month) {\r\n', 0),
(4154, 37, '      case 1:\r\n', 0),
(4155, 38, '      case 3:\r\n', 0),
(4156, 39, '      case 5:\r\n', 0),
(4157, 40, '      case 7:\r\n', 0),
(4158, 41, '      case 8:\r\n', 0),
(4159, 42, '      case 10:\r\n', 0),
(4160, 43, '      case 12:\r\n', 0),
(4161, 44, '        numDays = 31;\r\n', 0),
(4162, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(4163, 46, '        break;\r\n', 0),
(4164, 47, '      case 4:\r\n', 0),
(4165, 48, '      case 6:\r\n', 0),
(4166, 49, '      case 9:\r\n', 0),
(4167, 50, '      case 11:\r\n', 0),
(4168, 51, '       numDays = 30;\r\n', 0),
(4169, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(4170, 53, '       break;\r\n', 0),
(4171, 54, '      case 2:\r\n', 0),
(4172, 55, '       year = m.getYear();\r\n', 0),
(4173, 56, '       if(year < 1) {\r\n', 0),
(4174, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(4175, 58, '       }\r\n', 0),
(4176, 59, '       else{\r\n', 0),
(4177, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(4178, 61, '         numDays = 29;\r\n', 0),
(4179, 62, '		 if(year > 2020){\r\n', 0),
(4180, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(4181, 64, '         }\r\n', 0),
(4182, 65, '         else{\r\n', 0),
(4183, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(4184, 67, '         }\r\n', 0),
(4185, 68, '        }//if at line 61\r\n', 0),
(4186, 69, '        else{\r\n', 0),
(4187, 70, '         numDays = 28;\r\n', 0),
(4188, 71, '         if (year > 2020){\r\n', 0),
(4189, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(4190, 73, '         }\r\n', 0),
(4191, 74, '         else{\r\n', 0),
(4192, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(4193, 76, '         }\r\n', 0),
(4194, 77, '         break;  \r\n', 0),
(4195, 78, '        }//else at line 70\r\n', 0),
(4196, 79, '       }//else at line 60\r\n', 0),
(4197, 80, '    }//switch at line 37\r\n', 0),
(4198, 81, '   }//else at line 36\r\n', 0),
(4199, 82, '  }//method\r\n', 0),
(4200, 83, ' }//class', 0),
(4201, 0, 'public class RecursionExample2 {  \r\n', 0),
(4202, 1, 'static int count=0;  \r\n', 4),
(4203, 2, 'public int p(){  \r\n', 0),
(4204, 3, 'count++;  \r\n', 0),
(4205, 4, 'if(count<=5){  \r\n', 0),
(4206, 5, 'System.out.println("hello "+count);  \r\n', 0),
(4207, 6, 'public int p();  \r\n', 0),
(4208, 7, '}  \r\n', 0),
(4209, 8, '}  \r\n', 0),
(4210, 9, 'public static void main(String[] args) {  \r\n', 0),
(4211, 10, 'p();  \r\n', 0),
(4212, 11, '}  \r\n', 0),
(4213, 12, '}  ', 0),
(4214, 0, 'import java.awt.event.*;\n', 0),
(4215, 1, 'import java.awt.*;\n', 0),
(4216, 2, '\n', 0),
(4217, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(4218, 4, '\n', 0),
(4219, 5, '    private int mx, my;\n', 4),
(4220, 6, '    private Dimension size;\n', 8),
(4221, 7, '    private int onaroll;\n', 2),
(4222, 8, '\n', 0),
(4223, 9, '    public void init() {\n', 0),
(4224, 10, '        onaroll = 0;\n', 0),
(4225, 11, '        setSize(500, 500);\n', 0),
(4226, 12, '        size = getSize();\n', 0),
(4227, 13, '        addMouseListener(this);\n', 0),
(4228, 14, '        addMouseMotionListener(this);\n', 0),
(4229, 15, '        addComponentListener(this);\n', 0),
(4230, 16, '    }\n', 0),
(4231, 17, '\n', 0),
(4232, 18, '    public void update(Graphics g) {\n', 0),
(4233, 19, '        Dimension newSize = getSize();\n', 8),
(4234, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(4235, 21, '            g.setColor(getBackground());\n', 0),
(4236, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(4237, 23, '        } else {\n', 0),
(4238, 24, '            size = newSize;\n', 0),
(4239, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(4240, 26, '        } // Calculate new position\n', 0),
(4241, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(4242, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(4243, 29, '        paint(g);\n', 0),
(4244, 30, '    }\n', 0),
(4245, 31, '  \n', 0),
(4246, 32, '    public void paint(Graphics g) {\n', 0),
(4247, 33, '        g.setColor(Color.black);\n', 0),
(4248, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(4249, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(4250, 36, '    }\n', 0),
(4251, 37, '\n', 0),
(4252, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(4253, 39, '\n', 0),
(4254, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(4255, 41, '        e.consume();\n', 0),
(4256, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(4257, 43, '            repaint();\n', 0),
(4258, 44, '        }\n', 0),
(4259, 45, '    }\n', 0),
(4260, 46, '\n', 0),
(4261, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(4262, 48, '        int x = e.getX();\n', 0),
(4263, 49, '        int y = e.getY();\n', 0),
(4264, 50, '        e.consume();\n', 0),
(4265, 51, '        requestFocus();\n', 0),
(4266, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(4267, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(4268, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(4269, 55, '                case 0:\n', 0),
(4270, 56, '                    play(getCodeBase(), \n', 0),
(4271, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(4272, 58, '                    break;\n', 0),
(4273, 59, '                case 1:\n', 0),
(4274, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(4275, 61, '                    break;\n', 0),
(4276, 62, '                case 2:\n', 0),
(4277, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(4278, 64, '                    break;\n', 0),
(4279, 65, '                case 3:\n', 0),
(4280, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(4281, 67, '                    break;\n', 0),
(4282, 68, '                }\n', 0),
(4283, 69, '                onaroll++;\n', 0),
(4284, 70, '                if (onaroll > 5) {\n', 0),
(4285, 72, '                } else {\n', 0),
(4286, 74, '                }\n', 0),
(4287, 75, '            } else {   //first hit\n', 0),
(4288, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(4289, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(4290, 78, '                onaroll = 1;\n', 0),
(4291, 79, '            }\n', 0),
(4292, 80, '        } else {   //miss\n', 0),
(4293, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(4294, 82, '			\n', 0),
(4295, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(4296, 84, '            onaroll = 0;\n', 0),
(4297, 85, '        }\n', 0),
(4298, 86, '        repaint();\n', 0),
(4299, 87, '    }\n', 0),
(4300, 88, '\n', 0),
(4301, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(4302, 90, '\n', 0),
(4303, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(4304, 92, '        repaint();\n', 0),
(4305, 93, '    }\n', 0),
(4306, 94, '\n', 0),
(4307, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(4308, 96, '        repaint();\n', 0),
(4309, 97, '    }\n', 0),
(4310, 98, '\n', 0),
(4311, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(4312, 100, '\n', 0),
(4313, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(4314, 102, ' \n', 0),
(4315, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(4316, 104, ' \n', 0),
(4317, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(4318, 106, '        repaint();\n', 0),
(4319, 107, '    }\n', 0),
(4320, 108, ' \n', 0),
(4321, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(4322, 110, '        repaint();\n', 0),
(4323, 111, '    }\n', 0),
(4324, 112, '  \n', 0),
(4325, 113, '    public void destroy() {\n', 0),
(4326, 114, '        removeMouseListener(this);\n', 0),
(4327, 115, '        removeMouseMotionListener(this);\n', 0),
(4328, 116, '    }\n', 0),
(4329, 117, '\n', 0),
(4330, 118, '    public String getAppletInfo() {\n', 0),
(4331, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(4332, 120, '    }\n', 0),
(4333, 121, '}\n', 0),
(4334, 0, 'import java.awt.event.*;\n', 0),
(4335, 1, 'import java.awt.*;\n', 0),
(4336, 2, '\n', 0),
(4337, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(4338, 4, '\n', 0),
(4339, 5, '    private int mx, my;\n', 4),
(4340, 6, '    private Dimension size;\n', 8),
(4341, 7, '    private int onaroll;\n', 2),
(4342, 8, '\n', 0),
(4343, 9, '    public void init() {\n', 0),
(4344, 10, '        onaroll = 0;\n', 0),
(4345, 11, '        setSize(500, 500);\n', 0),
(4346, 12, '        size = getSize();\n', 0),
(4347, 13, '        addMouseListener(this);\n', 0),
(4348, 14, '        addMouseMotionListener(this);\n', 0),
(4349, 15, '        addComponentListener(this);\n', 0),
(4350, 16, '    }\n', 0),
(4351, 17, '\n', 0),
(4352, 18, '    public void update(Graphics g) {\n', 0),
(4353, 19, '        Dimension newSize = getSize();\n', 8),
(4354, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(4355, 21, '            g.setColor(getBackground());\n', 0),
(4356, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(4357, 23, '        } else {\n', 0),
(4358, 24, '            size = newSize;\n', 0),
(4359, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(4360, 26, '        } // Calculate new position\n', 0),
(4361, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(4362, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(4363, 29, '        paint(g);\n', 0),
(4364, 30, '    }\n', 0),
(4365, 31, '  \n', 0),
(4366, 32, '    public void paint(Graphics g) {\n', 0),
(4367, 33, '        g.setColor(Color.black);\n', 0),
(4368, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(4369, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(4370, 36, '    }\n', 0),
(4371, 37, '\n', 0),
(4372, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(4373, 39, '\n', 0),
(4374, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(4375, 41, '        e.consume();\n', 0),
(4376, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(4377, 43, '            repaint();\n', 0),
(4378, 44, '        }\n', 0),
(4379, 45, '    }\n', 0),
(4380, 46, '\n', 0),
(4381, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(4382, 48, '        int x = e.getX();\n', 0),
(4383, 49, '        int y = e.getY();\n', 0),
(4384, 50, '        e.consume();\n', 0),
(4385, 51, '        requestFocus();\n', 0),
(4386, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(4387, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(4388, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(4389, 55, '                case 0:\n', 0),
(4390, 56, '                    play(getCodeBase(), \n', 0),
(4391, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(4392, 58, '                    break;\n', 0),
(4393, 59, '                case 1:\n', 0),
(4394, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(4395, 61, '                    break;\n', 0),
(4396, 62, '                case 2:\n', 0),
(4397, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(4398, 64, '                    break;\n', 0),
(4399, 65, '                case 3:\n', 0),
(4400, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(4401, 67, '                    break;\n', 0),
(4402, 68, '                }\n', 0),
(4403, 69, '                onaroll++;\n', 0),
(4404, 70, '                if (onaroll > 5) {\n', 0),
(4405, 72, '                } else {\n', 0),
(4406, 74, '                }\n', 0),
(4407, 75, '            } else {   //first hit\n', 0),
(4408, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(4409, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(4410, 78, '                onaroll = 1;\n', 0),
(4411, 79, '            }\n', 0),
(4412, 80, '        } else {   //miss\n', 0),
(4413, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(4414, 82, '			\n', 0),
(4415, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(4416, 84, '            onaroll = 0;\n', 0),
(4417, 85, '        }\n', 0),
(4418, 86, '        repaint();\n', 0),
(4419, 87, '    }\n', 0),
(4420, 88, '\n', 0),
(4421, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(4422, 90, '\n', 0),
(4423, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(4424, 92, '        repaint();\n', 0),
(4425, 93, '    }\n', 0),
(4426, 94, '\n', 0),
(4427, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(4428, 96, '        repaint();\n', 0),
(4429, 97, '    }\n', 0),
(4430, 98, '\n', 0),
(4431, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(4432, 100, '\n', 0),
(4433, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(4434, 102, ' \n', 0),
(4435, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(4436, 104, ' \n', 0),
(4437, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(4438, 106, '        repaint();\n', 0),
(4439, 107, '    }\n', 0),
(4440, 108, ' \n', 0),
(4441, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(4442, 110, '        repaint();\n', 0),
(4443, 111, '    }\n', 0),
(4444, 112, '  \n', 0),
(4445, 113, '    public void destroy() {\n', 0),
(4446, 114, '        removeMouseListener(this);\n', 0),
(4447, 115, '        removeMouseMotionListener(this);\n', 0),
(4448, 116, '    }\n', 0),
(4449, 117, '\n', 0),
(4450, 118, '    public String getAppletInfo() {\n', 0),
(4451, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(4452, 120, '    }\n', 0),
(4453, 121, '}\n', 0),
(4454, 0, 'import java.util.Scanner;\r\n', 0),
(4455, 1, ' class Years{\r\n', 0),
(4456, 2, '   public int getYear(){\r\n', 0),
(4457, 3, '	int year;\r\n', 2),
(4458, 4, '	String enteredYear;\r\n', 2),
(4459, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(4460, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(4461, 7, '	enteredYear = sc.next();\r\n', 0),
(4462, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(4463, 9, '	return year;\r\n', 0),
(4464, 10, '   }\r\n', 0),
(4465, 11, ' }\r\n', 0),
(4466, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4467, 13, ' class Months extends Years{\r\n', 0),
(4468, 14, '   public int getMonth(){\r\n', 0),
(4469, 15, '	int month;\r\n', 2),
(4470, 16, '	String enteredMonthNumber;\r\n', 2),
(4471, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(4472, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(4473, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(4474, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(4475, 21, '	return month;\r\n', 0),
(4476, 22, '   }\r\n', 0),
(4477, 23, ' }\r\n', 0),
(4478, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4479, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(4480, 26, ' static int numDays = 0;\r\n', 4),
(4481, 27, ' public static void main(String[] args) {\r\n', 0),
(4482, 28, '   int year;\r\n', 2),
(4483, 29, '   Months m = new Months();\r\n', 0),
(4484, 30, '   int month = m.getMonth();\r\n', 0),
(4485, 31, '   \r\n', 0),
(4486, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(4487, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(4488, 34, '   }\r\n', 0),
(4489, 35, '   else {\r\n', 0),
(4490, 36, '    switch (month) {\r\n', 0),
(4491, 37, '      case 1:\r\n', 0),
(4492, 38, '      case 3:\r\n', 0),
(4493, 39, '      case 5:\r\n', 0),
(4494, 40, '      case 7:\r\n', 0),
(4495, 41, '      case 8:\r\n', 0),
(4496, 42, '      case 10:\r\n', 0),
(4497, 43, '      case 12:\r\n', 0),
(4498, 44, '        numDays = 31;\r\n', 0),
(4499, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(4500, 46, '        break;\r\n', 0),
(4501, 47, '      case 4:\r\n', 0),
(4502, 48, '      case 6:\r\n', 0),
(4503, 49, '      case 9:\r\n', 0),
(4504, 50, '      case 11:\r\n', 0),
(4505, 51, '       numDays = 30;\r\n', 0),
(4506, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(4507, 53, '       break;\r\n', 0),
(4508, 54, '      case 2:\r\n', 0),
(4509, 55, '       year = m.getYear();\r\n', 0),
(4510, 56, '       if(year < 1) {\r\n', 0),
(4511, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(4512, 58, '       }\r\n', 0),
(4513, 59, '       else{\r\n', 0),
(4514, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(4515, 61, '         numDays = 29;\r\n', 0),
(4516, 62, '		 if(year > 2020){\r\n', 0),
(4517, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(4518, 64, '         }\r\n', 0),
(4519, 65, '         else{\r\n', 0),
(4520, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(4521, 67, '         }\r\n', 0),
(4522, 68, '        }//if at line 61\r\n', 0),
(4523, 69, '        else{\r\n', 0),
(4524, 70, '         numDays = 28;\r\n', 0),
(4525, 71, '         if (year > 2020){\r\n', 0),
(4526, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(4527, 73, '         }\r\n', 0),
(4528, 74, '         else{\r\n', 0),
(4529, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(4530, 76, '         }\r\n', 0),
(4531, 77, '         break;  \r\n', 0),
(4532, 78, '        }//else at line 70\r\n', 0),
(4533, 79, '       }//else at line 60\r\n', 0),
(4534, 80, '    }//switch at line 37\r\n', 0),
(4535, 81, '   }//else at line 36\r\n', 0),
(4536, 82, '  }//method\r\n', 0),
(4537, 83, ' }//class', 0),
(4538, 0, 'class Pattern{ \r\n', 0),
(4539, 1, 'public static void main(String[] args) { \r\n', 0),
(4540, 2, '	 int rows = 5;\r\n', 2),
(4541, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(4542, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(4543, 5, '	 System.out.print(j + " "); \r\n', 0),
(4544, 6, '	 } \r\n', 0),
(4545, 7, '	 System.out.println(""); \r\n', 0),
(4546, 8, ' 	} \r\n', 0),
(4547, 9, ' 	} \r\n', 0),
(4548, 10, '} ', 0),
(4549, 0, 'import java.util.Scanner;\r\n', 0),
(4550, 1, ' class Years{\r\n', 0),
(4551, 2, '   public int getYear(){\r\n', 0),
(4552, 3, '	int year;\r\n', 2),
(4553, 4, '	String enteredYear;\r\n', 2),
(4554, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(4555, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(4556, 7, '	enteredYear = sc.next();\r\n', 0),
(4557, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(4558, 9, '	return year;\r\n', 0),
(4559, 10, '   }\r\n', 0),
(4560, 11, ' }\r\n', 0),
(4561, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4562, 13, ' class Months extends Years{\r\n', 0),
(4563, 14, '   public int getMonth(){\r\n', 0),
(4564, 15, '	int month;\r\n', 2),
(4565, 16, '	String enteredMonthNumber;\r\n', 2),
(4566, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(4567, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(4568, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(4569, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(4570, 21, '	return month;\r\n', 0),
(4571, 22, '   }\r\n', 0),
(4572, 23, ' }\r\n', 0),
(4573, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4574, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(4575, 26, ' static int numDays = 0;\r\n', 4),
(4576, 27, ' public static void main(String[] args) {\r\n', 0),
(4577, 28, '   int year;\r\n', 2),
(4578, 29, '   Months m = new Months();\r\n', 0),
(4579, 30, '   int month = m.getMonth();\r\n', 0),
(4580, 31, '   \r\n', 0),
(4581, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(4582, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(4583, 34, '   }\r\n', 0),
(4584, 35, '   else {\r\n', 0),
(4585, 36, '    switch (month) {\r\n', 0),
(4586, 37, '      case 1:\r\n', 0),
(4587, 38, '      case 3:\r\n', 0),
(4588, 39, '      case 5:\r\n', 0),
(4589, 40, '      case 7:\r\n', 0),
(4590, 41, '      case 8:\r\n', 0),
(4591, 42, '      case 10:\r\n', 0),
(4592, 43, '      case 12:\r\n', 0),
(4593, 44, '        numDays = 31;\r\n', 0),
(4594, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(4595, 46, '        break;\r\n', 0),
(4596, 47, '      case 4:\r\n', 0),
(4597, 48, '      case 6:\r\n', 0),
(4598, 49, '      case 9:\r\n', 0),
(4599, 50, '      case 11:\r\n', 0),
(4600, 51, '       numDays = 30;\r\n', 0),
(4601, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(4602, 53, '       break;\r\n', 0),
(4603, 54, '      case 2:\r\n', 0),
(4604, 55, '       year = m.getYear();\r\n', 0),
(4605, 56, '       if(year < 1) {\r\n', 0),
(4606, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(4607, 58, '       }\r\n', 0),
(4608, 59, '       else{\r\n', 0),
(4609, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(4610, 61, '         numDays = 29;\r\n', 0),
(4611, 62, '		 if(year > 2020){\r\n', 0),
(4612, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(4613, 64, '         }\r\n', 0),
(4614, 65, '         else{\r\n', 0),
(4615, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(4616, 67, '         }\r\n', 0),
(4617, 68, '        }//if at line 61\r\n', 0),
(4618, 69, '        else{\r\n', 0),
(4619, 70, '         numDays = 28;\r\n', 0),
(4620, 71, '         if (year > 2020){\r\n', 0),
(4621, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(4622, 73, '         }\r\n', 0),
(4623, 74, '         else{\r\n', 0),
(4624, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(4625, 76, '         }\r\n', 0),
(4626, 77, '         break;  \r\n', 0),
(4627, 78, '        }//else at line 70\r\n', 0),
(4628, 79, '       }//else at line 60\r\n', 0),
(4629, 80, '    }//switch at line 37\r\n', 0),
(4630, 81, '   }//else at line 36\r\n', 0),
(4631, 82, '  }//method\r\n', 0),
(4632, 83, ' }//class', 0),
(4633, 0, 'class HelloWorld { \r\n', 0),
(4634, 1, '	public static void main(String args[]) \r\n', 0),
(4635, 2, '	{ \r\n', 0),
(4636, 3, '		System.out.println("Hello World"); \r\n', 0),
(4637, 4, '	} \r\n', 0),
(4638, 5, '} \r\n', 0),
(4639, 0, 'import java.awt.event.*;\n', 0),
(4640, 1, 'import java.awt.*;\n', 0),
(4641, 2, '\n', 0),
(4642, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(4643, 4, '\n', 0),
(4644, 5, '    private int mx, my;\n', 4),
(4645, 6, '    private Dimension size;\n', 8),
(4646, 7, '    private int onaroll;\n', 2),
(4647, 8, '\n', 0),
(4648, 9, '    public void init() {\n', 0),
(4649, 10, '        onaroll = 0;\n', 0),
(4650, 11, '        setSize(500, 500);\n', 0),
(4651, 12, '        size = getSize();\n', 0),
(4652, 13, '        addMouseListener(this);\n', 0),
(4653, 14, '        addMouseMotionListener(this);\n', 0),
(4654, 15, '        addComponentListener(this);\n', 0),
(4655, 16, '    }\n', 0),
(4656, 17, '\n', 0),
(4657, 18, '    public void update(Graphics g) {\n', 0),
(4658, 19, '        Dimension newSize = getSize();\n', 8),
(4659, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(4660, 21, '            g.setColor(getBackground());\n', 0),
(4661, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(4662, 23, '        } else {\n', 0),
(4663, 24, '            size = newSize;\n', 0),
(4664, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(4665, 26, '        } // Calculate new position\n', 0),
(4666, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(4667, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(4668, 29, '        paint(g);\n', 0),
(4669, 30, '    }\n', 0),
(4670, 31, '  \n', 0),
(4671, 32, '    public void paint(Graphics g) {\n', 0),
(4672, 33, '        g.setColor(Color.black);\n', 0),
(4673, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(4674, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(4675, 36, '    }\n', 0),
(4676, 37, '\n', 0),
(4677, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(4678, 39, '\n', 0),
(4679, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(4680, 41, '        e.consume();\n', 0),
(4681, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(4682, 43, '            repaint();\n', 0),
(4683, 44, '        }\n', 0),
(4684, 45, '    }\n', 0),
(4685, 46, '\n', 0),
(4686, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(4687, 48, '        int x = e.getX();\n', 0),
(4688, 49, '        int y = e.getY();\n', 0),
(4689, 50, '        e.consume();\n', 0),
(4690, 51, '        requestFocus();\n', 0),
(4691, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(4692, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(4693, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(4694, 55, '                case 0:\n', 0),
(4695, 56, '                    play(getCodeBase(), \n', 0),
(4696, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(4697, 58, '                    break;\n', 0),
(4698, 59, '                case 1:\n', 0),
(4699, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(4700, 61, '                    break;\n', 0),
(4701, 62, '                case 2:\n', 0),
(4702, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(4703, 64, '                    break;\n', 0),
(4704, 65, '                case 3:\n', 0),
(4705, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(4706, 67, '                    break;\n', 0),
(4707, 68, '                }\n', 0),
(4708, 69, '                onaroll++;\n', 0),
(4709, 70, '                if (onaroll > 5) {\n', 0),
(4710, 72, '                } else {\n', 0),
(4711, 74, '                }\n', 0),
(4712, 75, '            } else {   //first hit\n', 0),
(4713, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(4714, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(4715, 78, '                onaroll = 1;\n', 0),
(4716, 79, '            }\n', 0),
(4717, 80, '        } else {   //miss\n', 0),
(4718, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(4719, 82, '			\n', 0),
(4720, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(4721, 84, '            onaroll = 0;\n', 0),
(4722, 85, '        }\n', 0),
(4723, 86, '        repaint();\n', 0),
(4724, 87, '    }\n', 0),
(4725, 88, '\n', 0),
(4726, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(4727, 90, '\n', 0),
(4728, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(4729, 92, '        repaint();\n', 0),
(4730, 93, '    }\n', 0),
(4731, 94, '\n', 0),
(4732, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(4733, 96, '        repaint();\n', 0),
(4734, 97, '    }\n', 0),
(4735, 98, '\n', 0),
(4736, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(4737, 100, '\n', 0),
(4738, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(4739, 102, ' \n', 0),
(4740, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(4741, 104, ' \n', 0),
(4742, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(4743, 106, '        repaint();\n', 0),
(4744, 107, '    }\n', 0),
(4745, 108, ' \n', 0),
(4746, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(4747, 110, '        repaint();\n', 0),
(4748, 111, '    }\n', 0),
(4749, 112, '  \n', 0),
(4750, 113, '    public void destroy() {\n', 0),
(4751, 114, '        removeMouseListener(this);\n', 0),
(4752, 115, '        removeMouseMotionListener(this);\n', 0),
(4753, 116, '    }\n', 0),
(4754, 117, '\n', 0),
(4755, 118, '    public String getAppletInfo() {\n', 0),
(4756, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(4757, 120, '    }\n', 0),
(4758, 121, '}\n', 0),
(4759, 0, 'import java.awt.event.*;\n', 0),
(4760, 1, 'import java.awt.*;\n', 0),
(4761, 2, '\n', 0),
(4762, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(4763, 4, '\n', 0),
(4764, 5, '    private int mx, my;\n', 4),
(4765, 6, '    private Dimension size;\n', 8),
(4766, 7, '    private int onaroll;\n', 2),
(4767, 8, '\n', 0),
(4768, 9, '    public void init() {\n', 0),
(4769, 10, '        onaroll = 0;\n', 0),
(4770, 11, '        setSize(500, 500);\n', 0),
(4771, 12, '        size = getSize();\n', 0),
(4772, 13, '        addMouseListener(this);\n', 0),
(4773, 14, '        addMouseMotionListener(this);\n', 0),
(4774, 15, '        addComponentListener(this);\n', 0),
(4775, 16, '    }\n', 0),
(4776, 17, '\n', 0),
(4777, 18, '    public void update(Graphics g) {\n', 0),
(4778, 19, '        Dimension newSize = getSize();\n', 8),
(4779, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(4780, 21, '            g.setColor(getBackground());\n', 0),
(4781, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(4782, 23, '        } else {\n', 0),
(4783, 24, '            size = newSize;\n', 0),
(4784, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(4785, 26, '        } // Calculate new position\n', 0),
(4786, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(4787, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(4788, 29, '        paint(g);\n', 0),
(4789, 30, '    }\n', 0),
(4790, 31, '  \n', 0),
(4791, 32, '    public void paint(Graphics g) {\n', 0),
(4792, 33, '        g.setColor(Color.black);\n', 0),
(4793, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(4794, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(4795, 36, '    }\n', 0),
(4796, 37, '\n', 0),
(4797, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(4798, 39, '\n', 0),
(4799, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(4800, 41, '        e.consume();\n', 0),
(4801, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(4802, 43, '            repaint();\n', 0),
(4803, 44, '        }\n', 0),
(4804, 45, '    }\n', 0),
(4805, 46, '\n', 0),
(4806, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(4807, 48, '        int x = e.getX();\n', 0),
(4808, 49, '        int y = e.getY();\n', 0),
(4809, 50, '        e.consume();\n', 0),
(4810, 51, '        requestFocus();\n', 0),
(4811, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(4812, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(4813, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(4814, 55, '                case 0:\n', 0),
(4815, 56, '                    play(getCodeBase(), \n', 0),
(4816, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(4817, 58, '                    break;\n', 0),
(4818, 59, '                case 1:\n', 0),
(4819, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(4820, 61, '                    break;\n', 0),
(4821, 62, '                case 2:\n', 0),
(4822, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(4823, 64, '                    break;\n', 0),
(4824, 65, '                case 3:\n', 0),
(4825, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(4826, 67, '                    break;\n', 0),
(4827, 68, '                }\n', 0),
(4828, 69, '                onaroll++;\n', 0),
(4829, 70, '                if (onaroll > 5) {\n', 0),
(4830, 72, '                } else {\n', 0),
(4831, 74, '                }\n', 0),
(4832, 75, '            } else {   //first hit\n', 0),
(4833, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(4834, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(4835, 78, '                onaroll = 1;\n', 0),
(4836, 79, '            }\n', 0),
(4837, 80, '        } else {   //miss\n', 0),
(4838, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(4839, 82, '			\n', 0),
(4840, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(4841, 84, '            onaroll = 0;\n', 0),
(4842, 85, '        }\n', 0),
(4843, 86, '        repaint();\n', 0),
(4844, 87, '    }\n', 0),
(4845, 88, '\n', 0),
(4846, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(4847, 90, '\n', 0),
(4848, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(4849, 92, '        repaint();\n', 0),
(4850, 93, '    }\n', 0),
(4851, 94, '\n', 0),
(4852, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(4853, 96, '        repaint();\n', 0),
(4854, 97, '    }\n', 0),
(4855, 98, '\n', 0),
(4856, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(4857, 100, '\n', 0),
(4858, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(4859, 102, ' \n', 0),
(4860, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(4861, 104, ' \n', 0),
(4862, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(4863, 106, '        repaint();\n', 0),
(4864, 107, '    }\n', 0),
(4865, 108, ' \n', 0),
(4866, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(4867, 110, '        repaint();\n', 0),
(4868, 111, '    }\n', 0),
(4869, 112, '  \n', 0),
(4870, 113, '    public void destroy() {\n', 0),
(4871, 114, '        removeMouseListener(this);\n', 0),
(4872, 115, '        removeMouseMotionListener(this);\n', 0),
(4873, 116, '    }\n', 0),
(4874, 117, '\n', 0),
(4875, 118, '    public String getAppletInfo() {\n', 0),
(4876, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(4877, 120, '    }\n', 0),
(4878, 121, '}\n', 0),
(4879, 0, 'import java.util.Scanner;\r\n', 0),
(4880, 1, ' class Years{\r\n', 0),
(4881, 2, '   public int getYear(){\r\n', 0),
(4882, 3, '	int year;\r\n', 2),
(4883, 4, '	String enteredYear;\r\n', 2),
(4884, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(4885, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(4886, 7, '	enteredYear = sc.next();\r\n', 0),
(4887, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(4888, 9, '	return year;\r\n', 0),
(4889, 10, '   }\r\n', 0),
(4890, 11, ' }\r\n', 0),
(4891, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4892, 13, ' class Months extends Years{\r\n', 0),
(4893, 14, '   public int getMonth(){\r\n', 0),
(4894, 15, '	int month;\r\n', 2),
(4895, 16, '	String enteredMonthNumber;\r\n', 2),
(4896, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(4897, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(4898, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(4899, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(4900, 21, '	return month;\r\n', 0),
(4901, 22, '   }\r\n', 0),
(4902, 23, ' }\r\n', 0),
(4903, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(4904, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(4905, 26, ' static int numDays = 0;\r\n', 4),
(4906, 27, ' public static void main(String[] args) {\r\n', 0),
(4907, 28, '   int year;\r\n', 2),
(4908, 29, '   Months m = new Months();\r\n', 0),
(4909, 30, '   int month = m.getMonth();\r\n', 0),
(4910, 31, '   \r\n', 0),
(4911, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(4912, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(4913, 34, '   }\r\n', 0),
(4914, 35, '   else {\r\n', 0),
(4915, 36, '    switch (month) {\r\n', 0),
(4916, 37, '      case 1:\r\n', 0),
(4917, 38, '      case 3:\r\n', 0),
(4918, 39, '      case 5:\r\n', 0),
(4919, 40, '      case 7:\r\n', 0),
(4920, 41, '      case 8:\r\n', 0),
(4921, 42, '      case 10:\r\n', 0),
(4922, 43, '      case 12:\r\n', 0),
(4923, 44, '        numDays = 31;\r\n', 0),
(4924, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(4925, 46, '        break;\r\n', 0),
(4926, 47, '      case 4:\r\n', 0),
(4927, 48, '      case 6:\r\n', 0),
(4928, 49, '      case 9:\r\n', 0),
(4929, 50, '      case 11:\r\n', 0),
(4930, 51, '       numDays = 30;\r\n', 0),
(4931, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(4932, 53, '       break;\r\n', 0),
(4933, 54, '      case 2:\r\n', 0),
(4934, 55, '       year = m.getYear();\r\n', 0),
(4935, 56, '       if(year < 1) {\r\n', 0),
(4936, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(4937, 58, '       }\r\n', 0),
(4938, 59, '       else{\r\n', 0),
(4939, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(4940, 61, '         numDays = 29;\r\n', 0),
(4941, 62, '		 if(year > 2020){\r\n', 0),
(4942, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(4943, 64, '         }\r\n', 0),
(4944, 65, '         else{\r\n', 0),
(4945, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(4946, 67, '         }\r\n', 0),
(4947, 68, '        }//if at line 61\r\n', 0),
(4948, 69, '        else{\r\n', 0),
(4949, 70, '         numDays = 28;\r\n', 0),
(4950, 71, '         if (year > 2020){\r\n', 0),
(4951, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(4952, 73, '         }\r\n', 0),
(4953, 74, '         else{\r\n', 0),
(4954, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(4955, 76, '         }\r\n', 0),
(4956, 77, '         break;  \r\n', 0),
(4957, 78, '        }//else at line 70\r\n', 0),
(4958, 79, '       }//else at line 60\r\n', 0),
(4959, 80, '    }//switch at line 37\r\n', 0),
(4960, 81, '   }//else at line 36\r\n', 0),
(4961, 82, '  }//method\r\n', 0),
(4962, 83, ' }//class', 0),
(4963, 0, 'public class RecursionExample2 {  \r\n', 0),
(4964, 1, 'static int count=0;  \r\n', 4),
(4965, 2, 'public int p(){  \r\n', 0),
(4966, 3, 'count++;  \r\n', 0),
(4967, 4, 'if(count<=5){  \r\n', 0),
(4968, 5, 'System.out.println("hello "+count);  \r\n', 0),
(4969, 6, 'public int p();  \r\n', 0),
(4970, 7, '}  \r\n', 0),
(4971, 8, '}  \r\n', 0),
(4972, 9, 'public static void main(String[] args) {  \r\n', 0),
(4973, 10, 'p();  \r\n', 0),
(4974, 11, '}  \r\n', 0),
(4975, 12, '}  ', 0),
(4976, 0, 'import java.awt.event.*;\n', 0),
(4977, 1, 'import java.awt.*;\n', 0),
(4978, 2, '\n', 0),
(4979, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(4980, 4, '\n', 0),
(4981, 5, '    private int mx, my;\n', 4),
(4982, 6, '    private Dimension size;\n', 8),
(4983, 7, '    private int onaroll;\n', 2),
(4984, 8, '\n', 0),
(4985, 9, '    public void init() {\n', 0),
(4986, 10, '        onaroll = 0;\n', 0),
(4987, 11, '        setSize(500, 500);\n', 0),
(4988, 12, '        size = getSize();\n', 0),
(4989, 13, '        addMouseListener(this);\n', 0),
(4990, 14, '        addMouseMotionListener(this);\n', 0),
(4991, 15, '        addComponentListener(this);\n', 0),
(4992, 16, '    }\n', 0),
(4993, 17, '\n', 0),
(4994, 18, '    public void update(Graphics g) {\n', 0),
(4995, 19, '        Dimension newSize = getSize();\n', 8),
(4996, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(4997, 21, '            g.setColor(getBackground());\n', 0),
(4998, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(4999, 23, '        } else {\n', 0),
(5000, 24, '            size = newSize;\n', 0),
(5001, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(5002, 26, '        } // Calculate new position\n', 0),
(5003, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(5004, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(5005, 29, '        paint(g);\n', 0),
(5006, 30, '    }\n', 0),
(5007, 31, '  \n', 0),
(5008, 32, '    public void paint(Graphics g) {\n', 0),
(5009, 33, '        g.setColor(Color.black);\n', 0),
(5010, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(5011, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(5012, 36, '    }\n', 0),
(5013, 37, '\n', 0),
(5014, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(5015, 39, '\n', 0),
(5016, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(5017, 41, '        e.consume();\n', 0),
(5018, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(5019, 43, '            repaint();\n', 0),
(5020, 44, '        }\n', 0),
(5021, 45, '    }\n', 0),
(5022, 46, '\n', 0),
(5023, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(5024, 48, '        int x = e.getX();\n', 0),
(5025, 49, '        int y = e.getY();\n', 0),
(5026, 50, '        e.consume();\n', 0),
(5027, 51, '        requestFocus();\n', 0),
(5028, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(5029, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(5030, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(5031, 55, '                case 0:\n', 0),
(5032, 56, '                    play(getCodeBase(), \n', 0),
(5033, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(5034, 58, '                    break;\n', 0),
(5035, 59, '                case 1:\n', 0),
(5036, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(5037, 61, '                    break;\n', 0),
(5038, 62, '                case 2:\n', 0),
(5039, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(5040, 64, '                    break;\n', 0),
(5041, 65, '                case 3:\n', 0),
(5042, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(5043, 67, '                    break;\n', 0),
(5044, 68, '                }\n', 0),
(5045, 69, '                onaroll++;\n', 0),
(5046, 70, '                if (onaroll > 5) {\n', 0),
(5047, 72, '                } else {\n', 0),
(5048, 74, '                }\n', 0),
(5049, 75, '            } else {   //first hit\n', 0),
(5050, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(5051, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(5052, 78, '                onaroll = 1;\n', 0),
(5053, 79, '            }\n', 0),
(5054, 80, '        } else {   //miss\n', 0),
(5055, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(5056, 82, '			\n', 0),
(5057, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(5058, 84, '            onaroll = 0;\n', 0),
(5059, 85, '        }\n', 0),
(5060, 86, '        repaint();\n', 0),
(5061, 87, '    }\n', 0),
(5062, 88, '\n', 0),
(5063, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(5064, 90, '\n', 0),
(5065, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(5066, 92, '        repaint();\n', 0),
(5067, 93, '    }\n', 0),
(5068, 94, '\n', 0),
(5069, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(5070, 96, '        repaint();\n', 0),
(5071, 97, '    }\n', 0),
(5072, 98, '\n', 0),
(5073, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(5074, 100, '\n', 0),
(5075, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(5076, 102, ' \n', 0),
(5077, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(5078, 104, ' \n', 0),
(5079, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(5080, 106, '        repaint();\n', 0),
(5081, 107, '    }\n', 0),
(5082, 108, ' \n', 0),
(5083, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(5084, 110, '        repaint();\n', 0),
(5085, 111, '    }\n', 0),
(5086, 112, '  \n', 0),
(5087, 113, '    public void destroy() {\n', 0),
(5088, 114, '        removeMouseListener(this);\n', 0),
(5089, 115, '        removeMouseMotionListener(this);\n', 0),
(5090, 116, '    }\n', 0),
(5091, 117, '\n', 0),
(5092, 118, '    public String getAppletInfo() {\n', 0),
(5093, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(5094, 120, '    }\n', 0),
(5095, 121, '}\n', 0),
(5096, 0, 'import java.awt.event.*;\n', 0),
(5097, 1, 'import java.awt.*;\n', 0),
(5098, 2, '\n', 0),
(5099, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(5100, 4, '\n', 0),
(5101, 5, '    private int mx, my;\n', 4),
(5102, 6, '    private Dimension size;\n', 8),
(5103, 7, '    private int onaroll;\n', 2),
(5104, 8, '\n', 0),
(5105, 9, '    public void init() {\n', 0),
(5106, 10, '        onaroll = 0;\n', 0),
(5107, 11, '        setSize(500, 500);\n', 0),
(5108, 12, '        size = getSize();\n', 0),
(5109, 13, '        addMouseListener(this);\n', 0),
(5110, 14, '        addMouseMotionListener(this);\n', 0),
(5111, 15, '        addComponentListener(this);\n', 0),
(5112, 16, '    }\n', 0),
(5113, 17, '\n', 0),
(5114, 18, '    public void update(Graphics g) {\n', 0),
(5115, 19, '        Dimension newSize = getSize();\n', 8),
(5116, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(5117, 21, '            g.setColor(getBackground());\n', 0),
(5118, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(5119, 23, '        } else {\n', 0),
(5120, 24, '            size = newSize;\n', 0),
(5121, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(5122, 26, '        } // Calculate new position\n', 0),
(5123, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(5124, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(5125, 29, '        paint(g);\n', 0),
(5126, 30, '    }\n', 0),
(5127, 31, '  \n', 0),
(5128, 32, '    public void paint(Graphics g) {\n', 0),
(5129, 33, '        g.setColor(Color.black);\n', 0),
(5130, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(5131, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(5132, 36, '    }\n', 0),
(5133, 37, '\n', 0),
(5134, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(5135, 39, '\n', 0),
(5136, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(5137, 41, '        e.consume();\n', 0),
(5138, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(5139, 43, '            repaint();\n', 0),
(5140, 44, '        }\n', 0),
(5141, 45, '    }\n', 0),
(5142, 46, '\n', 0),
(5143, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(5144, 48, '        int x = e.getX();\n', 0),
(5145, 49, '        int y = e.getY();\n', 0),
(5146, 50, '        e.consume();\n', 0),
(5147, 51, '        requestFocus();\n', 0),
(5148, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(5149, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(5150, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(5151, 55, '                case 0:\n', 0),
(5152, 56, '                    play(getCodeBase(), \n', 0),
(5153, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(5154, 58, '                    break;\n', 0),
(5155, 59, '                case 1:\n', 0),
(5156, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(5157, 61, '                    break;\n', 0),
(5158, 62, '                case 2:\n', 0),
(5159, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(5160, 64, '                    break;\n', 0),
(5161, 65, '                case 3:\n', 0),
(5162, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(5163, 67, '                    break;\n', 0),
(5164, 68, '                }\n', 0),
(5165, 69, '                onaroll++;\n', 0),
(5166, 70, '                if (onaroll > 5) {\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(5167, 72, '                } else {\n', 0),
(5168, 74, '                }\n', 0),
(5169, 75, '            } else {   //first hit\n', 0),
(5170, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(5171, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(5172, 78, '                onaroll = 1;\n', 0),
(5173, 79, '            }\n', 0),
(5174, 80, '        } else {   //miss\n', 0),
(5175, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(5176, 82, '			\n', 0),
(5177, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(5178, 84, '            onaroll = 0;\n', 0),
(5179, 85, '        }\n', 0),
(5180, 86, '        repaint();\n', 0),
(5181, 87, '    }\n', 0),
(5182, 88, '\n', 0),
(5183, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(5184, 90, '\n', 0),
(5185, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(5186, 92, '        repaint();\n', 0),
(5187, 93, '    }\n', 0),
(5188, 94, '\n', 0),
(5189, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(5190, 96, '        repaint();\n', 0),
(5191, 97, '    }\n', 0),
(5192, 98, '\n', 0),
(5193, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(5194, 100, '\n', 0),
(5195, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(5196, 102, ' \n', 0),
(5197, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(5198, 104, ' \n', 0),
(5199, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(5200, 106, '        repaint();\n', 0),
(5201, 107, '    }\n', 0),
(5202, 108, ' \n', 0),
(5203, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(5204, 110, '        repaint();\n', 0),
(5205, 111, '    }\n', 0),
(5206, 112, '  \n', 0),
(5207, 113, '    public void destroy() {\n', 0),
(5208, 114, '        removeMouseListener(this);\n', 0),
(5209, 115, '        removeMouseMotionListener(this);\n', 0),
(5210, 116, '    }\n', 0),
(5211, 117, '\n', 0),
(5212, 118, '    public String getAppletInfo() {\n', 0),
(5213, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(5214, 120, '    }\n', 0),
(5215, 121, '}\n', 0),
(5216, 0, 'import java.util.Scanner;\r\n', 0),
(5217, 1, ' class Years{\r\n', 0),
(5218, 2, '   public int getYear(){\r\n', 0),
(5219, 3, '	int year;\r\n', 2),
(5220, 4, '	String enteredYear;\r\n', 2),
(5221, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(5222, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(5223, 7, '	enteredYear = sc.next();\r\n', 0),
(5224, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(5225, 9, '	return year;\r\n', 0),
(5226, 10, '   }\r\n', 0),
(5227, 11, ' }\r\n', 0),
(5228, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5229, 13, ' class Months extends Years{\r\n', 0),
(5230, 14, '   public int getMonth(){\r\n', 0),
(5231, 15, '	int month;\r\n', 2),
(5232, 16, '	String enteredMonthNumber;\r\n', 2),
(5233, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(5234, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(5235, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(5236, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(5237, 21, '	return month;\r\n', 0),
(5238, 22, '   }\r\n', 0),
(5239, 23, ' }\r\n', 0),
(5240, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5241, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(5242, 26, ' static int numDays = 0;\r\n', 4),
(5243, 27, ' public static void main(String[] args) {\r\n', 0),
(5244, 28, '   int year;\r\n', 2),
(5245, 29, '   Months m = new Months();\r\n', 0),
(5246, 30, '   int month = m.getMonth();\r\n', 0),
(5247, 31, '   \r\n', 0),
(5248, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(5249, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(5250, 34, '   }\r\n', 0),
(5251, 35, '   else {\r\n', 0),
(5252, 36, '    switch (month) {\r\n', 0),
(5253, 37, '      case 1:\r\n', 0),
(5254, 38, '      case 3:\r\n', 0),
(5255, 39, '      case 5:\r\n', 0),
(5256, 40, '      case 7:\r\n', 0),
(5257, 41, '      case 8:\r\n', 0),
(5258, 42, '      case 10:\r\n', 0),
(5259, 43, '      case 12:\r\n', 0),
(5260, 44, '        numDays = 31;\r\n', 0),
(5261, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(5262, 46, '        break;\r\n', 0),
(5263, 47, '      case 4:\r\n', 0),
(5264, 48, '      case 6:\r\n', 0),
(5265, 49, '      case 9:\r\n', 0),
(5266, 50, '      case 11:\r\n', 0),
(5267, 51, '       numDays = 30;\r\n', 0),
(5268, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(5269, 53, '       break;\r\n', 0),
(5270, 54, '      case 2:\r\n', 0),
(5271, 55, '       year = m.getYear();\r\n', 0),
(5272, 56, '       if(year < 1) {\r\n', 0),
(5273, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(5274, 58, '       }\r\n', 0),
(5275, 59, '       else{\r\n', 0),
(5276, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(5277, 61, '         numDays = 29;\r\n', 0),
(5278, 62, '		 if(year > 2020){\r\n', 0),
(5279, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(5280, 64, '         }\r\n', 0),
(5281, 65, '         else{\r\n', 0),
(5282, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(5283, 67, '         }\r\n', 0),
(5284, 68, '        }//if at line 61\r\n', 0),
(5285, 69, '        else{\r\n', 0),
(5286, 70, '         numDays = 28;\r\n', 0),
(5287, 71, '         if (year > 2020){\r\n', 0),
(5288, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(5289, 73, '         }\r\n', 0),
(5290, 74, '         else{\r\n', 0),
(5291, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(5292, 76, '         }\r\n', 0),
(5293, 77, '         break;  \r\n', 0),
(5294, 78, '        }//else at line 70\r\n', 0),
(5295, 79, '       }//else at line 60\r\n', 0),
(5296, 80, '    }//switch at line 37\r\n', 0),
(5297, 81, '   }//else at line 36\r\n', 0),
(5298, 82, '  }//method\r\n', 0),
(5299, 83, ' }//class', 0),
(5300, 0, 'class Pattern{ \r\n', 0),
(5301, 1, 'public static void main(String[] args) { \r\n', 0),
(5302, 2, '	 int rows = 5;\r\n', 2),
(5303, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(5304, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(5305, 5, '	 System.out.print(j + " "); \r\n', 0),
(5306, 6, '	 } \r\n', 0),
(5307, 7, '	 System.out.println(""); \r\n', 0),
(5308, 8, ' 	} \r\n', 0),
(5309, 9, ' 	} \r\n', 0),
(5310, 10, '} ', 0),
(5311, 0, 'import java.util.Scanner;\r\n', 0),
(5312, 1, ' class Years{\r\n', 0),
(5313, 2, '   public int getYear(){\r\n', 0),
(5314, 3, '	int year;\r\n', 2),
(5315, 4, '	String enteredYear;\r\n', 2),
(5316, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(5317, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(5318, 7, '	enteredYear = sc.next();\r\n', 0),
(5319, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(5320, 9, '	return year;\r\n', 0),
(5321, 10, '   }\r\n', 0),
(5322, 11, ' }\r\n', 0),
(5323, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5324, 13, ' class Months extends Years{\r\n', 0),
(5325, 14, '   public int getMonth(){\r\n', 0),
(5326, 15, '	int month;\r\n', 2),
(5327, 16, '	String enteredMonthNumber;\r\n', 2),
(5328, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(5329, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(5330, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(5331, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(5332, 21, '	return month;\r\n', 0),
(5333, 22, '   }\r\n', 0),
(5334, 23, ' }\r\n', 0),
(5335, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5336, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(5337, 26, ' static int numDays = 0;\r\n', 4),
(5338, 27, ' public static void main(String[] args) {\r\n', 0),
(5339, 28, '   int year;\r\n', 2),
(5340, 29, '   Months m = new Months();\r\n', 0),
(5341, 30, '   int month = m.getMonth();\r\n', 0),
(5342, 31, '   \r\n', 0),
(5343, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(5344, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(5345, 34, '   }\r\n', 0),
(5346, 35, '   else {\r\n', 0),
(5347, 36, '    switch (month) {\r\n', 0),
(5348, 37, '      case 1:\r\n', 0),
(5349, 38, '      case 3:\r\n', 0),
(5350, 39, '      case 5:\r\n', 0),
(5351, 40, '      case 7:\r\n', 0),
(5352, 41, '      case 8:\r\n', 0),
(5353, 42, '      case 10:\r\n', 0),
(5354, 43, '      case 12:\r\n', 0),
(5355, 44, '        numDays = 31;\r\n', 0),
(5356, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(5357, 46, '        break;\r\n', 0),
(5358, 47, '      case 4:\r\n', 0),
(5359, 48, '      case 6:\r\n', 0),
(5360, 49, '      case 9:\r\n', 0),
(5361, 50, '      case 11:\r\n', 0),
(5362, 51, '       numDays = 30;\r\n', 0),
(5363, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(5364, 53, '       break;\r\n', 0),
(5365, 54, '      case 2:\r\n', 0),
(5366, 55, '       year = m.getYear();\r\n', 0),
(5367, 56, '       if(year < 1) {\r\n', 0),
(5368, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(5369, 58, '       }\r\n', 0),
(5370, 59, '       else{\r\n', 0),
(5371, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(5372, 61, '         numDays = 29;\r\n', 0),
(5373, 62, '		 if(year > 2020){\r\n', 0),
(5374, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(5375, 64, '         }\r\n', 0),
(5376, 65, '         else{\r\n', 0),
(5377, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(5378, 67, '         }\r\n', 0),
(5379, 68, '        }//if at line 61\r\n', 0),
(5380, 69, '        else{\r\n', 0),
(5381, 70, '         numDays = 28;\r\n', 0),
(5382, 71, '         if (year > 2020){\r\n', 0),
(5383, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(5384, 73, '         }\r\n', 0),
(5385, 74, '         else{\r\n', 0),
(5386, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(5387, 76, '         }\r\n', 0),
(5388, 77, '         break;  \r\n', 0),
(5389, 78, '        }//else at line 70\r\n', 0),
(5390, 79, '       }//else at line 60\r\n', 0),
(5391, 80, '    }//switch at line 37\r\n', 0),
(5392, 81, '   }//else at line 36\r\n', 0),
(5393, 82, '  }//method\r\n', 0),
(5394, 83, ' }//class', 0),
(5395, 0, 'class HelloWorld { \r\n', 0),
(5396, 1, '	public static void main(String args[]) \r\n', 0),
(5397, 2, '	{ \r\n', 0),
(5398, 3, '		System.out.println("Hello World"); \r\n', 0),
(5399, 4, '	} \r\n', 0),
(5400, 5, '} \r\n', 0),
(5401, 0, 'import java.awt.event.*;\n', 0),
(5402, 1, 'import java.awt.*;\n', 0),
(5403, 2, '\n', 0),
(5404, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(5405, 4, '\n', 0),
(5406, 5, '    private int mx, my;\n', 4),
(5407, 6, '    private Dimension size;\n', 8),
(5408, 7, '    private int onaroll;\n', 2),
(5409, 8, '\n', 0),
(5410, 9, '    public void init() {\n', 0),
(5411, 10, '        onaroll = 0;\n', 0),
(5412, 11, '        setSize(500, 500);\n', 0),
(5413, 12, '        size = getSize();\n', 0),
(5414, 13, '        addMouseListener(this);\n', 0),
(5415, 14, '        addMouseMotionListener(this);\n', 0),
(5416, 15, '        addComponentListener(this);\n', 0),
(5417, 16, '    }\n', 0),
(5418, 17, '\n', 0),
(5419, 18, '    public void update(Graphics g) {\n', 0),
(5420, 19, '        Dimension newSize = getSize();\n', 8),
(5421, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(5422, 21, '            g.setColor(getBackground());\n', 0),
(5423, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(5424, 23, '        } else {\n', 0),
(5425, 24, '            size = newSize;\n', 0),
(5426, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(5427, 26, '        } // Calculate new position\n', 0),
(5428, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(5429, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(5430, 29, '        paint(g);\n', 0),
(5431, 30, '    }\n', 0),
(5432, 31, '  \n', 0),
(5433, 32, '    public void paint(Graphics g) {\n', 0),
(5434, 33, '        g.setColor(Color.black);\n', 0),
(5435, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(5436, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(5437, 36, '    }\n', 0),
(5438, 37, '\n', 0),
(5439, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(5440, 39, '\n', 0),
(5441, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(5442, 41, '        e.consume();\n', 0),
(5443, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(5444, 43, '            repaint();\n', 0),
(5445, 44, '        }\n', 0),
(5446, 45, '    }\n', 0),
(5447, 46, '\n', 0),
(5448, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(5449, 48, '        int x = e.getX();\n', 0),
(5450, 49, '        int y = e.getY();\n', 0),
(5451, 50, '        e.consume();\n', 0),
(5452, 51, '        requestFocus();\n', 0),
(5453, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(5454, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(5455, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(5456, 55, '                case 0:\n', 0),
(5457, 56, '                    play(getCodeBase(), \n', 0),
(5458, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(5459, 58, '                    break;\n', 0),
(5460, 59, '                case 1:\n', 0),
(5461, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(5462, 61, '                    break;\n', 0),
(5463, 62, '                case 2:\n', 0),
(5464, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(5465, 64, '                    break;\n', 0),
(5466, 65, '                case 3:\n', 0),
(5467, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(5468, 67, '                    break;\n', 0),
(5469, 68, '                }\n', 0),
(5470, 69, '                onaroll++;\n', 0),
(5471, 70, '                if (onaroll > 5) {\n', 0),
(5472, 72, '                } else {\n', 0),
(5473, 74, '                }\n', 0),
(5474, 75, '            } else {   //first hit\n', 0),
(5475, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(5476, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(5477, 78, '                onaroll = 1;\n', 0),
(5478, 79, '            }\n', 0),
(5479, 80, '        } else {   //miss\n', 0),
(5480, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(5481, 82, '			\n', 0),
(5482, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(5483, 84, '            onaroll = 0;\n', 0),
(5484, 85, '        }\n', 0),
(5485, 86, '        repaint();\n', 0),
(5486, 87, '    }\n', 0),
(5487, 88, '\n', 0),
(5488, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(5489, 90, '\n', 0),
(5490, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(5491, 92, '        repaint();\n', 0),
(5492, 93, '    }\n', 0),
(5493, 94, '\n', 0),
(5494, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(5495, 96, '        repaint();\n', 0),
(5496, 97, '    }\n', 0),
(5497, 98, '\n', 0),
(5498, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(5499, 100, '\n', 0),
(5500, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(5501, 102, ' \n', 0),
(5502, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(5503, 104, ' \n', 0),
(5504, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(5505, 106, '        repaint();\n', 0),
(5506, 107, '    }\n', 0),
(5507, 108, ' \n', 0),
(5508, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(5509, 110, '        repaint();\n', 0),
(5510, 111, '    }\n', 0),
(5511, 112, '  \n', 0),
(5512, 113, '    public void destroy() {\n', 0),
(5513, 114, '        removeMouseListener(this);\n', 0),
(5514, 115, '        removeMouseMotionListener(this);\n', 0),
(5515, 116, '    }\n', 0),
(5516, 117, '\n', 0),
(5517, 118, '    public String getAppletInfo() {\n', 0),
(5518, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(5519, 120, '    }\n', 0),
(5520, 121, '}\n', 0),
(5521, 0, 'import java.awt.event.*;\n', 0),
(5522, 1, 'import java.awt.*;\n', 0),
(5523, 2, '\n', 0),
(5524, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(5525, 4, '\n', 0),
(5526, 5, '    private int mx, my;\n', 4),
(5527, 6, '    private Dimension size;\n', 8),
(5528, 7, '    private int onaroll;\n', 2),
(5529, 8, '\n', 0),
(5530, 9, '    public void init() {\n', 0),
(5531, 10, '        onaroll = 0;\n', 0),
(5532, 11, '        setSize(500, 500);\n', 0),
(5533, 12, '        size = getSize();\n', 0),
(5534, 13, '        addMouseListener(this);\n', 0),
(5535, 14, '        addMouseMotionListener(this);\n', 0),
(5536, 15, '        addComponentListener(this);\n', 0),
(5537, 16, '    }\n', 0),
(5538, 17, '\n', 0),
(5539, 18, '    public void update(Graphics g) {\n', 0),
(5540, 19, '        Dimension newSize = getSize();\n', 8),
(5541, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(5542, 21, '            g.setColor(getBackground());\n', 0),
(5543, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(5544, 23, '        } else {\n', 0),
(5545, 24, '            size = newSize;\n', 0),
(5546, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(5547, 26, '        } // Calculate new position\n', 0),
(5548, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(5549, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(5550, 29, '        paint(g);\n', 0),
(5551, 30, '    }\n', 0),
(5552, 31, '  \n', 0),
(5553, 32, '    public void paint(Graphics g) {\n', 0),
(5554, 33, '        g.setColor(Color.black);\n', 0),
(5555, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(5556, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(5557, 36, '    }\n', 0),
(5558, 37, '\n', 0),
(5559, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(5560, 39, '\n', 0),
(5561, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(5562, 41, '        e.consume();\n', 0),
(5563, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(5564, 43, '            repaint();\n', 0),
(5565, 44, '        }\n', 0),
(5566, 45, '    }\n', 0),
(5567, 46, '\n', 0),
(5568, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(5569, 48, '        int x = e.getX();\n', 0),
(5570, 49, '        int y = e.getY();\n', 0),
(5571, 50, '        e.consume();\n', 0),
(5572, 51, '        requestFocus();\n', 0),
(5573, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(5574, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(5575, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(5576, 55, '                case 0:\n', 0),
(5577, 56, '                    play(getCodeBase(), \n', 0),
(5578, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(5579, 58, '                    break;\n', 0),
(5580, 59, '                case 1:\n', 0),
(5581, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(5582, 61, '                    break;\n', 0),
(5583, 62, '                case 2:\n', 0),
(5584, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(5585, 64, '                    break;\n', 0),
(5586, 65, '                case 3:\n', 0),
(5587, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(5588, 67, '                    break;\n', 0),
(5589, 68, '                }\n', 0),
(5590, 69, '                onaroll++;\n', 0),
(5591, 70, '                if (onaroll > 5) {\n', 0),
(5592, 72, '                } else {\n', 0),
(5593, 74, '                }\n', 0),
(5594, 75, '            } else {   //first hit\n', 0),
(5595, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(5596, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(5597, 78, '                onaroll = 1;\n', 0),
(5598, 79, '            }\n', 0),
(5599, 80, '        } else {   //miss\n', 0),
(5600, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(5601, 82, '			\n', 0),
(5602, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(5603, 84, '            onaroll = 0;\n', 0),
(5604, 85, '        }\n', 0),
(5605, 86, '        repaint();\n', 0),
(5606, 87, '    }\n', 0),
(5607, 88, '\n', 0),
(5608, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(5609, 90, '\n', 0),
(5610, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(5611, 92, '        repaint();\n', 0),
(5612, 93, '    }\n', 0),
(5613, 94, '\n', 0),
(5614, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(5615, 96, '        repaint();\n', 0),
(5616, 97, '    }\n', 0),
(5617, 98, '\n', 0),
(5618, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(5619, 100, '\n', 0),
(5620, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(5621, 102, ' \n', 0),
(5622, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(5623, 104, ' \n', 0),
(5624, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(5625, 106, '        repaint();\n', 0),
(5626, 107, '    }\n', 0),
(5627, 108, ' \n', 0),
(5628, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(5629, 110, '        repaint();\n', 0),
(5630, 111, '    }\n', 0),
(5631, 112, '  \n', 0),
(5632, 113, '    public void destroy() {\n', 0),
(5633, 114, '        removeMouseListener(this);\n', 0),
(5634, 115, '        removeMouseMotionListener(this);\n', 0),
(5635, 116, '    }\n', 0),
(5636, 117, '\n', 0),
(5637, 118, '    public String getAppletInfo() {\n', 0),
(5638, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(5639, 120, '    }\n', 0),
(5640, 121, '}\n', 0),
(5641, 0, 'import java.util.Scanner;\r\n', 0),
(5642, 1, ' class Years{\r\n', 0),
(5643, 2, '   public int getYear(){\r\n', 0),
(5644, 3, '	int year;\r\n', 2),
(5645, 4, '	String enteredYear;\r\n', 2),
(5646, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(5647, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(5648, 7, '	enteredYear = sc.next();\r\n', 0),
(5649, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(5650, 9, '	return year;\r\n', 0),
(5651, 10, '   }\r\n', 0),
(5652, 11, ' }\r\n', 0),
(5653, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5654, 13, ' class Months extends Years{\r\n', 0),
(5655, 14, '   public int getMonth(){\r\n', 0),
(5656, 15, '	int month;\r\n', 2),
(5657, 16, '	String enteredMonthNumber;\r\n', 2),
(5658, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(5659, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(5660, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(5661, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(5662, 21, '	return month;\r\n', 0),
(5663, 22, '   }\r\n', 0),
(5664, 23, ' }\r\n', 0),
(5665, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5666, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(5667, 26, ' static int numDays = 0;\r\n', 4),
(5668, 27, ' public static void main(String[] args) {\r\n', 0),
(5669, 28, '   int year;\r\n', 2),
(5670, 29, '   Months m = new Months();\r\n', 0),
(5671, 30, '   int month = m.getMonth();\r\n', 0),
(5672, 31, '   \r\n', 0),
(5673, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(5674, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(5675, 34, '   }\r\n', 0),
(5676, 35, '   else {\r\n', 0),
(5677, 36, '    switch (month) {\r\n', 0),
(5678, 37, '      case 1:\r\n', 0),
(5679, 38, '      case 3:\r\n', 0),
(5680, 39, '      case 5:\r\n', 0),
(5681, 40, '      case 7:\r\n', 0),
(5682, 41, '      case 8:\r\n', 0),
(5683, 42, '      case 10:\r\n', 0),
(5684, 43, '      case 12:\r\n', 0),
(5685, 44, '        numDays = 31;\r\n', 0),
(5686, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(5687, 46, '        break;\r\n', 0),
(5688, 47, '      case 4:\r\n', 0),
(5689, 48, '      case 6:\r\n', 0),
(5690, 49, '      case 9:\r\n', 0),
(5691, 50, '      case 11:\r\n', 0),
(5692, 51, '       numDays = 30;\r\n', 0),
(5693, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(5694, 53, '       break;\r\n', 0),
(5695, 54, '      case 2:\r\n', 0),
(5696, 55, '       year = m.getYear();\r\n', 0),
(5697, 56, '       if(year < 1) {\r\n', 0),
(5698, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(5699, 58, '       }\r\n', 0),
(5700, 59, '       else{\r\n', 0),
(5701, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(5702, 61, '         numDays = 29;\r\n', 0),
(5703, 62, '		 if(year > 2020){\r\n', 0),
(5704, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(5705, 64, '         }\r\n', 0),
(5706, 65, '         else{\r\n', 0),
(5707, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(5708, 67, '         }\r\n', 0),
(5709, 68, '        }//if at line 61\r\n', 0),
(5710, 69, '        else{\r\n', 0),
(5711, 70, '         numDays = 28;\r\n', 0),
(5712, 71, '         if (year > 2020){\r\n', 0),
(5713, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(5714, 73, '         }\r\n', 0),
(5715, 74, '         else{\r\n', 0),
(5716, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(5717, 76, '         }\r\n', 0),
(5718, 77, '         break;  \r\n', 0),
(5719, 78, '        }//else at line 70\r\n', 0),
(5720, 79, '       }//else at line 60\r\n', 0),
(5721, 80, '    }//switch at line 37\r\n', 0),
(5722, 81, '   }//else at line 36\r\n', 0),
(5723, 82, '  }//method\r\n', 0),
(5724, 83, ' }//class', 0),
(5725, 0, 'public class RecursionExample2 {  \r\n', 0),
(5726, 1, 'static int count=0;  \r\n', 4),
(5727, 2, 'public int p(){  \r\n', 0),
(5728, 3, 'count++;  \r\n', 0),
(5729, 4, 'if(count<=5){  \r\n', 0),
(5730, 5, 'System.out.println("hello "+count);  \r\n', 0),
(5731, 6, 'public int p();  \r\n', 0),
(5732, 7, '}  \r\n', 0),
(5733, 8, '}  \r\n', 0),
(5734, 9, 'public static void main(String[] args) {  \r\n', 0),
(5735, 10, 'p();  \r\n', 0),
(5736, 11, '}  \r\n', 0),
(5737, 12, '}  ', 0),
(5738, 0, 'import java.awt.event.*;\n', 0),
(5739, 1, 'import java.awt.*;\n', 0),
(5740, 2, '\n', 0),
(5741, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(5742, 4, '\n', 0),
(5743, 5, '    private int mx, my;\n', 4),
(5744, 6, '    private Dimension size;\n', 8),
(5745, 7, '    private int onaroll;\n', 2),
(5746, 8, '\n', 0),
(5747, 9, '    public void init() {\n', 0),
(5748, 10, '        onaroll = 0;\n', 0),
(5749, 11, '        setSize(500, 500);\n', 0),
(5750, 12, '        size = getSize();\n', 0),
(5751, 13, '        addMouseListener(this);\n', 0),
(5752, 14, '        addMouseMotionListener(this);\n', 0),
(5753, 15, '        addComponentListener(this);\n', 0),
(5754, 16, '    }\n', 0),
(5755, 17, '\n', 0),
(5756, 18, '    public void update(Graphics g) {\n', 0),
(5757, 19, '        Dimension newSize = getSize();\n', 8),
(5758, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(5759, 21, '            g.setColor(getBackground());\n', 0),
(5760, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(5761, 23, '        } else {\n', 0),
(5762, 24, '            size = newSize;\n', 0),
(5763, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(5764, 26, '        } // Calculate new position\n', 0),
(5765, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(5766, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(5767, 29, '        paint(g);\n', 0),
(5768, 30, '    }\n', 0),
(5769, 31, '  \n', 0),
(5770, 32, '    public void paint(Graphics g) {\n', 0),
(5771, 33, '        g.setColor(Color.black);\n', 0),
(5772, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(5773, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(5774, 36, '    }\n', 0),
(5775, 37, '\n', 0),
(5776, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(5777, 39, '\n', 0),
(5778, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(5779, 41, '        e.consume();\n', 0),
(5780, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(5781, 43, '            repaint();\n', 0),
(5782, 44, '        }\n', 0),
(5783, 45, '    }\n', 0),
(5784, 46, '\n', 0),
(5785, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(5786, 48, '        int x = e.getX();\n', 0),
(5787, 49, '        int y = e.getY();\n', 0),
(5788, 50, '        e.consume();\n', 0),
(5789, 51, '        requestFocus();\n', 0),
(5790, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(5791, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(5792, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(5793, 55, '                case 0:\n', 0),
(5794, 56, '                    play(getCodeBase(), \n', 0),
(5795, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(5796, 58, '                    break;\n', 0),
(5797, 59, '                case 1:\n', 0),
(5798, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(5799, 61, '                    break;\n', 0),
(5800, 62, '                case 2:\n', 0),
(5801, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(5802, 64, '                    break;\n', 0),
(5803, 65, '                case 3:\n', 0),
(5804, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(5805, 67, '                    break;\n', 0),
(5806, 68, '                }\n', 0),
(5807, 69, '                onaroll++;\n', 0),
(5808, 70, '                if (onaroll > 5) {\n', 0),
(5809, 72, '                } else {\n', 0),
(5810, 74, '                }\n', 0),
(5811, 75, '            } else {   //first hit\n', 0),
(5812, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(5813, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(5814, 78, '                onaroll = 1;\n', 0),
(5815, 79, '            }\n', 0),
(5816, 80, '        } else {   //miss\n', 0),
(5817, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(5818, 82, '			\n', 0),
(5819, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(5820, 84, '            onaroll = 0;\n', 0),
(5821, 85, '        }\n', 0),
(5822, 86, '        repaint();\n', 0),
(5823, 87, '    }\n', 0),
(5824, 88, '\n', 0),
(5825, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(5826, 90, '\n', 0),
(5827, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(5828, 92, '        repaint();\n', 0),
(5829, 93, '    }\n', 0),
(5830, 94, '\n', 0),
(5831, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(5832, 96, '        repaint();\n', 0),
(5833, 97, '    }\n', 0),
(5834, 98, '\n', 0),
(5835, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(5836, 100, '\n', 0),
(5837, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(5838, 102, ' \n', 0),
(5839, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(5840, 104, ' \n', 0),
(5841, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(5842, 106, '        repaint();\n', 0),
(5843, 107, '    }\n', 0),
(5844, 108, ' \n', 0),
(5845, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(5846, 110, '        repaint();\n', 0),
(5847, 111, '    }\n', 0),
(5848, 112, '  \n', 0),
(5849, 113, '    public void destroy() {\n', 0),
(5850, 114, '        removeMouseListener(this);\n', 0),
(5851, 115, '        removeMouseMotionListener(this);\n', 0),
(5852, 116, '    }\n', 0),
(5853, 117, '\n', 0),
(5854, 118, '    public String getAppletInfo() {\n', 0),
(5855, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(5856, 120, '    }\n', 0),
(5857, 121, '}\n', 0),
(5858, 0, 'import java.awt.event.*;\n', 0),
(5859, 1, 'import java.awt.*;\n', 0),
(5860, 2, '\n', 0),
(5861, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(5862, 4, '\n', 0),
(5863, 5, '    private int mx, my;\n', 4),
(5864, 6, '    private Dimension size;\n', 8),
(5865, 7, '    private int onaroll;\n', 2),
(5866, 8, '\n', 0),
(5867, 9, '    public void init() {\n', 0),
(5868, 10, '        onaroll = 0;\n', 0),
(5869, 11, '        setSize(500, 500);\n', 0),
(5870, 12, '        size = getSize();\n', 0),
(5871, 13, '        addMouseListener(this);\n', 0),
(5872, 14, '        addMouseMotionListener(this);\n', 0),
(5873, 15, '        addComponentListener(this);\n', 0),
(5874, 16, '    }\n', 0),
(5875, 17, '\n', 0),
(5876, 18, '    public void update(Graphics g) {\n', 0),
(5877, 19, '        Dimension newSize = getSize();\n', 8),
(5878, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(5879, 21, '            g.setColor(getBackground());\n', 0),
(5880, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(5881, 23, '        } else {\n', 0),
(5882, 24, '            size = newSize;\n', 0),
(5883, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(5884, 26, '        } // Calculate new position\n', 0),
(5885, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(5886, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(5887, 29, '        paint(g);\n', 0),
(5888, 30, '    }\n', 0),
(5889, 31, '  \n', 0),
(5890, 32, '    public void paint(Graphics g) {\n', 0),
(5891, 33, '        g.setColor(Color.black);\n', 0),
(5892, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(5893, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(5894, 36, '    }\n', 0),
(5895, 37, '\n', 0),
(5896, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(5897, 39, '\n', 0),
(5898, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(5899, 41, '        e.consume();\n', 0),
(5900, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(5901, 43, '            repaint();\n', 0),
(5902, 44, '        }\n', 0),
(5903, 45, '    }\n', 0),
(5904, 46, '\n', 0),
(5905, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(5906, 48, '        int x = e.getX();\n', 0),
(5907, 49, '        int y = e.getY();\n', 0),
(5908, 50, '        e.consume();\n', 0),
(5909, 51, '        requestFocus();\n', 0),
(5910, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(5911, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(5912, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(5913, 55, '                case 0:\n', 0),
(5914, 56, '                    play(getCodeBase(), \n', 0),
(5915, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(5916, 58, '                    break;\n', 0),
(5917, 59, '                case 1:\n', 0),
(5918, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(5919, 61, '                    break;\n', 0),
(5920, 62, '                case 2:\n', 0),
(5921, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(5922, 64, '                    break;\n', 0),
(5923, 65, '                case 3:\n', 0),
(5924, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(5925, 67, '                    break;\n', 0),
(5926, 68, '                }\n', 0),
(5927, 69, '                onaroll++;\n', 0),
(5928, 70, '                if (onaroll > 5) {\n', 0),
(5929, 72, '                } else {\n', 0),
(5930, 74, '                }\n', 0),
(5931, 75, '            } else {   //first hit\n', 0),
(5932, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(5933, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(5934, 78, '                onaroll = 1;\n', 0),
(5935, 79, '            }\n', 0),
(5936, 80, '        } else {   //miss\n', 0),
(5937, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(5938, 82, '			\n', 0),
(5939, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(5940, 84, '            onaroll = 0;\n', 0),
(5941, 85, '        }\n', 0),
(5942, 86, '        repaint();\n', 0),
(5943, 87, '    }\n', 0),
(5944, 88, '\n', 0),
(5945, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(5946, 90, '\n', 0),
(5947, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(5948, 92, '        repaint();\n', 0),
(5949, 93, '    }\n', 0),
(5950, 94, '\n', 0),
(5951, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(5952, 96, '        repaint();\n', 0),
(5953, 97, '    }\n', 0),
(5954, 98, '\n', 0),
(5955, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(5956, 100, '\n', 0),
(5957, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(5958, 102, ' \n', 0),
(5959, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(5960, 104, ' \n', 0),
(5961, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(5962, 106, '        repaint();\n', 0),
(5963, 107, '    }\n', 0),
(5964, 108, ' \n', 0),
(5965, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(5966, 110, '        repaint();\n', 0),
(5967, 111, '    }\n', 0),
(5968, 112, '  \n', 0),
(5969, 113, '    public void destroy() {\n', 0),
(5970, 114, '        removeMouseListener(this);\n', 0),
(5971, 115, '        removeMouseMotionListener(this);\n', 0),
(5972, 116, '    }\n', 0),
(5973, 117, '\n', 0),
(5974, 118, '    public String getAppletInfo() {\n', 0),
(5975, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(5976, 120, '    }\n', 0),
(5977, 121, '}\n', 0),
(5978, 0, 'import java.util.Scanner;\r\n', 0),
(5979, 1, ' class Years{\r\n', 0),
(5980, 2, '   public int getYear(){\r\n', 0),
(5981, 3, '	int year;\r\n', 2),
(5982, 4, '	String enteredYear;\r\n', 2),
(5983, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(5984, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(5985, 7, '	enteredYear = sc.next();\r\n', 0),
(5986, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(5987, 9, '	return year;\r\n', 0),
(5988, 10, '   }\r\n', 0),
(5989, 11, ' }\r\n', 0),
(5990, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(5991, 13, ' class Months extends Years{\r\n', 0),
(5992, 14, '   public int getMonth(){\r\n', 0),
(5993, 15, '	int month;\r\n', 2),
(5994, 16, '	String enteredMonthNumber;\r\n', 2),
(5995, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(5996, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(5997, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(5998, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(5999, 21, '	return month;\r\n', 0),
(6000, 22, '   }\r\n', 0),
(6001, 23, ' }\r\n', 0),
(6002, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6003, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(6004, 26, ' static int numDays = 0;\r\n', 4),
(6005, 27, ' public static void main(String[] args) {\r\n', 0),
(6006, 28, '   int year;\r\n', 2),
(6007, 29, '   Months m = new Months();\r\n', 0),
(6008, 30, '   int month = m.getMonth();\r\n', 0),
(6009, 31, '   \r\n', 0),
(6010, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(6011, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(6012, 34, '   }\r\n', 0),
(6013, 35, '   else {\r\n', 0),
(6014, 36, '    switch (month) {\r\n', 0),
(6015, 37, '      case 1:\r\n', 0),
(6016, 38, '      case 3:\r\n', 0),
(6017, 39, '      case 5:\r\n', 0),
(6018, 40, '      case 7:\r\n', 0),
(6019, 41, '      case 8:\r\n', 0),
(6020, 42, '      case 10:\r\n', 0),
(6021, 43, '      case 12:\r\n', 0),
(6022, 44, '        numDays = 31;\r\n', 0),
(6023, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(6024, 46, '        break;\r\n', 0),
(6025, 47, '      case 4:\r\n', 0),
(6026, 48, '      case 6:\r\n', 0),
(6027, 49, '      case 9:\r\n', 0),
(6028, 50, '      case 11:\r\n', 0),
(6029, 51, '       numDays = 30;\r\n', 0),
(6030, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(6031, 53, '       break;\r\n', 0),
(6032, 54, '      case 2:\r\n', 0),
(6033, 55, '       year = m.getYear();\r\n', 0),
(6034, 56, '       if(year < 1) {\r\n', 0),
(6035, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(6036, 58, '       }\r\n', 0),
(6037, 59, '       else{\r\n', 0),
(6038, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(6039, 61, '         numDays = 29;\r\n', 0),
(6040, 62, '		 if(year > 2020){\r\n', 0),
(6041, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(6042, 64, '         }\r\n', 0),
(6043, 65, '         else{\r\n', 0),
(6044, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(6045, 67, '         }\r\n', 0),
(6046, 68, '        }//if at line 61\r\n', 0),
(6047, 69, '        else{\r\n', 0),
(6048, 70, '         numDays = 28;\r\n', 0),
(6049, 71, '         if (year > 2020){\r\n', 0),
(6050, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(6051, 73, '         }\r\n', 0),
(6052, 74, '         else{\r\n', 0),
(6053, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(6054, 76, '         }\r\n', 0),
(6055, 77, '         break;  \r\n', 0),
(6056, 78, '        }//else at line 70\r\n', 0),
(6057, 79, '       }//else at line 60\r\n', 0),
(6058, 80, '    }//switch at line 37\r\n', 0),
(6059, 81, '   }//else at line 36\r\n', 0),
(6060, 82, '  }//method\r\n', 0),
(6061, 83, ' }//class', 0),
(6062, 0, 'class Pattern{ \r\n', 0),
(6063, 1, 'public static void main(String[] args) { \r\n', 0),
(6064, 2, '	 int rows = 5;\r\n', 2),
(6065, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(6066, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(6067, 5, '	 System.out.print(j + " "); \r\n', 0),
(6068, 6, '	 } \r\n', 0),
(6069, 7, '	 System.out.println(""); \r\n', 0),
(6070, 8, ' 	} \r\n', 0),
(6071, 9, ' 	} \r\n', 0),
(6072, 10, '} ', 0),
(6073, 0, 'import java.util.Scanner;\r\n', 0),
(6074, 1, ' class Years{\r\n', 0),
(6075, 2, '   public int getYear(){\r\n', 0),
(6076, 3, '	int year;\r\n', 2),
(6077, 4, '	String enteredYear;\r\n', 2),
(6078, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(6079, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(6080, 7, '	enteredYear = sc.next();\r\n', 0),
(6081, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(6082, 9, '	return year;\r\n', 0),
(6083, 10, '   }\r\n', 0),
(6084, 11, ' }\r\n', 0),
(6085, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6086, 13, ' class Months extends Years{\r\n', 0),
(6087, 14, '   public int getMonth(){\r\n', 0),
(6088, 15, '	int month;\r\n', 2),
(6089, 16, '	String enteredMonthNumber;\r\n', 2),
(6090, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(6091, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(6092, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(6093, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(6094, 21, '	return month;\r\n', 0),
(6095, 22, '   }\r\n', 0),
(6096, 23, ' }\r\n', 0),
(6097, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6098, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(6099, 26, ' static int numDays = 0;\r\n', 4),
(6100, 27, ' public static void main(String[] args) {\r\n', 0),
(6101, 28, '   int year;\r\n', 2),
(6102, 29, '   Months m = new Months();\r\n', 0),
(6103, 30, '   int month = m.getMonth();\r\n', 0),
(6104, 31, '   \r\n', 0),
(6105, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(6106, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(6107, 34, '   }\r\n', 0),
(6108, 35, '   else {\r\n', 0),
(6109, 36, '    switch (month) {\r\n', 0),
(6110, 37, '      case 1:\r\n', 0),
(6111, 38, '      case 3:\r\n', 0),
(6112, 39, '      case 5:\r\n', 0),
(6113, 40, '      case 7:\r\n', 0),
(6114, 41, '      case 8:\r\n', 0),
(6115, 42, '      case 10:\r\n', 0),
(6116, 43, '      case 12:\r\n', 0),
(6117, 44, '        numDays = 31;\r\n', 0),
(6118, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(6119, 46, '        break;\r\n', 0),
(6120, 47, '      case 4:\r\n', 0),
(6121, 48, '      case 6:\r\n', 0),
(6122, 49, '      case 9:\r\n', 0),
(6123, 50, '      case 11:\r\n', 0),
(6124, 51, '       numDays = 30;\r\n', 0),
(6125, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(6126, 53, '       break;\r\n', 0),
(6127, 54, '      case 2:\r\n', 0),
(6128, 55, '       year = m.getYear();\r\n', 0),
(6129, 56, '       if(year < 1) {\r\n', 0),
(6130, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(6131, 58, '       }\r\n', 0),
(6132, 59, '       else{\r\n', 0),
(6133, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(6134, 61, '         numDays = 29;\r\n', 0),
(6135, 62, '		 if(year > 2020){\r\n', 0),
(6136, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(6137, 64, '         }\r\n', 0),
(6138, 65, '         else{\r\n', 0),
(6139, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(6140, 67, '         }\r\n', 0),
(6141, 68, '        }//if at line 61\r\n', 0),
(6142, 69, '        else{\r\n', 0),
(6143, 70, '         numDays = 28;\r\n', 0),
(6144, 71, '         if (year > 2020){\r\n', 0),
(6145, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(6146, 73, '         }\r\n', 0),
(6147, 74, '         else{\r\n', 0),
(6148, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(6149, 76, '         }\r\n', 0),
(6150, 77, '         break;  \r\n', 0),
(6151, 78, '        }//else at line 70\r\n', 0),
(6152, 79, '       }//else at line 60\r\n', 0),
(6153, 80, '    }//switch at line 37\r\n', 0),
(6154, 81, '   }//else at line 36\r\n', 0),
(6155, 82, '  }//method\r\n', 0),
(6156, 83, ' }//class', 0),
(6157, 0, 'class HelloWorld { \r\n', 0),
(6158, 1, '	public static void main(String args[]) \r\n', 0),
(6159, 2, '	{ \r\n', 0),
(6160, 3, '		System.out.println("Hello World"); \r\n', 0),
(6161, 4, '	} \r\n', 0),
(6162, 5, '} \r\n', 0),
(6163, 0, 'import java.awt.event.*;\n', 0),
(6164, 1, 'import java.awt.*;\n', 0),
(6165, 2, '\n', 0),
(6166, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(6167, 4, '\n', 0),
(6168, 5, '    private int mx, my;\n', 4),
(6169, 6, '    private Dimension size;\n', 8),
(6170, 7, '    private int onaroll;\n', 2),
(6171, 8, '\n', 0),
(6172, 9, '    public void init() {\n', 0),
(6173, 10, '        onaroll = 0;\n', 0),
(6174, 11, '        setSize(500, 500);\n', 0),
(6175, 12, '        size = getSize();\n', 0),
(6176, 13, '        addMouseListener(this);\n', 0),
(6177, 14, '        addMouseMotionListener(this);\n', 0),
(6178, 15, '        addComponentListener(this);\n', 0),
(6179, 16, '    }\n', 0),
(6180, 17, '\n', 0),
(6181, 18, '    public void update(Graphics g) {\n', 0),
(6182, 19, '        Dimension newSize = getSize();\n', 8),
(6183, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(6184, 21, '            g.setColor(getBackground());\n', 0),
(6185, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(6186, 23, '        } else {\n', 0),
(6187, 24, '            size = newSize;\n', 0),
(6188, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(6189, 26, '        } // Calculate new position\n', 0),
(6190, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(6191, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(6192, 29, '        paint(g);\n', 0),
(6193, 30, '    }\n', 0),
(6194, 31, '  \n', 0),
(6195, 32, '    public void paint(Graphics g) {\n', 0),
(6196, 33, '        g.setColor(Color.black);\n', 0),
(6197, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(6198, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(6199, 36, '    }\n', 0),
(6200, 37, '\n', 0),
(6201, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(6202, 39, '\n', 0),
(6203, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(6204, 41, '        e.consume();\n', 0),
(6205, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(6206, 43, '            repaint();\n', 0),
(6207, 44, '        }\n', 0),
(6208, 45, '    }\n', 0),
(6209, 46, '\n', 0),
(6210, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(6211, 48, '        int x = e.getX();\n', 0),
(6212, 49, '        int y = e.getY();\n', 0),
(6213, 50, '        e.consume();\n', 0),
(6214, 51, '        requestFocus();\n', 0),
(6215, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(6216, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(6217, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(6218, 55, '                case 0:\n', 0),
(6219, 56, '                    play(getCodeBase(), \n', 0),
(6220, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(6221, 58, '                    break;\n', 0),
(6222, 59, '                case 1:\n', 0),
(6223, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(6224, 61, '                    break;\n', 0),
(6225, 62, '                case 2:\n', 0),
(6226, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(6227, 64, '                    break;\n', 0),
(6228, 65, '                case 3:\n', 0),
(6229, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(6230, 67, '                    break;\n', 0),
(6231, 68, '                }\n', 0),
(6232, 69, '                onaroll++;\n', 0),
(6233, 70, '                if (onaroll > 5) {\n', 0),
(6234, 72, '                } else {\n', 0),
(6235, 74, '                }\n', 0),
(6236, 75, '            } else {   //first hit\n', 0),
(6237, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(6238, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(6239, 78, '                onaroll = 1;\n', 0),
(6240, 79, '            }\n', 0),
(6241, 80, '        } else {   //miss\n', 0),
(6242, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(6243, 82, '			\n', 0),
(6244, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(6245, 84, '            onaroll = 0;\n', 0),
(6246, 85, '        }\n', 0),
(6247, 86, '        repaint();\n', 0),
(6248, 87, '    }\n', 0),
(6249, 88, '\n', 0),
(6250, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(6251, 90, '\n', 0),
(6252, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(6253, 92, '        repaint();\n', 0),
(6254, 93, '    }\n', 0),
(6255, 94, '\n', 0),
(6256, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(6257, 96, '        repaint();\n', 0),
(6258, 97, '    }\n', 0),
(6259, 98, '\n', 0),
(6260, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(6261, 100, '\n', 0),
(6262, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(6263, 102, ' \n', 0),
(6264, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(6265, 104, ' \n', 0),
(6266, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(6267, 106, '        repaint();\n', 0),
(6268, 107, '    }\n', 0),
(6269, 108, ' \n', 0),
(6270, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(6271, 110, '        repaint();\n', 0),
(6272, 111, '    }\n', 0),
(6273, 112, '  \n', 0),
(6274, 113, '    public void destroy() {\n', 0),
(6275, 114, '        removeMouseListener(this);\n', 0),
(6276, 115, '        removeMouseMotionListener(this);\n', 0),
(6277, 116, '    }\n', 0),
(6278, 117, '\n', 0),
(6279, 118, '    public String getAppletInfo() {\n', 0),
(6280, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(6281, 120, '    }\n', 0),
(6282, 121, '}\n', 0),
(6283, 0, 'import java.awt.event.*;\n', 0),
(6284, 1, 'import java.awt.*;\n', 0),
(6285, 2, '\n', 0),
(6286, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(6287, 4, '\n', 0),
(6288, 5, '    private int mx, my;\n', 4),
(6289, 6, '    private Dimension size;\n', 8),
(6290, 7, '    private int onaroll;\n', 2),
(6291, 8, '\n', 0),
(6292, 9, '    public void init() {\n', 0),
(6293, 10, '        onaroll = 0;\n', 0),
(6294, 11, '        setSize(500, 500);\n', 0),
(6295, 12, '        size = getSize();\n', 0),
(6296, 13, '        addMouseListener(this);\n', 0),
(6297, 14, '        addMouseMotionListener(this);\n', 0),
(6298, 15, '        addComponentListener(this);\n', 0),
(6299, 16, '    }\n', 0),
(6300, 17, '\n', 0),
(6301, 18, '    public void update(Graphics g) {\n', 0),
(6302, 19, '        Dimension newSize = getSize();\n', 8),
(6303, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(6304, 21, '            g.setColor(getBackground());\n', 0),
(6305, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(6306, 23, '        } else {\n', 0),
(6307, 24, '            size = newSize;\n', 0),
(6308, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(6309, 26, '        } // Calculate new position\n', 0),
(6310, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(6311, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(6312, 29, '        paint(g);\n', 0),
(6313, 30, '    }\n', 0),
(6314, 31, '  \n', 0),
(6315, 32, '    public void paint(Graphics g) {\n', 0),
(6316, 33, '        g.setColor(Color.black);\n', 0),
(6317, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(6318, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(6319, 36, '    }\n', 0),
(6320, 37, '\n', 0),
(6321, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(6322, 39, '\n', 0),
(6323, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(6324, 41, '        e.consume();\n', 0),
(6325, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(6326, 43, '            repaint();\n', 0),
(6327, 44, '        }\n', 0),
(6328, 45, '    }\n', 0),
(6329, 46, '\n', 0),
(6330, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(6331, 48, '        int x = e.getX();\n', 0),
(6332, 49, '        int y = e.getY();\n', 0),
(6333, 50, '        e.consume();\n', 0),
(6334, 51, '        requestFocus();\n', 0),
(6335, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(6336, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(6337, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(6338, 55, '                case 0:\n', 0),
(6339, 56, '                    play(getCodeBase(), \n', 0),
(6340, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(6341, 58, '                    break;\n', 0),
(6342, 59, '                case 1:\n', 0),
(6343, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(6344, 61, '                    break;\n', 0),
(6345, 62, '                case 2:\n', 0),
(6346, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(6347, 64, '                    break;\n', 0),
(6348, 65, '                case 3:\n', 0),
(6349, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(6350, 67, '                    break;\n', 0),
(6351, 68, '                }\n', 0),
(6352, 69, '                onaroll++;\n', 0),
(6353, 70, '                if (onaroll > 5) {\n', 0),
(6354, 72, '                } else {\n', 0),
(6355, 74, '                }\n', 0),
(6356, 75, '            } else {   //first hit\n', 0),
(6357, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(6358, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(6359, 78, '                onaroll = 1;\n', 0),
(6360, 79, '            }\n', 0),
(6361, 80, '        } else {   //miss\n', 0),
(6362, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(6363, 82, '			\n', 0),
(6364, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(6365, 84, '            onaroll = 0;\n', 0),
(6366, 85, '        }\n', 0),
(6367, 86, '        repaint();\n', 0),
(6368, 87, '    }\n', 0),
(6369, 88, '\n', 0),
(6370, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(6371, 90, '\n', 0),
(6372, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(6373, 92, '        repaint();\n', 0),
(6374, 93, '    }\n', 0),
(6375, 94, '\n', 0),
(6376, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(6377, 96, '        repaint();\n', 0),
(6378, 97, '    }\n', 0),
(6379, 98, '\n', 0),
(6380, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(6381, 100, '\n', 0),
(6382, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(6383, 102, ' \n', 0),
(6384, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(6385, 104, ' \n', 0),
(6386, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(6387, 106, '        repaint();\n', 0),
(6388, 107, '    }\n', 0),
(6389, 108, ' \n', 0),
(6390, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(6391, 110, '        repaint();\n', 0),
(6392, 111, '    }\n', 0),
(6393, 112, '  \n', 0),
(6394, 113, '    public void destroy() {\n', 0),
(6395, 114, '        removeMouseListener(this);\n', 0),
(6396, 115, '        removeMouseMotionListener(this);\n', 0),
(6397, 116, '    }\n', 0),
(6398, 117, '\n', 0),
(6399, 118, '    public String getAppletInfo() {\n', 0),
(6400, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(6401, 120, '    }\n', 0),
(6402, 121, '}\n', 0),
(6403, 0, 'import java.util.Scanner;\r\n', 0),
(6404, 1, ' class Years{\r\n', 0),
(6405, 2, '   public int getYear(){\r\n', 0),
(6406, 3, '	int year;\r\n', 2),
(6407, 4, '	String enteredYear;\r\n', 2),
(6408, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(6409, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(6410, 7, '	enteredYear = sc.next();\r\n', 0),
(6411, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(6412, 9, '	return year;\r\n', 0),
(6413, 10, '   }\r\n', 0),
(6414, 11, ' }\r\n', 0),
(6415, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6416, 13, ' class Months extends Years{\r\n', 0),
(6417, 14, '   public int getMonth(){\r\n', 0),
(6418, 15, '	int month;\r\n', 2),
(6419, 16, '	String enteredMonthNumber;\r\n', 2),
(6420, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(6421, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(6422, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(6423, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(6424, 21, '	return month;\r\n', 0),
(6425, 22, '   }\r\n', 0),
(6426, 23, ' }\r\n', 0),
(6427, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6428, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(6429, 26, ' static int numDays = 0;\r\n', 4),
(6430, 27, ' public static void main(String[] args) {\r\n', 0),
(6431, 28, '   int year;\r\n', 2),
(6432, 29, '   Months m = new Months();\r\n', 0),
(6433, 30, '   int month = m.getMonth();\r\n', 0),
(6434, 31, '   \r\n', 0),
(6435, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(6436, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(6437, 34, '   }\r\n', 0),
(6438, 35, '   else {\r\n', 0),
(6439, 36, '    switch (month) {\r\n', 0),
(6440, 37, '      case 1:\r\n', 0),
(6441, 38, '      case 3:\r\n', 0),
(6442, 39, '      case 5:\r\n', 0),
(6443, 40, '      case 7:\r\n', 0),
(6444, 41, '      case 8:\r\n', 0),
(6445, 42, '      case 10:\r\n', 0),
(6446, 43, '      case 12:\r\n', 0),
(6447, 44, '        numDays = 31;\r\n', 0),
(6448, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(6449, 46, '        break;\r\n', 0),
(6450, 47, '      case 4:\r\n', 0),
(6451, 48, '      case 6:\r\n', 0),
(6452, 49, '      case 9:\r\n', 0),
(6453, 50, '      case 11:\r\n', 0),
(6454, 51, '       numDays = 30;\r\n', 0),
(6455, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(6456, 53, '       break;\r\n', 0),
(6457, 54, '      case 2:\r\n', 0),
(6458, 55, '       year = m.getYear();\r\n', 0),
(6459, 56, '       if(year < 1) {\r\n', 0),
(6460, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(6461, 58, '       }\r\n', 0),
(6462, 59, '       else{\r\n', 0),
(6463, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(6464, 61, '         numDays = 29;\r\n', 0),
(6465, 62, '		 if(year > 2020){\r\n', 0),
(6466, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(6467, 64, '         }\r\n', 0),
(6468, 65, '         else{\r\n', 0),
(6469, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(6470, 67, '         }\r\n', 0),
(6471, 68, '        }//if at line 61\r\n', 0),
(6472, 69, '        else{\r\n', 0),
(6473, 70, '         numDays = 28;\r\n', 0),
(6474, 71, '         if (year > 2020){\r\n', 0),
(6475, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(6476, 73, '         }\r\n', 0),
(6477, 74, '         else{\r\n', 0),
(6478, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(6479, 76, '         }\r\n', 0),
(6480, 77, '         break;  \r\n', 0),
(6481, 78, '        }//else at line 70\r\n', 0),
(6482, 79, '       }//else at line 60\r\n', 0),
(6483, 80, '    }//switch at line 37\r\n', 0),
(6484, 81, '   }//else at line 36\r\n', 0),
(6485, 82, '  }//method\r\n', 0),
(6486, 83, ' }//class', 0),
(6487, 0, 'public class RecursionExample2 {  \r\n', 0),
(6488, 1, 'static int count=0;  \r\n', 4),
(6489, 2, 'public int p(){  \r\n', 0),
(6490, 3, 'count++;  \r\n', 0),
(6491, 4, 'if(count<=5){  \r\n', 0),
(6492, 5, 'System.out.println("hello "+count);  \r\n', 0),
(6493, 6, 'public int p();  \r\n', 0),
(6494, 7, '}  \r\n', 0),
(6495, 8, '}  \r\n', 0),
(6496, 9, 'public static void main(String[] args) {  \r\n', 0),
(6497, 10, 'p();  \r\n', 0),
(6498, 11, '}  \r\n', 0),
(6499, 12, '}  ', 0),
(6500, 0, 'import java.awt.event.*;\n', 0),
(6501, 1, 'import java.awt.*;\n', 0),
(6502, 2, '\n', 0),
(6503, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(6504, 4, '\n', 0),
(6505, 5, '    private int mx, my;\n', 4),
(6506, 6, '    private Dimension size;\n', 8),
(6507, 7, '    private int onaroll;\n', 2),
(6508, 8, '\n', 0),
(6509, 9, '    public void init() {\n', 0),
(6510, 10, '        onaroll = 0;\n', 0),
(6511, 11, '        setSize(500, 500);\n', 0),
(6512, 12, '        size = getSize();\n', 0),
(6513, 13, '        addMouseListener(this);\n', 0),
(6514, 14, '        addMouseMotionListener(this);\n', 0),
(6515, 15, '        addComponentListener(this);\n', 0),
(6516, 16, '    }\n', 0),
(6517, 17, '\n', 0),
(6518, 18, '    public void update(Graphics g) {\n', 0),
(6519, 19, '        Dimension newSize = getSize();\n', 8),
(6520, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(6521, 21, '            g.setColor(getBackground());\n', 0),
(6522, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(6523, 23, '        } else {\n', 0),
(6524, 24, '            size = newSize;\n', 0),
(6525, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(6526, 26, '        } // Calculate new position\n', 0),
(6527, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(6528, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(6529, 29, '        paint(g);\n', 0),
(6530, 30, '    }\n', 0),
(6531, 31, '  \n', 0),
(6532, 32, '    public void paint(Graphics g) {\n', 0),
(6533, 33, '        g.setColor(Color.black);\n', 0),
(6534, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(6535, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(6536, 36, '    }\n', 0),
(6537, 37, '\n', 0),
(6538, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(6539, 39, '\n', 0),
(6540, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(6541, 41, '        e.consume();\n', 0),
(6542, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(6543, 43, '            repaint();\n', 0),
(6544, 44, '        }\n', 0),
(6545, 45, '    }\n', 0),
(6546, 46, '\n', 0),
(6547, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(6548, 48, '        int x = e.getX();\n', 0),
(6549, 49, '        int y = e.getY();\n', 0),
(6550, 50, '        e.consume();\n', 0),
(6551, 51, '        requestFocus();\n', 0),
(6552, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(6553, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(6554, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(6555, 55, '                case 0:\n', 0),
(6556, 56, '                    play(getCodeBase(), \n', 0),
(6557, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(6558, 58, '                    break;\n', 0),
(6559, 59, '                case 1:\n', 0),
(6560, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(6561, 61, '                    break;\n', 0),
(6562, 62, '                case 2:\n', 0),
(6563, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(6564, 64, '                    break;\n', 0),
(6565, 65, '                case 3:\n', 0),
(6566, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(6567, 67, '                    break;\n', 0),
(6568, 68, '                }\n', 0),
(6569, 69, '                onaroll++;\n', 0),
(6570, 70, '                if (onaroll > 5) {\n', 0),
(6571, 72, '                } else {\n', 0),
(6572, 74, '                }\n', 0),
(6573, 75, '            } else {   //first hit\n', 0),
(6574, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(6575, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(6576, 78, '                onaroll = 1;\n', 0),
(6577, 79, '            }\n', 0),
(6578, 80, '        } else {   //miss\n', 0),
(6579, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(6580, 82, '			\n', 0),
(6581, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(6582, 84, '            onaroll = 0;\n', 0),
(6583, 85, '        }\n', 0),
(6584, 86, '        repaint();\n', 0),
(6585, 87, '    }\n', 0),
(6586, 88, '\n', 0),
(6587, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(6588, 90, '\n', 0),
(6589, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(6590, 92, '        repaint();\n', 0),
(6591, 93, '    }\n', 0),
(6592, 94, '\n', 0),
(6593, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(6594, 96, '        repaint();\n', 0),
(6595, 97, '    }\n', 0),
(6596, 98, '\n', 0),
(6597, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(6598, 100, '\n', 0),
(6599, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(6600, 102, ' \n', 0),
(6601, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(6602, 104, ' \n', 0),
(6603, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(6604, 106, '        repaint();\n', 0),
(6605, 107, '    }\n', 0),
(6606, 108, ' \n', 0),
(6607, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(6608, 110, '        repaint();\n', 0),
(6609, 111, '    }\n', 0),
(6610, 112, '  \n', 0),
(6611, 113, '    public void destroy() {\n', 0),
(6612, 114, '        removeMouseListener(this);\n', 0),
(6613, 115, '        removeMouseMotionListener(this);\n', 0),
(6614, 116, '    }\n', 0),
(6615, 117, '\n', 0),
(6616, 118, '    public String getAppletInfo() {\n', 0),
(6617, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(6618, 120, '    }\n', 0),
(6619, 121, '}\n', 0),
(6620, 0, 'import java.awt.event.*;\n', 0),
(6621, 1, 'import java.awt.*;\n', 0),
(6622, 2, '\n', 0),
(6623, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(6624, 4, '\n', 0),
(6625, 5, '    private int mx, my;\n', 4),
(6626, 6, '    private Dimension size;\n', 8),
(6627, 7, '    private int onaroll;\n', 2),
(6628, 8, '\n', 0),
(6629, 9, '    public void init() {\n', 0),
(6630, 10, '        onaroll = 0;\n', 0),
(6631, 11, '        setSize(500, 500);\n', 0),
(6632, 12, '        size = getSize();\n', 0),
(6633, 13, '        addMouseListener(this);\n', 0),
(6634, 14, '        addMouseMotionListener(this);\n', 0),
(6635, 15, '        addComponentListener(this);\n', 0),
(6636, 16, '    }\n', 0),
(6637, 17, '\n', 0),
(6638, 18, '    public void update(Graphics g) {\n', 0),
(6639, 19, '        Dimension newSize = getSize();\n', 8),
(6640, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(6641, 21, '            g.setColor(getBackground());\n', 0),
(6642, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(6643, 23, '        } else {\n', 0),
(6644, 24, '            size = newSize;\n', 0),
(6645, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(6646, 26, '        } // Calculate new position\n', 0),
(6647, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(6648, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(6649, 29, '        paint(g);\n', 0),
(6650, 30, '    }\n', 0),
(6651, 31, '  \n', 0),
(6652, 32, '    public void paint(Graphics g) {\n', 0),
(6653, 33, '        g.setColor(Color.black);\n', 0),
(6654, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(6655, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(6656, 36, '    }\n', 0),
(6657, 37, '\n', 0),
(6658, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(6659, 39, '\n', 0),
(6660, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(6661, 41, '        e.consume();\n', 0),
(6662, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(6663, 43, '            repaint();\n', 0),
(6664, 44, '        }\n', 0),
(6665, 45, '    }\n', 0),
(6666, 46, '\n', 0),
(6667, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(6668, 48, '        int x = e.getX();\n', 0),
(6669, 49, '        int y = e.getY();\n', 0),
(6670, 50, '        e.consume();\n', 0),
(6671, 51, '        requestFocus();\n', 0),
(6672, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(6673, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(6674, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(6675, 55, '                case 0:\n', 0),
(6676, 56, '                    play(getCodeBase(), \n', 0),
(6677, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(6678, 58, '                    break;\n', 0),
(6679, 59, '                case 1:\n', 0),
(6680, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(6681, 61, '                    break;\n', 0),
(6682, 62, '                case 2:\n', 0),
(6683, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(6684, 64, '                    break;\n', 0),
(6685, 65, '                case 3:\n', 0),
(6686, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(6687, 67, '                    break;\n', 0),
(6688, 68, '                }\n', 0),
(6689, 69, '                onaroll++;\n', 0),
(6690, 70, '                if (onaroll > 5) {\n', 0),
(6691, 72, '                } else {\n', 0),
(6692, 74, '                }\n', 0),
(6693, 75, '            } else {   //first hit\n', 0),
(6694, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(6695, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(6696, 78, '                onaroll = 1;\n', 0),
(6697, 79, '            }\n', 0),
(6698, 80, '        } else {   //miss\n', 0),
(6699, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(6700, 82, '			\n', 0),
(6701, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(6702, 84, '            onaroll = 0;\n', 0),
(6703, 85, '        }\n', 0),
(6704, 86, '        repaint();\n', 0),
(6705, 87, '    }\n', 0),
(6706, 88, '\n', 0),
(6707, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(6708, 90, '\n', 0),
(6709, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(6710, 92, '        repaint();\n', 0),
(6711, 93, '    }\n', 0),
(6712, 94, '\n', 0),
(6713, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(6714, 96, '        repaint();\n', 0),
(6715, 97, '    }\n', 0),
(6716, 98, '\n', 0),
(6717, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(6718, 100, '\n', 0),
(6719, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(6720, 102, ' \n', 0),
(6721, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(6722, 104, ' \n', 0),
(6723, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(6724, 106, '        repaint();\n', 0),
(6725, 107, '    }\n', 0),
(6726, 108, ' \n', 0),
(6727, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(6728, 110, '        repaint();\n', 0),
(6729, 111, '    }\n', 0),
(6730, 112, '  \n', 0),
(6731, 113, '    public void destroy() {\n', 0),
(6732, 114, '        removeMouseListener(this);\n', 0),
(6733, 115, '        removeMouseMotionListener(this);\n', 0),
(6734, 116, '    }\n', 0),
(6735, 117, '\n', 0),
(6736, 118, '    public String getAppletInfo() {\n', 0),
(6737, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(6738, 120, '    }\n', 0),
(6739, 121, '}\n', 0),
(6740, 0, 'import java.util.Scanner;\r\n', 0),
(6741, 1, ' class Years{\r\n', 0),
(6742, 2, '   public int getYear(){\r\n', 0),
(6743, 3, '	int year;\r\n', 2),
(6744, 4, '	String enteredYear;\r\n', 2),
(6745, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(6746, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(6747, 7, '	enteredYear = sc.next();\r\n', 0),
(6748, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(6749, 9, '	return year;\r\n', 0),
(6750, 10, '   }\r\n', 0),
(6751, 11, ' }\r\n', 0),
(6752, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6753, 13, ' class Months extends Years{\r\n', 0),
(6754, 14, '   public int getMonth(){\r\n', 0),
(6755, 15, '	int month;\r\n', 2),
(6756, 16, '	String enteredMonthNumber;\r\n', 2),
(6757, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(6758, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(6759, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(6760, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(6761, 21, '	return month;\r\n', 0),
(6762, 22, '   }\r\n', 0),
(6763, 23, ' }\r\n', 0),
(6764, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6765, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(6766, 26, ' static int numDays = 0;\r\n', 4),
(6767, 27, ' public static void main(String[] args) {\r\n', 0),
(6768, 28, '   int year;\r\n', 2),
(6769, 29, '   Months m = new Months();\r\n', 0),
(6770, 30, '   int month = m.getMonth();\r\n', 0),
(6771, 31, '   \r\n', 0),
(6772, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(6773, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(6774, 34, '   }\r\n', 0),
(6775, 35, '   else {\r\n', 0),
(6776, 36, '    switch (month) {\r\n', 0),
(6777, 37, '      case 1:\r\n', 0),
(6778, 38, '      case 3:\r\n', 0),
(6779, 39, '      case 5:\r\n', 0),
(6780, 40, '      case 7:\r\n', 0),
(6781, 41, '      case 8:\r\n', 0),
(6782, 42, '      case 10:\r\n', 0),
(6783, 43, '      case 12:\r\n', 0),
(6784, 44, '        numDays = 31;\r\n', 0),
(6785, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(6786, 46, '        break;\r\n', 0),
(6787, 47, '      case 4:\r\n', 0),
(6788, 48, '      case 6:\r\n', 0),
(6789, 49, '      case 9:\r\n', 0),
(6790, 50, '      case 11:\r\n', 0),
(6791, 51, '       numDays = 30;\r\n', 0),
(6792, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(6793, 53, '       break;\r\n', 0),
(6794, 54, '      case 2:\r\n', 0),
(6795, 55, '       year = m.getYear();\r\n', 0),
(6796, 56, '       if(year < 1) {\r\n', 0),
(6797, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(6798, 58, '       }\r\n', 0),
(6799, 59, '       else{\r\n', 0),
(6800, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(6801, 61, '         numDays = 29;\r\n', 0),
(6802, 62, '		 if(year > 2020){\r\n', 0),
(6803, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(6804, 64, '         }\r\n', 0),
(6805, 65, '         else{\r\n', 0),
(6806, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(6807, 67, '         }\r\n', 0),
(6808, 68, '        }//if at line 61\r\n', 0),
(6809, 69, '        else{\r\n', 0),
(6810, 70, '         numDays = 28;\r\n', 0),
(6811, 71, '         if (year > 2020){\r\n', 0),
(6812, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(6813, 73, '         }\r\n', 0),
(6814, 74, '         else{\r\n', 0),
(6815, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(6816, 76, '         }\r\n', 0),
(6817, 77, '         break;  \r\n', 0),
(6818, 78, '        }//else at line 70\r\n', 0),
(6819, 79, '       }//else at line 60\r\n', 0),
(6820, 80, '    }//switch at line 37\r\n', 0),
(6821, 81, '   }//else at line 36\r\n', 0),
(6822, 82, '  }//method\r\n', 0),
(6823, 83, ' }//class', 0),
(6824, 0, 'class Pattern{ \r\n', 0),
(6825, 1, 'public static void main(String[] args) { \r\n', 0),
(6826, 2, '	 int rows = 5;\r\n', 2),
(6827, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(6828, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(6829, 5, '	 System.out.print(j + " "); \r\n', 0),
(6830, 6, '	 } \r\n', 0),
(6831, 7, '	 System.out.println(""); \r\n', 0),
(6832, 8, ' 	} \r\n', 0),
(6833, 9, ' 	} \r\n', 0),
(6834, 10, '} ', 0),
(6835, 0, 'import java.util.Scanner;\r\n', 0),
(6836, 1, ' class Years{\r\n', 0),
(6837, 2, '   public int getYear(){\r\n', 0),
(6838, 3, '	int year;\r\n', 2),
(6839, 4, '	String enteredYear;\r\n', 2),
(6840, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(6841, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(6842, 7, '	enteredYear = sc.next();\r\n', 0),
(6843, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(6844, 9, '	return year;\r\n', 0),
(6845, 10, '   }\r\n', 0),
(6846, 11, ' }\r\n', 0),
(6847, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6848, 13, ' class Months extends Years{\r\n', 0),
(6849, 14, '   public int getMonth(){\r\n', 0),
(6850, 15, '	int month;\r\n', 2),
(6851, 16, '	String enteredMonthNumber;\r\n', 2),
(6852, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(6853, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(6854, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(6855, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(6856, 21, '	return month;\r\n', 0),
(6857, 22, '   }\r\n', 0),
(6858, 23, ' }\r\n', 0),
(6859, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(6860, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(6861, 26, ' static int numDays = 0;\r\n', 4),
(6862, 27, ' public static void main(String[] args) {\r\n', 0),
(6863, 28, '   int year;\r\n', 2),
(6864, 29, '   Months m = new Months();\r\n', 0),
(6865, 30, '   int month = m.getMonth();\r\n', 0),
(6866, 31, '   \r\n', 0),
(6867, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(6868, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(6869, 34, '   }\r\n', 0),
(6870, 35, '   else {\r\n', 0),
(6871, 36, '    switch (month) {\r\n', 0),
(6872, 37, '      case 1:\r\n', 0),
(6873, 38, '      case 3:\r\n', 0),
(6874, 39, '      case 5:\r\n', 0),
(6875, 40, '      case 7:\r\n', 0),
(6876, 41, '      case 8:\r\n', 0),
(6877, 42, '      case 10:\r\n', 0),
(6878, 43, '      case 12:\r\n', 0),
(6879, 44, '        numDays = 31;\r\n', 0),
(6880, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(6881, 46, '        break;\r\n', 0),
(6882, 47, '      case 4:\r\n', 0),
(6883, 48, '      case 6:\r\n', 0),
(6884, 49, '      case 9:\r\n', 0),
(6885, 50, '      case 11:\r\n', 0),
(6886, 51, '       numDays = 30;\r\n', 0),
(6887, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(6888, 53, '       break;\r\n', 0),
(6889, 54, '      case 2:\r\n', 0),
(6890, 55, '       year = m.getYear();\r\n', 0),
(6891, 56, '       if(year < 1) {\r\n', 0),
(6892, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(6893, 58, '       }\r\n', 0),
(6894, 59, '       else{\r\n', 0),
(6895, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(6896, 61, '         numDays = 29;\r\n', 0),
(6897, 62, '		 if(year > 2020){\r\n', 0),
(6898, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(6899, 64, '         }\r\n', 0),
(6900, 65, '         else{\r\n', 0),
(6901, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(6902, 67, '         }\r\n', 0),
(6903, 68, '        }//if at line 61\r\n', 0),
(6904, 69, '        else{\r\n', 0),
(6905, 70, '         numDays = 28;\r\n', 0),
(6906, 71, '         if (year > 2020){\r\n', 0),
(6907, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(6908, 73, '         }\r\n', 0),
(6909, 74, '         else{\r\n', 0),
(6910, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(6911, 76, '         }\r\n', 0),
(6912, 77, '         break;  \r\n', 0),
(6913, 78, '        }//else at line 70\r\n', 0),
(6914, 79, '       }//else at line 60\r\n', 0),
(6915, 80, '    }//switch at line 37\r\n', 0),
(6916, 81, '   }//else at line 36\r\n', 0),
(6917, 82, '  }//method\r\n', 0),
(6918, 83, ' }//class', 0),
(6919, 0, 'class HelloWorld { \r\n', 0),
(6920, 1, '	public static void main(String args[]) \r\n', 0),
(6921, 2, '	{ \r\n', 0),
(6922, 3, '		System.out.println("Hello World"); \r\n', 0),
(6923, 4, '	} \r\n', 0),
(6924, 5, '} \r\n', 0),
(6925, 0, 'import java.awt.event.*;\n', 0),
(6926, 1, 'import java.awt.*;\n', 0),
(6927, 2, '\n', 0),
(6928, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(6929, 4, '\n', 0),
(6930, 5, '    private int mx, my;\n', 4),
(6931, 6, '    private Dimension size;\n', 8),
(6932, 7, '    private int onaroll;\n', 2),
(6933, 8, '\n', 0),
(6934, 9, '    public void init() {\n', 0),
(6935, 10, '        onaroll = 0;\n', 0),
(6936, 11, '        setSize(500, 500);\n', 0),
(6937, 12, '        size = getSize();\n', 0),
(6938, 13, '        addMouseListener(this);\n', 0),
(6939, 14, '        addMouseMotionListener(this);\n', 0),
(6940, 15, '        addComponentListener(this);\n', 0),
(6941, 16, '    }\n', 0),
(6942, 17, '\n', 0),
(6943, 18, '    public void update(Graphics g) {\n', 0),
(6944, 19, '        Dimension newSize = getSize();\n', 8),
(6945, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(6946, 21, '            g.setColor(getBackground());\n', 0),
(6947, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(6948, 23, '        } else {\n', 0),
(6949, 24, '            size = newSize;\n', 0),
(6950, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(6951, 26, '        } // Calculate new position\n', 0),
(6952, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(6953, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(6954, 29, '        paint(g);\n', 0),
(6955, 30, '    }\n', 0),
(6956, 31, '  \n', 0),
(6957, 32, '    public void paint(Graphics g) {\n', 0),
(6958, 33, '        g.setColor(Color.black);\n', 0),
(6959, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(6960, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(6961, 36, '    }\n', 0),
(6962, 37, '\n', 0),
(6963, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(6964, 39, '\n', 0),
(6965, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(6966, 41, '        e.consume();\n', 0),
(6967, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(6968, 43, '            repaint();\n', 0),
(6969, 44, '        }\n', 0),
(6970, 45, '    }\n', 0),
(6971, 46, '\n', 0),
(6972, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(6973, 48, '        int x = e.getX();\n', 0),
(6974, 49, '        int y = e.getY();\n', 0),
(6975, 50, '        e.consume();\n', 0),
(6976, 51, '        requestFocus();\n', 0),
(6977, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(6978, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(6979, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(6980, 55, '                case 0:\n', 0),
(6981, 56, '                    play(getCodeBase(), \n', 0),
(6982, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(6983, 58, '                    break;\n', 0),
(6984, 59, '                case 1:\n', 0),
(6985, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(6986, 61, '                    break;\n', 0),
(6987, 62, '                case 2:\n', 0),
(6988, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(6989, 64, '                    break;\n', 0),
(6990, 65, '                case 3:\n', 0),
(6991, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(6992, 67, '                    break;\n', 0),
(6993, 68, '                }\n', 0),
(6994, 69, '                onaroll++;\n', 0),
(6995, 70, '                if (onaroll > 5) {\n', 0),
(6996, 72, '                } else {\n', 0),
(6997, 74, '                }\n', 0),
(6998, 75, '            } else {   //first hit\n', 0),
(6999, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(7000, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(7001, 78, '                onaroll = 1;\n', 0),
(7002, 79, '            }\n', 0),
(7003, 80, '        } else {   //miss\n', 0),
(7004, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(7005, 82, '			\n', 0),
(7006, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(7007, 84, '            onaroll = 0;\n', 0),
(7008, 85, '        }\n', 0),
(7009, 86, '        repaint();\n', 0),
(7010, 87, '    }\n', 0),
(7011, 88, '\n', 0),
(7012, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(7013, 90, '\n', 0),
(7014, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(7015, 92, '        repaint();\n', 0),
(7016, 93, '    }\n', 0),
(7017, 94, '\n', 0),
(7018, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(7019, 96, '        repaint();\n', 0),
(7020, 97, '    }\n', 0),
(7021, 98, '\n', 0),
(7022, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(7023, 100, '\n', 0),
(7024, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(7025, 102, ' \n', 0),
(7026, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(7027, 104, ' \n', 0),
(7028, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(7029, 106, '        repaint();\n', 0),
(7030, 107, '    }\n', 0),
(7031, 108, ' \n', 0),
(7032, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(7033, 110, '        repaint();\n', 0),
(7034, 111, '    }\n', 0),
(7035, 112, '  \n', 0),
(7036, 113, '    public void destroy() {\n', 0),
(7037, 114, '        removeMouseListener(this);\n', 0),
(7038, 115, '        removeMouseMotionListener(this);\n', 0),
(7039, 116, '    }\n', 0),
(7040, 117, '\n', 0),
(7041, 118, '    public String getAppletInfo() {\n', 0),
(7042, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(7043, 120, '    }\n', 0),
(7044, 121, '}\n', 0),
(7045, 0, 'import java.awt.event.*;\n', 0),
(7046, 1, 'import java.awt.*;\n', 0),
(7047, 2, '\n', 0),
(7048, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(7049, 4, '\n', 0),
(7050, 5, '    private int mx, my;\n', 4),
(7051, 6, '    private Dimension size;\n', 8),
(7052, 7, '    private int onaroll;\n', 2),
(7053, 8, '\n', 0),
(7054, 9, '    public void init() {\n', 0),
(7055, 10, '        onaroll = 0;\n', 0),
(7056, 11, '        setSize(500, 500);\n', 0),
(7057, 12, '        size = getSize();\n', 0),
(7058, 13, '        addMouseListener(this);\n', 0),
(7059, 14, '        addMouseMotionListener(this);\n', 0),
(7060, 15, '        addComponentListener(this);\n', 0),
(7061, 16, '    }\n', 0),
(7062, 17, '\n', 0),
(7063, 18, '    public void update(Graphics g) {\n', 0),
(7064, 19, '        Dimension newSize = getSize();\n', 8),
(7065, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(7066, 21, '            g.setColor(getBackground());\n', 0),
(7067, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(7068, 23, '        } else {\n', 0),
(7069, 24, '            size = newSize;\n', 0),
(7070, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(7071, 26, '        } // Calculate new position\n', 0),
(7072, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(7073, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(7074, 29, '        paint(g);\n', 0),
(7075, 30, '    }\n', 0),
(7076, 31, '  \n', 0),
(7077, 32, '    public void paint(Graphics g) {\n', 0),
(7078, 33, '        g.setColor(Color.black);\n', 0),
(7079, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(7080, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(7081, 36, '    }\n', 0),
(7082, 37, '\n', 0),
(7083, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(7084, 39, '\n', 0),
(7085, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(7086, 41, '        e.consume();\n', 0),
(7087, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(7088, 43, '            repaint();\n', 0),
(7089, 44, '        }\n', 0),
(7090, 45, '    }\n', 0),
(7091, 46, '\n', 0),
(7092, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(7093, 48, '        int x = e.getX();\n', 0),
(7094, 49, '        int y = e.getY();\n', 0),
(7095, 50, '        e.consume();\n', 0),
(7096, 51, '        requestFocus();\n', 0),
(7097, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(7098, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(7099, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(7100, 55, '                case 0:\n', 0),
(7101, 56, '                    play(getCodeBase(), \n', 0),
(7102, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(7103, 58, '                    break;\n', 0),
(7104, 59, '                case 1:\n', 0),
(7105, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(7106, 61, '                    break;\n', 0),
(7107, 62, '                case 2:\n', 0),
(7108, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(7109, 64, '                    break;\n', 0),
(7110, 65, '                case 3:\n', 0),
(7111, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(7112, 67, '                    break;\n', 0),
(7113, 68, '                }\n', 0),
(7114, 69, '                onaroll++;\n', 0),
(7115, 70, '                if (onaroll > 5) {\n', 0),
(7116, 72, '                } else {\n', 0),
(7117, 74, '                }\n', 0),
(7118, 75, '            } else {   //first hit\n', 0),
(7119, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(7120, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(7121, 78, '                onaroll = 1;\n', 0),
(7122, 79, '            }\n', 0),
(7123, 80, '        } else {   //miss\n', 0),
(7124, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(7125, 82, '			\n', 0),
(7126, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(7127, 84, '            onaroll = 0;\n', 0),
(7128, 85, '        }\n', 0),
(7129, 86, '        repaint();\n', 0),
(7130, 87, '    }\n', 0),
(7131, 88, '\n', 0),
(7132, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(7133, 90, '\n', 0),
(7134, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(7135, 92, '        repaint();\n', 0),
(7136, 93, '    }\n', 0),
(7137, 94, '\n', 0),
(7138, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(7139, 96, '        repaint();\n', 0),
(7140, 97, '    }\n', 0),
(7141, 98, '\n', 0),
(7142, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(7143, 100, '\n', 0),
(7144, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(7145, 102, ' \n', 0),
(7146, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(7147, 104, ' \n', 0),
(7148, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(7149, 106, '        repaint();\n', 0),
(7150, 107, '    }\n', 0),
(7151, 108, ' \n', 0),
(7152, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(7153, 110, '        repaint();\n', 0),
(7154, 111, '    }\n', 0),
(7155, 112, '  \n', 0),
(7156, 113, '    public void destroy() {\n', 0),
(7157, 114, '        removeMouseListener(this);\n', 0),
(7158, 115, '        removeMouseMotionListener(this);\n', 0),
(7159, 116, '    }\n', 0),
(7160, 117, '\n', 0),
(7161, 118, '    public String getAppletInfo() {\n', 0),
(7162, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(7163, 120, '    }\n', 0),
(7164, 121, '}\n', 0),
(7165, 0, 'import java.util.Scanner;\r\n', 0),
(7166, 1, ' class Years{\r\n', 0),
(7167, 2, '   public int getYear(){\r\n', 0),
(7168, 3, '	int year;\r\n', 2),
(7169, 4, '	String enteredYear;\r\n', 2),
(7170, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(7171, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(7172, 7, '	enteredYear = sc.next();\r\n', 0),
(7173, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(7174, 9, '	return year;\r\n', 0),
(7175, 10, '   }\r\n', 0),
(7176, 11, ' }\r\n', 0),
(7177, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7178, 13, ' class Months extends Years{\r\n', 0),
(7179, 14, '   public int getMonth(){\r\n', 0),
(7180, 15, '	int month;\r\n', 2),
(7181, 16, '	String enteredMonthNumber;\r\n', 2),
(7182, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(7183, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(7184, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(7185, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(7186, 21, '	return month;\r\n', 0),
(7187, 22, '   }\r\n', 0),
(7188, 23, ' }\r\n', 0),
(7189, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7190, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(7191, 26, ' static int numDays = 0;\r\n', 4),
(7192, 27, ' public static void main(String[] args) {\r\n', 0),
(7193, 28, '   int year;\r\n', 2),
(7194, 29, '   Months m = new Months();\r\n', 0),
(7195, 30, '   int month = m.getMonth();\r\n', 0),
(7196, 31, '   \r\n', 0),
(7197, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(7198, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(7199, 34, '   }\r\n', 0),
(7200, 35, '   else {\r\n', 0),
(7201, 36, '    switch (month) {\r\n', 0),
(7202, 37, '      case 1:\r\n', 0),
(7203, 38, '      case 3:\r\n', 0),
(7204, 39, '      case 5:\r\n', 0),
(7205, 40, '      case 7:\r\n', 0),
(7206, 41, '      case 8:\r\n', 0),
(7207, 42, '      case 10:\r\n', 0),
(7208, 43, '      case 12:\r\n', 0),
(7209, 44, '        numDays = 31;\r\n', 0),
(7210, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(7211, 46, '        break;\r\n', 0),
(7212, 47, '      case 4:\r\n', 0),
(7213, 48, '      case 6:\r\n', 0),
(7214, 49, '      case 9:\r\n', 0),
(7215, 50, '      case 11:\r\n', 0),
(7216, 51, '       numDays = 30;\r\n', 0),
(7217, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(7218, 53, '       break;\r\n', 0),
(7219, 54, '      case 2:\r\n', 0),
(7220, 55, '       year = m.getYear();\r\n', 0),
(7221, 56, '       if(year < 1) {\r\n', 0),
(7222, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(7223, 58, '       }\r\n', 0),
(7224, 59, '       else{\r\n', 0),
(7225, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(7226, 61, '         numDays = 29;\r\n', 0),
(7227, 62, '		 if(year > 2020){\r\n', 0),
(7228, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(7229, 64, '         }\r\n', 0),
(7230, 65, '         else{\r\n', 0),
(7231, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(7232, 67, '         }\r\n', 0),
(7233, 68, '        }//if at line 61\r\n', 0),
(7234, 69, '        else{\r\n', 0),
(7235, 70, '         numDays = 28;\r\n', 0),
(7236, 71, '         if (year > 2020){\r\n', 0),
(7237, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(7238, 73, '         }\r\n', 0),
(7239, 74, '         else{\r\n', 0),
(7240, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(7241, 76, '         }\r\n', 0),
(7242, 77, '         break;  \r\n', 0),
(7243, 78, '        }//else at line 70\r\n', 0),
(7244, 79, '       }//else at line 60\r\n', 0),
(7245, 80, '    }//switch at line 37\r\n', 0),
(7246, 81, '   }//else at line 36\r\n', 0),
(7247, 82, '  }//method\r\n', 0),
(7248, 83, ' }//class', 0),
(7249, 0, 'public class RecursionExample2 {  \r\n', 0),
(7250, 1, 'static int count=0;  \r\n', 4),
(7251, 2, 'public int p(){  \r\n', 0),
(7252, 3, 'count++;  \r\n', 0),
(7253, 4, 'if(count<=5){  \r\n', 0),
(7254, 5, 'System.out.println("hello "+count);  \r\n', 0),
(7255, 6, 'public int p();  \r\n', 0),
(7256, 7, '}  \r\n', 0),
(7257, 8, '}  \r\n', 0),
(7258, 9, 'public static void main(String[] args) {  \r\n', 0),
(7259, 10, 'p();  \r\n', 0),
(7260, 11, '}  \r\n', 0),
(7261, 12, '}  ', 0),
(7262, 0, 'import java.awt.event.*;\n', 0),
(7263, 1, 'import java.awt.*;\n', 0),
(7264, 2, '\n', 0),
(7265, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(7266, 4, '\n', 0),
(7267, 5, '    private int mx, my;\n', 4),
(7268, 6, '    private Dimension size;\n', 8),
(7269, 7, '    private int onaroll;\n', 2),
(7270, 8, '\n', 0),
(7271, 9, '    public void init() {\n', 0),
(7272, 10, '        onaroll = 0;\n', 0),
(7273, 11, '        setSize(500, 500);\n', 0),
(7274, 12, '        size = getSize();\n', 0),
(7275, 13, '        addMouseListener(this);\n', 0),
(7276, 14, '        addMouseMotionListener(this);\n', 0),
(7277, 15, '        addComponentListener(this);\n', 0),
(7278, 16, '    }\n', 0),
(7279, 17, '\n', 0),
(7280, 18, '    public void update(Graphics g) {\n', 0),
(7281, 19, '        Dimension newSize = getSize();\n', 8),
(7282, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(7283, 21, '            g.setColor(getBackground());\n', 0),
(7284, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(7285, 23, '        } else {\n', 0),
(7286, 24, '            size = newSize;\n', 0),
(7287, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(7288, 26, '        } // Calculate new position\n', 0),
(7289, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(7290, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(7291, 29, '        paint(g);\n', 0),
(7292, 30, '    }\n', 0),
(7293, 31, '  \n', 0),
(7294, 32, '    public void paint(Graphics g) {\n', 0),
(7295, 33, '        g.setColor(Color.black);\n', 0),
(7296, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(7297, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(7298, 36, '    }\n', 0),
(7299, 37, '\n', 0),
(7300, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(7301, 39, '\n', 0),
(7302, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(7303, 41, '        e.consume();\n', 0),
(7304, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(7305, 43, '            repaint();\n', 0),
(7306, 44, '        }\n', 0),
(7307, 45, '    }\n', 0),
(7308, 46, '\n', 0),
(7309, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(7310, 48, '        int x = e.getX();\n', 0),
(7311, 49, '        int y = e.getY();\n', 0),
(7312, 50, '        e.consume();\n', 0),
(7313, 51, '        requestFocus();\n', 0),
(7314, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(7315, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(7316, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(7317, 55, '                case 0:\n', 0),
(7318, 56, '                    play(getCodeBase(), \n', 0),
(7319, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(7320, 58, '                    break;\n', 0),
(7321, 59, '                case 1:\n', 0),
(7322, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(7323, 61, '                    break;\n', 0),
(7324, 62, '                case 2:\n', 0),
(7325, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(7326, 64, '                    break;\n', 0),
(7327, 65, '                case 3:\n', 0),
(7328, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(7329, 67, '                    break;\n', 0),
(7330, 68, '                }\n', 0),
(7331, 69, '                onaroll++;\n', 0),
(7332, 70, '                if (onaroll > 5) {\n', 0),
(7333, 72, '                } else {\n', 0),
(7334, 74, '                }\n', 0),
(7335, 75, '            } else {   //first hit\n', 0),
(7336, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(7337, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(7338, 78, '                onaroll = 1;\n', 0),
(7339, 79, '            }\n', 0),
(7340, 80, '        } else {   //miss\n', 0),
(7341, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(7342, 82, '			\n', 0),
(7343, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(7344, 84, '            onaroll = 0;\n', 0),
(7345, 85, '        }\n', 0),
(7346, 86, '        repaint();\n', 0),
(7347, 87, '    }\n', 0),
(7348, 88, '\n', 0),
(7349, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(7350, 90, '\n', 0),
(7351, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(7352, 92, '        repaint();\n', 0),
(7353, 93, '    }\n', 0),
(7354, 94, '\n', 0),
(7355, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(7356, 96, '        repaint();\n', 0),
(7357, 97, '    }\n', 0),
(7358, 98, '\n', 0),
(7359, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(7360, 100, '\n', 0),
(7361, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(7362, 102, ' \n', 0),
(7363, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(7364, 104, ' \n', 0),
(7365, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(7366, 106, '        repaint();\n', 0),
(7367, 107, '    }\n', 0),
(7368, 108, ' \n', 0),
(7369, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(7370, 110, '        repaint();\n', 0),
(7371, 111, '    }\n', 0),
(7372, 112, '  \n', 0),
(7373, 113, '    public void destroy() {\n', 0),
(7374, 114, '        removeMouseListener(this);\n', 0),
(7375, 115, '        removeMouseMotionListener(this);\n', 0),
(7376, 116, '    }\n', 0),
(7377, 117, '\n', 0),
(7378, 118, '    public String getAppletInfo() {\n', 0),
(7379, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(7380, 120, '    }\n', 0),
(7381, 121, '}\n', 0),
(7382, 0, 'import java.awt.event.*;\n', 0),
(7383, 1, 'import java.awt.*;\n', 0),
(7384, 2, '\n', 0),
(7385, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(7386, 4, '\n', 0),
(7387, 5, '    private int mx, my;\n', 4),
(7388, 6, '    private Dimension size;\n', 8),
(7389, 7, '    private int onaroll;\n', 2),
(7390, 8, '\n', 0),
(7391, 9, '    public void init() {\n', 0),
(7392, 10, '        onaroll = 0;\n', 0),
(7393, 11, '        setSize(500, 500);\n', 0),
(7394, 12, '        size = getSize();\n', 0),
(7395, 13, '        addMouseListener(this);\n', 0),
(7396, 14, '        addMouseMotionListener(this);\n', 0),
(7397, 15, '        addComponentListener(this);\n', 0),
(7398, 16, '    }\n', 0),
(7399, 17, '\n', 0),
(7400, 18, '    public void update(Graphics g) {\n', 0),
(7401, 19, '        Dimension newSize = getSize();\n', 8),
(7402, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(7403, 21, '            g.setColor(getBackground());\n', 0),
(7404, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(7405, 23, '        } else {\n', 0),
(7406, 24, '            size = newSize;\n', 0),
(7407, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(7408, 26, '        } // Calculate new position\n', 0),
(7409, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(7410, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(7411, 29, '        paint(g);\n', 0),
(7412, 30, '    }\n', 0),
(7413, 31, '  \n', 0),
(7414, 32, '    public void paint(Graphics g) {\n', 0),
(7415, 33, '        g.setColor(Color.black);\n', 0),
(7416, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(7417, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(7418, 36, '    }\n', 0),
(7419, 37, '\n', 0),
(7420, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(7421, 39, '\n', 0),
(7422, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(7423, 41, '        e.consume();\n', 0),
(7424, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(7425, 43, '            repaint();\n', 0),
(7426, 44, '        }\n', 0),
(7427, 45, '    }\n', 0),
(7428, 46, '\n', 0),
(7429, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(7430, 48, '        int x = e.getX();\n', 0),
(7431, 49, '        int y = e.getY();\n', 0),
(7432, 50, '        e.consume();\n', 0),
(7433, 51, '        requestFocus();\n', 0),
(7434, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(7435, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(7436, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(7437, 55, '                case 0:\n', 0),
(7438, 56, '                    play(getCodeBase(), \n', 0),
(7439, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(7440, 58, '                    break;\n', 0),
(7441, 59, '                case 1:\n', 0),
(7442, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(7443, 61, '                    break;\n', 0),
(7444, 62, '                case 2:\n', 0),
(7445, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(7446, 64, '                    break;\n', 0),
(7447, 65, '                case 3:\n', 0),
(7448, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(7449, 67, '                    break;\n', 0),
(7450, 68, '                }\n', 0),
(7451, 69, '                onaroll++;\n', 0),
(7452, 70, '                if (onaroll > 5) {\n', 0),
(7453, 72, '                } else {\n', 0),
(7454, 74, '                }\n', 0),
(7455, 75, '            } else {   //first hit\n', 0),
(7456, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(7457, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(7458, 78, '                onaroll = 1;\n', 0),
(7459, 79, '            }\n', 0),
(7460, 80, '        } else {   //miss\n', 0),
(7461, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(7462, 82, '			\n', 0),
(7463, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(7464, 84, '            onaroll = 0;\n', 0),
(7465, 85, '        }\n', 0),
(7466, 86, '        repaint();\n', 0),
(7467, 87, '    }\n', 0),
(7468, 88, '\n', 0),
(7469, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(7470, 90, '\n', 0),
(7471, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(7472, 92, '        repaint();\n', 0),
(7473, 93, '    }\n', 0),
(7474, 94, '\n', 0),
(7475, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(7476, 96, '        repaint();\n', 0),
(7477, 97, '    }\n', 0),
(7478, 98, '\n', 0),
(7479, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(7480, 100, '\n', 0),
(7481, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(7482, 102, ' \n', 0),
(7483, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(7484, 104, ' \n', 0),
(7485, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(7486, 106, '        repaint();\n', 0),
(7487, 107, '    }\n', 0),
(7488, 108, ' \n', 0),
(7489, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(7490, 110, '        repaint();\n', 0),
(7491, 111, '    }\n', 0),
(7492, 112, '  \n', 0),
(7493, 113, '    public void destroy() {\n', 0),
(7494, 114, '        removeMouseListener(this);\n', 0),
(7495, 115, '        removeMouseMotionListener(this);\n', 0),
(7496, 116, '    }\n', 0),
(7497, 117, '\n', 0),
(7498, 118, '    public String getAppletInfo() {\n', 0),
(7499, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(7500, 120, '    }\n', 0),
(7501, 121, '}\n', 0),
(7502, 0, 'import java.util.Scanner;\r\n', 0),
(7503, 1, ' class Years{\r\n', 0),
(7504, 2, '   public int getYear(){\r\n', 0),
(7505, 3, '	int year;\r\n', 2),
(7506, 4, '	String enteredYear;\r\n', 2),
(7507, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(7508, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(7509, 7, '	enteredYear = sc.next();\r\n', 0),
(7510, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(7511, 9, '	return year;\r\n', 0),
(7512, 10, '   }\r\n', 0),
(7513, 11, ' }\r\n', 0),
(7514, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7515, 13, ' class Months extends Years{\r\n', 0),
(7516, 14, '   public int getMonth(){\r\n', 0),
(7517, 15, '	int month;\r\n', 2),
(7518, 16, '	String enteredMonthNumber;\r\n', 2),
(7519, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(7520, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(7521, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(7522, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(7523, 21, '	return month;\r\n', 0),
(7524, 22, '   }\r\n', 0),
(7525, 23, ' }\r\n', 0),
(7526, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7527, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(7528, 26, ' static int numDays = 0;\r\n', 4),
(7529, 27, ' public static void main(String[] args) {\r\n', 0),
(7530, 28, '   int year;\r\n', 2),
(7531, 29, '   Months m = new Months();\r\n', 0),
(7532, 30, '   int month = m.getMonth();\r\n', 0),
(7533, 31, '   \r\n', 0),
(7534, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(7535, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(7536, 34, '   }\r\n', 0),
(7537, 35, '   else {\r\n', 0),
(7538, 36, '    switch (month) {\r\n', 0),
(7539, 37, '      case 1:\r\n', 0),
(7540, 38, '      case 3:\r\n', 0),
(7541, 39, '      case 5:\r\n', 0),
(7542, 40, '      case 7:\r\n', 0),
(7543, 41, '      case 8:\r\n', 0),
(7544, 42, '      case 10:\r\n', 0),
(7545, 43, '      case 12:\r\n', 0),
(7546, 44, '        numDays = 31;\r\n', 0),
(7547, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(7548, 46, '        break;\r\n', 0),
(7549, 47, '      case 4:\r\n', 0),
(7550, 48, '      case 6:\r\n', 0),
(7551, 49, '      case 9:\r\n', 0),
(7552, 50, '      case 11:\r\n', 0),
(7553, 51, '       numDays = 30;\r\n', 0),
(7554, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(7555, 53, '       break;\r\n', 0),
(7556, 54, '      case 2:\r\n', 0),
(7557, 55, '       year = m.getYear();\r\n', 0),
(7558, 56, '       if(year < 1) {\r\n', 0),
(7559, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(7560, 58, '       }\r\n', 0),
(7561, 59, '       else{\r\n', 0),
(7562, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(7563, 61, '         numDays = 29;\r\n', 0),
(7564, 62, '		 if(year > 2020){\r\n', 0),
(7565, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(7566, 64, '         }\r\n', 0),
(7567, 65, '         else{\r\n', 0),
(7568, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(7569, 67, '         }\r\n', 0),
(7570, 68, '        }//if at line 61\r\n', 0),
(7571, 69, '        else{\r\n', 0),
(7572, 70, '         numDays = 28;\r\n', 0),
(7573, 71, '         if (year > 2020){\r\n', 0),
(7574, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(7575, 73, '         }\r\n', 0),
(7576, 74, '         else{\r\n', 0),
(7577, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(7578, 76, '         }\r\n', 0),
(7579, 77, '         break;  \r\n', 0),
(7580, 78, '        }//else at line 70\r\n', 0),
(7581, 79, '       }//else at line 60\r\n', 0),
(7582, 80, '    }//switch at line 37\r\n', 0),
(7583, 81, '   }//else at line 36\r\n', 0),
(7584, 82, '  }//method\r\n', 0),
(7585, 83, ' }//class', 0),
(7586, 0, 'class Pattern{ \r\n', 0),
(7587, 1, 'public static void main(String[] args) { \r\n', 0),
(7588, 2, '	 int rows = 5;\r\n', 2),
(7589, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(7590, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(7591, 5, '	 System.out.print(j + " "); \r\n', 0),
(7592, 6, '	 } \r\n', 0),
(7593, 7, '	 System.out.println(""); \r\n', 0),
(7594, 8, ' 	} \r\n', 0),
(7595, 9, ' 	} \r\n', 0),
(7596, 10, '} ', 0),
(7597, 0, 'import java.util.Scanner;\r\n', 0),
(7598, 1, ' class Years{\r\n', 0),
(7599, 2, '   public int getYear(){\r\n', 0),
(7600, 3, '	int year;\r\n', 2),
(7601, 4, '	String enteredYear;\r\n', 2),
(7602, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(7603, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(7604, 7, '	enteredYear = sc.next();\r\n', 0),
(7605, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(7606, 9, '	return year;\r\n', 0),
(7607, 10, '   }\r\n', 0),
(7608, 11, ' }\r\n', 0),
(7609, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7610, 13, ' class Months extends Years{\r\n', 0),
(7611, 14, '   public int getMonth(){\r\n', 0),
(7612, 15, '	int month;\r\n', 2),
(7613, 16, '	String enteredMonthNumber;\r\n', 2),
(7614, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(7615, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(7616, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(7617, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(7618, 21, '	return month;\r\n', 0),
(7619, 22, '   }\r\n', 0),
(7620, 23, ' }\r\n', 0),
(7621, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7622, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(7623, 26, ' static int numDays = 0;\r\n', 4),
(7624, 27, ' public static void main(String[] args) {\r\n', 0),
(7625, 28, '   int year;\r\n', 2),
(7626, 29, '   Months m = new Months();\r\n', 0),
(7627, 30, '   int month = m.getMonth();\r\n', 0),
(7628, 31, '   \r\n', 0),
(7629, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(7630, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(7631, 34, '   }\r\n', 0),
(7632, 35, '   else {\r\n', 0),
(7633, 36, '    switch (month) {\r\n', 0),
(7634, 37, '      case 1:\r\n', 0),
(7635, 38, '      case 3:\r\n', 0),
(7636, 39, '      case 5:\r\n', 0),
(7637, 40, '      case 7:\r\n', 0),
(7638, 41, '      case 8:\r\n', 0),
(7639, 42, '      case 10:\r\n', 0),
(7640, 43, '      case 12:\r\n', 0),
(7641, 44, '        numDays = 31;\r\n', 0),
(7642, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(7643, 46, '        break;\r\n', 0),
(7644, 47, '      case 4:\r\n', 0),
(7645, 48, '      case 6:\r\n', 0),
(7646, 49, '      case 9:\r\n', 0),
(7647, 50, '      case 11:\r\n', 0),
(7648, 51, '       numDays = 30;\r\n', 0),
(7649, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(7650, 53, '       break;\r\n', 0),
(7651, 54, '      case 2:\r\n', 0),
(7652, 55, '       year = m.getYear();\r\n', 0),
(7653, 56, '       if(year < 1) {\r\n', 0),
(7654, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(7655, 58, '       }\r\n', 0),
(7656, 59, '       else{\r\n', 0),
(7657, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(7658, 61, '         numDays = 29;\r\n', 0),
(7659, 62, '		 if(year > 2020){\r\n', 0),
(7660, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(7661, 64, '         }\r\n', 0),
(7662, 65, '         else{\r\n', 0),
(7663, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(7664, 67, '         }\r\n', 0),
(7665, 68, '        }//if at line 61\r\n', 0),
(7666, 69, '        else{\r\n', 0),
(7667, 70, '         numDays = 28;\r\n', 0),
(7668, 71, '         if (year > 2020){\r\n', 0),
(7669, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(7670, 73, '         }\r\n', 0),
(7671, 74, '         else{\r\n', 0),
(7672, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(7673, 76, '         }\r\n', 0),
(7674, 77, '         break;  \r\n', 0),
(7675, 78, '        }//else at line 70\r\n', 0),
(7676, 79, '       }//else at line 60\r\n', 0),
(7677, 80, '    }//switch at line 37\r\n', 0),
(7678, 81, '   }//else at line 36\r\n', 0),
(7679, 82, '  }//method\r\n', 0),
(7680, 83, ' }//class', 0),
(7681, 0, 'class HelloWorld { \r\n', 0),
(7682, 1, '	public static void main(String args[]) \r\n', 0),
(7683, 2, '	{ \r\n', 0),
(7684, 3, '		System.out.println("Hello World"); \r\n', 0),
(7685, 4, '	} \r\n', 0),
(7686, 5, '} \r\n', 0),
(7687, 0, 'import java.awt.event.*;\n', 0),
(7688, 1, 'import java.awt.*;\n', 0),
(7689, 2, '\n', 0),
(7690, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(7691, 4, '\n', 0),
(7692, 5, '    private int mx, my;\n', 4),
(7693, 6, '    private Dimension size;\n', 8),
(7694, 7, '    private int onaroll;\n', 2),
(7695, 8, '\n', 0),
(7696, 9, '    public void init() {\n', 0),
(7697, 10, '        onaroll = 0;\n', 0),
(7698, 11, '        setSize(500, 500);\n', 0),
(7699, 12, '        size = getSize();\n', 0),
(7700, 13, '        addMouseListener(this);\n', 0),
(7701, 14, '        addMouseMotionListener(this);\n', 0),
(7702, 15, '        addComponentListener(this);\n', 0),
(7703, 16, '    }\n', 0),
(7704, 17, '\n', 0),
(7705, 18, '    public void update(Graphics g) {\n', 0),
(7706, 19, '        Dimension newSize = getSize();\n', 8),
(7707, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(7708, 21, '            g.setColor(getBackground());\n', 0),
(7709, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(7710, 23, '        } else {\n', 0),
(7711, 24, '            size = newSize;\n', 0),
(7712, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(7713, 26, '        } // Calculate new position\n', 0),
(7714, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(7715, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(7716, 29, '        paint(g);\n', 0),
(7717, 30, '    }\n', 0),
(7718, 31, '  \n', 0),
(7719, 32, '    public void paint(Graphics g) {\n', 0),
(7720, 33, '        g.setColor(Color.black);\n', 0),
(7721, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(7722, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(7723, 36, '    }\n', 0),
(7724, 37, '\n', 0),
(7725, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(7726, 39, '\n', 0),
(7727, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(7728, 41, '        e.consume();\n', 0),
(7729, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(7730, 43, '            repaint();\n', 0),
(7731, 44, '        }\n', 0),
(7732, 45, '    }\n', 0),
(7733, 46, '\n', 0),
(7734, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(7735, 48, '        int x = e.getX();\n', 0),
(7736, 49, '        int y = e.getY();\n', 0),
(7737, 50, '        e.consume();\n', 0),
(7738, 51, '        requestFocus();\n', 0),
(7739, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(7740, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(7741, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(7742, 55, '                case 0:\n', 0),
(7743, 56, '                    play(getCodeBase(), \n', 0),
(7744, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(7745, 58, '                    break;\n', 0),
(7746, 59, '                case 1:\n', 0),
(7747, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(7748, 61, '                    break;\n', 0),
(7749, 62, '                case 2:\n', 0),
(7750, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(7751, 64, '                    break;\n', 0),
(7752, 65, '                case 3:\n', 0),
(7753, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(7754, 67, '                    break;\n', 0),
(7755, 68, '                }\n', 0),
(7756, 69, '                onaroll++;\n', 0),
(7757, 70, '                if (onaroll > 5) {\n', 0),
(7758, 72, '                } else {\n', 0),
(7759, 74, '                }\n', 0),
(7760, 75, '            } else {   //first hit\n', 0),
(7761, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(7762, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(7763, 78, '                onaroll = 1;\n', 0),
(7764, 79, '            }\n', 0),
(7765, 80, '        } else {   //miss\n', 0),
(7766, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(7767, 82, '			\n', 0),
(7768, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(7769, 84, '            onaroll = 0;\n', 0),
(7770, 85, '        }\n', 0),
(7771, 86, '        repaint();\n', 0),
(7772, 87, '    }\n', 0),
(7773, 88, '\n', 0),
(7774, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(7775, 90, '\n', 0),
(7776, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(7777, 92, '        repaint();\n', 0),
(7778, 93, '    }\n', 0),
(7779, 94, '\n', 0),
(7780, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(7781, 96, '        repaint();\n', 0),
(7782, 97, '    }\n', 0),
(7783, 98, '\n', 0),
(7784, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(7785, 100, '\n', 0),
(7786, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(7787, 102, ' \n', 0),
(7788, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(7789, 104, ' \n', 0),
(7790, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(7791, 106, '        repaint();\n', 0),
(7792, 107, '    }\n', 0),
(7793, 108, ' \n', 0),
(7794, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(7795, 110, '        repaint();\n', 0),
(7796, 111, '    }\n', 0),
(7797, 112, '  \n', 0),
(7798, 113, '    public void destroy() {\n', 0),
(7799, 114, '        removeMouseListener(this);\n', 0),
(7800, 115, '        removeMouseMotionListener(this);\n', 0),
(7801, 116, '    }\n', 0),
(7802, 117, '\n', 0),
(7803, 118, '    public String getAppletInfo() {\n', 0),
(7804, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(7805, 120, '    }\n', 0),
(7806, 121, '}\n', 0),
(7807, 0, 'import java.awt.event.*;\n', 0),
(7808, 1, 'import java.awt.*;\n', 0),
(7809, 2, '\n', 0),
(7810, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(7811, 4, '\n', 0),
(7812, 5, '    private int mx, my;\n', 4),
(7813, 6, '    private Dimension size;\n', 8),
(7814, 7, '    private int onaroll;\n', 2),
(7815, 8, '\n', 0),
(7816, 9, '    public void init() {\n', 0),
(7817, 10, '        onaroll = 0;\n', 0),
(7818, 11, '        setSize(500, 500);\n', 0),
(7819, 12, '        size = getSize();\n', 0),
(7820, 13, '        addMouseListener(this);\n', 0),
(7821, 14, '        addMouseMotionListener(this);\n', 0),
(7822, 15, '        addComponentListener(this);\n', 0),
(7823, 16, '    }\n', 0),
(7824, 17, '\n', 0),
(7825, 18, '    public void update(Graphics g) {\n', 0),
(7826, 19, '        Dimension newSize = getSize();\n', 8),
(7827, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(7828, 21, '            g.setColor(getBackground());\n', 0),
(7829, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(7830, 23, '        } else {\n', 0),
(7831, 24, '            size = newSize;\n', 0),
(7832, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(7833, 26, '        } // Calculate new position\n', 0),
(7834, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(7835, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(7836, 29, '        paint(g);\n', 0),
(7837, 30, '    }\n', 0),
(7838, 31, '  \n', 0),
(7839, 32, '    public void paint(Graphics g) {\n', 0),
(7840, 33, '        g.setColor(Color.black);\n', 0),
(7841, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(7842, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(7843, 36, '    }\n', 0),
(7844, 37, '\n', 0),
(7845, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(7846, 39, '\n', 0),
(7847, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(7848, 41, '        e.consume();\n', 0),
(7849, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(7850, 43, '            repaint();\n', 0),
(7851, 44, '        }\n', 0),
(7852, 45, '    }\n', 0),
(7853, 46, '\n', 0),
(7854, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(7855, 48, '        int x = e.getX();\n', 0),
(7856, 49, '        int y = e.getY();\n', 0),
(7857, 50, '        e.consume();\n', 0),
(7858, 51, '        requestFocus();\n', 0),
(7859, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(7860, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(7861, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(7862, 55, '                case 0:\n', 0),
(7863, 56, '                    play(getCodeBase(), \n', 0),
(7864, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(7865, 58, '                    break;\n', 0),
(7866, 59, '                case 1:\n', 0),
(7867, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(7868, 61, '                    break;\n', 0),
(7869, 62, '                case 2:\n', 0),
(7870, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(7871, 64, '                    break;\n', 0),
(7872, 65, '                case 3:\n', 0),
(7873, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(7874, 67, '                    break;\n', 0),
(7875, 68, '                }\n', 0),
(7876, 69, '                onaroll++;\n', 0),
(7877, 70, '                if (onaroll > 5) {\n', 0),
(7878, 72, '                } else {\n', 0),
(7879, 74, '                }\n', 0),
(7880, 75, '            } else {   //first hit\n', 0),
(7881, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(7882, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(7883, 78, '                onaroll = 1;\n', 0),
(7884, 79, '            }\n', 0),
(7885, 80, '        } else {   //miss\n', 0),
(7886, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(7887, 82, '			\n', 0),
(7888, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(7889, 84, '            onaroll = 0;\n', 0),
(7890, 85, '        }\n', 0),
(7891, 86, '        repaint();\n', 0),
(7892, 87, '    }\n', 0),
(7893, 88, '\n', 0),
(7894, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(7895, 90, '\n', 0),
(7896, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(7897, 92, '        repaint();\n', 0),
(7898, 93, '    }\n', 0),
(7899, 94, '\n', 0),
(7900, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(7901, 96, '        repaint();\n', 0),
(7902, 97, '    }\n', 0),
(7903, 98, '\n', 0),
(7904, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(7905, 100, '\n', 0),
(7906, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(7907, 102, ' \n', 0),
(7908, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(7909, 104, ' \n', 0),
(7910, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(7911, 106, '        repaint();\n', 0),
(7912, 107, '    }\n', 0),
(7913, 108, ' \n', 0),
(7914, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(7915, 110, '        repaint();\n', 0),
(7916, 111, '    }\n', 0),
(7917, 112, '  \n', 0),
(7918, 113, '    public void destroy() {\n', 0),
(7919, 114, '        removeMouseListener(this);\n', 0),
(7920, 115, '        removeMouseMotionListener(this);\n', 0),
(7921, 116, '    }\n', 0),
(7922, 117, '\n', 0),
(7923, 118, '    public String getAppletInfo() {\n', 0),
(7924, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(7925, 120, '    }\n', 0),
(7926, 121, '}\n', 0),
(7927, 0, 'import java.util.Scanner;\r\n', 0),
(7928, 1, ' class Years{\r\n', 0),
(7929, 2, '   public int getYear(){\r\n', 0),
(7930, 3, '	int year;\r\n', 2),
(7931, 4, '	String enteredYear;\r\n', 2),
(7932, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(7933, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(7934, 7, '	enteredYear = sc.next();\r\n', 0),
(7935, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(7936, 9, '	return year;\r\n', 0),
(7937, 10, '   }\r\n', 0),
(7938, 11, ' }\r\n', 0),
(7939, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7940, 13, ' class Months extends Years{\r\n', 0),
(7941, 14, '   public int getMonth(){\r\n', 0),
(7942, 15, '	int month;\r\n', 2),
(7943, 16, '	String enteredMonthNumber;\r\n', 2),
(7944, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(7945, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(7946, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(7947, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(7948, 21, '	return month;\r\n', 0),
(7949, 22, '   }\r\n', 0),
(7950, 23, ' }\r\n', 0),
(7951, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(7952, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(7953, 26, ' static int numDays = 0;\r\n', 4),
(7954, 27, ' public static void main(String[] args) {\r\n', 0),
(7955, 28, '   int year;\r\n', 2),
(7956, 29, '   Months m = new Months();\r\n', 0),
(7957, 30, '   int month = m.getMonth();\r\n', 0),
(7958, 31, '   \r\n', 0),
(7959, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(7960, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(7961, 34, '   }\r\n', 0),
(7962, 35, '   else {\r\n', 0),
(7963, 36, '    switch (month) {\r\n', 0),
(7964, 37, '      case 1:\r\n', 0),
(7965, 38, '      case 3:\r\n', 0),
(7966, 39, '      case 5:\r\n', 0),
(7967, 40, '      case 7:\r\n', 0),
(7968, 41, '      case 8:\r\n', 0),
(7969, 42, '      case 10:\r\n', 0),
(7970, 43, '      case 12:\r\n', 0),
(7971, 44, '        numDays = 31;\r\n', 0),
(7972, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(7973, 46, '        break;\r\n', 0),
(7974, 47, '      case 4:\r\n', 0),
(7975, 48, '      case 6:\r\n', 0),
(7976, 49, '      case 9:\r\n', 0),
(7977, 50, '      case 11:\r\n', 0),
(7978, 51, '       numDays = 30;\r\n', 0),
(7979, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(7980, 53, '       break;\r\n', 0),
(7981, 54, '      case 2:\r\n', 0),
(7982, 55, '       year = m.getYear();\r\n', 0),
(7983, 56, '       if(year < 1) {\r\n', 0),
(7984, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(7985, 58, '       }\r\n', 0),
(7986, 59, '       else{\r\n', 0),
(7987, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(7988, 61, '         numDays = 29;\r\n', 0),
(7989, 62, '		 if(year > 2020){\r\n', 0),
(7990, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(7991, 64, '         }\r\n', 0),
(7992, 65, '         else{\r\n', 0),
(7993, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(7994, 67, '         }\r\n', 0),
(7995, 68, '        }//if at line 61\r\n', 0),
(7996, 69, '        else{\r\n', 0),
(7997, 70, '         numDays = 28;\r\n', 0),
(7998, 71, '         if (year > 2020){\r\n', 0),
(7999, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(8000, 73, '         }\r\n', 0),
(8001, 74, '         else{\r\n', 0),
(8002, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(8003, 76, '         }\r\n', 0),
(8004, 77, '         break;  \r\n', 0),
(8005, 78, '        }//else at line 70\r\n', 0),
(8006, 79, '       }//else at line 60\r\n', 0),
(8007, 80, '    }//switch at line 37\r\n', 0),
(8008, 81, '   }//else at line 36\r\n', 0),
(8009, 82, '  }//method\r\n', 0),
(8010, 83, ' }//class', 0),
(8011, 0, 'public class RecursionExample2 {  \r\n', 0),
(8012, 1, 'static int count=0;  \r\n', 4),
(8013, 2, 'public int p(){  \r\n', 0),
(8014, 3, 'count++;  \r\n', 0),
(8015, 4, 'if(count<=5){  \r\n', 0),
(8016, 5, 'System.out.println("hello "+count);  \r\n', 0),
(8017, 6, 'public int p();  \r\n', 0),
(8018, 7, '}  \r\n', 0),
(8019, 8, '}  \r\n', 0),
(8020, 9, 'public static void main(String[] args) {  \r\n', 0),
(8021, 10, 'p();  \r\n', 0),
(8022, 11, '}  \r\n', 0),
(8023, 12, '}  ', 0),
(8024, 0, 'import java.awt.event.*;\n', 0),
(8025, 1, 'import java.awt.*;\n', 0),
(8026, 2, '\n', 0),
(8027, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(8028, 4, '\n', 0),
(8029, 5, '    private int mx, my;\n', 4),
(8030, 6, '    private Dimension size;\n', 8),
(8031, 7, '    private int onaroll;\n', 2),
(8032, 8, '\n', 0),
(8033, 9, '    public void init() {\n', 0),
(8034, 10, '        onaroll = 0;\n', 0),
(8035, 11, '        setSize(500, 500);\n', 0),
(8036, 12, '        size = getSize();\n', 0),
(8037, 13, '        addMouseListener(this);\n', 0),
(8038, 14, '        addMouseMotionListener(this);\n', 0),
(8039, 15, '        addComponentListener(this);\n', 0),
(8040, 16, '    }\n', 0),
(8041, 17, '\n', 0),
(8042, 18, '    public void update(Graphics g) {\n', 0),
(8043, 19, '        Dimension newSize = getSize();\n', 8),
(8044, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(8045, 21, '            g.setColor(getBackground());\n', 0),
(8046, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(8047, 23, '        } else {\n', 0),
(8048, 24, '            size = newSize;\n', 0),
(8049, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(8050, 26, '        } // Calculate new position\n', 0),
(8051, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(8052, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(8053, 29, '        paint(g);\n', 0),
(8054, 30, '    }\n', 0),
(8055, 31, '  \n', 0),
(8056, 32, '    public void paint(Graphics g) {\n', 0),
(8057, 33, '        g.setColor(Color.black);\n', 0),
(8058, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(8059, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(8060, 36, '    }\n', 0),
(8061, 37, '\n', 0),
(8062, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(8063, 39, '\n', 0),
(8064, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(8065, 41, '        e.consume();\n', 0),
(8066, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(8067, 43, '            repaint();\n', 0),
(8068, 44, '        }\n', 0),
(8069, 45, '    }\n', 0),
(8070, 46, '\n', 0),
(8071, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(8072, 48, '        int x = e.getX();\n', 0),
(8073, 49, '        int y = e.getY();\n', 0),
(8074, 50, '        e.consume();\n', 0),
(8075, 51, '        requestFocus();\n', 0),
(8076, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(8077, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(8078, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(8079, 55, '                case 0:\n', 0),
(8080, 56, '                    play(getCodeBase(), \n', 0),
(8081, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(8082, 58, '                    break;\n', 0),
(8083, 59, '                case 1:\n', 0),
(8084, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(8085, 61, '                    break;\n', 0),
(8086, 62, '                case 2:\n', 0),
(8087, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(8088, 64, '                    break;\n', 0),
(8089, 65, '                case 3:\n', 0),
(8090, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(8091, 67, '                    break;\n', 0),
(8092, 68, '                }\n', 0),
(8093, 69, '                onaroll++;\n', 0),
(8094, 70, '                if (onaroll > 5) {\n', 0),
(8095, 72, '                } else {\n', 0),
(8096, 74, '                }\n', 0),
(8097, 75, '            } else {   //first hit\n', 0),
(8098, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(8099, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(8100, 78, '                onaroll = 1;\n', 0),
(8101, 79, '            }\n', 0),
(8102, 80, '        } else {   //miss\n', 0),
(8103, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(8104, 82, '			\n', 0),
(8105, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(8106, 84, '            onaroll = 0;\n', 0),
(8107, 85, '        }\n', 0),
(8108, 86, '        repaint();\n', 0),
(8109, 87, '    }\n', 0),
(8110, 88, '\n', 0),
(8111, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(8112, 90, '\n', 0),
(8113, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(8114, 92, '        repaint();\n', 0),
(8115, 93, '    }\n', 0),
(8116, 94, '\n', 0),
(8117, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(8118, 96, '        repaint();\n', 0),
(8119, 97, '    }\n', 0),
(8120, 98, '\n', 0),
(8121, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(8122, 100, '\n', 0),
(8123, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(8124, 102, ' \n', 0),
(8125, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(8126, 104, ' \n', 0),
(8127, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(8128, 106, '        repaint();\n', 0),
(8129, 107, '    }\n', 0),
(8130, 108, ' \n', 0),
(8131, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(8132, 110, '        repaint();\n', 0),
(8133, 111, '    }\n', 0),
(8134, 112, '  \n', 0),
(8135, 113, '    public void destroy() {\n', 0),
(8136, 114, '        removeMouseListener(this);\n', 0),
(8137, 115, '        removeMouseMotionListener(this);\n', 0),
(8138, 116, '    }\n', 0),
(8139, 117, '\n', 0),
(8140, 118, '    public String getAppletInfo() {\n', 0),
(8141, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(8142, 120, '    }\n', 0),
(8143, 121, '}\n', 0),
(8144, 0, 'import java.awt.event.*;\n', 0),
(8145, 1, 'import java.awt.*;\n', 0),
(8146, 2, '\n', 0),
(8147, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(8148, 4, '\n', 0),
(8149, 5, '    private int mx, my;\n', 4),
(8150, 6, '    private Dimension size;\n', 8),
(8151, 7, '    private int onaroll;\n', 2),
(8152, 8, '\n', 0),
(8153, 9, '    public void init() {\n', 0),
(8154, 10, '        onaroll = 0;\n', 0),
(8155, 11, '        setSize(500, 500);\n', 0),
(8156, 12, '        size = getSize();\n', 0),
(8157, 13, '        addMouseListener(this);\n', 0),
(8158, 14, '        addMouseMotionListener(this);\n', 0),
(8159, 15, '        addComponentListener(this);\n', 0),
(8160, 16, '    }\n', 0),
(8161, 17, '\n', 0),
(8162, 18, '    public void update(Graphics g) {\n', 0),
(8163, 19, '        Dimension newSize = getSize();\n', 8),
(8164, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(8165, 21, '            g.setColor(getBackground());\n', 0),
(8166, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(8167, 23, '        } else {\n', 0),
(8168, 24, '            size = newSize;\n', 0),
(8169, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(8170, 26, '        } // Calculate new position\n', 0),
(8171, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(8172, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(8173, 29, '        paint(g);\n', 0),
(8174, 30, '    }\n', 0),
(8175, 31, '  \n', 0),
(8176, 32, '    public void paint(Graphics g) {\n', 0),
(8177, 33, '        g.setColor(Color.black);\n', 0),
(8178, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(8179, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(8180, 36, '    }\n', 0),
(8181, 37, '\n', 0),
(8182, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(8183, 39, '\n', 0),
(8184, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(8185, 41, '        e.consume();\n', 0),
(8186, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(8187, 43, '            repaint();\n', 0),
(8188, 44, '        }\n', 0),
(8189, 45, '    }\n', 0),
(8190, 46, '\n', 0),
(8191, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(8192, 48, '        int x = e.getX();\n', 0),
(8193, 49, '        int y = e.getY();\n', 0),
(8194, 50, '        e.consume();\n', 0),
(8195, 51, '        requestFocus();\n', 0),
(8196, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(8197, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(8198, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(8199, 55, '                case 0:\n', 0),
(8200, 56, '                    play(getCodeBase(), \n', 0),
(8201, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(8202, 58, '                    break;\n', 0),
(8203, 59, '                case 1:\n', 0),
(8204, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(8205, 61, '                    break;\n', 0),
(8206, 62, '                case 2:\n', 0),
(8207, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(8208, 64, '                    break;\n', 0),
(8209, 65, '                case 3:\n', 0),
(8210, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(8211, 67, '                    break;\n', 0),
(8212, 68, '                }\n', 0),
(8213, 69, '                onaroll++;\n', 0),
(8214, 70, '                if (onaroll > 5) {\n', 0),
(8215, 72, '                } else {\n', 0),
(8216, 74, '                }\n', 0),
(8217, 75, '            } else {   //first hit\n', 0),
(8218, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(8219, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(8220, 78, '                onaroll = 1;\n', 0),
(8221, 79, '            }\n', 0),
(8222, 80, '        } else {   //miss\n', 0),
(8223, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(8224, 82, '			\n', 0),
(8225, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(8226, 84, '            onaroll = 0;\n', 0),
(8227, 85, '        }\n', 0),
(8228, 86, '        repaint();\n', 0),
(8229, 87, '    }\n', 0),
(8230, 88, '\n', 0),
(8231, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(8232, 90, '\n', 0),
(8233, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(8234, 92, '        repaint();\n', 0),
(8235, 93, '    }\n', 0),
(8236, 94, '\n', 0),
(8237, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(8238, 96, '        repaint();\n', 0),
(8239, 97, '    }\n', 0),
(8240, 98, '\n', 0),
(8241, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(8242, 100, '\n', 0),
(8243, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(8244, 102, ' \n', 0),
(8245, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(8246, 104, ' \n', 0),
(8247, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(8248, 106, '        repaint();\n', 0),
(8249, 107, '    }\n', 0),
(8250, 108, ' \n', 0),
(8251, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(8252, 110, '        repaint();\n', 0),
(8253, 111, '    }\n', 0),
(8254, 112, '  \n', 0),
(8255, 113, '    public void destroy() {\n', 0),
(8256, 114, '        removeMouseListener(this);\n', 0),
(8257, 115, '        removeMouseMotionListener(this);\n', 0),
(8258, 116, '    }\n', 0),
(8259, 117, '\n', 0),
(8260, 118, '    public String getAppletInfo() {\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(8261, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(8262, 120, '    }\n', 0),
(8263, 121, '}\n', 0),
(8264, 0, 'import java.util.Scanner;\r\n', 0),
(8265, 1, ' class Years{\r\n', 0),
(8266, 2, '   public int getYear(){\r\n', 0),
(8267, 3, '	int year;\r\n', 2),
(8268, 4, '	String enteredYear;\r\n', 2),
(8269, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(8270, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(8271, 7, '	enteredYear = sc.next();\r\n', 0),
(8272, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(8273, 9, '	return year;\r\n', 0),
(8274, 10, '   }\r\n', 0),
(8275, 11, ' }\r\n', 0),
(8276, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(8277, 13, ' class Months extends Years{\r\n', 0),
(8278, 14, '   public int getMonth(){\r\n', 0),
(8279, 15, '	int month;\r\n', 2),
(8280, 16, '	String enteredMonthNumber;\r\n', 2),
(8281, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(8282, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(8283, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(8284, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(8285, 21, '	return month;\r\n', 0),
(8286, 22, '   }\r\n', 0),
(8287, 23, ' }\r\n', 0),
(8288, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(8289, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(8290, 26, ' static int numDays = 0;\r\n', 4),
(8291, 27, ' public static void main(String[] args) {\r\n', 0),
(8292, 28, '   int year;\r\n', 2),
(8293, 29, '   Months m = new Months();\r\n', 0),
(8294, 30, '   int month = m.getMonth();\r\n', 0),
(8295, 31, '   \r\n', 0),
(8296, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(8297, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(8298, 34, '   }\r\n', 0),
(8299, 35, '   else {\r\n', 0),
(8300, 36, '    switch (month) {\r\n', 0),
(8301, 37, '      case 1:\r\n', 0),
(8302, 38, '      case 3:\r\n', 0),
(8303, 39, '      case 5:\r\n', 0),
(8304, 40, '      case 7:\r\n', 0),
(8305, 41, '      case 8:\r\n', 0),
(8306, 42, '      case 10:\r\n', 0),
(8307, 43, '      case 12:\r\n', 0),
(8308, 44, '        numDays = 31;\r\n', 0),
(8309, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(8310, 46, '        break;\r\n', 0),
(8311, 47, '      case 4:\r\n', 0),
(8312, 48, '      case 6:\r\n', 0),
(8313, 49, '      case 9:\r\n', 0),
(8314, 50, '      case 11:\r\n', 0),
(8315, 51, '       numDays = 30;\r\n', 0),
(8316, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(8317, 53, '       break;\r\n', 0),
(8318, 54, '      case 2:\r\n', 0),
(8319, 55, '       year = m.getYear();\r\n', 0),
(8320, 56, '       if(year < 1) {\r\n', 0),
(8321, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(8322, 58, '       }\r\n', 0),
(8323, 59, '       else{\r\n', 0),
(8324, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(8325, 61, '         numDays = 29;\r\n', 0),
(8326, 62, '		 if(year > 2020){\r\n', 0),
(8327, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(8328, 64, '         }\r\n', 0),
(8329, 65, '         else{\r\n', 0),
(8330, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(8331, 67, '         }\r\n', 0),
(8332, 68, '        }//if at line 61\r\n', 0),
(8333, 69, '        else{\r\n', 0),
(8334, 70, '         numDays = 28;\r\n', 0),
(8335, 71, '         if (year > 2020){\r\n', 0),
(8336, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(8337, 73, '         }\r\n', 0),
(8338, 74, '         else{\r\n', 0),
(8339, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(8340, 76, '         }\r\n', 0),
(8341, 77, '         break;  \r\n', 0),
(8342, 78, '        }//else at line 70\r\n', 0),
(8343, 79, '       }//else at line 60\r\n', 0),
(8344, 80, '    }//switch at line 37\r\n', 0),
(8345, 81, '   }//else at line 36\r\n', 0),
(8346, 82, '  }//method\r\n', 0),
(8347, 83, ' }//class', 0),
(8348, 0, 'class Pattern{ \r\n', 0),
(8349, 1, 'public static void main(String[] args) { \r\n', 0),
(8350, 2, '	 int rows = 5;\r\n', 2),
(8351, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(8352, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(8353, 5, '	 System.out.print(j + " "); \r\n', 0),
(8354, 6, '	 } \r\n', 0),
(8355, 7, '	 System.out.println(""); \r\n', 0),
(8356, 8, ' 	} \r\n', 0),
(8357, 9, ' 	} \r\n', 0),
(8358, 10, '} ', 0),
(8359, 0, 'import java.util.Scanner;\r\n', 0),
(8360, 1, ' class Years{\r\n', 0),
(8361, 2, '   public int getYear(){\r\n', 0),
(8362, 3, '	int year;\r\n', 2),
(8363, 4, '	String enteredYear;\r\n', 2),
(8364, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(8365, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(8366, 7, '	enteredYear = sc.next();\r\n', 0),
(8367, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(8368, 9, '	return year;\r\n', 0),
(8369, 10, '   }\r\n', 0),
(8370, 11, ' }\r\n', 0),
(8371, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(8372, 13, ' class Months extends Years{\r\n', 0),
(8373, 14, '   public int getMonth(){\r\n', 0),
(8374, 15, '	int month;\r\n', 2),
(8375, 16, '	String enteredMonthNumber;\r\n', 2),
(8376, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(8377, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(8378, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(8379, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(8380, 21, '	return month;\r\n', 0),
(8381, 22, '   }\r\n', 0),
(8382, 23, ' }\r\n', 0),
(8383, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(8384, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(8385, 26, ' static int numDays = 0;\r\n', 4),
(8386, 27, ' public static void main(String[] args) {\r\n', 0),
(8387, 28, '   int year;\r\n', 2),
(8388, 29, '   Months m = new Months();\r\n', 0),
(8389, 30, '   int month = m.getMonth();\r\n', 0),
(8390, 31, '   \r\n', 0),
(8391, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(8392, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(8393, 34, '   }\r\n', 0),
(8394, 35, '   else {\r\n', 0),
(8395, 36, '    switch (month) {\r\n', 0),
(8396, 37, '      case 1:\r\n', 0),
(8397, 38, '      case 3:\r\n', 0),
(8398, 39, '      case 5:\r\n', 0),
(8399, 40, '      case 7:\r\n', 0),
(8400, 41, '      case 8:\r\n', 0),
(8401, 42, '      case 10:\r\n', 0),
(8402, 43, '      case 12:\r\n', 0),
(8403, 44, '        numDays = 31;\r\n', 0),
(8404, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(8405, 46, '        break;\r\n', 0),
(8406, 47, '      case 4:\r\n', 0),
(8407, 48, '      case 6:\r\n', 0),
(8408, 49, '      case 9:\r\n', 0),
(8409, 50, '      case 11:\r\n', 0),
(8410, 51, '       numDays = 30;\r\n', 0),
(8411, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(8412, 53, '       break;\r\n', 0),
(8413, 54, '      case 2:\r\n', 0),
(8414, 55, '       year = m.getYear();\r\n', 0),
(8415, 56, '       if(year < 1) {\r\n', 0),
(8416, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(8417, 58, '       }\r\n', 0),
(8418, 59, '       else{\r\n', 0),
(8419, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(8420, 61, '         numDays = 29;\r\n', 0),
(8421, 62, '		 if(year > 2020){\r\n', 0),
(8422, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(8423, 64, '         }\r\n', 0),
(8424, 65, '         else{\r\n', 0),
(8425, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(8426, 67, '         }\r\n', 0),
(8427, 68, '        }//if at line 61\r\n', 0),
(8428, 69, '        else{\r\n', 0),
(8429, 70, '         numDays = 28;\r\n', 0),
(8430, 71, '         if (year > 2020){\r\n', 0),
(8431, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(8432, 73, '         }\r\n', 0),
(8433, 74, '         else{\r\n', 0),
(8434, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(8435, 76, '         }\r\n', 0),
(8436, 77, '         break;  \r\n', 0),
(8437, 78, '        }//else at line 70\r\n', 0),
(8438, 79, '       }//else at line 60\r\n', 0),
(8439, 80, '    }//switch at line 37\r\n', 0),
(8440, 81, '   }//else at line 36\r\n', 0),
(8441, 82, '  }//method\r\n', 0),
(8442, 83, ' }//class', 0),
(8443, 0, 'class HelloWorld { \r\n', 0),
(8444, 1, '	public static void main(String args[]) \r\n', 0),
(8445, 2, '	{ \r\n', 0),
(8446, 3, '		System.out.println("Hello World"); \r\n', 0),
(8447, 4, '	} \r\n', 0),
(8448, 5, '} \r\n', 0),
(8449, 0, 'import java.awt.event.*;\n', 0),
(8450, 1, 'import java.awt.*;\n', 0),
(8451, 2, '\n', 0),
(8452, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(8453, 4, '\n', 0),
(8454, 5, '    private int mx, my;\n', 4),
(8455, 6, '    private Dimension size;\n', 8),
(8456, 7, '    private int onaroll;\n', 2),
(8457, 8, '\n', 0),
(8458, 9, '    public void init() {\n', 0),
(8459, 10, '        onaroll = 0;\n', 0),
(8460, 11, '        setSize(500, 500);\n', 0),
(8461, 12, '        size = getSize();\n', 0),
(8462, 13, '        addMouseListener(this);\n', 0),
(8463, 14, '        addMouseMotionListener(this);\n', 0),
(8464, 15, '        addComponentListener(this);\n', 0),
(8465, 16, '    }\n', 0),
(8466, 17, '\n', 0),
(8467, 18, '    public void update(Graphics g) {\n', 0),
(8468, 19, '        Dimension newSize = getSize();\n', 8),
(8469, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(8470, 21, '            g.setColor(getBackground());\n', 0),
(8471, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(8472, 23, '        } else {\n', 0),
(8473, 24, '            size = newSize;\n', 0),
(8474, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(8475, 26, '        } // Calculate new position\n', 0),
(8476, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(8477, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(8478, 29, '        paint(g);\n', 0),
(8479, 30, '    }\n', 0),
(8480, 31, '  \n', 0),
(8481, 32, '    public void paint(Graphics g) {\n', 0),
(8482, 33, '        g.setColor(Color.black);\n', 0),
(8483, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(8484, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(8485, 36, '    }\n', 0),
(8486, 37, '\n', 0),
(8487, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(8488, 39, '\n', 0),
(8489, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(8490, 41, '        e.consume();\n', 0),
(8491, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(8492, 43, '            repaint();\n', 0),
(8493, 44, '        }\n', 0),
(8494, 45, '    }\n', 0),
(8495, 46, '\n', 0),
(8496, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(8497, 48, '        int x = e.getX();\n', 0),
(8498, 49, '        int y = e.getY();\n', 0),
(8499, 50, '        e.consume();\n', 0),
(8500, 51, '        requestFocus();\n', 0),
(8501, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(8502, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(8503, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(8504, 55, '                case 0:\n', 0),
(8505, 56, '                    play(getCodeBase(), \n', 0),
(8506, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(8507, 58, '                    break;\n', 0),
(8508, 59, '                case 1:\n', 0),
(8509, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(8510, 61, '                    break;\n', 0),
(8511, 62, '                case 2:\n', 0),
(8512, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(8513, 64, '                    break;\n', 0),
(8514, 65, '                case 3:\n', 0),
(8515, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(8516, 67, '                    break;\n', 0),
(8517, 68, '                }\n', 0),
(8518, 69, '                onaroll++;\n', 0),
(8519, 70, '                if (onaroll > 5) {\n', 0),
(8520, 72, '                } else {\n', 0),
(8521, 74, '                }\n', 0),
(8522, 75, '            } else {   //first hit\n', 0),
(8523, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(8524, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(8525, 78, '                onaroll = 1;\n', 0),
(8526, 79, '            }\n', 0),
(8527, 80, '        } else {   //miss\n', 0),
(8528, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(8529, 82, '			\n', 0),
(8530, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(8531, 84, '            onaroll = 0;\n', 0),
(8532, 85, '        }\n', 0),
(8533, 86, '        repaint();\n', 0),
(8534, 87, '    }\n', 0),
(8535, 88, '\n', 0),
(8536, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(8537, 90, '\n', 0),
(8538, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(8539, 92, '        repaint();\n', 0),
(8540, 93, '    }\n', 0),
(8541, 94, '\n', 0),
(8542, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(8543, 96, '        repaint();\n', 0),
(8544, 97, '    }\n', 0),
(8545, 98, '\n', 0),
(8546, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(8547, 100, '\n', 0),
(8548, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(8549, 102, ' \n', 0),
(8550, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(8551, 104, ' \n', 0),
(8552, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(8553, 106, '        repaint();\n', 0),
(8554, 107, '    }\n', 0),
(8555, 108, ' \n', 0),
(8556, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(8557, 110, '        repaint();\n', 0),
(8558, 111, '    }\n', 0),
(8559, 112, '  \n', 0),
(8560, 113, '    public void destroy() {\n', 0),
(8561, 114, '        removeMouseListener(this);\n', 0),
(8562, 115, '        removeMouseMotionListener(this);\n', 0),
(8563, 116, '    }\n', 0),
(8564, 117, '\n', 0),
(8565, 118, '    public String getAppletInfo() {\n', 0),
(8566, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(8567, 120, '    }\n', 0),
(8568, 121, '}\n', 0),
(8569, 0, 'import java.awt.event.*;\n', 0),
(8570, 1, 'import java.awt.*;\n', 0),
(8571, 2, '\n', 0),
(8572, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(8573, 4, '\n', 0),
(8574, 5, '    private int mx, my;\n', 4),
(8575, 6, '    private Dimension size;\n', 8),
(8576, 7, '    private int onaroll;\n', 2),
(8577, 8, '\n', 0),
(8578, 9, '    public void init() {\n', 0),
(8579, 10, '        onaroll = 0;\n', 0),
(8580, 11, '        setSize(500, 500);\n', 0),
(8581, 12, '        size = getSize();\n', 0),
(8582, 13, '        addMouseListener(this);\n', 0),
(8583, 14, '        addMouseMotionListener(this);\n', 0),
(8584, 15, '        addComponentListener(this);\n', 0),
(8585, 16, '    }\n', 0),
(8586, 17, '\n', 0),
(8587, 18, '    public void update(Graphics g) {\n', 0),
(8588, 19, '        Dimension newSize = getSize();\n', 8),
(8589, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(8590, 21, '            g.setColor(getBackground());\n', 0),
(8591, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(8592, 23, '        } else {\n', 0),
(8593, 24, '            size = newSize;\n', 0),
(8594, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(8595, 26, '        } // Calculate new position\n', 0),
(8596, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(8597, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(8598, 29, '        paint(g);\n', 0),
(8599, 30, '    }\n', 0),
(8600, 31, '  \n', 0),
(8601, 32, '    public void paint(Graphics g) {\n', 0),
(8602, 33, '        g.setColor(Color.black);\n', 0),
(8603, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(8604, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(8605, 36, '    }\n', 0),
(8606, 37, '\n', 0),
(8607, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(8608, 39, '\n', 0),
(8609, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(8610, 41, '        e.consume();\n', 0),
(8611, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(8612, 43, '            repaint();\n', 0),
(8613, 44, '        }\n', 0),
(8614, 45, '    }\n', 0),
(8615, 46, '\n', 0),
(8616, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(8617, 48, '        int x = e.getX();\n', 0),
(8618, 49, '        int y = e.getY();\n', 0),
(8619, 50, '        e.consume();\n', 0),
(8620, 51, '        requestFocus();\n', 0),
(8621, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(8622, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(8623, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(8624, 55, '                case 0:\n', 0),
(8625, 56, '                    play(getCodeBase(), \n', 0),
(8626, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(8627, 58, '                    break;\n', 0),
(8628, 59, '                case 1:\n', 0),
(8629, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(8630, 61, '                    break;\n', 0),
(8631, 62, '                case 2:\n', 0),
(8632, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(8633, 64, '                    break;\n', 0),
(8634, 65, '                case 3:\n', 0),
(8635, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(8636, 67, '                    break;\n', 0),
(8637, 68, '                }\n', 0),
(8638, 69, '                onaroll++;\n', 0),
(8639, 70, '                if (onaroll > 5) {\n', 0),
(8640, 72, '                } else {\n', 0),
(8641, 74, '                }\n', 0),
(8642, 75, '            } else {   //first hit\n', 0),
(8643, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(8644, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(8645, 78, '                onaroll = 1;\n', 0),
(8646, 79, '            }\n', 0),
(8647, 80, '        } else {   //miss\n', 0),
(8648, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(8649, 82, '			\n', 0),
(8650, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(8651, 84, '            onaroll = 0;\n', 0),
(8652, 85, '        }\n', 0),
(8653, 86, '        repaint();\n', 0),
(8654, 87, '    }\n', 0),
(8655, 88, '\n', 0),
(8656, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(8657, 90, '\n', 0),
(8658, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(8659, 92, '        repaint();\n', 0),
(8660, 93, '    }\n', 0),
(8661, 94, '\n', 0),
(8662, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(8663, 96, '        repaint();\n', 0),
(8664, 97, '    }\n', 0),
(8665, 98, '\n', 0),
(8666, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(8667, 100, '\n', 0),
(8668, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(8669, 102, ' \n', 0),
(8670, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(8671, 104, ' \n', 0),
(8672, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(8673, 106, '        repaint();\n', 0),
(8674, 107, '    }\n', 0),
(8675, 108, ' \n', 0),
(8676, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(8677, 110, '        repaint();\n', 0),
(8678, 111, '    }\n', 0),
(8679, 112, '  \n', 0),
(8680, 113, '    public void destroy() {\n', 0),
(8681, 114, '        removeMouseListener(this);\n', 0),
(8682, 115, '        removeMouseMotionListener(this);\n', 0),
(8683, 116, '    }\n', 0),
(8684, 117, '\n', 0),
(8685, 118, '    public String getAppletInfo() {\n', 0),
(8686, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(8687, 120, '    }\n', 0),
(8688, 121, '}\n', 0),
(8689, 0, 'import java.util.Scanner;\r\n', 0),
(8690, 1, ' class Years{\r\n', 0),
(8691, 2, '   public int getYear(){\r\n', 0),
(8692, 3, '	int year;\r\n', 2),
(8693, 4, '	String enteredYear;\r\n', 2),
(8694, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(8695, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(8696, 7, '	enteredYear = sc.next();\r\n', 0),
(8697, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(8698, 9, '	return year;\r\n', 0),
(8699, 10, '   }\r\n', 0),
(8700, 11, ' }\r\n', 0),
(8701, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(8702, 13, ' class Months extends Years{\r\n', 0),
(8703, 14, '   public int getMonth(){\r\n', 0),
(8704, 15, '	int month;\r\n', 2),
(8705, 16, '	String enteredMonthNumber;\r\n', 2),
(8706, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(8707, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(8708, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(8709, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(8710, 21, '	return month;\r\n', 0),
(8711, 22, '   }\r\n', 0),
(8712, 23, ' }\r\n', 0),
(8713, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(8714, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(8715, 26, ' static int numDays = 0;\r\n', 4),
(8716, 27, ' public static void main(String[] args) {\r\n', 0),
(8717, 28, '   int year;\r\n', 2),
(8718, 29, '   Months m = new Months();\r\n', 0),
(8719, 30, '   int month = m.getMonth();\r\n', 0),
(8720, 31, '   \r\n', 0),
(8721, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(8722, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(8723, 34, '   }\r\n', 0),
(8724, 35, '   else {\r\n', 0),
(8725, 36, '    switch (month) {\r\n', 0),
(8726, 37, '      case 1:\r\n', 0),
(8727, 38, '      case 3:\r\n', 0),
(8728, 39, '      case 5:\r\n', 0),
(8729, 40, '      case 7:\r\n', 0),
(8730, 41, '      case 8:\r\n', 0),
(8731, 42, '      case 10:\r\n', 0),
(8732, 43, '      case 12:\r\n', 0),
(8733, 44, '        numDays = 31;\r\n', 0),
(8734, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(8735, 46, '        break;\r\n', 0),
(8736, 47, '      case 4:\r\n', 0),
(8737, 48, '      case 6:\r\n', 0),
(8738, 49, '      case 9:\r\n', 0),
(8739, 50, '      case 11:\r\n', 0),
(8740, 51, '       numDays = 30;\r\n', 0),
(8741, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(8742, 53, '       break;\r\n', 0),
(8743, 54, '      case 2:\r\n', 0),
(8744, 55, '       year = m.getYear();\r\n', 0),
(8745, 56, '       if(year < 1) {\r\n', 0),
(8746, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(8747, 58, '       }\r\n', 0),
(8748, 59, '       else{\r\n', 0),
(8749, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(8750, 61, '         numDays = 29;\r\n', 0),
(8751, 62, '		 if(year > 2020){\r\n', 0),
(8752, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(8753, 64, '         }\r\n', 0),
(8754, 65, '         else{\r\n', 0),
(8755, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(8756, 67, '         }\r\n', 0),
(8757, 68, '        }//if at line 61\r\n', 0),
(8758, 69, '        else{\r\n', 0),
(8759, 70, '         numDays = 28;\r\n', 0),
(8760, 71, '         if (year > 2020){\r\n', 0),
(8761, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(8762, 73, '         }\r\n', 0),
(8763, 74, '         else{\r\n', 0),
(8764, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(8765, 76, '         }\r\n', 0),
(8766, 77, '         break;  \r\n', 0),
(8767, 78, '        }//else at line 70\r\n', 0),
(8768, 79, '       }//else at line 60\r\n', 0),
(8769, 80, '    }//switch at line 37\r\n', 0),
(8770, 81, '   }//else at line 36\r\n', 0),
(8771, 82, '  }//method\r\n', 0),
(8772, 83, ' }//class', 0),
(8773, 0, 'public class RecursionExample2 {  \r\n', 0),
(8774, 1, 'static int count=0;  \r\n', 4),
(8775, 2, 'public int p(){  \r\n', 0),
(8776, 3, 'count++;  \r\n', 0),
(8777, 4, 'if(count<=5){  \r\n', 0),
(8778, 5, 'System.out.println("hello "+count);  \r\n', 0),
(8779, 6, 'public int p();  \r\n', 0),
(8780, 7, '}  \r\n', 0),
(8781, 8, '}  \r\n', 0),
(8782, 9, 'public static void main(String[] args) {  \r\n', 0),
(8783, 10, 'p();  \r\n', 0),
(8784, 11, '}  \r\n', 0),
(8785, 12, '}  ', 0),
(8786, 0, 'import java.awt.event.*;\n', 0),
(8787, 1, 'import java.awt.*;\n', 0),
(8788, 2, '\n', 0),
(8789, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(8790, 4, '\n', 0),
(8791, 5, '    private int mx, my;\n', 4),
(8792, 6, '    private Dimension size;\n', 8),
(8793, 7, '    private int onaroll;\n', 2),
(8794, 8, '\n', 0),
(8795, 9, '    public void init() {\n', 0),
(8796, 10, '        onaroll = 0;\n', 0),
(8797, 11, '        setSize(500, 500);\n', 0),
(8798, 12, '        size = getSize();\n', 0),
(8799, 13, '        addMouseListener(this);\n', 0),
(8800, 14, '        addMouseMotionListener(this);\n', 0),
(8801, 15, '        addComponentListener(this);\n', 0),
(8802, 16, '    }\n', 0),
(8803, 17, '\n', 0),
(8804, 18, '    public void update(Graphics g) {\n', 0),
(8805, 19, '        Dimension newSize = getSize();\n', 8),
(8806, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(8807, 21, '            g.setColor(getBackground());\n', 0),
(8808, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(8809, 23, '        } else {\n', 0),
(8810, 24, '            size = newSize;\n', 0),
(8811, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(8812, 26, '        } // Calculate new position\n', 0),
(8813, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(8814, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(8815, 29, '        paint(g);\n', 0),
(8816, 30, '    }\n', 0),
(8817, 31, '  \n', 0),
(8818, 32, '    public void paint(Graphics g) {\n', 0),
(8819, 33, '        g.setColor(Color.black);\n', 0),
(8820, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(8821, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(8822, 36, '    }\n', 0),
(8823, 37, '\n', 0),
(8824, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(8825, 39, '\n', 0),
(8826, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(8827, 41, '        e.consume();\n', 0),
(8828, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(8829, 43, '            repaint();\n', 0),
(8830, 44, '        }\n', 0),
(8831, 45, '    }\n', 0),
(8832, 46, '\n', 0),
(8833, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(8834, 48, '        int x = e.getX();\n', 0),
(8835, 49, '        int y = e.getY();\n', 0),
(8836, 50, '        e.consume();\n', 0),
(8837, 51, '        requestFocus();\n', 0),
(8838, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(8839, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(8840, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(8841, 55, '                case 0:\n', 0),
(8842, 56, '                    play(getCodeBase(), \n', 0),
(8843, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(8844, 58, '                    break;\n', 0),
(8845, 59, '                case 1:\n', 0),
(8846, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(8847, 61, '                    break;\n', 0),
(8848, 62, '                case 2:\n', 0),
(8849, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(8850, 64, '                    break;\n', 0),
(8851, 65, '                case 3:\n', 0),
(8852, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(8853, 67, '                    break;\n', 0),
(8854, 68, '                }\n', 0),
(8855, 69, '                onaroll++;\n', 0),
(8856, 70, '                if (onaroll > 5) {\n', 0),
(8857, 72, '                } else {\n', 0),
(8858, 74, '                }\n', 0),
(8859, 75, '            } else {   //first hit\n', 0),
(8860, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(8861, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(8862, 78, '                onaroll = 1;\n', 0),
(8863, 79, '            }\n', 0),
(8864, 80, '        } else {   //miss\n', 0),
(8865, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(8866, 82, '			\n', 0),
(8867, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(8868, 84, '            onaroll = 0;\n', 0),
(8869, 85, '        }\n', 0),
(8870, 86, '        repaint();\n', 0),
(8871, 87, '    }\n', 0),
(8872, 88, '\n', 0),
(8873, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(8874, 90, '\n', 0),
(8875, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(8876, 92, '        repaint();\n', 0),
(8877, 93, '    }\n', 0),
(8878, 94, '\n', 0),
(8879, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(8880, 96, '        repaint();\n', 0),
(8881, 97, '    }\n', 0),
(8882, 98, '\n', 0),
(8883, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(8884, 100, '\n', 0),
(8885, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(8886, 102, ' \n', 0),
(8887, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(8888, 104, ' \n', 0),
(8889, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(8890, 106, '        repaint();\n', 0),
(8891, 107, '    }\n', 0),
(8892, 108, ' \n', 0),
(8893, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(8894, 110, '        repaint();\n', 0),
(8895, 111, '    }\n', 0),
(8896, 112, '  \n', 0),
(8897, 113, '    public void destroy() {\n', 0),
(8898, 114, '        removeMouseListener(this);\n', 0),
(8899, 115, '        removeMouseMotionListener(this);\n', 0),
(8900, 116, '    }\n', 0),
(8901, 117, '\n', 0),
(8902, 118, '    public String getAppletInfo() {\n', 0),
(8903, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(8904, 120, '    }\n', 0),
(8905, 121, '}\n', 0),
(8906, 0, 'import java.awt.event.*;\n', 0),
(8907, 1, 'import java.awt.*;\n', 0),
(8908, 2, '\n', 0),
(8909, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(8910, 4, '\n', 0),
(8911, 5, '    private int mx, my;\n', 4),
(8912, 6, '    private Dimension size;\n', 8),
(8913, 7, '    private int onaroll;\n', 2),
(8914, 8, '\n', 0),
(8915, 9, '    public void init() {\n', 0),
(8916, 10, '        onaroll = 0;\n', 0),
(8917, 11, '        setSize(500, 500);\n', 0),
(8918, 12, '        size = getSize();\n', 0),
(8919, 13, '        addMouseListener(this);\n', 0),
(8920, 14, '        addMouseMotionListener(this);\n', 0),
(8921, 15, '        addComponentListener(this);\n', 0),
(8922, 16, '    }\n', 0),
(8923, 17, '\n', 0),
(8924, 18, '    public void update(Graphics g) {\n', 0),
(8925, 19, '        Dimension newSize = getSize();\n', 8),
(8926, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(8927, 21, '            g.setColor(getBackground());\n', 0),
(8928, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(8929, 23, '        } else {\n', 0),
(8930, 24, '            size = newSize;\n', 0),
(8931, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(8932, 26, '        } // Calculate new position\n', 0),
(8933, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(8934, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(8935, 29, '        paint(g);\n', 0),
(8936, 30, '    }\n', 0),
(8937, 31, '  \n', 0),
(8938, 32, '    public void paint(Graphics g) {\n', 0),
(8939, 33, '        g.setColor(Color.black);\n', 0),
(8940, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(8941, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(8942, 36, '    }\n', 0),
(8943, 37, '\n', 0),
(8944, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(8945, 39, '\n', 0),
(8946, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(8947, 41, '        e.consume();\n', 0),
(8948, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(8949, 43, '            repaint();\n', 0),
(8950, 44, '        }\n', 0),
(8951, 45, '    }\n', 0),
(8952, 46, '\n', 0),
(8953, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(8954, 48, '        int x = e.getX();\n', 0),
(8955, 49, '        int y = e.getY();\n', 0),
(8956, 50, '        e.consume();\n', 0),
(8957, 51, '        requestFocus();\n', 0),
(8958, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(8959, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(8960, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(8961, 55, '                case 0:\n', 0),
(8962, 56, '                    play(getCodeBase(), \n', 0),
(8963, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(8964, 58, '                    break;\n', 0),
(8965, 59, '                case 1:\n', 0),
(8966, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(8967, 61, '                    break;\n', 0),
(8968, 62, '                case 2:\n', 0),
(8969, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(8970, 64, '                    break;\n', 0),
(8971, 65, '                case 3:\n', 0),
(8972, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(8973, 67, '                    break;\n', 0),
(8974, 68, '                }\n', 0),
(8975, 69, '                onaroll++;\n', 0),
(8976, 70, '                if (onaroll > 5) {\n', 0),
(8977, 72, '                } else {\n', 0),
(8978, 74, '                }\n', 0),
(8979, 75, '            } else {   //first hit\n', 0),
(8980, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(8981, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(8982, 78, '                onaroll = 1;\n', 0),
(8983, 79, '            }\n', 0),
(8984, 80, '        } else {   //miss\n', 0),
(8985, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(8986, 82, '			\n', 0),
(8987, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(8988, 84, '            onaroll = 0;\n', 0),
(8989, 85, '        }\n', 0),
(8990, 86, '        repaint();\n', 0),
(8991, 87, '    }\n', 0),
(8992, 88, '\n', 0),
(8993, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(8994, 90, '\n', 0),
(8995, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(8996, 92, '        repaint();\n', 0),
(8997, 93, '    }\n', 0),
(8998, 94, '\n', 0),
(8999, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(9000, 96, '        repaint();\n', 0),
(9001, 97, '    }\n', 0),
(9002, 98, '\n', 0),
(9003, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(9004, 100, '\n', 0),
(9005, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(9006, 102, ' \n', 0),
(9007, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(9008, 104, ' \n', 0),
(9009, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(9010, 106, '        repaint();\n', 0),
(9011, 107, '    }\n', 0),
(9012, 108, ' \n', 0),
(9013, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(9014, 110, '        repaint();\n', 0),
(9015, 111, '    }\n', 0),
(9016, 112, '  \n', 0),
(9017, 113, '    public void destroy() {\n', 0),
(9018, 114, '        removeMouseListener(this);\n', 0),
(9019, 115, '        removeMouseMotionListener(this);\n', 0),
(9020, 116, '    }\n', 0),
(9021, 117, '\n', 0),
(9022, 118, '    public String getAppletInfo() {\n', 0),
(9023, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(9024, 120, '    }\n', 0),
(9025, 121, '}\n', 0),
(9026, 0, 'import java.util.Scanner;\r\n', 0),
(9027, 1, ' class Years{\r\n', 0),
(9028, 2, '   public int getYear(){\r\n', 0),
(9029, 3, '	int year;\r\n', 2),
(9030, 4, '	String enteredYear;\r\n', 2),
(9031, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(9032, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(9033, 7, '	enteredYear = sc.next();\r\n', 0),
(9034, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(9035, 9, '	return year;\r\n', 0),
(9036, 10, '   }\r\n', 0),
(9037, 11, ' }\r\n', 0),
(9038, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9039, 13, ' class Months extends Years{\r\n', 0),
(9040, 14, '   public int getMonth(){\r\n', 0),
(9041, 15, '	int month;\r\n', 2),
(9042, 16, '	String enteredMonthNumber;\r\n', 2),
(9043, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(9044, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(9045, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(9046, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(9047, 21, '	return month;\r\n', 0),
(9048, 22, '   }\r\n', 0),
(9049, 23, ' }\r\n', 0),
(9050, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9051, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(9052, 26, ' static int numDays = 0;\r\n', 4),
(9053, 27, ' public static void main(String[] args) {\r\n', 0),
(9054, 28, '   int year;\r\n', 2),
(9055, 29, '   Months m = new Months();\r\n', 0),
(9056, 30, '   int month = m.getMonth();\r\n', 0),
(9057, 31, '   \r\n', 0),
(9058, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(9059, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(9060, 34, '   }\r\n', 0),
(9061, 35, '   else {\r\n', 0),
(9062, 36, '    switch (month) {\r\n', 0),
(9063, 37, '      case 1:\r\n', 0),
(9064, 38, '      case 3:\r\n', 0),
(9065, 39, '      case 5:\r\n', 0),
(9066, 40, '      case 7:\r\n', 0),
(9067, 41, '      case 8:\r\n', 0),
(9068, 42, '      case 10:\r\n', 0),
(9069, 43, '      case 12:\r\n', 0),
(9070, 44, '        numDays = 31;\r\n', 0),
(9071, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(9072, 46, '        break;\r\n', 0),
(9073, 47, '      case 4:\r\n', 0),
(9074, 48, '      case 6:\r\n', 0),
(9075, 49, '      case 9:\r\n', 0),
(9076, 50, '      case 11:\r\n', 0),
(9077, 51, '       numDays = 30;\r\n', 0),
(9078, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(9079, 53, '       break;\r\n', 0),
(9080, 54, '      case 2:\r\n', 0),
(9081, 55, '       year = m.getYear();\r\n', 0),
(9082, 56, '       if(year < 1) {\r\n', 0),
(9083, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(9084, 58, '       }\r\n', 0),
(9085, 59, '       else{\r\n', 0),
(9086, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(9087, 61, '         numDays = 29;\r\n', 0),
(9088, 62, '		 if(year > 2020){\r\n', 0),
(9089, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(9090, 64, '         }\r\n', 0),
(9091, 65, '         else{\r\n', 0),
(9092, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(9093, 67, '         }\r\n', 0),
(9094, 68, '        }//if at line 61\r\n', 0),
(9095, 69, '        else{\r\n', 0),
(9096, 70, '         numDays = 28;\r\n', 0),
(9097, 71, '         if (year > 2020){\r\n', 0),
(9098, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(9099, 73, '         }\r\n', 0),
(9100, 74, '         else{\r\n', 0),
(9101, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(9102, 76, '         }\r\n', 0),
(9103, 77, '         break;  \r\n', 0),
(9104, 78, '        }//else at line 70\r\n', 0),
(9105, 79, '       }//else at line 60\r\n', 0),
(9106, 80, '    }//switch at line 37\r\n', 0),
(9107, 81, '   }//else at line 36\r\n', 0),
(9108, 82, '  }//method\r\n', 0),
(9109, 83, ' }//class', 0),
(9110, 0, 'class Pattern{ \r\n', 0),
(9111, 1, 'public static void main(String[] args) { \r\n', 0),
(9112, 2, '	 int rows = 5;\r\n', 2),
(9113, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(9114, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(9115, 5, '	 System.out.print(j + " "); \r\n', 0),
(9116, 6, '	 } \r\n', 0),
(9117, 7, '	 System.out.println(""); \r\n', 0),
(9118, 8, ' 	} \r\n', 0),
(9119, 9, ' 	} \r\n', 0),
(9120, 10, '} ', 0),
(9121, 0, 'import java.util.Scanner;\r\n', 0),
(9122, 1, ' class Years{\r\n', 0),
(9123, 2, '   public int getYear(){\r\n', 0),
(9124, 3, '	int year;\r\n', 2),
(9125, 4, '	String enteredYear;\r\n', 2),
(9126, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(9127, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(9128, 7, '	enteredYear = sc.next();\r\n', 0),
(9129, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(9130, 9, '	return year;\r\n', 0),
(9131, 10, '   }\r\n', 0),
(9132, 11, ' }\r\n', 0),
(9133, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9134, 13, ' class Months extends Years{\r\n', 0),
(9135, 14, '   public int getMonth(){\r\n', 0),
(9136, 15, '	int month;\r\n', 2),
(9137, 16, '	String enteredMonthNumber;\r\n', 2),
(9138, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(9139, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(9140, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(9141, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(9142, 21, '	return month;\r\n', 0),
(9143, 22, '   }\r\n', 0),
(9144, 23, ' }\r\n', 0),
(9145, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9146, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(9147, 26, ' static int numDays = 0;\r\n', 4),
(9148, 27, ' public static void main(String[] args) {\r\n', 0),
(9149, 28, '   int year;\r\n', 2),
(9150, 29, '   Months m = new Months();\r\n', 0),
(9151, 30, '   int month = m.getMonth();\r\n', 0),
(9152, 31, '   \r\n', 0),
(9153, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(9154, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(9155, 34, '   }\r\n', 0),
(9156, 35, '   else {\r\n', 0),
(9157, 36, '    switch (month) {\r\n', 0),
(9158, 37, '      case 1:\r\n', 0),
(9159, 38, '      case 3:\r\n', 0),
(9160, 39, '      case 5:\r\n', 0),
(9161, 40, '      case 7:\r\n', 0),
(9162, 41, '      case 8:\r\n', 0),
(9163, 42, '      case 10:\r\n', 0),
(9164, 43, '      case 12:\r\n', 0),
(9165, 44, '        numDays = 31;\r\n', 0),
(9166, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(9167, 46, '        break;\r\n', 0),
(9168, 47, '      case 4:\r\n', 0),
(9169, 48, '      case 6:\r\n', 0),
(9170, 49, '      case 9:\r\n', 0),
(9171, 50, '      case 11:\r\n', 0),
(9172, 51, '       numDays = 30;\r\n', 0),
(9173, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(9174, 53, '       break;\r\n', 0),
(9175, 54, '      case 2:\r\n', 0),
(9176, 55, '       year = m.getYear();\r\n', 0),
(9177, 56, '       if(year < 1) {\r\n', 0),
(9178, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(9179, 58, '       }\r\n', 0),
(9180, 59, '       else{\r\n', 0),
(9181, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(9182, 61, '         numDays = 29;\r\n', 0),
(9183, 62, '		 if(year > 2020){\r\n', 0),
(9184, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(9185, 64, '         }\r\n', 0),
(9186, 65, '         else{\r\n', 0),
(9187, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(9188, 67, '         }\r\n', 0),
(9189, 68, '        }//if at line 61\r\n', 0),
(9190, 69, '        else{\r\n', 0),
(9191, 70, '         numDays = 28;\r\n', 0),
(9192, 71, '         if (year > 2020){\r\n', 0),
(9193, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(9194, 73, '         }\r\n', 0),
(9195, 74, '         else{\r\n', 0),
(9196, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(9197, 76, '         }\r\n', 0),
(9198, 77, '         break;  \r\n', 0),
(9199, 78, '        }//else at line 70\r\n', 0),
(9200, 79, '       }//else at line 60\r\n', 0),
(9201, 80, '    }//switch at line 37\r\n', 0),
(9202, 81, '   }//else at line 36\r\n', 0),
(9203, 82, '  }//method\r\n', 0),
(9204, 83, ' }//class', 0),
(9205, 0, 'class HelloWorld { \r\n', 0),
(9206, 1, '	public static void main(String args[]) \r\n', 0),
(9207, 2, '	{ \r\n', 0),
(9208, 3, '		System.out.println("Hello World"); \r\n', 0),
(9209, 4, '	} \r\n', 0),
(9210, 5, '} \r\n', 0),
(9211, 0, 'import java.awt.event.*;\n', 0),
(9212, 1, 'import java.awt.*;\n', 0),
(9213, 2, '\n', 0),
(9214, 0, 'import java.util.Scanner;\r\n', 0),
(9215, 1, ' class Years{\r\n', 0),
(9216, 2, '   public int getYear(){\r\n', 0),
(9217, 3, '	int year;\r\n', 2),
(9218, 4, '	String enteredYear;\r\n', 2),
(9219, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(9220, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(9221, 7, '	enteredYear = sc.next();\r\n', 0),
(9222, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(9223, 9, '	return year;\r\n', 0),
(9224, 10, '   }\r\n', 0),
(9225, 11, ' }\r\n', 0),
(9226, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9227, 13, ' class Months extends Years{\r\n', 0),
(9228, 14, '   public int getMonth(){\r\n', 0),
(9229, 15, '	int month;\r\n', 2),
(9230, 16, '	String enteredMonthNumber;\r\n', 2),
(9231, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(9232, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(9233, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(9234, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(9235, 21, '	return month;\r\n', 0),
(9236, 22, '   }\r\n', 0),
(9237, 23, ' }\r\n', 0),
(9238, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9239, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(9240, 26, ' static int numDays = 0;\r\n', 4),
(9241, 27, ' public static void main(String[] args) {\r\n', 0),
(9242, 28, '   int year;\r\n', 2),
(9243, 29, '   Months m = new Months();\r\n', 0),
(9244, 30, '   int month = m.getMonth();\r\n', 0),
(9245, 31, '   \r\n', 0),
(9246, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(9247, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(9248, 34, '   }\r\n', 0),
(9249, 35, '   else {\r\n', 0),
(9250, 36, '    switch (month) {\r\n', 0),
(9251, 37, '      case 1:\r\n', 0),
(9252, 38, '      case 3:\r\n', 0),
(9253, 39, '      case 5:\r\n', 0),
(9254, 40, '      case 7:\r\n', 0),
(9255, 41, '      case 8:\r\n', 0),
(9256, 42, '      case 10:\r\n', 0),
(9257, 43, '      case 12:\r\n', 0),
(9258, 44, '        numDays = 31;\r\n', 0),
(9259, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(9260, 46, '        break;\r\n', 0),
(9261, 47, '      case 4:\r\n', 0),
(9262, 48, '      case 6:\r\n', 0),
(9263, 49, '      case 9:\r\n', 0),
(9264, 50, '      case 11:\r\n', 0),
(9265, 51, '       numDays = 30;\r\n', 0),
(9266, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(9267, 53, '       break;\r\n', 0),
(9268, 54, '      case 2:\r\n', 0),
(9269, 55, '       year = m.getYear();\r\n', 0),
(9270, 56, '       if(year < 1) {\r\n', 0),
(9271, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(9272, 58, '       }\r\n', 0),
(9273, 59, '       else{\r\n', 0),
(9274, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(9275, 61, '         numDays = 29;\r\n', 0),
(9276, 62, '		 if(year > 2020){\r\n', 0),
(9277, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(9278, 64, '         }\r\n', 0),
(9279, 65, '         else{\r\n', 0),
(9280, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(9281, 67, '         }\r\n', 0),
(9282, 68, '        }//if at line 61\r\n', 0),
(9283, 69, '        else{\r\n', 0),
(9284, 70, '         numDays = 28;\r\n', 0),
(9285, 71, '         if (year > 2020){\r\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(9286, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(9287, 73, '         }\r\n', 0),
(9288, 74, '         else{\r\n', 0),
(9289, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(9290, 76, '         }\r\n', 0),
(9291, 77, '         break;  \r\n', 0),
(9292, 78, '        }//else at line 70\r\n', 0),
(9293, 79, '       }//else at line 60\r\n', 0),
(9294, 80, '    }//switch at line 37\r\n', 0),
(9295, 81, '   }//else at line 36\r\n', 0),
(9296, 82, '  }//method\r\n', 0),
(9297, 83, ' }//class', 0),
(9298, 0, 'public class RecursionExample2 {  \r\n', 0),
(9299, 1, 'static int count=0;  \r\n', 4),
(9300, 2, 'public int p(){  \r\n', 0),
(9301, 3, 'count++;  \r\n', 0),
(9302, 4, 'if(count<=5){  \r\n', 0),
(9303, 5, 'System.out.println("hello "+count);  \r\n', 0),
(9304, 6, 'public int p();  \r\n', 0),
(9305, 7, '}  \r\n', 0),
(9306, 8, '}  \r\n', 0),
(9307, 9, 'public static void main(String[] args) {  \r\n', 0),
(9308, 10, 'p();  \r\n', 0),
(9309, 11, '}  \r\n', 0),
(9310, 12, '}  ', 0),
(9311, 0, 'import java.awt.event.*;\n', 0),
(9312, 1, 'import java.awt.*;\n', 0),
(9313, 2, '\n', 0),
(9314, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(9315, 4, '\n', 0),
(9316, 5, '    private int mx, my;\n', 4),
(9317, 6, '    private Dimension size;\n', 8),
(9318, 7, '    private int onaroll;\n', 2),
(9319, 8, '\n', 0),
(9320, 9, '    public void init() {\n', 0),
(9321, 10, '        onaroll = 0;\n', 0),
(9322, 11, '        setSize(500, 500);\n', 0),
(9323, 12, '        size = getSize();\n', 0),
(9324, 13, '        addMouseListener(this);\n', 0),
(9325, 14, '        addMouseMotionListener(this);\n', 0),
(9326, 15, '        addComponentListener(this);\n', 0),
(9327, 16, '    }\n', 0),
(9328, 17, '\n', 0),
(9329, 18, '    public void update(Graphics g) {\n', 0),
(9330, 19, '        Dimension newSize = getSize();\n', 8),
(9331, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(9332, 21, '            g.setColor(getBackground());\n', 0),
(9333, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(9334, 23, '        } else {\n', 0),
(9335, 24, '            size = newSize;\n', 0),
(9336, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(9337, 26, '        } // Calculate new position\n', 0),
(9338, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(9339, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(9340, 29, '        paint(g);\n', 0),
(9341, 30, '    }\n', 0),
(9342, 31, '  \n', 0),
(9343, 32, '    public void paint(Graphics g) {\n', 0),
(9344, 33, '        g.setColor(Color.black);\n', 0),
(9345, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(9346, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(9347, 36, '    }\n', 0),
(9348, 37, '\n', 0),
(9349, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(9350, 39, '\n', 0),
(9351, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(9352, 41, '        e.consume();\n', 0),
(9353, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(9354, 43, '            repaint();\n', 0),
(9355, 44, '        }\n', 0),
(9356, 45, '    }\n', 0),
(9357, 46, '\n', 0),
(9358, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(9359, 48, '        int x = e.getX();\n', 0),
(9360, 49, '        int y = e.getY();\n', 0),
(9361, 50, '        e.consume();\n', 0),
(9362, 51, '        requestFocus();\n', 0),
(9363, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(9364, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(9365, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(9366, 55, '                case 0:\n', 0),
(9367, 56, '                    play(getCodeBase(), \n', 0),
(9368, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(9369, 58, '                    break;\n', 0),
(9370, 59, '                case 1:\n', 0),
(9371, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(9372, 61, '                    break;\n', 0),
(9373, 62, '                case 2:\n', 0),
(9374, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(9375, 64, '                    break;\n', 0),
(9376, 65, '                case 3:\n', 0),
(9377, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(9378, 67, '                    break;\n', 0),
(9379, 68, '                }\n', 0),
(9380, 69, '                onaroll++;\n', 0),
(9381, 70, '                if (onaroll > 5) {\n', 0),
(9382, 72, '                } else {\n', 0),
(9383, 74, '                }\n', 0),
(9384, 75, '            } else {   //first hit\n', 0),
(9385, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(9386, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(9387, 78, '                onaroll = 1;\n', 0),
(9388, 79, '            }\n', 0),
(9389, 80, '        } else {   //miss\n', 0),
(9390, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(9391, 82, '			\n', 0),
(9392, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(9393, 84, '            onaroll = 0;\n', 0),
(9394, 85, '        }\n', 0),
(9395, 86, '        repaint();\n', 0),
(9396, 87, '    }\n', 0),
(9397, 88, '\n', 0),
(9398, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(9399, 90, '\n', 0),
(9400, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(9401, 92, '        repaint();\n', 0),
(9402, 93, '    }\n', 0),
(9403, 94, '\n', 0),
(9404, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(9405, 96, '        repaint();\n', 0),
(9406, 97, '    }\n', 0),
(9407, 98, '\n', 0),
(9408, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(9409, 100, '\n', 0),
(9410, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(9411, 102, ' \n', 0),
(9412, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(9413, 104, ' \n', 0),
(9414, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(9415, 106, '        repaint();\n', 0),
(9416, 107, '    }\n', 0),
(9417, 108, ' \n', 0),
(9418, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(9419, 110, '        repaint();\n', 0),
(9420, 111, '    }\n', 0),
(9421, 112, '  \n', 0),
(9422, 113, '    public void destroy() {\n', 0),
(9423, 114, '        removeMouseListener(this);\n', 0),
(9424, 115, '        removeMouseMotionListener(this);\n', 0),
(9425, 116, '    }\n', 0),
(9426, 117, '\n', 0),
(9427, 118, '    public String getAppletInfo() {\n', 0),
(9428, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(9429, 120, '    }\n', 0),
(9430, 121, '}\n', 0),
(9431, 0, 'import java.awt.event.*;\n', 0),
(9432, 1, 'import java.awt.*;\n', 0),
(9433, 2, '\n', 0),
(9434, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(9435, 4, '\n', 0),
(9436, 5, '    private int mx, my;\n', 4),
(9437, 6, '    private Dimension size;\n', 8),
(9438, 7, '    private int onaroll;\n', 2),
(9439, 8, '\n', 0),
(9440, 9, '    public void init() {\n', 0),
(9441, 10, '        onaroll = 0;\n', 0),
(9442, 11, '        setSize(500, 500);\n', 0),
(9443, 12, '        size = getSize();\n', 0),
(9444, 13, '        addMouseListener(this);\n', 0),
(9445, 14, '        addMouseMotionListener(this);\n', 0),
(9446, 15, '        addComponentListener(this);\n', 0),
(9447, 16, '    }\n', 0),
(9448, 17, '\n', 0),
(9449, 18, '    public void update(Graphics g) {\n', 0),
(9450, 19, '        Dimension newSize = getSize();\n', 8),
(9451, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(9452, 21, '            g.setColor(getBackground());\n', 0),
(9453, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(9454, 23, '        } else {\n', 0),
(9455, 24, '            size = newSize;\n', 0),
(9456, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(9457, 26, '        } // Calculate new position\n', 0),
(9458, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(9459, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(9460, 29, '        paint(g);\n', 0),
(9461, 30, '    }\n', 0),
(9462, 31, '  \n', 0),
(9463, 32, '    public void paint(Graphics g) {\n', 0),
(9464, 33, '        g.setColor(Color.black);\n', 0),
(9465, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(9466, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(9467, 36, '    }\n', 0),
(9468, 37, '\n', 0),
(9469, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(9470, 39, '\n', 0),
(9471, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(9472, 41, '        e.consume();\n', 0),
(9473, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(9474, 43, '            repaint();\n', 0),
(9475, 44, '        }\n', 0),
(9476, 45, '    }\n', 0),
(9477, 46, '\n', 0),
(9478, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(9479, 48, '        int x = e.getX();\n', 0),
(9480, 49, '        int y = e.getY();\n', 0),
(9481, 50, '        e.consume();\n', 0),
(9482, 51, '        requestFocus();\n', 0),
(9483, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(9484, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(9485, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(9486, 55, '                case 0:\n', 0),
(9487, 56, '                    play(getCodeBase(), \n', 0),
(9488, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(9489, 58, '                    break;\n', 0),
(9490, 59, '                case 1:\n', 0),
(9491, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(9492, 61, '                    break;\n', 0),
(9493, 62, '                case 2:\n', 0),
(9494, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(9495, 64, '                    break;\n', 0),
(9496, 65, '                case 3:\n', 0),
(9497, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(9498, 67, '                    break;\n', 0),
(9499, 68, '                }\n', 0),
(9500, 69, '                onaroll++;\n', 0),
(9501, 70, '                if (onaroll > 5) {\n', 0),
(9502, 72, '                } else {\n', 0),
(9503, 74, '                }\n', 0),
(9504, 75, '            } else {   //first hit\n', 0),
(9505, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(9506, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(9507, 78, '                onaroll = 1;\n', 0),
(9508, 79, '            }\n', 0),
(9509, 80, '        } else {   //miss\n', 0),
(9510, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(9511, 82, '			\n', 0),
(9512, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(9513, 84, '            onaroll = 0;\n', 0),
(9514, 85, '        }\n', 0),
(9515, 86, '        repaint();\n', 0),
(9516, 87, '    }\n', 0),
(9517, 88, '\n', 0),
(9518, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(9519, 90, '\n', 0),
(9520, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(9521, 92, '        repaint();\n', 0),
(9522, 93, '    }\n', 0),
(9523, 94, '\n', 0),
(9524, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(9525, 96, '        repaint();\n', 0),
(9526, 97, '    }\n', 0),
(9527, 98, '\n', 0),
(9528, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(9529, 100, '\n', 0),
(9530, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(9531, 102, ' \n', 0),
(9532, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(9533, 104, ' \n', 0),
(9534, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(9535, 106, '        repaint();\n', 0),
(9536, 107, '    }\n', 0),
(9537, 108, ' \n', 0),
(9538, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(9539, 110, '        repaint();\n', 0),
(9540, 111, '    }\n', 0),
(9541, 112, '  \n', 0),
(9542, 113, '    public void destroy() {\n', 0),
(9543, 114, '        removeMouseListener(this);\n', 0),
(9544, 115, '        removeMouseMotionListener(this);\n', 0),
(9545, 116, '    }\n', 0),
(9546, 117, '\n', 0),
(9547, 118, '    public String getAppletInfo() {\n', 0),
(9548, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(9549, 120, '    }\n', 0),
(9550, 121, '}\n', 0),
(9551, 0, 'import java.util.Scanner;\r\n', 0),
(9552, 1, ' class Years{\r\n', 0),
(9553, 2, '   public int getYear(){\r\n', 0),
(9554, 3, '	int year;\r\n', 2),
(9555, 4, '	String enteredYear;\r\n', 2),
(9556, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(9557, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(9558, 7, '	enteredYear = sc.next();\r\n', 0),
(9559, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(9560, 9, '	return year;\r\n', 0),
(9561, 10, '   }\r\n', 0),
(9562, 11, ' }\r\n', 0),
(9563, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9564, 13, ' class Months extends Years{\r\n', 0),
(9565, 14, '   public int getMonth(){\r\n', 0),
(9566, 15, '	int month;\r\n', 2),
(9567, 16, '	String enteredMonthNumber;\r\n', 2),
(9568, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(9569, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(9570, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(9571, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(9572, 21, '	return month;\r\n', 0),
(9573, 22, '   }\r\n', 0),
(9574, 23, ' }\r\n', 0),
(9575, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9576, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(9577, 26, ' static int numDays = 0;\r\n', 4),
(9578, 27, ' public static void main(String[] args) {\r\n', 0),
(9579, 28, '   int year;\r\n', 2),
(9580, 29, '   Months m = new Months();\r\n', 0),
(9581, 30, '   int month = m.getMonth();\r\n', 0),
(9582, 31, '   \r\n', 0),
(9583, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(9584, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(9585, 34, '   }\r\n', 0),
(9586, 35, '   else {\r\n', 0),
(9587, 36, '    switch (month) {\r\n', 0),
(9588, 37, '      case 1:\r\n', 0),
(9589, 38, '      case 3:\r\n', 0),
(9590, 39, '      case 5:\r\n', 0),
(9591, 40, '      case 7:\r\n', 0),
(9592, 41, '      case 8:\r\n', 0),
(9593, 42, '      case 10:\r\n', 0),
(9594, 43, '      case 12:\r\n', 0),
(9595, 44, '        numDays = 31;\r\n', 0),
(9596, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(9597, 46, '        break;\r\n', 0),
(9598, 47, '      case 4:\r\n', 0),
(9599, 48, '      case 6:\r\n', 0),
(9600, 49, '      case 9:\r\n', 0),
(9601, 50, '      case 11:\r\n', 0),
(9602, 51, '       numDays = 30;\r\n', 0),
(9603, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(9604, 53, '       break;\r\n', 0),
(9605, 54, '      case 2:\r\n', 0),
(9606, 55, '       year = m.getYear();\r\n', 0),
(9607, 56, '       if(year < 1) {\r\n', 0),
(9608, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(9609, 58, '       }\r\n', 0),
(9610, 59, '       else{\r\n', 0),
(9611, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(9612, 61, '         numDays = 29;\r\n', 0),
(9613, 62, '		 if(year > 2020){\r\n', 0),
(9614, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(9615, 64, '         }\r\n', 0),
(9616, 65, '         else{\r\n', 0),
(9617, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(9618, 67, '         }\r\n', 0),
(9619, 68, '        }//if at line 61\r\n', 0),
(9620, 69, '        else{\r\n', 0),
(9621, 70, '         numDays = 28;\r\n', 0),
(9622, 71, '         if (year > 2020){\r\n', 0),
(9623, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(9624, 73, '         }\r\n', 0),
(9625, 74, '         else{\r\n', 0),
(9626, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(9627, 76, '         }\r\n', 0),
(9628, 77, '         break;  \r\n', 0),
(9629, 78, '        }//else at line 70\r\n', 0),
(9630, 79, '       }//else at line 60\r\n', 0),
(9631, 80, '    }//switch at line 37\r\n', 0),
(9632, 81, '   }//else at line 36\r\n', 0),
(9633, 82, '  }//method\r\n', 0),
(9634, 83, ' }//class', 0),
(9635, 0, 'class Pattern{ \r\n', 0),
(9636, 1, 'public static void main(String[] args) { \r\n', 0),
(9637, 2, '	 int rows = 5;\r\n', 2),
(9638, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(9639, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(9640, 5, '	 System.out.print(j + " "); \r\n', 0),
(9641, 6, '	 } \r\n', 0),
(9642, 7, '	 System.out.println(""); \r\n', 0),
(9643, 8, ' 	} \r\n', 0),
(9644, 9, ' 	} \r\n', 0),
(9645, 10, '} ', 0),
(9646, 0, 'import java.util.Scanner;\r\n', 0),
(9647, 1, ' class Years{\r\n', 0),
(9648, 2, '   public int getYear(){\r\n', 0),
(9649, 3, '	int year;\r\n', 2),
(9650, 4, '	String enteredYear;\r\n', 2),
(9651, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(9652, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(9653, 7, '	enteredYear = sc.next();\r\n', 0),
(9654, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(9655, 9, '	return year;\r\n', 0),
(9656, 10, '   }\r\n', 0),
(9657, 11, ' }\r\n', 0),
(9658, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9659, 13, ' class Months extends Years{\r\n', 0),
(9660, 14, '   public int getMonth(){\r\n', 0),
(9661, 15, '	int month;\r\n', 2),
(9662, 16, '	String enteredMonthNumber;\r\n', 2),
(9663, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(9664, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(9665, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(9666, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(9667, 21, '	return month;\r\n', 0),
(9668, 22, '   }\r\n', 0),
(9669, 23, ' }\r\n', 0),
(9670, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9671, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(9672, 26, ' static int numDays = 0;\r\n', 4),
(9673, 27, ' public static void main(String[] args) {\r\n', 0),
(9674, 28, '   int year;\r\n', 2),
(9675, 29, '   Months m = new Months();\r\n', 0),
(9676, 30, '   int month = m.getMonth();\r\n', 0),
(9677, 31, '   \r\n', 0),
(9678, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(9679, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(9680, 34, '   }\r\n', 0),
(9681, 35, '   else {\r\n', 0),
(9682, 36, '    switch (month) {\r\n', 0),
(9683, 37, '      case 1:\r\n', 0),
(9684, 38, '      case 3:\r\n', 0),
(9685, 39, '      case 5:\r\n', 0),
(9686, 40, '      case 7:\r\n', 0),
(9687, 41, '      case 8:\r\n', 0),
(9688, 42, '      case 10:\r\n', 0),
(9689, 43, '      case 12:\r\n', 0),
(9690, 44, '        numDays = 31;\r\n', 0),
(9691, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(9692, 46, '        break;\r\n', 0),
(9693, 47, '      case 4:\r\n', 0),
(9694, 48, '      case 6:\r\n', 0),
(9695, 49, '      case 9:\r\n', 0),
(9696, 50, '      case 11:\r\n', 0),
(9697, 51, '       numDays = 30;\r\n', 0),
(9698, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(9699, 53, '       break;\r\n', 0),
(9700, 54, '      case 2:\r\n', 0),
(9701, 55, '       year = m.getYear();\r\n', 0),
(9702, 56, '       if(year < 1) {\r\n', 0),
(9703, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(9704, 58, '       }\r\n', 0),
(9705, 59, '       else{\r\n', 0),
(9706, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(9707, 61, '         numDays = 29;\r\n', 0),
(9708, 62, '		 if(year > 2020){\r\n', 0),
(9709, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(9710, 64, '         }\r\n', 0),
(9711, 65, '         else{\r\n', 0),
(9712, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(9713, 67, '         }\r\n', 0),
(9714, 68, '        }//if at line 61\r\n', 0),
(9715, 69, '        else{\r\n', 0),
(9716, 70, '         numDays = 28;\r\n', 0),
(9717, 71, '         if (year > 2020){\r\n', 0),
(9718, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(9719, 73, '         }\r\n', 0),
(9720, 74, '         else{\r\n', 0),
(9721, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(9722, 76, '         }\r\n', 0),
(9723, 77, '         break;  \r\n', 0),
(9724, 78, '        }//else at line 70\r\n', 0),
(9725, 79, '       }//else at line 60\r\n', 0),
(9726, 80, '    }//switch at line 37\r\n', 0),
(9727, 81, '   }//else at line 36\r\n', 0),
(9728, 82, '  }//method\r\n', 0),
(9729, 83, ' }//class', 0),
(9730, 0, 'class HelloWorld { \r\n', 0),
(9731, 1, '	public static void main(String args[]) \r\n', 0),
(9732, 2, '	{ \r\n', 0),
(9733, 3, '		System.out.println("Hello World"); \r\n', 0),
(9734, 4, '	} \r\n', 0),
(9735, 5, '} \r\n', 0),
(9736, 0, 'import java.awt.event.*;\n', 0),
(9737, 1, 'import java.awt.*;\n', 0),
(9738, 2, '\n', 0),
(9739, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(9740, 4, '\n', 0),
(9741, 5, '    private int mx, my;\n', 4),
(9742, 6, '    private Dimension size;\n', 8),
(9743, 7, '    private int onaroll;\n', 2),
(9744, 8, '\n', 0),
(9745, 9, '    public void init() {\n', 0),
(9746, 10, '        onaroll = 0;\n', 0),
(9747, 11, '        setSize(500, 500);\n', 0),
(9748, 12, '        size = getSize();\n', 0),
(9749, 13, '        addMouseListener(this);\n', 0),
(9750, 14, '        addMouseMotionListener(this);\n', 0),
(9751, 15, '        addComponentListener(this);\n', 0),
(9752, 16, '    }\n', 0),
(9753, 17, '\n', 0),
(9754, 18, '    public void update(Graphics g) {\n', 0),
(9755, 19, '        Dimension newSize = getSize();\n', 8),
(9756, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(9757, 21, '            g.setColor(getBackground());\n', 0),
(9758, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(9759, 23, '        } else {\n', 0),
(9760, 24, '            size = newSize;\n', 0),
(9761, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(9762, 26, '        } // Calculate new position\n', 0),
(9763, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(9764, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(9765, 29, '        paint(g);\n', 0),
(9766, 30, '    }\n', 0),
(9767, 31, '  \n', 0),
(9768, 32, '    public void paint(Graphics g) {\n', 0),
(9769, 33, '        g.setColor(Color.black);\n', 0),
(9770, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(9771, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(9772, 36, '    }\n', 0),
(9773, 37, '\n', 0),
(9774, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(9775, 39, '\n', 0),
(9776, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(9777, 41, '        e.consume();\n', 0),
(9778, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(9779, 43, '            repaint();\n', 0),
(9780, 44, '        }\n', 0),
(9781, 45, '    }\n', 0),
(9782, 46, '\n', 0),
(9783, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(9784, 48, '        int x = e.getX();\n', 0),
(9785, 49, '        int y = e.getY();\n', 0),
(9786, 50, '        e.consume();\n', 0),
(9787, 51, '        requestFocus();\n', 0),
(9788, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(9789, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(9790, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(9791, 55, '                case 0:\n', 0),
(9792, 56, '                    play(getCodeBase(), \n', 0),
(9793, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(9794, 58, '                    break;\n', 0),
(9795, 59, '                case 1:\n', 0),
(9796, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(9797, 61, '                    break;\n', 0),
(9798, 62, '                case 2:\n', 0),
(9799, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(9800, 64, '                    break;\n', 0),
(9801, 65, '                case 3:\n', 0),
(9802, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(9803, 67, '                    break;\n', 0),
(9804, 68, '                }\n', 0),
(9805, 69, '                onaroll++;\n', 0),
(9806, 70, '                if (onaroll > 5) {\n', 0),
(9807, 72, '                } else {\n', 0),
(9808, 74, '                }\n', 0),
(9809, 75, '            } else {   //first hit\n', 0),
(9810, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(9811, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(9812, 78, '                onaroll = 1;\n', 0),
(9813, 79, '            }\n', 0),
(9814, 80, '        } else {   //miss\n', 0),
(9815, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(9816, 82, '			\n', 0),
(9817, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(9818, 84, '            onaroll = 0;\n', 0),
(9819, 85, '        }\n', 0),
(9820, 86, '        repaint();\n', 0),
(9821, 87, '    }\n', 0),
(9822, 88, '\n', 0),
(9823, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(9824, 90, '\n', 0),
(9825, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(9826, 92, '        repaint();\n', 0),
(9827, 93, '    }\n', 0),
(9828, 94, '\n', 0),
(9829, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(9830, 96, '        repaint();\n', 0),
(9831, 97, '    }\n', 0),
(9832, 98, '\n', 0),
(9833, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(9834, 100, '\n', 0),
(9835, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(9836, 102, ' \n', 0),
(9837, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(9838, 104, ' \n', 0),
(9839, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(9840, 106, '        repaint();\n', 0),
(9841, 107, '    }\n', 0),
(9842, 108, ' \n', 0),
(9843, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(9844, 110, '        repaint();\n', 0),
(9845, 111, '    }\n', 0),
(9846, 112, '  \n', 0),
(9847, 113, '    public void destroy() {\n', 0),
(9848, 114, '        removeMouseListener(this);\n', 0),
(9849, 115, '        removeMouseMotionListener(this);\n', 0),
(9850, 116, '    }\n', 0),
(9851, 117, '\n', 0),
(9852, 118, '    public String getAppletInfo() {\n', 0),
(9853, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(9854, 120, '    }\n', 0),
(9855, 121, '}\n', 0),
(9856, 0, 'import java.awt.event.*;\n', 0),
(9857, 1, 'import java.awt.*;\n', 0),
(9858, 2, '\n', 0),
(9859, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(9860, 4, '\n', 0),
(9861, 5, '    private int mx, my;\n', 4),
(9862, 6, '    private Dimension size;\n', 8),
(9863, 7, '    private int onaroll;\n', 2),
(9864, 8, '\n', 0),
(9865, 9, '    public void init() {\n', 0),
(9866, 10, '        onaroll = 0;\n', 0),
(9867, 11, '        setSize(500, 500);\n', 0),
(9868, 12, '        size = getSize();\n', 0),
(9869, 13, '        addMouseListener(this);\n', 0),
(9870, 14, '        addMouseMotionListener(this);\n', 0),
(9871, 15, '        addComponentListener(this);\n', 0),
(9872, 16, '    }\n', 0),
(9873, 17, '\n', 0),
(9874, 18, '    public void update(Graphics g) {\n', 0),
(9875, 19, '        Dimension newSize = getSize();\n', 8),
(9876, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(9877, 21, '            g.setColor(getBackground());\n', 0),
(9878, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(9879, 23, '        } else {\n', 0),
(9880, 24, '            size = newSize;\n', 0),
(9881, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(9882, 26, '        } // Calculate new position\n', 0),
(9883, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(9884, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(9885, 29, '        paint(g);\n', 0),
(9886, 30, '    }\n', 0),
(9887, 31, '  \n', 0),
(9888, 32, '    public void paint(Graphics g) {\n', 0),
(9889, 33, '        g.setColor(Color.black);\n', 0),
(9890, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(9891, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(9892, 36, '    }\n', 0),
(9893, 37, '\n', 0),
(9894, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(9895, 39, '\n', 0),
(9896, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(9897, 41, '        e.consume();\n', 0),
(9898, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(9899, 43, '            repaint();\n', 0),
(9900, 44, '        }\n', 0),
(9901, 45, '    }\n', 0),
(9902, 46, '\n', 0),
(9903, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(9904, 48, '        int x = e.getX();\n', 0),
(9905, 49, '        int y = e.getY();\n', 0),
(9906, 50, '        e.consume();\n', 0),
(9907, 51, '        requestFocus();\n', 0),
(9908, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(9909, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(9910, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(9911, 55, '                case 0:\n', 0),
(9912, 56, '                    play(getCodeBase(), \n', 0),
(9913, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(9914, 58, '                    break;\n', 0),
(9915, 59, '                case 1:\n', 0),
(9916, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(9917, 61, '                    break;\n', 0),
(9918, 62, '                case 2:\n', 0),
(9919, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(9920, 64, '                    break;\n', 0),
(9921, 65, '                case 3:\n', 0),
(9922, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(9923, 67, '                    break;\n', 0),
(9924, 68, '                }\n', 0),
(9925, 69, '                onaroll++;\n', 0),
(9926, 70, '                if (onaroll > 5) {\n', 0),
(9927, 72, '                } else {\n', 0),
(9928, 74, '                }\n', 0),
(9929, 75, '            } else {   //first hit\n', 0),
(9930, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(9931, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(9932, 78, '                onaroll = 1;\n', 0),
(9933, 79, '            }\n', 0),
(9934, 80, '        } else {   //miss\n', 0),
(9935, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(9936, 82, '			\n', 0),
(9937, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(9938, 84, '            onaroll = 0;\n', 0),
(9939, 85, '        }\n', 0),
(9940, 86, '        repaint();\n', 0),
(9941, 87, '    }\n', 0),
(9942, 88, '\n', 0),
(9943, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(9944, 90, '\n', 0),
(9945, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(9946, 92, '        repaint();\n', 0),
(9947, 93, '    }\n', 0),
(9948, 94, '\n', 0),
(9949, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(9950, 96, '        repaint();\n', 0),
(9951, 97, '    }\n', 0),
(9952, 98, '\n', 0),
(9953, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(9954, 100, '\n', 0),
(9955, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(9956, 102, ' \n', 0),
(9957, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(9958, 104, ' \n', 0),
(9959, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(9960, 106, '        repaint();\n', 0),
(9961, 107, '    }\n', 0),
(9962, 108, ' \n', 0),
(9963, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(9964, 110, '        repaint();\n', 0),
(9965, 111, '    }\n', 0),
(9966, 112, '  \n', 0),
(9967, 113, '    public void destroy() {\n', 0),
(9968, 114, '        removeMouseListener(this);\n', 0),
(9969, 115, '        removeMouseMotionListener(this);\n', 0),
(9970, 116, '    }\n', 0),
(9971, 117, '\n', 0),
(9972, 118, '    public String getAppletInfo() {\n', 0),
(9973, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(9974, 120, '    }\n', 0),
(9975, 121, '}\n', 0),
(9976, 0, 'import java.util.Scanner;\r\n', 0),
(9977, 1, ' class Years{\r\n', 0),
(9978, 2, '   public int getYear(){\r\n', 0),
(9979, 3, '	int year;\r\n', 2),
(9980, 4, '	String enteredYear;\r\n', 2),
(9981, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(9982, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(9983, 7, '	enteredYear = sc.next();\r\n', 0),
(9984, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(9985, 9, '	return year;\r\n', 0),
(9986, 10, '   }\r\n', 0),
(9987, 11, ' }\r\n', 0),
(9988, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(9989, 13, ' class Months extends Years{\r\n', 0),
(9990, 14, '   public int getMonth(){\r\n', 0),
(9991, 15, '	int month;\r\n', 2),
(9992, 16, '	String enteredMonthNumber;\r\n', 2),
(9993, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(9994, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(9995, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(9996, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(9997, 21, '	return month;\r\n', 0),
(9998, 22, '   }\r\n', 0),
(9999, 23, ' }\r\n', 0),
(10000, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10001, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(10002, 26, ' static int numDays = 0;\r\n', 4),
(10003, 27, ' public static void main(String[] args) {\r\n', 0),
(10004, 28, '   int year;\r\n', 2),
(10005, 29, '   Months m = new Months();\r\n', 0),
(10006, 30, '   int month = m.getMonth();\r\n', 0),
(10007, 31, '   \r\n', 0),
(10008, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(10009, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(10010, 34, '   }\r\n', 0),
(10011, 35, '   else {\r\n', 0),
(10012, 36, '    switch (month) {\r\n', 0),
(10013, 37, '      case 1:\r\n', 0),
(10014, 38, '      case 3:\r\n', 0),
(10015, 39, '      case 5:\r\n', 0),
(10016, 40, '      case 7:\r\n', 0),
(10017, 41, '      case 8:\r\n', 0),
(10018, 42, '      case 10:\r\n', 0),
(10019, 43, '      case 12:\r\n', 0),
(10020, 44, '        numDays = 31;\r\n', 0),
(10021, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(10022, 46, '        break;\r\n', 0),
(10023, 47, '      case 4:\r\n', 0),
(10024, 48, '      case 6:\r\n', 0),
(10025, 49, '      case 9:\r\n', 0),
(10026, 50, '      case 11:\r\n', 0),
(10027, 51, '       numDays = 30;\r\n', 0),
(10028, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(10029, 53, '       break;\r\n', 0),
(10030, 54, '      case 2:\r\n', 0),
(10031, 55, '       year = m.getYear();\r\n', 0),
(10032, 56, '       if(year < 1) {\r\n', 0),
(10033, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(10034, 58, '       }\r\n', 0),
(10035, 59, '       else{\r\n', 0),
(10036, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(10037, 61, '         numDays = 29;\r\n', 0),
(10038, 62, '		 if(year > 2020){\r\n', 0),
(10039, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(10040, 64, '         }\r\n', 0),
(10041, 65, '         else{\r\n', 0),
(10042, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(10043, 67, '         }\r\n', 0),
(10044, 68, '        }//if at line 61\r\n', 0),
(10045, 69, '        else{\r\n', 0),
(10046, 70, '         numDays = 28;\r\n', 0),
(10047, 71, '         if (year > 2020){\r\n', 0),
(10048, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(10049, 73, '         }\r\n', 0),
(10050, 74, '         else{\r\n', 0),
(10051, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(10052, 76, '         }\r\n', 0),
(10053, 77, '         break;  \r\n', 0),
(10054, 78, '        }//else at line 70\r\n', 0),
(10055, 79, '       }//else at line 60\r\n', 0),
(10056, 80, '    }//switch at line 37\r\n', 0),
(10057, 81, '   }//else at line 36\r\n', 0),
(10058, 82, '  }//method\r\n', 0),
(10059, 83, ' }//class', 0),
(10060, 0, 'public class RecursionExample2 {  \r\n', 0),
(10061, 1, 'static int count=0;  \r\n', 4),
(10062, 2, 'public int p(){  \r\n', 0),
(10063, 3, 'count++;  \r\n', 0),
(10064, 4, 'if(count<=5){  \r\n', 0),
(10065, 5, 'System.out.println("hello "+count);  \r\n', 0),
(10066, 6, 'public int p();  \r\n', 0),
(10067, 7, '}  \r\n', 0),
(10068, 8, '}  \r\n', 0),
(10069, 9, 'public static void main(String[] args) {  \r\n', 0),
(10070, 10, 'p();  \r\n', 0),
(10071, 11, '}  \r\n', 0),
(10072, 12, '}  ', 0),
(10073, 0, 'import java.awt.event.*;\n', 0),
(10074, 1, 'import java.awt.*;\n', 0),
(10075, 2, '\n', 0),
(10076, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(10077, 4, '\n', 0),
(10078, 5, '    private int mx, my;\n', 4),
(10079, 6, '    private Dimension size;\n', 8),
(10080, 7, '    private int onaroll;\n', 2),
(10081, 8, '\n', 0),
(10082, 9, '    public void init() {\n', 0),
(10083, 10, '        onaroll = 0;\n', 0),
(10084, 11, '        setSize(500, 500);\n', 0),
(10085, 12, '        size = getSize();\n', 0),
(10086, 13, '        addMouseListener(this);\n', 0),
(10087, 14, '        addMouseMotionListener(this);\n', 0),
(10088, 15, '        addComponentListener(this);\n', 0),
(10089, 16, '    }\n', 0),
(10090, 17, '\n', 0),
(10091, 18, '    public void update(Graphics g) {\n', 0),
(10092, 19, '        Dimension newSize = getSize();\n', 8),
(10093, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(10094, 21, '            g.setColor(getBackground());\n', 0),
(10095, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(10096, 23, '        } else {\n', 0),
(10097, 24, '            size = newSize;\n', 0),
(10098, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(10099, 26, '        } // Calculate new position\n', 0),
(10100, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(10101, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(10102, 29, '        paint(g);\n', 0),
(10103, 30, '    }\n', 0),
(10104, 31, '  \n', 0),
(10105, 32, '    public void paint(Graphics g) {\n', 0),
(10106, 33, '        g.setColor(Color.black);\n', 0),
(10107, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(10108, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(10109, 36, '    }\n', 0),
(10110, 37, '\n', 0),
(10111, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(10112, 39, '\n', 0),
(10113, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(10114, 41, '        e.consume();\n', 0),
(10115, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(10116, 43, '            repaint();\n', 0),
(10117, 44, '        }\n', 0),
(10118, 45, '    }\n', 0),
(10119, 46, '\n', 0),
(10120, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(10121, 48, '        int x = e.getX();\n', 0),
(10122, 49, '        int y = e.getY();\n', 0),
(10123, 50, '        e.consume();\n', 0),
(10124, 51, '        requestFocus();\n', 0),
(10125, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(10126, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(10127, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(10128, 55, '                case 0:\n', 0),
(10129, 56, '                    play(getCodeBase(), \n', 0),
(10130, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(10131, 58, '                    break;\n', 0),
(10132, 59, '                case 1:\n', 0),
(10133, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(10134, 61, '                    break;\n', 0),
(10135, 62, '                case 2:\n', 0),
(10136, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(10137, 64, '                    break;\n', 0),
(10138, 65, '                case 3:\n', 0),
(10139, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(10140, 67, '                    break;\n', 0),
(10141, 68, '                }\n', 0),
(10142, 69, '                onaroll++;\n', 0),
(10143, 70, '                if (onaroll > 5) {\n', 0),
(10144, 72, '                } else {\n', 0),
(10145, 74, '                }\n', 0),
(10146, 75, '            } else {   //first hit\n', 0),
(10147, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(10148, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(10149, 78, '                onaroll = 1;\n', 0),
(10150, 79, '            }\n', 0),
(10151, 80, '        } else {   //miss\n', 0),
(10152, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(10153, 82, '			\n', 0),
(10154, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(10155, 84, '            onaroll = 0;\n', 0),
(10156, 85, '        }\n', 0),
(10157, 86, '        repaint();\n', 0),
(10158, 87, '    }\n', 0),
(10159, 88, '\n', 0),
(10160, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(10161, 90, '\n', 0),
(10162, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(10163, 92, '        repaint();\n', 0),
(10164, 93, '    }\n', 0),
(10165, 94, '\n', 0),
(10166, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(10167, 96, '        repaint();\n', 0),
(10168, 97, '    }\n', 0),
(10169, 98, '\n', 0),
(10170, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(10171, 100, '\n', 0),
(10172, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(10173, 102, ' \n', 0),
(10174, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(10175, 104, ' \n', 0),
(10176, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(10177, 106, '        repaint();\n', 0),
(10178, 107, '    }\n', 0),
(10179, 108, ' \n', 0),
(10180, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(10181, 110, '        repaint();\n', 0),
(10182, 111, '    }\n', 0),
(10183, 112, '  \n', 0),
(10184, 113, '    public void destroy() {\n', 0),
(10185, 114, '        removeMouseListener(this);\n', 0),
(10186, 115, '        removeMouseMotionListener(this);\n', 0),
(10187, 116, '    }\n', 0),
(10188, 117, '\n', 0),
(10189, 118, '    public String getAppletInfo() {\n', 0),
(10190, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(10191, 120, '    }\n', 0),
(10192, 121, '}\n', 0),
(10193, 0, 'import java.awt.event.*;\n', 0),
(10194, 1, 'import java.awt.*;\n', 0),
(10195, 2, '\n', 0),
(10196, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(10197, 4, '\n', 0),
(10198, 5, '    private int mx, my;\n', 4),
(10199, 6, '    private Dimension size;\n', 8),
(10200, 7, '    private int onaroll;\n', 2),
(10201, 8, '\n', 0),
(10202, 9, '    public void init() {\n', 0),
(10203, 10, '        onaroll = 0;\n', 0),
(10204, 11, '        setSize(500, 500);\n', 0),
(10205, 12, '        size = getSize();\n', 0),
(10206, 13, '        addMouseListener(this);\n', 0),
(10207, 14, '        addMouseMotionListener(this);\n', 0),
(10208, 15, '        addComponentListener(this);\n', 0),
(10209, 16, '    }\n', 0),
(10210, 17, '\n', 0),
(10211, 18, '    public void update(Graphics g) {\n', 0),
(10212, 19, '        Dimension newSize = getSize();\n', 8),
(10213, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(10214, 21, '            g.setColor(getBackground());\n', 0),
(10215, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(10216, 23, '        } else {\n', 0),
(10217, 24, '            size = newSize;\n', 0),
(10218, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(10219, 26, '        } // Calculate new position\n', 0),
(10220, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(10221, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(10222, 29, '        paint(g);\n', 0),
(10223, 30, '    }\n', 0),
(10224, 31, '  \n', 0),
(10225, 32, '    public void paint(Graphics g) {\n', 0),
(10226, 33, '        g.setColor(Color.black);\n', 0),
(10227, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(10228, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(10229, 36, '    }\n', 0),
(10230, 37, '\n', 0),
(10231, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(10232, 39, '\n', 0),
(10233, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(10234, 41, '        e.consume();\n', 0),
(10235, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(10236, 43, '            repaint();\n', 0),
(10237, 44, '        }\n', 0),
(10238, 45, '    }\n', 0),
(10239, 46, '\n', 0),
(10240, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(10241, 48, '        int x = e.getX();\n', 0),
(10242, 49, '        int y = e.getY();\n', 0),
(10243, 50, '        e.consume();\n', 0),
(10244, 51, '        requestFocus();\n', 0),
(10245, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(10246, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(10247, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(10248, 55, '                case 0:\n', 0),
(10249, 56, '                    play(getCodeBase(), \n', 0),
(10250, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(10251, 58, '                    break;\n', 0),
(10252, 59, '                case 1:\n', 0),
(10253, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(10254, 61, '                    break;\n', 0),
(10255, 62, '                case 2:\n', 0),
(10256, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(10257, 64, '                    break;\n', 0),
(10258, 65, '                case 3:\n', 0),
(10259, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(10260, 67, '                    break;\n', 0),
(10261, 68, '                }\n', 0),
(10262, 69, '                onaroll++;\n', 0),
(10263, 70, '                if (onaroll > 5) {\n', 0),
(10264, 72, '                } else {\n', 0),
(10265, 74, '                }\n', 0),
(10266, 75, '            } else {   //first hit\n', 0),
(10267, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(10268, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(10269, 78, '                onaroll = 1;\n', 0),
(10270, 79, '            }\n', 0),
(10271, 80, '        } else {   //miss\n', 0),
(10272, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(10273, 82, '			\n', 0),
(10274, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(10275, 84, '            onaroll = 0;\n', 0),
(10276, 85, '        }\n', 0),
(10277, 86, '        repaint();\n', 0),
(10278, 87, '    }\n', 0),
(10279, 88, '\n', 0),
(10280, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(10281, 90, '\n', 0),
(10282, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(10283, 92, '        repaint();\n', 0),
(10284, 93, '    }\n', 0),
(10285, 94, '\n', 0),
(10286, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(10287, 96, '        repaint();\n', 0),
(10288, 97, '    }\n', 0),
(10289, 98, '\n', 0),
(10290, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(10291, 100, '\n', 0),
(10292, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(10293, 102, ' \n', 0),
(10294, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(10295, 104, ' \n', 0),
(10296, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(10297, 106, '        repaint();\n', 0),
(10298, 107, '    }\n', 0),
(10299, 108, ' \n', 0),
(10300, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(10301, 110, '        repaint();\n', 0),
(10302, 111, '    }\n', 0),
(10303, 112, '  \n', 0),
(10304, 113, '    public void destroy() {\n', 0),
(10305, 114, '        removeMouseListener(this);\n', 0),
(10306, 115, '        removeMouseMotionListener(this);\n', 0),
(10307, 116, '    }\n', 0),
(10308, 117, '\n', 0),
(10309, 118, '    public String getAppletInfo() {\n', 0),
(10310, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(10311, 120, '    }\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(10312, 121, '}\n', 0),
(10313, 0, 'import java.util.Scanner;\r\n', 0),
(10314, 1, ' class Years{\r\n', 0),
(10315, 2, '   public int getYear(){\r\n', 0),
(10316, 3, '	int year;\r\n', 2),
(10317, 4, '	String enteredYear;\r\n', 2),
(10318, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(10319, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(10320, 7, '	enteredYear = sc.next();\r\n', 0),
(10321, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(10322, 9, '	return year;\r\n', 0),
(10323, 10, '   }\r\n', 0),
(10324, 11, ' }\r\n', 0),
(10325, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10326, 13, ' class Months extends Years{\r\n', 0),
(10327, 14, '   public int getMonth(){\r\n', 0),
(10328, 15, '	int month;\r\n', 2),
(10329, 16, '	String enteredMonthNumber;\r\n', 2),
(10330, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(10331, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(10332, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(10333, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(10334, 21, '	return month;\r\n', 0),
(10335, 22, '   }\r\n', 0),
(10336, 23, ' }\r\n', 0),
(10337, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10338, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(10339, 26, ' static int numDays = 0;\r\n', 4),
(10340, 27, ' public static void main(String[] args) {\r\n', 0),
(10341, 28, '   int year;\r\n', 2),
(10342, 29, '   Months m = new Months();\r\n', 0),
(10343, 30, '   int month = m.getMonth();\r\n', 0),
(10344, 31, '   \r\n', 0),
(10345, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(10346, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(10347, 34, '   }\r\n', 0),
(10348, 35, '   else {\r\n', 0),
(10349, 36, '    switch (month) {\r\n', 0),
(10350, 37, '      case 1:\r\n', 0),
(10351, 38, '      case 3:\r\n', 0),
(10352, 39, '      case 5:\r\n', 0),
(10353, 40, '      case 7:\r\n', 0),
(10354, 41, '      case 8:\r\n', 0),
(10355, 42, '      case 10:\r\n', 0),
(10356, 43, '      case 12:\r\n', 0),
(10357, 44, '        numDays = 31;\r\n', 0),
(10358, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(10359, 46, '        break;\r\n', 0),
(10360, 47, '      case 4:\r\n', 0),
(10361, 48, '      case 6:\r\n', 0),
(10362, 49, '      case 9:\r\n', 0),
(10363, 50, '      case 11:\r\n', 0),
(10364, 51, '       numDays = 30;\r\n', 0),
(10365, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(10366, 53, '       break;\r\n', 0),
(10367, 54, '      case 2:\r\n', 0),
(10368, 55, '       year = m.getYear();\r\n', 0),
(10369, 56, '       if(year < 1) {\r\n', 0),
(10370, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(10371, 58, '       }\r\n', 0),
(10372, 59, '       else{\r\n', 0),
(10373, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(10374, 61, '         numDays = 29;\r\n', 0),
(10375, 62, '		 if(year > 2020){\r\n', 0),
(10376, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(10377, 64, '         }\r\n', 0),
(10378, 65, '         else{\r\n', 0),
(10379, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(10380, 67, '         }\r\n', 0),
(10381, 68, '        }//if at line 61\r\n', 0),
(10382, 69, '        else{\r\n', 0),
(10383, 70, '         numDays = 28;\r\n', 0),
(10384, 71, '         if (year > 2020){\r\n', 0),
(10385, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(10386, 73, '         }\r\n', 0),
(10387, 74, '         else{\r\n', 0),
(10388, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(10389, 76, '         }\r\n', 0),
(10390, 77, '         break;  \r\n', 0),
(10391, 78, '        }//else at line 70\r\n', 0),
(10392, 79, '       }//else at line 60\r\n', 0),
(10393, 80, '    }//switch at line 37\r\n', 0),
(10394, 81, '   }//else at line 36\r\n', 0),
(10395, 82, '  }//method\r\n', 0),
(10396, 83, ' }//class', 0),
(10397, 0, 'class Pattern{ \r\n', 0),
(10398, 1, 'public static void main(String[] args) { \r\n', 0),
(10399, 2, '	 int rows = 5;\r\n', 2),
(10400, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(10401, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(10402, 5, '	 System.out.print(j + " "); \r\n', 0),
(10403, 6, '	 } \r\n', 0),
(10404, 7, '	 System.out.println(""); \r\n', 0),
(10405, 8, ' 	} \r\n', 0),
(10406, 9, ' 	} \r\n', 0),
(10407, 10, '} ', 0),
(10408, 0, 'import java.util.Scanner;\r\n', 0),
(10409, 1, ' class Years{\r\n', 0),
(10410, 2, '   public int getYear(){\r\n', 0),
(10411, 3, '	int year;\r\n', 2),
(10412, 4, '	String enteredYear;\r\n', 2),
(10413, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(10414, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(10415, 7, '	enteredYear = sc.next();\r\n', 0),
(10416, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(10417, 9, '	return year;\r\n', 0),
(10418, 10, '   }\r\n', 0),
(10419, 11, ' }\r\n', 0),
(10420, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10421, 13, ' class Months extends Years{\r\n', 0),
(10422, 14, '   public int getMonth(){\r\n', 0),
(10423, 15, '	int month;\r\n', 2),
(10424, 16, '	String enteredMonthNumber;\r\n', 2),
(10425, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(10426, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(10427, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(10428, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(10429, 21, '	return month;\r\n', 0),
(10430, 22, '   }\r\n', 0),
(10431, 23, ' }\r\n', 0),
(10432, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10433, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(10434, 26, ' static int numDays = 0;\r\n', 4),
(10435, 27, ' public static void main(String[] args) {\r\n', 0),
(10436, 28, '   int year;\r\n', 2),
(10437, 29, '   Months m = new Months();\r\n', 0),
(10438, 30, '   int month = m.getMonth();\r\n', 0),
(10439, 31, '   \r\n', 0),
(10440, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(10441, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(10442, 34, '   }\r\n', 0),
(10443, 35, '   else {\r\n', 0),
(10444, 36, '    switch (month) {\r\n', 0),
(10445, 37, '      case 1:\r\n', 0),
(10446, 38, '      case 3:\r\n', 0),
(10447, 39, '      case 5:\r\n', 0),
(10448, 40, '      case 7:\r\n', 0),
(10449, 41, '      case 8:\r\n', 0),
(10450, 42, '      case 10:\r\n', 0),
(10451, 43, '      case 12:\r\n', 0),
(10452, 44, '        numDays = 31;\r\n', 0),
(10453, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(10454, 46, '        break;\r\n', 0),
(10455, 47, '      case 4:\r\n', 0),
(10456, 48, '      case 6:\r\n', 0),
(10457, 49, '      case 9:\r\n', 0),
(10458, 50, '      case 11:\r\n', 0),
(10459, 51, '       numDays = 30;\r\n', 0),
(10460, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(10461, 53, '       break;\r\n', 0),
(10462, 54, '      case 2:\r\n', 0),
(10463, 55, '       year = m.getYear();\r\n', 0),
(10464, 56, '       if(year < 1) {\r\n', 0),
(10465, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(10466, 58, '       }\r\n', 0),
(10467, 59, '       else{\r\n', 0),
(10468, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(10469, 61, '         numDays = 29;\r\n', 0),
(10470, 62, '		 if(year > 2020){\r\n', 0),
(10471, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(10472, 64, '         }\r\n', 0),
(10473, 65, '         else{\r\n', 0),
(10474, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(10475, 67, '         }\r\n', 0),
(10476, 68, '        }//if at line 61\r\n', 0),
(10477, 69, '        else{\r\n', 0),
(10478, 70, '         numDays = 28;\r\n', 0),
(10479, 71, '         if (year > 2020){\r\n', 0),
(10480, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(10481, 73, '         }\r\n', 0),
(10482, 74, '         else{\r\n', 0),
(10483, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(10484, 76, '         }\r\n', 0),
(10485, 77, '         break;  \r\n', 0),
(10486, 78, '        }//else at line 70\r\n', 0),
(10487, 79, '       }//else at line 60\r\n', 0),
(10488, 80, '    }//switch at line 37\r\n', 0),
(10489, 81, '   }//else at line 36\r\n', 0),
(10490, 82, '  }//method\r\n', 0),
(10491, 83, ' }//class', 0),
(10492, 0, 'class HelloWorld { \r\n', 0),
(10493, 1, '	public static void main(String args[]) \r\n', 0),
(10494, 2, '	{ \r\n', 0),
(10495, 3, '		System.out.println("Hello World"); \r\n', 0),
(10496, 4, '	} \r\n', 0),
(10497, 5, '} \r\n', 0),
(10498, 0, 'import java.awt.event.*;\n', 0),
(10499, 1, 'import java.awt.*;\n', 0),
(10500, 2, '\n', 0),
(10501, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(10502, 4, '\n', 0),
(10503, 5, '    private int mx, my;\n', 4),
(10504, 6, '    private Dimension size;\n', 8),
(10505, 7, '    private int onaroll;\n', 2),
(10506, 8, '\n', 0),
(10507, 9, '    public void init() {\n', 0),
(10508, 10, '        onaroll = 0;\n', 0),
(10509, 11, '        setSize(500, 500);\n', 0),
(10510, 12, '        size = getSize();\n', 0),
(10511, 13, '        addMouseListener(this);\n', 0),
(10512, 14, '        addMouseMotionListener(this);\n', 0),
(10513, 15, '        addComponentListener(this);\n', 0),
(10514, 16, '    }\n', 0),
(10515, 17, '\n', 0),
(10516, 18, '    public void update(Graphics g) {\n', 0),
(10517, 19, '        Dimension newSize = getSize();\n', 8),
(10518, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(10519, 21, '            g.setColor(getBackground());\n', 0),
(10520, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(10521, 23, '        } else {\n', 0),
(10522, 24, '            size = newSize;\n', 0),
(10523, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(10524, 26, '        } // Calculate new position\n', 0),
(10525, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(10526, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(10527, 29, '        paint(g);\n', 0),
(10528, 30, '    }\n', 0),
(10529, 31, '  \n', 0),
(10530, 32, '    public void paint(Graphics g) {\n', 0),
(10531, 33, '        g.setColor(Color.black);\n', 0),
(10532, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(10533, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(10534, 36, '    }\n', 0),
(10535, 37, '\n', 0),
(10536, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(10537, 39, '\n', 0),
(10538, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(10539, 41, '        e.consume();\n', 0),
(10540, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(10541, 43, '            repaint();\n', 0),
(10542, 44, '        }\n', 0),
(10543, 45, '    }\n', 0),
(10544, 46, '\n', 0),
(10545, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(10546, 48, '        int x = e.getX();\n', 0),
(10547, 49, '        int y = e.getY();\n', 0),
(10548, 50, '        e.consume();\n', 0),
(10549, 51, '        requestFocus();\n', 0),
(10550, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(10551, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(10552, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(10553, 55, '                case 0:\n', 0),
(10554, 56, '                    play(getCodeBase(), \n', 0),
(10555, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(10556, 58, '                    break;\n', 0),
(10557, 59, '                case 1:\n', 0),
(10558, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(10559, 61, '                    break;\n', 0),
(10560, 62, '                case 2:\n', 0),
(10561, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(10562, 64, '                    break;\n', 0),
(10563, 65, '                case 3:\n', 0),
(10564, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(10565, 67, '                    break;\n', 0),
(10566, 68, '                }\n', 0),
(10567, 69, '                onaroll++;\n', 0),
(10568, 70, '                if (onaroll > 5) {\n', 0),
(10569, 72, '                } else {\n', 0),
(10570, 74, '                }\n', 0),
(10571, 75, '            } else {   //first hit\n', 0),
(10572, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(10573, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(10574, 78, '                onaroll = 1;\n', 0),
(10575, 79, '            }\n', 0),
(10576, 80, '        } else {   //miss\n', 0),
(10577, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(10578, 82, '			\n', 0),
(10579, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(10580, 84, '            onaroll = 0;\n', 0),
(10581, 85, '        }\n', 0),
(10582, 86, '        repaint();\n', 0),
(10583, 87, '    }\n', 0),
(10584, 88, '\n', 0),
(10585, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(10586, 90, '\n', 0),
(10587, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(10588, 92, '        repaint();\n', 0),
(10589, 93, '    }\n', 0),
(10590, 94, '\n', 0),
(10591, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(10592, 96, '        repaint();\n', 0),
(10593, 97, '    }\n', 0),
(10594, 98, '\n', 0),
(10595, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(10596, 100, '\n', 0),
(10597, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(10598, 102, ' \n', 0),
(10599, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(10600, 104, ' \n', 0),
(10601, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(10602, 106, '        repaint();\n', 0),
(10603, 107, '    }\n', 0),
(10604, 108, ' \n', 0),
(10605, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(10606, 110, '        repaint();\n', 0),
(10607, 111, '    }\n', 0),
(10608, 112, '  \n', 0),
(10609, 113, '    public void destroy() {\n', 0),
(10610, 114, '        removeMouseListener(this);\n', 0),
(10611, 115, '        removeMouseMotionListener(this);\n', 0),
(10612, 116, '    }\n', 0),
(10613, 117, '\n', 0),
(10614, 118, '    public String getAppletInfo() {\n', 0),
(10615, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(10616, 120, '    }\n', 0),
(10617, 121, '}\n', 0),
(10618, 0, 'import java.awt.event.*;\n', 0),
(10619, 1, 'import java.awt.*;\n', 0),
(10620, 2, '\n', 0),
(10621, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(10622, 4, '\n', 0),
(10623, 5, '    private int mx, my;\n', 4),
(10624, 6, '    private Dimension size;\n', 8),
(10625, 7, '    private int onaroll;\n', 2),
(10626, 8, '\n', 0),
(10627, 9, '    public void init() {\n', 0),
(10628, 10, '        onaroll = 0;\n', 0),
(10629, 11, '        setSize(500, 500);\n', 0),
(10630, 12, '        size = getSize();\n', 0),
(10631, 13, '        addMouseListener(this);\n', 0),
(10632, 14, '        addMouseMotionListener(this);\n', 0),
(10633, 15, '        addComponentListener(this);\n', 0),
(10634, 16, '    }\n', 0),
(10635, 17, '\n', 0),
(10636, 18, '    public void update(Graphics g) {\n', 0),
(10637, 19, '        Dimension newSize = getSize();\n', 8),
(10638, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(10639, 21, '            g.setColor(getBackground());\n', 0),
(10640, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(10641, 23, '        } else {\n', 0),
(10642, 24, '            size = newSize;\n', 0),
(10643, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(10644, 26, '        } // Calculate new position\n', 0),
(10645, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(10646, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(10647, 29, '        paint(g);\n', 0),
(10648, 30, '    }\n', 0),
(10649, 31, '  \n', 0),
(10650, 32, '    public void paint(Graphics g) {\n', 0),
(10651, 33, '        g.setColor(Color.black);\n', 0),
(10652, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(10653, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(10654, 36, '    }\n', 0),
(10655, 37, '\n', 0),
(10656, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(10657, 39, '\n', 0),
(10658, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(10659, 41, '        e.consume();\n', 0),
(10660, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(10661, 43, '            repaint();\n', 0),
(10662, 44, '        }\n', 0),
(10663, 45, '    }\n', 0),
(10664, 46, '\n', 0),
(10665, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(10666, 48, '        int x = e.getX();\n', 0),
(10667, 49, '        int y = e.getY();\n', 0),
(10668, 50, '        e.consume();\n', 0),
(10669, 51, '        requestFocus();\n', 0),
(10670, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(10671, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(10672, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(10673, 55, '                case 0:\n', 0),
(10674, 56, '                    play(getCodeBase(), \n', 0),
(10675, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(10676, 58, '                    break;\n', 0),
(10677, 59, '                case 1:\n', 0),
(10678, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(10679, 61, '                    break;\n', 0),
(10680, 62, '                case 2:\n', 0),
(10681, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(10682, 64, '                    break;\n', 0),
(10683, 65, '                case 3:\n', 0),
(10684, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(10685, 67, '                    break;\n', 0),
(10686, 68, '                }\n', 0),
(10687, 69, '                onaroll++;\n', 0),
(10688, 70, '                if (onaroll > 5) {\n', 0),
(10689, 72, '                } else {\n', 0),
(10690, 74, '                }\n', 0),
(10691, 75, '            } else {   //first hit\n', 0),
(10692, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(10693, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(10694, 78, '                onaroll = 1;\n', 0),
(10695, 79, '            }\n', 0),
(10696, 80, '        } else {   //miss\n', 0),
(10697, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(10698, 82, '			\n', 0),
(10699, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(10700, 84, '            onaroll = 0;\n', 0),
(10701, 85, '        }\n', 0),
(10702, 86, '        repaint();\n', 0),
(10703, 87, '    }\n', 0),
(10704, 88, '\n', 0),
(10705, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(10706, 90, '\n', 0),
(10707, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(10708, 92, '        repaint();\n', 0),
(10709, 93, '    }\n', 0),
(10710, 94, '\n', 0),
(10711, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(10712, 96, '        repaint();\n', 0),
(10713, 97, '    }\n', 0),
(10714, 98, '\n', 0),
(10715, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(10716, 100, '\n', 0),
(10717, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(10718, 102, ' \n', 0),
(10719, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(10720, 104, ' \n', 0),
(10721, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(10722, 106, '        repaint();\n', 0),
(10723, 107, '    }\n', 0),
(10724, 108, ' \n', 0),
(10725, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(10726, 110, '        repaint();\n', 0),
(10727, 111, '    }\n', 0),
(10728, 112, '  \n', 0),
(10729, 113, '    public void destroy() {\n', 0),
(10730, 114, '        removeMouseListener(this);\n', 0),
(10731, 115, '        removeMouseMotionListener(this);\n', 0),
(10732, 116, '    }\n', 0),
(10733, 117, '\n', 0),
(10734, 118, '    public String getAppletInfo() {\n', 0),
(10735, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(10736, 120, '    }\n', 0),
(10737, 121, '}\n', 0),
(10738, 0, 'import java.util.Scanner;\r\n', 0),
(10739, 1, ' class Years{\r\n', 0),
(10740, 2, '   public int getYear(){\r\n', 0),
(10741, 3, '	int year;\r\n', 2),
(10742, 4, '	String enteredYear;\r\n', 2),
(10743, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(10744, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(10745, 7, '	enteredYear = sc.next();\r\n', 0),
(10746, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(10747, 9, '	return year;\r\n', 0),
(10748, 10, '   }\r\n', 0),
(10749, 11, ' }\r\n', 0),
(10750, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10751, 13, ' class Months extends Years{\r\n', 0),
(10752, 14, '   public int getMonth(){\r\n', 0),
(10753, 15, '	int month;\r\n', 2),
(10754, 16, '	String enteredMonthNumber;\r\n', 2),
(10755, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(10756, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(10757, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(10758, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(10759, 21, '	return month;\r\n', 0),
(10760, 22, '   }\r\n', 0),
(10761, 23, ' }\r\n', 0),
(10762, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(10763, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(10764, 26, ' static int numDays = 0;\r\n', 4),
(10765, 27, ' public static void main(String[] args) {\r\n', 0),
(10766, 28, '   int year;\r\n', 2),
(10767, 29, '   Months m = new Months();\r\n', 0),
(10768, 30, '   int month = m.getMonth();\r\n', 0),
(10769, 31, '   \r\n', 0),
(10770, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(10771, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(10772, 34, '   }\r\n', 0),
(10773, 35, '   else {\r\n', 0),
(10774, 36, '    switch (month) {\r\n', 0),
(10775, 37, '      case 1:\r\n', 0),
(10776, 38, '      case 3:\r\n', 0),
(10777, 39, '      case 5:\r\n', 0),
(10778, 40, '      case 7:\r\n', 0),
(10779, 41, '      case 8:\r\n', 0),
(10780, 42, '      case 10:\r\n', 0),
(10781, 43, '      case 12:\r\n', 0),
(10782, 44, '        numDays = 31;\r\n', 0),
(10783, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(10784, 46, '        break;\r\n', 0),
(10785, 47, '      case 4:\r\n', 0),
(10786, 48, '      case 6:\r\n', 0),
(10787, 49, '      case 9:\r\n', 0),
(10788, 50, '      case 11:\r\n', 0),
(10789, 51, '       numDays = 30;\r\n', 0),
(10790, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(10791, 53, '       break;\r\n', 0),
(10792, 54, '      case 2:\r\n', 0),
(10793, 55, '       year = m.getYear();\r\n', 0),
(10794, 56, '       if(year < 1) {\r\n', 0),
(10795, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(10796, 58, '       }\r\n', 0),
(10797, 59, '       else{\r\n', 0),
(10798, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(10799, 61, '         numDays = 29;\r\n', 0),
(10800, 62, '		 if(year > 2020){\r\n', 0),
(10801, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(10802, 64, '         }\r\n', 0),
(10803, 65, '         else{\r\n', 0),
(10804, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(10805, 67, '         }\r\n', 0),
(10806, 68, '        }//if at line 61\r\n', 0),
(10807, 69, '        else{\r\n', 0),
(10808, 70, '         numDays = 28;\r\n', 0),
(10809, 71, '         if (year > 2020){\r\n', 0),
(10810, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(10811, 73, '         }\r\n', 0),
(10812, 74, '         else{\r\n', 0),
(10813, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(10814, 76, '         }\r\n', 0),
(10815, 77, '         break;  \r\n', 0),
(10816, 78, '        }//else at line 70\r\n', 0),
(10817, 79, '       }//else at line 60\r\n', 0),
(10818, 80, '    }//switch at line 37\r\n', 0),
(10819, 81, '   }//else at line 36\r\n', 0),
(10820, 82, '  }//method\r\n', 0),
(10821, 83, ' }//class', 0),
(10822, 0, 'public class RecursionExample2 {  \r\n', 0),
(10823, 1, 'static int count=0;  \r\n', 4),
(10824, 2, 'public int p(){  \r\n', 0),
(10825, 3, 'count++;  \r\n', 0),
(10826, 4, 'if(count<=5){  \r\n', 0),
(10827, 5, 'System.out.println("hello "+count);  \r\n', 0),
(10828, 6, 'public int p();  \r\n', 0),
(10829, 7, '}  \r\n', 0),
(10830, 8, '}  \r\n', 0),
(10831, 9, 'public static void main(String[] args) {  \r\n', 0),
(10832, 10, 'p();  \r\n', 0),
(10833, 11, '}  \r\n', 0),
(10834, 12, '}  ', 0),
(10835, 0, 'import java.awt.event.*;\n', 0),
(10836, 1, 'import java.awt.*;\n', 0),
(10837, 2, '\n', 0),
(10838, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(10839, 4, '\n', 0),
(10840, 5, '    private int mx, my;\n', 4),
(10841, 6, '    private Dimension size;\n', 8),
(10842, 7, '    private int onaroll;\n', 2),
(10843, 8, '\n', 0),
(10844, 9, '    public void init() {\n', 0),
(10845, 10, '        onaroll = 0;\n', 0),
(10846, 11, '        setSize(500, 500);\n', 0),
(10847, 12, '        size = getSize();\n', 0),
(10848, 13, '        addMouseListener(this);\n', 0),
(10849, 14, '        addMouseMotionListener(this);\n', 0),
(10850, 15, '        addComponentListener(this);\n', 0),
(10851, 16, '    }\n', 0),
(10852, 17, '\n', 0),
(10853, 18, '    public void update(Graphics g) {\n', 0),
(10854, 19, '        Dimension newSize = getSize();\n', 8),
(10855, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(10856, 21, '            g.setColor(getBackground());\n', 0),
(10857, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(10858, 23, '        } else {\n', 0),
(10859, 24, '            size = newSize;\n', 0),
(10860, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(10861, 26, '        } // Calculate new position\n', 0),
(10862, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(10863, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(10864, 29, '        paint(g);\n', 0),
(10865, 30, '    }\n', 0),
(10866, 31, '  \n', 0),
(10867, 32, '    public void paint(Graphics g) {\n', 0),
(10868, 33, '        g.setColor(Color.black);\n', 0),
(10869, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(10870, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(10871, 36, '    }\n', 0),
(10872, 37, '\n', 0),
(10873, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(10874, 39, '\n', 0),
(10875, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(10876, 41, '        e.consume();\n', 0),
(10877, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(10878, 43, '            repaint();\n', 0),
(10879, 44, '        }\n', 0),
(10880, 45, '    }\n', 0),
(10881, 46, '\n', 0),
(10882, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(10883, 48, '        int x = e.getX();\n', 0),
(10884, 49, '        int y = e.getY();\n', 0),
(10885, 50, '        e.consume();\n', 0),
(10886, 51, '        requestFocus();\n', 0),
(10887, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(10888, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(10889, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(10890, 55, '                case 0:\n', 0),
(10891, 56, '                    play(getCodeBase(), \n', 0),
(10892, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(10893, 58, '                    break;\n', 0),
(10894, 59, '                case 1:\n', 0),
(10895, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(10896, 61, '                    break;\n', 0),
(10897, 62, '                case 2:\n', 0),
(10898, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(10899, 64, '                    break;\n', 0),
(10900, 65, '                case 3:\n', 0),
(10901, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(10902, 67, '                    break;\n', 0),
(10903, 68, '                }\n', 0),
(10904, 69, '                onaroll++;\n', 0),
(10905, 70, '                if (onaroll > 5) {\n', 0),
(10906, 72, '                } else {\n', 0),
(10907, 74, '                }\n', 0),
(10908, 75, '            } else {   //first hit\n', 0),
(10909, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(10910, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(10911, 78, '                onaroll = 1;\n', 0),
(10912, 79, '            }\n', 0),
(10913, 80, '        } else {   //miss\n', 0),
(10914, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(10915, 82, '			\n', 0),
(10916, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(10917, 84, '            onaroll = 0;\n', 0),
(10918, 85, '        }\n', 0),
(10919, 86, '        repaint();\n', 0),
(10920, 87, '    }\n', 0),
(10921, 88, '\n', 0),
(10922, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(10923, 90, '\n', 0),
(10924, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(10925, 92, '        repaint();\n', 0),
(10926, 93, '    }\n', 0),
(10927, 94, '\n', 0),
(10928, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(10929, 96, '        repaint();\n', 0),
(10930, 97, '    }\n', 0),
(10931, 98, '\n', 0),
(10932, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(10933, 100, '\n', 0),
(10934, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(10935, 102, ' \n', 0),
(10936, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(10937, 104, ' \n', 0),
(10938, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(10939, 106, '        repaint();\n', 0),
(10940, 107, '    }\n', 0),
(10941, 108, ' \n', 0),
(10942, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(10943, 110, '        repaint();\n', 0),
(10944, 111, '    }\n', 0),
(10945, 112, '  \n', 0),
(10946, 113, '    public void destroy() {\n', 0),
(10947, 114, '        removeMouseListener(this);\n', 0),
(10948, 115, '        removeMouseMotionListener(this);\n', 0),
(10949, 116, '    }\n', 0),
(10950, 117, '\n', 0),
(10951, 118, '    public String getAppletInfo() {\n', 0),
(10952, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(10953, 120, '    }\n', 0),
(10954, 121, '}\n', 0),
(10955, 0, 'import java.awt.event.*;\n', 0),
(10956, 1, 'import java.awt.*;\n', 0),
(10957, 2, '\n', 0),
(10958, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(10959, 4, '\n', 0),
(10960, 5, '    private int mx, my;\n', 4),
(10961, 6, '    private Dimension size;\n', 8),
(10962, 7, '    private int onaroll;\n', 2),
(10963, 8, '\n', 0),
(10964, 9, '    public void init() {\n', 0),
(10965, 10, '        onaroll = 0;\n', 0),
(10966, 11, '        setSize(500, 500);\n', 0),
(10967, 12, '        size = getSize();\n', 0),
(10968, 13, '        addMouseListener(this);\n', 0),
(10969, 14, '        addMouseMotionListener(this);\n', 0),
(10970, 15, '        addComponentListener(this);\n', 0),
(10971, 16, '    }\n', 0),
(10972, 17, '\n', 0),
(10973, 18, '    public void update(Graphics g) {\n', 0),
(10974, 19, '        Dimension newSize = getSize();\n', 8),
(10975, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(10976, 21, '            g.setColor(getBackground());\n', 0),
(10977, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(10978, 23, '        } else {\n', 0),
(10979, 24, '            size = newSize;\n', 0),
(10980, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(10981, 26, '        } // Calculate new position\n', 0),
(10982, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(10983, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(10984, 29, '        paint(g);\n', 0),
(10985, 30, '    }\n', 0),
(10986, 31, '  \n', 0),
(10987, 32, '    public void paint(Graphics g) {\n', 0),
(10988, 33, '        g.setColor(Color.black);\n', 0),
(10989, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(10990, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(10991, 36, '    }\n', 0),
(10992, 37, '\n', 0),
(10993, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(10994, 39, '\n', 0),
(10995, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(10996, 41, '        e.consume();\n', 0),
(10997, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(10998, 43, '            repaint();\n', 0),
(10999, 44, '        }\n', 0),
(11000, 45, '    }\n', 0),
(11001, 46, '\n', 0),
(11002, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(11003, 48, '        int x = e.getX();\n', 0),
(11004, 49, '        int y = e.getY();\n', 0),
(11005, 50, '        e.consume();\n', 0),
(11006, 51, '        requestFocus();\n', 0),
(11007, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(11008, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(11009, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(11010, 55, '                case 0:\n', 0),
(11011, 56, '                    play(getCodeBase(), \n', 0),
(11012, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(11013, 58, '                    break;\n', 0),
(11014, 59, '                case 1:\n', 0),
(11015, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(11016, 61, '                    break;\n', 0),
(11017, 62, '                case 2:\n', 0),
(11018, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(11019, 64, '                    break;\n', 0),
(11020, 65, '                case 3:\n', 0),
(11021, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(11022, 67, '                    break;\n', 0),
(11023, 68, '                }\n', 0),
(11024, 69, '                onaroll++;\n', 0),
(11025, 70, '                if (onaroll > 5) {\n', 0),
(11026, 72, '                } else {\n', 0),
(11027, 74, '                }\n', 0),
(11028, 75, '            } else {   //first hit\n', 0),
(11029, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(11030, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(11031, 78, '                onaroll = 1;\n', 0),
(11032, 79, '            }\n', 0),
(11033, 80, '        } else {   //miss\n', 0),
(11034, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(11035, 82, '			\n', 0),
(11036, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(11037, 84, '            onaroll = 0;\n', 0),
(11038, 85, '        }\n', 0),
(11039, 86, '        repaint();\n', 0),
(11040, 87, '    }\n', 0),
(11041, 88, '\n', 0),
(11042, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(11043, 90, '\n', 0),
(11044, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(11045, 92, '        repaint();\n', 0),
(11046, 93, '    }\n', 0),
(11047, 94, '\n', 0),
(11048, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(11049, 96, '        repaint();\n', 0),
(11050, 97, '    }\n', 0),
(11051, 98, '\n', 0),
(11052, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(11053, 100, '\n', 0),
(11054, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(11055, 102, ' \n', 0),
(11056, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(11057, 104, ' \n', 0),
(11058, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(11059, 106, '        repaint();\n', 0),
(11060, 107, '    }\n', 0),
(11061, 108, ' \n', 0),
(11062, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(11063, 110, '        repaint();\n', 0),
(11064, 111, '    }\n', 0),
(11065, 112, '  \n', 0),
(11066, 113, '    public void destroy() {\n', 0),
(11067, 114, '        removeMouseListener(this);\n', 0),
(11068, 115, '        removeMouseMotionListener(this);\n', 0),
(11069, 116, '    }\n', 0),
(11070, 117, '\n', 0),
(11071, 118, '    public String getAppletInfo() {\n', 0),
(11072, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(11073, 120, '    }\n', 0),
(11074, 121, '}\n', 0),
(11075, 0, 'import java.util.Scanner;\r\n', 0),
(11076, 1, ' class Years{\r\n', 0),
(11077, 2, '   public int getYear(){\r\n', 0),
(11078, 3, '	int year;\r\n', 2),
(11079, 4, '	String enteredYear;\r\n', 2),
(11080, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(11081, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(11082, 7, '	enteredYear = sc.next();\r\n', 0),
(11083, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(11084, 9, '	return year;\r\n', 0),
(11085, 10, '   }\r\n', 0),
(11086, 11, ' }\r\n', 0),
(11087, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11088, 13, ' class Months extends Years{\r\n', 0),
(11089, 14, '   public int getMonth(){\r\n', 0),
(11090, 15, '	int month;\r\n', 2),
(11091, 16, '	String enteredMonthNumber;\r\n', 2),
(11092, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(11093, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(11094, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(11095, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(11096, 21, '	return month;\r\n', 0),
(11097, 22, '   }\r\n', 0),
(11098, 23, ' }\r\n', 0),
(11099, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11100, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(11101, 26, ' static int numDays = 0;\r\n', 4),
(11102, 27, ' public static void main(String[] args) {\r\n', 0),
(11103, 28, '   int year;\r\n', 2),
(11104, 29, '   Months m = new Months();\r\n', 0),
(11105, 30, '   int month = m.getMonth();\r\n', 0),
(11106, 31, '   \r\n', 0),
(11107, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(11108, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(11109, 34, '   }\r\n', 0),
(11110, 35, '   else {\r\n', 0),
(11111, 36, '    switch (month) {\r\n', 0),
(11112, 37, '      case 1:\r\n', 0),
(11113, 38, '      case 3:\r\n', 0),
(11114, 39, '      case 5:\r\n', 0),
(11115, 40, '      case 7:\r\n', 0),
(11116, 41, '      case 8:\r\n', 0),
(11117, 42, '      case 10:\r\n', 0),
(11118, 43, '      case 12:\r\n', 0),
(11119, 44, '        numDays = 31;\r\n', 0),
(11120, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(11121, 46, '        break;\r\n', 0),
(11122, 47, '      case 4:\r\n', 0),
(11123, 48, '      case 6:\r\n', 0),
(11124, 49, '      case 9:\r\n', 0),
(11125, 50, '      case 11:\r\n', 0),
(11126, 51, '       numDays = 30;\r\n', 0),
(11127, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(11128, 53, '       break;\r\n', 0),
(11129, 54, '      case 2:\r\n', 0),
(11130, 55, '       year = m.getYear();\r\n', 0),
(11131, 56, '       if(year < 1) {\r\n', 0),
(11132, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(11133, 58, '       }\r\n', 0),
(11134, 59, '       else{\r\n', 0),
(11135, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(11136, 61, '         numDays = 29;\r\n', 0),
(11137, 62, '		 if(year > 2020){\r\n', 0),
(11138, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(11139, 64, '         }\r\n', 0),
(11140, 65, '         else{\r\n', 0),
(11141, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(11142, 67, '         }\r\n', 0),
(11143, 68, '        }//if at line 61\r\n', 0),
(11144, 69, '        else{\r\n', 0),
(11145, 70, '         numDays = 28;\r\n', 0),
(11146, 71, '         if (year > 2020){\r\n', 0),
(11147, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(11148, 73, '         }\r\n', 0),
(11149, 74, '         else{\r\n', 0),
(11150, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(11151, 76, '         }\r\n', 0),
(11152, 77, '         break;  \r\n', 0),
(11153, 78, '        }//else at line 70\r\n', 0),
(11154, 79, '       }//else at line 60\r\n', 0),
(11155, 80, '    }//switch at line 37\r\n', 0),
(11156, 81, '   }//else at line 36\r\n', 0),
(11157, 82, '  }//method\r\n', 0),
(11158, 83, ' }//class', 0),
(11159, 0, 'class Pattern{ \r\n', 0),
(11160, 1, 'public static void main(String[] args) { \r\n', 0),
(11161, 2, '	 int rows = 5;\r\n', 2),
(11162, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(11163, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(11164, 5, '	 System.out.print(j + " "); \r\n', 0),
(11165, 6, '	 } \r\n', 0),
(11166, 7, '	 System.out.println(""); \r\n', 0),
(11167, 8, ' 	} \r\n', 0),
(11168, 9, ' 	} \r\n', 0),
(11169, 10, '} ', 0),
(11170, 0, 'import java.util.Scanner;\r\n', 0),
(11171, 1, ' class Years{\r\n', 0),
(11172, 2, '   public int getYear(){\r\n', 0),
(11173, 3, '	int year;\r\n', 2),
(11174, 4, '	String enteredYear;\r\n', 2),
(11175, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(11176, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(11177, 7, '	enteredYear = sc.next();\r\n', 0),
(11178, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(11179, 9, '	return year;\r\n', 0),
(11180, 10, '   }\r\n', 0),
(11181, 11, ' }\r\n', 0),
(11182, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11183, 13, ' class Months extends Years{\r\n', 0),
(11184, 14, '   public int getMonth(){\r\n', 0),
(11185, 15, '	int month;\r\n', 2),
(11186, 16, '	String enteredMonthNumber;\r\n', 2),
(11187, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(11188, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(11189, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(11190, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(11191, 21, '	return month;\r\n', 0),
(11192, 22, '   }\r\n', 0),
(11193, 23, ' }\r\n', 0),
(11194, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11195, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(11196, 26, ' static int numDays = 0;\r\n', 4),
(11197, 27, ' public static void main(String[] args) {\r\n', 0),
(11198, 28, '   int year;\r\n', 2),
(11199, 29, '   Months m = new Months();\r\n', 0),
(11200, 30, '   int month = m.getMonth();\r\n', 0),
(11201, 31, '   \r\n', 0),
(11202, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(11203, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(11204, 34, '   }\r\n', 0),
(11205, 35, '   else {\r\n', 0),
(11206, 36, '    switch (month) {\r\n', 0),
(11207, 37, '      case 1:\r\n', 0),
(11208, 38, '      case 3:\r\n', 0),
(11209, 39, '      case 5:\r\n', 0),
(11210, 40, '      case 7:\r\n', 0),
(11211, 41, '      case 8:\r\n', 0),
(11212, 42, '      case 10:\r\n', 0),
(11213, 43, '      case 12:\r\n', 0),
(11214, 44, '        numDays = 31;\r\n', 0),
(11215, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(11216, 46, '        break;\r\n', 0),
(11217, 47, '      case 4:\r\n', 0),
(11218, 48, '      case 6:\r\n', 0),
(11219, 49, '      case 9:\r\n', 0),
(11220, 50, '      case 11:\r\n', 0),
(11221, 51, '       numDays = 30;\r\n', 0),
(11222, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(11223, 53, '       break;\r\n', 0),
(11224, 54, '      case 2:\r\n', 0),
(11225, 55, '       year = m.getYear();\r\n', 0),
(11226, 56, '       if(year < 1) {\r\n', 0),
(11227, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(11228, 58, '       }\r\n', 0),
(11229, 59, '       else{\r\n', 0),
(11230, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(11231, 61, '         numDays = 29;\r\n', 0),
(11232, 62, '		 if(year > 2020){\r\n', 0),
(11233, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(11234, 64, '         }\r\n', 0),
(11235, 65, '         else{\r\n', 0),
(11236, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(11237, 67, '         }\r\n', 0),
(11238, 68, '        }//if at line 61\r\n', 0),
(11239, 69, '        else{\r\n', 0),
(11240, 70, '         numDays = 28;\r\n', 0),
(11241, 71, '         if (year > 2020){\r\n', 0),
(11242, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(11243, 73, '         }\r\n', 0),
(11244, 74, '         else{\r\n', 0),
(11245, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(11246, 76, '         }\r\n', 0),
(11247, 77, '         break;  \r\n', 0),
(11248, 78, '        }//else at line 70\r\n', 0),
(11249, 79, '       }//else at line 60\r\n', 0),
(11250, 80, '    }//switch at line 37\r\n', 0),
(11251, 81, '   }//else at line 36\r\n', 0),
(11252, 82, '  }//method\r\n', 0),
(11253, 83, ' }//class', 0),
(11254, 0, 'class HelloWorld { \r\n', 0),
(11255, 1, '	public static void main(String args[]) \r\n', 0),
(11256, 2, '	{ \r\n', 0),
(11257, 3, '		System.out.println("Hello World"); \r\n', 0),
(11258, 4, '	} \r\n', 0),
(11259, 5, '} \r\n', 0),
(11260, 0, 'import java.awt.event.*;\n', 0),
(11261, 1, 'import java.awt.*;\n', 0),
(11262, 2, '\n', 0),
(11263, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(11264, 4, '\n', 0),
(11265, 5, '    private int mx, my;\n', 4),
(11266, 6, '    private Dimension size;\n', 8),
(11267, 7, '    private int onaroll;\n', 2),
(11268, 8, '\n', 0),
(11269, 9, '    public void init() {\n', 0),
(11270, 10, '        onaroll = 0;\n', 0),
(11271, 11, '        setSize(500, 500);\n', 0),
(11272, 12, '        size = getSize();\n', 0),
(11273, 13, '        addMouseListener(this);\n', 0),
(11274, 14, '        addMouseMotionListener(this);\n', 0),
(11275, 15, '        addComponentListener(this);\n', 0),
(11276, 16, '    }\n', 0),
(11277, 17, '\n', 0),
(11278, 18, '    public void update(Graphics g) {\n', 0),
(11279, 19, '        Dimension newSize = getSize();\n', 8),
(11280, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(11281, 21, '            g.setColor(getBackground());\n', 0),
(11282, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(11283, 23, '        } else {\n', 0),
(11284, 24, '            size = newSize;\n', 0),
(11285, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(11286, 26, '        } // Calculate new position\n', 0),
(11287, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(11288, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(11289, 29, '        paint(g);\n', 0),
(11290, 30, '    }\n', 0),
(11291, 31, '  \n', 0),
(11292, 32, '    public void paint(Graphics g) {\n', 0),
(11293, 33, '        g.setColor(Color.black);\n', 0),
(11294, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(11295, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(11296, 36, '    }\n', 0),
(11297, 37, '\n', 0),
(11298, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(11299, 39, '\n', 0),
(11300, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(11301, 41, '        e.consume();\n', 0),
(11302, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(11303, 43, '            repaint();\n', 0),
(11304, 44, '        }\n', 0),
(11305, 45, '    }\n', 0),
(11306, 46, '\n', 0),
(11307, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(11308, 48, '        int x = e.getX();\n', 0),
(11309, 49, '        int y = e.getY();\n', 0),
(11310, 50, '        e.consume();\n', 0),
(11311, 51, '        requestFocus();\n', 0),
(11312, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(11313, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(11314, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(11315, 55, '                case 0:\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(11316, 56, '                    play(getCodeBase(), \n', 0),
(11317, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(11318, 58, '                    break;\n', 0),
(11319, 59, '                case 1:\n', 0),
(11320, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(11321, 61, '                    break;\n', 0),
(11322, 62, '                case 2:\n', 0),
(11323, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(11324, 64, '                    break;\n', 0),
(11325, 65, '                case 3:\n', 0),
(11326, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(11327, 67, '                    break;\n', 0),
(11328, 68, '                }\n', 0),
(11329, 69, '                onaroll++;\n', 0),
(11330, 70, '                if (onaroll > 5) {\n', 0),
(11331, 72, '                } else {\n', 0),
(11332, 74, '                }\n', 0),
(11333, 75, '            } else {   //first hit\n', 0),
(11334, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(11335, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(11336, 78, '                onaroll = 1;\n', 0),
(11337, 79, '            }\n', 0),
(11338, 80, '        } else {   //miss\n', 0),
(11339, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(11340, 82, '			\n', 0),
(11341, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(11342, 84, '            onaroll = 0;\n', 0),
(11343, 85, '        }\n', 0),
(11344, 86, '        repaint();\n', 0),
(11345, 87, '    }\n', 0),
(11346, 88, '\n', 0),
(11347, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(11348, 90, '\n', 0),
(11349, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(11350, 92, '        repaint();\n', 0),
(11351, 93, '    }\n', 0),
(11352, 94, '\n', 0),
(11353, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(11354, 96, '        repaint();\n', 0),
(11355, 97, '    }\n', 0),
(11356, 98, '\n', 0),
(11357, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(11358, 100, '\n', 0),
(11359, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(11360, 102, ' \n', 0),
(11361, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(11362, 104, ' \n', 0),
(11363, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(11364, 106, '        repaint();\n', 0),
(11365, 107, '    }\n', 0),
(11366, 108, ' \n', 0),
(11367, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(11368, 110, '        repaint();\n', 0),
(11369, 111, '    }\n', 0),
(11370, 112, '  \n', 0),
(11371, 113, '    public void destroy() {\n', 0),
(11372, 114, '        removeMouseListener(this);\n', 0),
(11373, 115, '        removeMouseMotionListener(this);\n', 0),
(11374, 116, '    }\n', 0),
(11375, 117, '\n', 0),
(11376, 118, '    public String getAppletInfo() {\n', 0),
(11377, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(11378, 120, '    }\n', 0),
(11379, 121, '}\n', 0),
(11380, 0, 'import java.awt.event.*;\n', 0),
(11381, 1, 'import java.awt.*;\n', 0),
(11382, 2, '\n', 0),
(11383, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(11384, 4, '\n', 0),
(11385, 5, '    private int mx, my;\n', 4),
(11386, 6, '    private Dimension size;\n', 8),
(11387, 7, '    private int onaroll;\n', 2),
(11388, 8, '\n', 0),
(11389, 9, '    public void init() {\n', 0),
(11390, 10, '        onaroll = 0;\n', 0),
(11391, 11, '        setSize(500, 500);\n', 0),
(11392, 12, '        size = getSize();\n', 0),
(11393, 13, '        addMouseListener(this);\n', 0),
(11394, 14, '        addMouseMotionListener(this);\n', 0),
(11395, 15, '        addComponentListener(this);\n', 0),
(11396, 16, '    }\n', 0),
(11397, 17, '\n', 0),
(11398, 18, '    public void update(Graphics g) {\n', 0),
(11399, 19, '        Dimension newSize = getSize();\n', 8),
(11400, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(11401, 21, '            g.setColor(getBackground());\n', 0),
(11402, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(11403, 23, '        } else {\n', 0),
(11404, 24, '            size = newSize;\n', 0),
(11405, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(11406, 26, '        } // Calculate new position\n', 0),
(11407, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(11408, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(11409, 29, '        paint(g);\n', 0),
(11410, 30, '    }\n', 0),
(11411, 31, '  \n', 0),
(11412, 32, '    public void paint(Graphics g) {\n', 0),
(11413, 33, '        g.setColor(Color.black);\n', 0),
(11414, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(11415, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(11416, 36, '    }\n', 0),
(11417, 37, '\n', 0),
(11418, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(11419, 39, '\n', 0),
(11420, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(11421, 41, '        e.consume();\n', 0),
(11422, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(11423, 43, '            repaint();\n', 0),
(11424, 44, '        }\n', 0),
(11425, 45, '    }\n', 0),
(11426, 46, '\n', 0),
(11427, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(11428, 48, '        int x = e.getX();\n', 0),
(11429, 49, '        int y = e.getY();\n', 0),
(11430, 50, '        e.consume();\n', 0),
(11431, 51, '        requestFocus();\n', 0),
(11432, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(11433, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(11434, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(11435, 55, '                case 0:\n', 0),
(11436, 56, '                    play(getCodeBase(), \n', 0),
(11437, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(11438, 58, '                    break;\n', 0),
(11439, 59, '                case 1:\n', 0),
(11440, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(11441, 61, '                    break;\n', 0),
(11442, 62, '                case 2:\n', 0),
(11443, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(11444, 64, '                    break;\n', 0),
(11445, 65, '                case 3:\n', 0),
(11446, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(11447, 67, '                    break;\n', 0),
(11448, 68, '                }\n', 0),
(11449, 69, '                onaroll++;\n', 0),
(11450, 70, '                if (onaroll > 5) {\n', 0),
(11451, 72, '                } else {\n', 0),
(11452, 74, '                }\n', 0),
(11453, 75, '            } else {   //first hit\n', 0),
(11454, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(11455, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(11456, 78, '                onaroll = 1;\n', 0),
(11457, 79, '            }\n', 0),
(11458, 80, '        } else {   //miss\n', 0),
(11459, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(11460, 82, '			\n', 0),
(11461, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(11462, 84, '            onaroll = 0;\n', 0),
(11463, 85, '        }\n', 0),
(11464, 86, '        repaint();\n', 0),
(11465, 87, '    }\n', 0),
(11466, 88, '\n', 0),
(11467, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(11468, 90, '\n', 0),
(11469, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(11470, 92, '        repaint();\n', 0),
(11471, 93, '    }\n', 0),
(11472, 94, '\n', 0),
(11473, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(11474, 96, '        repaint();\n', 0),
(11475, 97, '    }\n', 0),
(11476, 98, '\n', 0),
(11477, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(11478, 100, '\n', 0),
(11479, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(11480, 102, ' \n', 0),
(11481, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(11482, 104, ' \n', 0),
(11483, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(11484, 106, '        repaint();\n', 0),
(11485, 107, '    }\n', 0),
(11486, 108, ' \n', 0),
(11487, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(11488, 110, '        repaint();\n', 0),
(11489, 111, '    }\n', 0),
(11490, 112, '  \n', 0),
(11491, 113, '    public void destroy() {\n', 0),
(11492, 114, '        removeMouseListener(this);\n', 0),
(11493, 115, '        removeMouseMotionListener(this);\n', 0),
(11494, 116, '    }\n', 0),
(11495, 117, '\n', 0),
(11496, 118, '    public String getAppletInfo() {\n', 0),
(11497, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(11498, 120, '    }\n', 0),
(11499, 121, '}\n', 0),
(11500, 0, 'import java.util.Scanner;\r\n', 0),
(11501, 1, ' class Years{\r\n', 0),
(11502, 2, '   public int getYear(){\r\n', 0),
(11503, 3, '	int year;\r\n', 2),
(11504, 4, '	String enteredYear;\r\n', 2),
(11505, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(11506, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(11507, 7, '	enteredYear = sc.next();\r\n', 0),
(11508, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(11509, 9, '	return year;\r\n', 0),
(11510, 10, '   }\r\n', 0),
(11511, 11, ' }\r\n', 0),
(11512, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11513, 13, ' class Months extends Years{\r\n', 0),
(11514, 14, '   public int getMonth(){\r\n', 0),
(11515, 15, '	int month;\r\n', 2),
(11516, 16, '	String enteredMonthNumber;\r\n', 2),
(11517, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(11518, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(11519, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(11520, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(11521, 21, '	return month;\r\n', 0),
(11522, 22, '   }\r\n', 0),
(11523, 23, ' }\r\n', 0),
(11524, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11525, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(11526, 26, ' static int numDays = 0;\r\n', 4),
(11527, 27, ' public static void main(String[] args) {\r\n', 0),
(11528, 28, '   int year;\r\n', 2),
(11529, 29, '   Months m = new Months();\r\n', 0),
(11530, 30, '   int month = m.getMonth();\r\n', 0),
(11531, 31, '   \r\n', 0),
(11532, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(11533, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(11534, 34, '   }\r\n', 0),
(11535, 35, '   else {\r\n', 0),
(11536, 36, '    switch (month) {\r\n', 0),
(11537, 37, '      case 1:\r\n', 0),
(11538, 38, '      case 3:\r\n', 0),
(11539, 39, '      case 5:\r\n', 0),
(11540, 40, '      case 7:\r\n', 0),
(11541, 41, '      case 8:\r\n', 0),
(11542, 42, '      case 10:\r\n', 0),
(11543, 43, '      case 12:\r\n', 0),
(11544, 44, '        numDays = 31;\r\n', 0),
(11545, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(11546, 46, '        break;\r\n', 0),
(11547, 47, '      case 4:\r\n', 0),
(11548, 48, '      case 6:\r\n', 0),
(11549, 49, '      case 9:\r\n', 0),
(11550, 50, '      case 11:\r\n', 0),
(11551, 51, '       numDays = 30;\r\n', 0),
(11552, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(11553, 53, '       break;\r\n', 0),
(11554, 54, '      case 2:\r\n', 0),
(11555, 55, '       year = m.getYear();\r\n', 0),
(11556, 56, '       if(year < 1) {\r\n', 0),
(11557, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(11558, 58, '       }\r\n', 0),
(11559, 59, '       else{\r\n', 0),
(11560, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(11561, 61, '         numDays = 29;\r\n', 0),
(11562, 62, '		 if(year > 2020){\r\n', 0),
(11563, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(11564, 64, '         }\r\n', 0),
(11565, 65, '         else{\r\n', 0),
(11566, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(11567, 67, '         }\r\n', 0),
(11568, 68, '        }//if at line 61\r\n', 0),
(11569, 69, '        else{\r\n', 0),
(11570, 70, '         numDays = 28;\r\n', 0),
(11571, 71, '         if (year > 2020){\r\n', 0),
(11572, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(11573, 73, '         }\r\n', 0),
(11574, 74, '         else{\r\n', 0),
(11575, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(11576, 76, '         }\r\n', 0),
(11577, 77, '         break;  \r\n', 0),
(11578, 78, '        }//else at line 70\r\n', 0),
(11579, 79, '       }//else at line 60\r\n', 0),
(11580, 80, '    }//switch at line 37\r\n', 0),
(11581, 81, '   }//else at line 36\r\n', 0),
(11582, 82, '  }//method\r\n', 0),
(11583, 83, ' }//class', 0),
(11584, 0, 'public class RecursionExample2 {  \r\n', 0),
(11585, 1, 'static int count=0;  \r\n', 4),
(11586, 2, 'public int p(){  \r\n', 0),
(11587, 3, 'count++;  \r\n', 0),
(11588, 4, 'if(count<=5){  \r\n', 0),
(11589, 5, 'System.out.println("hello "+count);  \r\n', 0),
(11590, 6, 'public int p();  \r\n', 0),
(11591, 7, '}  \r\n', 0),
(11592, 8, '}  \r\n', 0),
(11593, 9, 'public static void main(String[] args) {  \r\n', 0),
(11594, 10, 'p();  \r\n', 0),
(11595, 11, '}  \r\n', 0),
(11596, 12, '}  ', 0),
(11597, 0, 'import java.awt.event.*;\n', 0),
(11598, 1, 'import java.awt.*;\n', 0),
(11599, 2, '\n', 0),
(11600, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(11601, 4, '\n', 0),
(11602, 5, '    private int mx, my;\n', 4),
(11603, 6, '    private Dimension size;\n', 8),
(11604, 7, '    private int onaroll;\n', 2),
(11605, 8, '\n', 0),
(11606, 9, '    public void init() {\n', 0),
(11607, 10, '        onaroll = 0;\n', 0),
(11608, 11, '        setSize(500, 500);\n', 0),
(11609, 12, '        size = getSize();\n', 0),
(11610, 13, '        addMouseListener(this);\n', 0),
(11611, 14, '        addMouseMotionListener(this);\n', 0),
(11612, 15, '        addComponentListener(this);\n', 0),
(11613, 16, '    }\n', 0),
(11614, 17, '\n', 0),
(11615, 18, '    public void update(Graphics g) {\n', 0),
(11616, 19, '        Dimension newSize = getSize();\n', 8),
(11617, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(11618, 21, '            g.setColor(getBackground());\n', 0),
(11619, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(11620, 23, '        } else {\n', 0),
(11621, 24, '            size = newSize;\n', 0),
(11622, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(11623, 26, '        } // Calculate new position\n', 0),
(11624, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(11625, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(11626, 29, '        paint(g);\n', 0),
(11627, 30, '    }\n', 0),
(11628, 31, '  \n', 0),
(11629, 32, '    public void paint(Graphics g) {\n', 0),
(11630, 33, '        g.setColor(Color.black);\n', 0),
(11631, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(11632, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(11633, 36, '    }\n', 0),
(11634, 37, '\n', 0),
(11635, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(11636, 39, '\n', 0),
(11637, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(11638, 41, '        e.consume();\n', 0),
(11639, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(11640, 43, '            repaint();\n', 0),
(11641, 44, '        }\n', 0),
(11642, 45, '    }\n', 0),
(11643, 46, '\n', 0),
(11644, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(11645, 48, '        int x = e.getX();\n', 0),
(11646, 49, '        int y = e.getY();\n', 0),
(11647, 50, '        e.consume();\n', 0),
(11648, 51, '        requestFocus();\n', 0),
(11649, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(11650, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(11651, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(11652, 55, '                case 0:\n', 0),
(11653, 56, '                    play(getCodeBase(), \n', 0),
(11654, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(11655, 58, '                    break;\n', 0),
(11656, 59, '                case 1:\n', 0),
(11657, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(11658, 61, '                    break;\n', 0),
(11659, 62, '                case 2:\n', 0),
(11660, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(11661, 64, '                    break;\n', 0),
(11662, 65, '                case 3:\n', 0),
(11663, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(11664, 67, '                    break;\n', 0),
(11665, 68, '                }\n', 0),
(11666, 69, '                onaroll++;\n', 0),
(11667, 70, '                if (onaroll > 5) {\n', 0),
(11668, 72, '                } else {\n', 0),
(11669, 74, '                }\n', 0),
(11670, 75, '            } else {   //first hit\n', 0),
(11671, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(11672, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(11673, 78, '                onaroll = 1;\n', 0),
(11674, 79, '            }\n', 0),
(11675, 80, '        } else {   //miss\n', 0),
(11676, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(11677, 82, '			\n', 0),
(11678, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(11679, 84, '            onaroll = 0;\n', 0),
(11680, 85, '        }\n', 0),
(11681, 86, '        repaint();\n', 0),
(11682, 87, '    }\n', 0),
(11683, 88, '\n', 0),
(11684, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(11685, 90, '\n', 0),
(11686, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(11687, 92, '        repaint();\n', 0),
(11688, 93, '    }\n', 0),
(11689, 94, '\n', 0),
(11690, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(11691, 96, '        repaint();\n', 0),
(11692, 97, '    }\n', 0),
(11693, 98, '\n', 0),
(11694, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(11695, 100, '\n', 0),
(11696, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(11697, 102, ' \n', 0),
(11698, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(11699, 104, ' \n', 0),
(11700, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(11701, 106, '        repaint();\n', 0),
(11702, 107, '    }\n', 0),
(11703, 108, ' \n', 0),
(11704, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(11705, 110, '        repaint();\n', 0),
(11706, 111, '    }\n', 0),
(11707, 112, '  \n', 0),
(11708, 113, '    public void destroy() {\n', 0),
(11709, 114, '        removeMouseListener(this);\n', 0),
(11710, 115, '        removeMouseMotionListener(this);\n', 0),
(11711, 116, '    }\n', 0),
(11712, 117, '\n', 0),
(11713, 118, '    public String getAppletInfo() {\n', 0),
(11714, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(11715, 120, '    }\n', 0),
(11716, 121, '}\n', 0),
(11717, 0, 'import java.awt.event.*;\n', 0),
(11718, 1, 'import java.awt.*;\n', 0),
(11719, 2, '\n', 0),
(11720, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(11721, 4, '\n', 0),
(11722, 5, '    private int mx, my;\n', 4),
(11723, 6, '    private Dimension size;\n', 8),
(11724, 7, '    private int onaroll;\n', 2),
(11725, 8, '\n', 0),
(11726, 9, '    public void init() {\n', 0),
(11727, 10, '        onaroll = 0;\n', 0),
(11728, 11, '        setSize(500, 500);\n', 0),
(11729, 12, '        size = getSize();\n', 0),
(11730, 13, '        addMouseListener(this);\n', 0),
(11731, 14, '        addMouseMotionListener(this);\n', 0),
(11732, 15, '        addComponentListener(this);\n', 0),
(11733, 16, '    }\n', 0),
(11734, 17, '\n', 0),
(11735, 18, '    public void update(Graphics g) {\n', 0),
(11736, 19, '        Dimension newSize = getSize();\n', 8),
(11737, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(11738, 21, '            g.setColor(getBackground());\n', 0),
(11739, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(11740, 23, '        } else {\n', 0),
(11741, 24, '            size = newSize;\n', 0),
(11742, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(11743, 26, '        } // Calculate new position\n', 0),
(11744, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(11745, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(11746, 29, '        paint(g);\n', 0),
(11747, 30, '    }\n', 0),
(11748, 31, '  \n', 0),
(11749, 32, '    public void paint(Graphics g) {\n', 0),
(11750, 33, '        g.setColor(Color.black);\n', 0),
(11751, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(11752, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(11753, 36, '    }\n', 0),
(11754, 37, '\n', 0),
(11755, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(11756, 39, '\n', 0),
(11757, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(11758, 41, '        e.consume();\n', 0),
(11759, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(11760, 43, '            repaint();\n', 0),
(11761, 44, '        }\n', 0),
(11762, 45, '    }\n', 0),
(11763, 46, '\n', 0),
(11764, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(11765, 48, '        int x = e.getX();\n', 0),
(11766, 49, '        int y = e.getY();\n', 0),
(11767, 50, '        e.consume();\n', 0),
(11768, 51, '        requestFocus();\n', 0),
(11769, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(11770, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(11771, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(11772, 55, '                case 0:\n', 0),
(11773, 56, '                    play(getCodeBase(), \n', 0),
(11774, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(11775, 58, '                    break;\n', 0),
(11776, 59, '                case 1:\n', 0),
(11777, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(11778, 61, '                    break;\n', 0),
(11779, 62, '                case 2:\n', 0),
(11780, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(11781, 64, '                    break;\n', 0),
(11782, 65, '                case 3:\n', 0),
(11783, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(11784, 67, '                    break;\n', 0),
(11785, 68, '                }\n', 0),
(11786, 69, '                onaroll++;\n', 0),
(11787, 70, '                if (onaroll > 5) {\n', 0),
(11788, 72, '                } else {\n', 0),
(11789, 74, '                }\n', 0),
(11790, 75, '            } else {   //first hit\n', 0),
(11791, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(11792, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(11793, 78, '                onaroll = 1;\n', 0),
(11794, 79, '            }\n', 0),
(11795, 80, '        } else {   //miss\n', 0),
(11796, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(11797, 82, '			\n', 0),
(11798, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(11799, 84, '            onaroll = 0;\n', 0),
(11800, 85, '        }\n', 0),
(11801, 86, '        repaint();\n', 0),
(11802, 87, '    }\n', 0),
(11803, 88, '\n', 0),
(11804, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(11805, 90, '\n', 0),
(11806, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(11807, 92, '        repaint();\n', 0),
(11808, 93, '    }\n', 0),
(11809, 94, '\n', 0),
(11810, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(11811, 96, '        repaint();\n', 0),
(11812, 97, '    }\n', 0),
(11813, 98, '\n', 0),
(11814, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(11815, 100, '\n', 0),
(11816, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(11817, 102, ' \n', 0),
(11818, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(11819, 104, ' \n', 0),
(11820, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(11821, 106, '        repaint();\n', 0),
(11822, 107, '    }\n', 0),
(11823, 108, ' \n', 0),
(11824, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(11825, 110, '        repaint();\n', 0),
(11826, 111, '    }\n', 0),
(11827, 112, '  \n', 0),
(11828, 113, '    public void destroy() {\n', 0),
(11829, 114, '        removeMouseListener(this);\n', 0),
(11830, 115, '        removeMouseMotionListener(this);\n', 0),
(11831, 116, '    }\n', 0),
(11832, 117, '\n', 0),
(11833, 118, '    public String getAppletInfo() {\n', 0),
(11834, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(11835, 120, '    }\n', 0),
(11836, 121, '}\n', 0),
(11837, 0, 'import java.util.Scanner;\r\n', 0),
(11838, 1, ' class Years{\r\n', 0),
(11839, 2, '   public int getYear(){\r\n', 0),
(11840, 3, '	int year;\r\n', 2),
(11841, 4, '	String enteredYear;\r\n', 2),
(11842, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(11843, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(11844, 7, '	enteredYear = sc.next();\r\n', 0),
(11845, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(11846, 9, '	return year;\r\n', 0),
(11847, 10, '   }\r\n', 0),
(11848, 11, ' }\r\n', 0),
(11849, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11850, 13, ' class Months extends Years{\r\n', 0),
(11851, 14, '   public int getMonth(){\r\n', 0),
(11852, 15, '	int month;\r\n', 2),
(11853, 16, '	String enteredMonthNumber;\r\n', 2),
(11854, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(11855, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(11856, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(11857, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(11858, 21, '	return month;\r\n', 0),
(11859, 22, '   }\r\n', 0),
(11860, 23, ' }\r\n', 0),
(11861, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11862, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(11863, 26, ' static int numDays = 0;\r\n', 4),
(11864, 27, ' public static void main(String[] args) {\r\n', 0),
(11865, 28, '   int year;\r\n', 2),
(11866, 29, '   Months m = new Months();\r\n', 0),
(11867, 30, '   int month = m.getMonth();\r\n', 0),
(11868, 31, '   \r\n', 0),
(11869, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(11870, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(11871, 34, '   }\r\n', 0),
(11872, 35, '   else {\r\n', 0),
(11873, 36, '    switch (month) {\r\n', 0),
(11874, 37, '      case 1:\r\n', 0),
(11875, 38, '      case 3:\r\n', 0),
(11876, 39, '      case 5:\r\n', 0),
(11877, 40, '      case 7:\r\n', 0),
(11878, 41, '      case 8:\r\n', 0),
(11879, 42, '      case 10:\r\n', 0),
(11880, 43, '      case 12:\r\n', 0),
(11881, 44, '        numDays = 31;\r\n', 0),
(11882, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(11883, 46, '        break;\r\n', 0),
(11884, 47, '      case 4:\r\n', 0),
(11885, 48, '      case 6:\r\n', 0),
(11886, 49, '      case 9:\r\n', 0),
(11887, 50, '      case 11:\r\n', 0),
(11888, 51, '       numDays = 30;\r\n', 0),
(11889, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(11890, 53, '       break;\r\n', 0),
(11891, 54, '      case 2:\r\n', 0),
(11892, 55, '       year = m.getYear();\r\n', 0),
(11893, 56, '       if(year < 1) {\r\n', 0),
(11894, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(11895, 58, '       }\r\n', 0),
(11896, 59, '       else{\r\n', 0),
(11897, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(11898, 61, '         numDays = 29;\r\n', 0),
(11899, 62, '		 if(year > 2020){\r\n', 0),
(11900, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(11901, 64, '         }\r\n', 0),
(11902, 65, '         else{\r\n', 0),
(11903, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(11904, 67, '         }\r\n', 0),
(11905, 68, '        }//if at line 61\r\n', 0),
(11906, 69, '        else{\r\n', 0),
(11907, 70, '         numDays = 28;\r\n', 0),
(11908, 71, '         if (year > 2020){\r\n', 0),
(11909, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(11910, 73, '         }\r\n', 0),
(11911, 74, '         else{\r\n', 0),
(11912, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(11913, 76, '         }\r\n', 0),
(11914, 77, '         break;  \r\n', 0),
(11915, 78, '        }//else at line 70\r\n', 0),
(11916, 79, '       }//else at line 60\r\n', 0),
(11917, 80, '    }//switch at line 37\r\n', 0),
(11918, 81, '   }//else at line 36\r\n', 0),
(11919, 82, '  }//method\r\n', 0),
(11920, 83, ' }//class', 0),
(11921, 0, 'class Pattern{ \r\n', 0),
(11922, 1, 'public static void main(String[] args) { \r\n', 0),
(11923, 2, '	 int rows = 5;\r\n', 2),
(11924, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(11925, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(11926, 5, '	 System.out.print(j + " "); \r\n', 0),
(11927, 6, '	 } \r\n', 0),
(11928, 7, '	 System.out.println(""); \r\n', 0),
(11929, 8, ' 	} \r\n', 0),
(11930, 9, ' 	} \r\n', 0),
(11931, 10, '} ', 0),
(11932, 0, 'import java.util.Scanner;\r\n', 0),
(11933, 1, ' class Years{\r\n', 0),
(11934, 2, '   public int getYear(){\r\n', 0),
(11935, 3, '	int year;\r\n', 2),
(11936, 4, '	String enteredYear;\r\n', 2),
(11937, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(11938, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(11939, 7, '	enteredYear = sc.next();\r\n', 0),
(11940, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(11941, 9, '	return year;\r\n', 0),
(11942, 10, '   }\r\n', 0),
(11943, 11, ' }\r\n', 0),
(11944, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11945, 13, ' class Months extends Years{\r\n', 0),
(11946, 14, '   public int getMonth(){\r\n', 0),
(11947, 15, '	int month;\r\n', 2),
(11948, 16, '	String enteredMonthNumber;\r\n', 2),
(11949, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(11950, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(11951, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(11952, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(11953, 21, '	return month;\r\n', 0),
(11954, 22, '   }\r\n', 0),
(11955, 23, ' }\r\n', 0),
(11956, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(11957, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(11958, 26, ' static int numDays = 0;\r\n', 4),
(11959, 27, ' public static void main(String[] args) {\r\n', 0),
(11960, 28, '   int year;\r\n', 2),
(11961, 29, '   Months m = new Months();\r\n', 0),
(11962, 30, '   int month = m.getMonth();\r\n', 0),
(11963, 31, '   \r\n', 0),
(11964, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(11965, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(11966, 34, '   }\r\n', 0),
(11967, 35, '   else {\r\n', 0),
(11968, 36, '    switch (month) {\r\n', 0),
(11969, 37, '      case 1:\r\n', 0),
(11970, 38, '      case 3:\r\n', 0),
(11971, 39, '      case 5:\r\n', 0),
(11972, 40, '      case 7:\r\n', 0),
(11973, 41, '      case 8:\r\n', 0),
(11974, 42, '      case 10:\r\n', 0),
(11975, 43, '      case 12:\r\n', 0),
(11976, 44, '        numDays = 31;\r\n', 0),
(11977, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(11978, 46, '        break;\r\n', 0),
(11979, 47, '      case 4:\r\n', 0),
(11980, 48, '      case 6:\r\n', 0),
(11981, 49, '      case 9:\r\n', 0),
(11982, 50, '      case 11:\r\n', 0),
(11983, 51, '       numDays = 30;\r\n', 0),
(11984, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(11985, 53, '       break;\r\n', 0),
(11986, 54, '      case 2:\r\n', 0),
(11987, 55, '       year = m.getYear();\r\n', 0),
(11988, 56, '       if(year < 1) {\r\n', 0),
(11989, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(11990, 58, '       }\r\n', 0),
(11991, 59, '       else{\r\n', 0),
(11992, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(11993, 61, '         numDays = 29;\r\n', 0),
(11994, 62, '		 if(year > 2020){\r\n', 0),
(11995, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(11996, 64, '         }\r\n', 0),
(11997, 65, '         else{\r\n', 0),
(11998, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(11999, 67, '         }\r\n', 0),
(12000, 68, '        }//if at line 61\r\n', 0),
(12001, 69, '        else{\r\n', 0),
(12002, 70, '         numDays = 28;\r\n', 0),
(12003, 71, '         if (year > 2020){\r\n', 0),
(12004, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(12005, 73, '         }\r\n', 0),
(12006, 74, '         else{\r\n', 0),
(12007, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(12008, 76, '         }\r\n', 0),
(12009, 77, '         break;  \r\n', 0),
(12010, 78, '        }//else at line 70\r\n', 0),
(12011, 79, '       }//else at line 60\r\n', 0),
(12012, 80, '    }//switch at line 37\r\n', 0),
(12013, 81, '   }//else at line 36\r\n', 0),
(12014, 82, '  }//method\r\n', 0),
(12015, 83, ' }//class', 0),
(12016, 0, 'class HelloWorld { \r\n', 0),
(12017, 1, '	public static void main(String args[]) \r\n', 0),
(12018, 2, '	{ \r\n', 0),
(12019, 3, '		System.out.println("Hello World"); \r\n', 0),
(12020, 4, '	} \r\n', 0),
(12021, 5, '} \r\n', 0),
(12022, 0, 'import java.awt.event.*;\n', 0),
(12023, 1, 'import java.awt.*;\n', 0),
(12024, 2, '\n', 0),
(12025, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(12026, 4, '\n', 0),
(12027, 5, '    private int mx, my;\n', 4),
(12028, 6, '    private Dimension size;\n', 8),
(12029, 7, '    private int onaroll;\n', 2),
(12030, 8, '\n', 0),
(12031, 9, '    public void init() {\n', 0),
(12032, 10, '        onaroll = 0;\n', 0),
(12033, 11, '        setSize(500, 500);\n', 0),
(12034, 12, '        size = getSize();\n', 0),
(12035, 13, '        addMouseListener(this);\n', 0),
(12036, 14, '        addMouseMotionListener(this);\n', 0),
(12037, 15, '        addComponentListener(this);\n', 0),
(12038, 16, '    }\n', 0),
(12039, 17, '\n', 0),
(12040, 18, '    public void update(Graphics g) {\n', 0),
(12041, 19, '        Dimension newSize = getSize();\n', 8),
(12042, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(12043, 21, '            g.setColor(getBackground());\n', 0),
(12044, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(12045, 23, '        } else {\n', 0),
(12046, 24, '            size = newSize;\n', 0),
(12047, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(12048, 26, '        } // Calculate new position\n', 0),
(12049, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(12050, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(12051, 29, '        paint(g);\n', 0),
(12052, 30, '    }\n', 0),
(12053, 31, '  \n', 0),
(12054, 32, '    public void paint(Graphics g) {\n', 0),
(12055, 33, '        g.setColor(Color.black);\n', 0),
(12056, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(12057, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(12058, 36, '    }\n', 0),
(12059, 37, '\n', 0),
(12060, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(12061, 39, '\n', 0),
(12062, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(12063, 41, '        e.consume();\n', 0),
(12064, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(12065, 43, '            repaint();\n', 0),
(12066, 44, '        }\n', 0),
(12067, 45, '    }\n', 0),
(12068, 46, '\n', 0),
(12069, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(12070, 48, '        int x = e.getX();\n', 0),
(12071, 49, '        int y = e.getY();\n', 0),
(12072, 50, '        e.consume();\n', 0),
(12073, 51, '        requestFocus();\n', 0),
(12074, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(12075, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(12076, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(12077, 55, '                case 0:\n', 0),
(12078, 56, '                    play(getCodeBase(), \n', 0),
(12079, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(12080, 58, '                    break;\n', 0),
(12081, 59, '                case 1:\n', 0),
(12082, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(12083, 61, '                    break;\n', 0),
(12084, 62, '                case 2:\n', 0),
(12085, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(12086, 64, '                    break;\n', 0),
(12087, 65, '                case 3:\n', 0),
(12088, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(12089, 67, '                    break;\n', 0),
(12090, 68, '                }\n', 0),
(12091, 69, '                onaroll++;\n', 0),
(12092, 70, '                if (onaroll > 5) {\n', 0),
(12093, 72, '                } else {\n', 0),
(12094, 74, '                }\n', 0),
(12095, 75, '            } else {   //first hit\n', 0),
(12096, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(12097, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(12098, 78, '                onaroll = 1;\n', 0),
(12099, 79, '            }\n', 0),
(12100, 80, '        } else {   //miss\n', 0),
(12101, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(12102, 82, '			\n', 0),
(12103, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(12104, 84, '            onaroll = 0;\n', 0),
(12105, 85, '        }\n', 0),
(12106, 86, '        repaint();\n', 0),
(12107, 87, '    }\n', 0),
(12108, 88, '\n', 0),
(12109, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(12110, 90, '\n', 0),
(12111, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(12112, 92, '        repaint();\n', 0),
(12113, 93, '    }\n', 0),
(12114, 94, '\n', 0),
(12115, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(12116, 96, '        repaint();\n', 0),
(12117, 97, '    }\n', 0),
(12118, 98, '\n', 0),
(12119, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(12120, 100, '\n', 0),
(12121, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(12122, 102, ' \n', 0),
(12123, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(12124, 104, ' \n', 0),
(12125, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(12126, 106, '        repaint();\n', 0),
(12127, 107, '    }\n', 0),
(12128, 108, ' \n', 0),
(12129, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(12130, 110, '        repaint();\n', 0),
(12131, 111, '    }\n', 0),
(12132, 112, '  \n', 0),
(12133, 113, '    public void destroy() {\n', 0),
(12134, 114, '        removeMouseListener(this);\n', 0),
(12135, 115, '        removeMouseMotionListener(this);\n', 0),
(12136, 116, '    }\n', 0),
(12137, 117, '\n', 0),
(12138, 118, '    public String getAppletInfo() {\n', 0),
(12139, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(12140, 120, '    }\n', 0),
(12141, 121, '}\n', 0),
(12142, 0, 'import java.awt.event.*;\n', 0),
(12143, 1, 'import java.awt.*;\n', 0),
(12144, 2, '\n', 0),
(12145, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(12146, 4, '\n', 0),
(12147, 5, '    private int mx, my;\n', 4),
(12148, 6, '    private Dimension size;\n', 8),
(12149, 7, '    private int onaroll;\n', 2),
(12150, 8, '\n', 0),
(12151, 9, '    public void init() {\n', 0),
(12152, 10, '        onaroll = 0;\n', 0),
(12153, 11, '        setSize(500, 500);\n', 0),
(12154, 12, '        size = getSize();\n', 0),
(12155, 13, '        addMouseListener(this);\n', 0),
(12156, 14, '        addMouseMotionListener(this);\n', 0),
(12157, 15, '        addComponentListener(this);\n', 0),
(12158, 16, '    }\n', 0),
(12159, 17, '\n', 0),
(12160, 18, '    public void update(Graphics g) {\n', 0),
(12161, 19, '        Dimension newSize = getSize();\n', 8),
(12162, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(12163, 21, '            g.setColor(getBackground());\n', 0),
(12164, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(12165, 23, '        } else {\n', 0),
(12166, 24, '            size = newSize;\n', 0),
(12167, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(12168, 26, '        } // Calculate new position\n', 0),
(12169, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(12170, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(12171, 29, '        paint(g);\n', 0),
(12172, 30, '    }\n', 0),
(12173, 31, '  \n', 0),
(12174, 32, '    public void paint(Graphics g) {\n', 0),
(12175, 33, '        g.setColor(Color.black);\n', 0),
(12176, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(12177, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(12178, 36, '    }\n', 0),
(12179, 37, '\n', 0),
(12180, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(12181, 39, '\n', 0),
(12182, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(12183, 41, '        e.consume();\n', 0),
(12184, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(12185, 43, '            repaint();\n', 0),
(12186, 44, '        }\n', 0),
(12187, 45, '    }\n', 0),
(12188, 46, '\n', 0),
(12189, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(12190, 48, '        int x = e.getX();\n', 0),
(12191, 49, '        int y = e.getY();\n', 0),
(12192, 50, '        e.consume();\n', 0),
(12193, 51, '        requestFocus();\n', 0),
(12194, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(12195, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(12196, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(12197, 55, '                case 0:\n', 0),
(12198, 56, '                    play(getCodeBase(), \n', 0),
(12199, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(12200, 58, '                    break;\n', 0),
(12201, 59, '                case 1:\n', 0),
(12202, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(12203, 61, '                    break;\n', 0),
(12204, 62, '                case 2:\n', 0),
(12205, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(12206, 64, '                    break;\n', 0),
(12207, 65, '                case 3:\n', 0),
(12208, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(12209, 67, '                    break;\n', 0),
(12210, 68, '                }\n', 0),
(12211, 69, '                onaroll++;\n', 0),
(12212, 70, '                if (onaroll > 5) {\n', 0),
(12213, 72, '                } else {\n', 0),
(12214, 74, '                }\n', 0),
(12215, 75, '            } else {   //first hit\n', 0),
(12216, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(12217, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(12218, 78, '                onaroll = 1;\n', 0),
(12219, 79, '            }\n', 0),
(12220, 80, '        } else {   //miss\n', 0),
(12221, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(12222, 82, '			\n', 0),
(12223, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(12224, 84, '            onaroll = 0;\n', 0),
(12225, 85, '        }\n', 0),
(12226, 86, '        repaint();\n', 0),
(12227, 87, '    }\n', 0),
(12228, 88, '\n', 0),
(12229, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(12230, 90, '\n', 0),
(12231, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(12232, 92, '        repaint();\n', 0),
(12233, 93, '    }\n', 0),
(12234, 94, '\n', 0),
(12235, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(12236, 96, '        repaint();\n', 0),
(12237, 97, '    }\n', 0),
(12238, 98, '\n', 0),
(12239, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(12240, 100, '\n', 0),
(12241, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(12242, 102, ' \n', 0),
(12243, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(12244, 104, ' \n', 0),
(12245, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(12246, 106, '        repaint();\n', 0),
(12247, 107, '    }\n', 0),
(12248, 108, ' \n', 0),
(12249, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(12250, 110, '        repaint();\n', 0),
(12251, 111, '    }\n', 0),
(12252, 112, '  \n', 0),
(12253, 113, '    public void destroy() {\n', 0),
(12254, 114, '        removeMouseListener(this);\n', 0),
(12255, 115, '        removeMouseMotionListener(this);\n', 0),
(12256, 116, '    }\n', 0),
(12257, 117, '\n', 0),
(12258, 118, '    public String getAppletInfo() {\n', 0),
(12259, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(12260, 120, '    }\n', 0),
(12261, 121, '}\n', 0),
(12262, 0, 'import java.util.Scanner;\r\n', 0),
(12263, 1, ' class Years{\r\n', 0),
(12264, 2, '   public int getYear(){\r\n', 0),
(12265, 3, '	int year;\r\n', 2),
(12266, 4, '	String enteredYear;\r\n', 2),
(12267, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(12268, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(12269, 7, '	enteredYear = sc.next();\r\n', 0),
(12270, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(12271, 9, '	return year;\r\n', 0),
(12272, 10, '   }\r\n', 0),
(12273, 11, ' }\r\n', 0),
(12274, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12275, 13, ' class Months extends Years{\r\n', 0),
(12276, 14, '   public int getMonth(){\r\n', 0),
(12277, 15, '	int month;\r\n', 2),
(12278, 16, '	String enteredMonthNumber;\r\n', 2),
(12279, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(12280, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(12281, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(12282, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(12283, 21, '	return month;\r\n', 0),
(12284, 22, '   }\r\n', 0),
(12285, 23, ' }\r\n', 0),
(12286, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12287, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(12288, 26, ' static int numDays = 0;\r\n', 4),
(12289, 27, ' public static void main(String[] args) {\r\n', 0),
(12290, 28, '   int year;\r\n', 2),
(12291, 29, '   Months m = new Months();\r\n', 0),
(12292, 30, '   int month = m.getMonth();\r\n', 0),
(12293, 31, '   \r\n', 0),
(12294, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(12295, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(12296, 34, '   }\r\n', 0),
(12297, 35, '   else {\r\n', 0),
(12298, 36, '    switch (month) {\r\n', 0),
(12299, 37, '      case 1:\r\n', 0),
(12300, 38, '      case 3:\r\n', 0),
(12301, 39, '      case 5:\r\n', 0),
(12302, 40, '      case 7:\r\n', 0),
(12303, 41, '      case 8:\r\n', 0),
(12304, 42, '      case 10:\r\n', 0),
(12305, 43, '      case 12:\r\n', 0),
(12306, 44, '        numDays = 31;\r\n', 0),
(12307, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(12308, 46, '        break;\r\n', 0),
(12309, 47, '      case 4:\r\n', 0),
(12310, 48, '      case 6:\r\n', 0),
(12311, 49, '      case 9:\r\n', 0),
(12312, 50, '      case 11:\r\n', 0),
(12313, 51, '       numDays = 30;\r\n', 0),
(12314, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(12315, 53, '       break;\r\n', 0),
(12316, 54, '      case 2:\r\n', 0),
(12317, 55, '       year = m.getYear();\r\n', 0),
(12318, 56, '       if(year < 1) {\r\n', 0),
(12319, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(12320, 58, '       }\r\n', 0),
(12321, 59, '       else{\r\n', 0),
(12322, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(12323, 61, '         numDays = 29;\r\n', 0),
(12324, 62, '		 if(year > 2020){\r\n', 0),
(12325, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(12326, 64, '         }\r\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(12327, 65, '         else{\r\n', 0),
(12328, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(12329, 67, '         }\r\n', 0),
(12330, 68, '        }//if at line 61\r\n', 0),
(12331, 69, '        else{\r\n', 0),
(12332, 70, '         numDays = 28;\r\n', 0),
(12333, 71, '         if (year > 2020){\r\n', 0),
(12334, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(12335, 73, '         }\r\n', 0),
(12336, 74, '         else{\r\n', 0),
(12337, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(12338, 76, '         }\r\n', 0),
(12339, 77, '         break;  \r\n', 0),
(12340, 78, '        }//else at line 70\r\n', 0),
(12341, 79, '       }//else at line 60\r\n', 0),
(12342, 80, '    }//switch at line 37\r\n', 0),
(12343, 81, '   }//else at line 36\r\n', 0),
(12344, 82, '  }//method\r\n', 0),
(12345, 83, ' }//class', 0),
(12346, 0, 'public class RecursionExample2 {  \r\n', 0),
(12347, 1, 'static int count=0;  \r\n', 4),
(12348, 2, 'public int p(){  \r\n', 0),
(12349, 3, 'count++;  \r\n', 0),
(12350, 4, 'if(count<=5){  \r\n', 0),
(12351, 5, 'System.out.println("hello "+count);  \r\n', 0),
(12352, 6, 'public int p();  \r\n', 0),
(12353, 7, '}  \r\n', 0),
(12354, 8, '}  \r\n', 0),
(12355, 9, 'public static void main(String[] args) {  \r\n', 0),
(12356, 10, 'p();  \r\n', 0),
(12357, 11, '}  \r\n', 0),
(12358, 12, '}  ', 0),
(12359, 0, 'import java.awt.event.*;\n', 0),
(12360, 1, 'import java.awt.*;\n', 0),
(12361, 2, '\n', 0),
(12362, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(12363, 4, '\n', 0),
(12364, 5, '    private int mx, my;\n', 4),
(12365, 6, '    private Dimension size;\n', 8),
(12366, 7, '    private int onaroll;\n', 2),
(12367, 8, '\n', 0),
(12368, 9, '    public void init() {\n', 0),
(12369, 10, '        onaroll = 0;\n', 0),
(12370, 11, '        setSize(500, 500);\n', 0),
(12371, 12, '        size = getSize();\n', 0),
(12372, 13, '        addMouseListener(this);\n', 0),
(12373, 14, '        addMouseMotionListener(this);\n', 0),
(12374, 15, '        addComponentListener(this);\n', 0),
(12375, 16, '    }\n', 0),
(12376, 17, '\n', 0),
(12377, 18, '    public void update(Graphics g) {\n', 0),
(12378, 19, '        Dimension newSize = getSize();\n', 8),
(12379, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(12380, 21, '            g.setColor(getBackground());\n', 0),
(12381, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(12382, 23, '        } else {\n', 0),
(12383, 24, '            size = newSize;\n', 0),
(12384, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(12385, 26, '        } // Calculate new position\n', 0),
(12386, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(12387, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(12388, 29, '        paint(g);\n', 0),
(12389, 30, '    }\n', 0),
(12390, 31, '  \n', 0),
(12391, 32, '    public void paint(Graphics g) {\n', 0),
(12392, 33, '        g.setColor(Color.black);\n', 0),
(12393, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(12394, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(12395, 36, '    }\n', 0),
(12396, 37, '\n', 0),
(12397, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(12398, 39, '\n', 0),
(12399, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(12400, 41, '        e.consume();\n', 0),
(12401, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(12402, 43, '            repaint();\n', 0),
(12403, 44, '        }\n', 0),
(12404, 45, '    }\n', 0),
(12405, 46, '\n', 0),
(12406, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(12407, 48, '        int x = e.getX();\n', 0),
(12408, 49, '        int y = e.getY();\n', 0),
(12409, 50, '        e.consume();\n', 0),
(12410, 51, '        requestFocus();\n', 0),
(12411, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(12412, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(12413, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(12414, 55, '                case 0:\n', 0),
(12415, 56, '                    play(getCodeBase(), \n', 0),
(12416, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(12417, 58, '                    break;\n', 0),
(12418, 59, '                case 1:\n', 0),
(12419, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(12420, 61, '                    break;\n', 0),
(12421, 62, '                case 2:\n', 0),
(12422, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(12423, 64, '                    break;\n', 0),
(12424, 65, '                case 3:\n', 0),
(12425, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(12426, 67, '                    break;\n', 0),
(12427, 68, '                }\n', 0),
(12428, 69, '                onaroll++;\n', 0),
(12429, 70, '                if (onaroll > 5) {\n', 0),
(12430, 72, '                } else {\n', 0),
(12431, 74, '                }\n', 0),
(12432, 75, '            } else {   //first hit\n', 0),
(12433, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(12434, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(12435, 78, '                onaroll = 1;\n', 0),
(12436, 79, '            }\n', 0),
(12437, 80, '        } else {   //miss\n', 0),
(12438, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(12439, 82, '			\n', 0),
(12440, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(12441, 84, '            onaroll = 0;\n', 0),
(12442, 85, '        }\n', 0),
(12443, 86, '        repaint();\n', 0),
(12444, 87, '    }\n', 0),
(12445, 88, '\n', 0),
(12446, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(12447, 90, '\n', 0),
(12448, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(12449, 92, '        repaint();\n', 0),
(12450, 93, '    }\n', 0),
(12451, 94, '\n', 0),
(12452, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(12453, 96, '        repaint();\n', 0),
(12454, 97, '    }\n', 0),
(12455, 98, '\n', 0),
(12456, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(12457, 100, '\n', 0),
(12458, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(12459, 102, ' \n', 0),
(12460, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(12461, 104, ' \n', 0),
(12462, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(12463, 106, '        repaint();\n', 0),
(12464, 107, '    }\n', 0),
(12465, 108, ' \n', 0),
(12466, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(12467, 110, '        repaint();\n', 0),
(12468, 111, '    }\n', 0),
(12469, 112, '  \n', 0),
(12470, 113, '    public void destroy() {\n', 0),
(12471, 114, '        removeMouseListener(this);\n', 0),
(12472, 115, '        removeMouseMotionListener(this);\n', 0),
(12473, 116, '    }\n', 0),
(12474, 117, '\n', 0),
(12475, 118, '    public String getAppletInfo() {\n', 0),
(12476, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(12477, 120, '    }\n', 0),
(12478, 121, '}\n', 0),
(12479, 0, 'import java.awt.event.*;\n', 0),
(12480, 1, 'import java.awt.*;\n', 0),
(12481, 2, '\n', 0),
(12482, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(12483, 4, '\n', 0),
(12484, 5, '    private int mx, my;\n', 4),
(12485, 6, '    private Dimension size;\n', 8),
(12486, 7, '    private int onaroll;\n', 2),
(12487, 8, '\n', 0),
(12488, 9, '    public void init() {\n', 0),
(12489, 10, '        onaroll = 0;\n', 0),
(12490, 11, '        setSize(500, 500);\n', 0),
(12491, 12, '        size = getSize();\n', 0),
(12492, 13, '        addMouseListener(this);\n', 0),
(12493, 14, '        addMouseMotionListener(this);\n', 0),
(12494, 15, '        addComponentListener(this);\n', 0),
(12495, 16, '    }\n', 0),
(12496, 17, '\n', 0),
(12497, 18, '    public void update(Graphics g) {\n', 0),
(12498, 19, '        Dimension newSize = getSize();\n', 8),
(12499, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(12500, 21, '            g.setColor(getBackground());\n', 0),
(12501, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(12502, 23, '        } else {\n', 0),
(12503, 24, '            size = newSize;\n', 0),
(12504, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(12505, 26, '        } // Calculate new position\n', 0),
(12506, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(12507, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(12508, 29, '        paint(g);\n', 0),
(12509, 30, '    }\n', 0),
(12510, 31, '  \n', 0),
(12511, 32, '    public void paint(Graphics g) {\n', 0),
(12512, 33, '        g.setColor(Color.black);\n', 0),
(12513, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(12514, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(12515, 36, '    }\n', 0),
(12516, 37, '\n', 0),
(12517, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(12518, 39, '\n', 0),
(12519, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(12520, 41, '        e.consume();\n', 0),
(12521, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(12522, 43, '            repaint();\n', 0),
(12523, 44, '        }\n', 0),
(12524, 45, '    }\n', 0),
(12525, 46, '\n', 0),
(12526, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(12527, 48, '        int x = e.getX();\n', 0),
(12528, 49, '        int y = e.getY();\n', 0),
(12529, 50, '        e.consume();\n', 0),
(12530, 51, '        requestFocus();\n', 0),
(12531, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(12532, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(12533, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(12534, 55, '                case 0:\n', 0),
(12535, 56, '                    play(getCodeBase(), \n', 0),
(12536, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(12537, 58, '                    break;\n', 0),
(12538, 59, '                case 1:\n', 0),
(12539, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(12540, 61, '                    break;\n', 0),
(12541, 62, '                case 2:\n', 0),
(12542, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(12543, 64, '                    break;\n', 0),
(12544, 65, '                case 3:\n', 0),
(12545, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(12546, 67, '                    break;\n', 0),
(12547, 68, '                }\n', 0),
(12548, 69, '                onaroll++;\n', 0),
(12549, 70, '                if (onaroll > 5) {\n', 0),
(12550, 72, '                } else {\n', 0),
(12551, 74, '                }\n', 0),
(12552, 75, '            } else {   //first hit\n', 0),
(12553, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(12554, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(12555, 78, '                onaroll = 1;\n', 0),
(12556, 79, '            }\n', 0),
(12557, 80, '        } else {   //miss\n', 0),
(12558, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(12559, 82, '			\n', 0),
(12560, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(12561, 84, '            onaroll = 0;\n', 0),
(12562, 85, '        }\n', 0),
(12563, 86, '        repaint();\n', 0),
(12564, 87, '    }\n', 0),
(12565, 88, '\n', 0),
(12566, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(12567, 90, '\n', 0),
(12568, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(12569, 92, '        repaint();\n', 0),
(12570, 93, '    }\n', 0),
(12571, 94, '\n', 0),
(12572, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(12573, 96, '        repaint();\n', 0),
(12574, 97, '    }\n', 0),
(12575, 98, '\n', 0),
(12576, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(12577, 100, '\n', 0),
(12578, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(12579, 102, ' \n', 0),
(12580, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(12581, 104, ' \n', 0),
(12582, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(12583, 106, '        repaint();\n', 0),
(12584, 107, '    }\n', 0),
(12585, 108, ' \n', 0),
(12586, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(12587, 110, '        repaint();\n', 0),
(12588, 111, '    }\n', 0),
(12589, 112, '  \n', 0),
(12590, 113, '    public void destroy() {\n', 0),
(12591, 114, '        removeMouseListener(this);\n', 0),
(12592, 115, '        removeMouseMotionListener(this);\n', 0),
(12593, 116, '    }\n', 0),
(12594, 117, '\n', 0),
(12595, 118, '    public String getAppletInfo() {\n', 0),
(12596, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(12597, 120, '    }\n', 0),
(12598, 121, '}\n', 0),
(12599, 0, 'import java.util.Scanner;\r\n', 0),
(12600, 1, ' class Years{\r\n', 0),
(12601, 2, '   public int getYear(){\r\n', 0),
(12602, 3, '	int year;\r\n', 2),
(12603, 4, '	String enteredYear;\r\n', 2),
(12604, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(12605, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(12606, 7, '	enteredYear = sc.next();\r\n', 0),
(12607, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(12608, 9, '	return year;\r\n', 0),
(12609, 10, '   }\r\n', 0),
(12610, 11, ' }\r\n', 0),
(12611, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12612, 13, ' class Months extends Years{\r\n', 0),
(12613, 14, '   public int getMonth(){\r\n', 0),
(12614, 15, '	int month;\r\n', 2),
(12615, 16, '	String enteredMonthNumber;\r\n', 2),
(12616, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(12617, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(12618, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(12619, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(12620, 21, '	return month;\r\n', 0),
(12621, 22, '   }\r\n', 0),
(12622, 23, ' }\r\n', 0),
(12623, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12624, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(12625, 26, ' static int numDays = 0;\r\n', 4),
(12626, 27, ' public static void main(String[] args) {\r\n', 0),
(12627, 28, '   int year;\r\n', 2),
(12628, 29, '   Months m = new Months();\r\n', 0),
(12629, 30, '   int month = m.getMonth();\r\n', 0),
(12630, 31, '   \r\n', 0),
(12631, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(12632, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(12633, 34, '   }\r\n', 0),
(12634, 35, '   else {\r\n', 0),
(12635, 36, '    switch (month) {\r\n', 0),
(12636, 37, '      case 1:\r\n', 0),
(12637, 38, '      case 3:\r\n', 0),
(12638, 39, '      case 5:\r\n', 0),
(12639, 40, '      case 7:\r\n', 0),
(12640, 41, '      case 8:\r\n', 0),
(12641, 42, '      case 10:\r\n', 0),
(12642, 43, '      case 12:\r\n', 0),
(12643, 44, '        numDays = 31;\r\n', 0),
(12644, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(12645, 46, '        break;\r\n', 0),
(12646, 47, '      case 4:\r\n', 0),
(12647, 48, '      case 6:\r\n', 0),
(12648, 49, '      case 9:\r\n', 0),
(12649, 50, '      case 11:\r\n', 0),
(12650, 51, '       numDays = 30;\r\n', 0),
(12651, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(12652, 53, '       break;\r\n', 0),
(12653, 54, '      case 2:\r\n', 0),
(12654, 55, '       year = m.getYear();\r\n', 0),
(12655, 56, '       if(year < 1) {\r\n', 0),
(12656, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(12657, 58, '       }\r\n', 0),
(12658, 59, '       else{\r\n', 0),
(12659, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(12660, 61, '         numDays = 29;\r\n', 0),
(12661, 62, '		 if(year > 2020){\r\n', 0),
(12662, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(12663, 64, '         }\r\n', 0),
(12664, 65, '         else{\r\n', 0),
(12665, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(12666, 67, '         }\r\n', 0),
(12667, 68, '        }//if at line 61\r\n', 0),
(12668, 69, '        else{\r\n', 0),
(12669, 70, '         numDays = 28;\r\n', 0),
(12670, 71, '         if (year > 2020){\r\n', 0),
(12671, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(12672, 73, '         }\r\n', 0),
(12673, 74, '         else{\r\n', 0),
(12674, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(12675, 76, '         }\r\n', 0),
(12676, 77, '         break;  \r\n', 0),
(12677, 78, '        }//else at line 70\r\n', 0),
(12678, 79, '       }//else at line 60\r\n', 0),
(12679, 80, '    }//switch at line 37\r\n', 0),
(12680, 81, '   }//else at line 36\r\n', 0),
(12681, 82, '  }//method\r\n', 0),
(12682, 83, ' }//class', 0),
(12683, 0, 'class Pattern{ \r\n', 0),
(12684, 1, 'public static void main(String[] args) { \r\n', 0),
(12685, 2, '	 int rows = 5;\r\n', 2),
(12686, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(12687, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(12688, 5, '	 System.out.print(j + " "); \r\n', 0),
(12689, 6, '	 } \r\n', 0),
(12690, 7, '	 System.out.println(""); \r\n', 0),
(12691, 8, ' 	} \r\n', 0),
(12692, 9, ' 	} \r\n', 0),
(12693, 10, '} ', 0),
(12694, 0, 'import java.util.Scanner;\r\n', 0),
(12695, 1, ' class Years{\r\n', 0),
(12696, 2, '   public int getYear(){\r\n', 0),
(12697, 3, '	int year;\r\n', 2),
(12698, 4, '	String enteredYear;\r\n', 2),
(12699, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(12700, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(12701, 7, '	enteredYear = sc.next();\r\n', 0),
(12702, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(12703, 9, '	return year;\r\n', 0),
(12704, 10, '   }\r\n', 0),
(12705, 11, ' }\r\n', 0),
(12706, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12707, 13, ' class Months extends Years{\r\n', 0),
(12708, 14, '   public int getMonth(){\r\n', 0),
(12709, 15, '	int month;\r\n', 2),
(12710, 16, '	String enteredMonthNumber;\r\n', 2),
(12711, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(12712, 0, 'import java.util.Scanner;\r\n', 0),
(12713, 1, ' class Years{\r\n', 0),
(12714, 2, '   public int getYear(){\r\n', 0),
(12715, 3, '	int year;\r\n', 2),
(12716, 4, '	String enteredYear;\r\n', 2),
(12717, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(12718, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(12719, 7, '	enteredYear = sc.next();\r\n', 0),
(12720, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(12721, 9, '	return year;\r\n', 0),
(12722, 10, '   }\r\n', 0),
(12723, 11, ' }\r\n', 0),
(12724, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12725, 13, ' class Months extends Years{\r\n', 0),
(12726, 14, '   public int getMonth(){\r\n', 0),
(12727, 15, '	int month;\r\n', 2),
(12728, 16, '	String enteredMonthNumber;\r\n', 2),
(12729, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(12730, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(12731, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(12732, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(12733, 21, '	return month;\r\n', 0),
(12734, 22, '   }\r\n', 0),
(12735, 23, ' }\r\n', 0),
(12736, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(12737, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(12738, 26, ' static int numDays = 0;\r\n', 4),
(12739, 27, ' public static void main(String[] args) {\r\n', 0),
(12740, 28, '   int year;\r\n', 2),
(12741, 29, '   Months m = new Months();\r\n', 0),
(12742, 30, '   int month = m.getMonth();\r\n', 0),
(12743, 31, '   \r\n', 0),
(12744, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(12745, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(12746, 34, '   }\r\n', 0),
(12747, 35, '   else {\r\n', 0),
(12748, 36, '    switch (month) {\r\n', 0),
(12749, 37, '      case 1:\r\n', 0),
(12750, 38, '      case 3:\r\n', 0),
(12751, 39, '      case 5:\r\n', 0),
(12752, 40, '      case 7:\r\n', 0),
(12753, 41, '      case 8:\r\n', 0),
(12754, 42, '      case 10:\r\n', 0),
(12755, 43, '      case 12:\r\n', 0),
(12756, 44, '        numDays = 31;\r\n', 0),
(12757, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(12758, 46, '        break;\r\n', 0),
(12759, 47, '      case 4:\r\n', 0),
(12760, 48, '      case 6:\r\n', 0),
(12761, 49, '      case 9:\r\n', 0),
(12762, 50, '      case 11:\r\n', 0),
(12763, 51, '       numDays = 30;\r\n', 0),
(12764, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(12765, 53, '       break;\r\n', 0),
(12766, 54, '      case 2:\r\n', 0),
(12767, 55, '       year = m.getYear();\r\n', 0),
(12768, 56, '       if(year < 1) {\r\n', 0),
(12769, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(12770, 58, '       }\r\n', 0),
(12771, 59, '       else{\r\n', 0),
(12772, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(12773, 61, '         numDays = 29;\r\n', 0),
(12774, 62, '		 if(year > 2020){\r\n', 0),
(12775, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(12776, 64, '         }\r\n', 0),
(12777, 65, '         else{\r\n', 0),
(12778, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(12779, 67, '         }\r\n', 0),
(12780, 68, '        }//if at line 61\r\n', 0),
(12781, 69, '        else{\r\n', 0),
(12782, 70, '         numDays = 28;\r\n', 0),
(12783, 71, '         if (year > 2020){\r\n', 0),
(12784, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(12785, 73, '         }\r\n', 0),
(12786, 74, '         else{\r\n', 0),
(12787, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(12788, 76, '         }\r\n', 0),
(12789, 77, '         break;  \r\n', 0),
(12790, 78, '        }//else at line 70\r\n', 0),
(12791, 79, '       }//else at line 60\r\n', 0),
(12792, 80, '    }//switch at line 37\r\n', 0),
(12793, 81, '   }//else at line 36\r\n', 0),
(12794, 82, '  }//method\r\n', 0),
(12795, 83, ' }//class', 0),
(12796, 0, 'public class RecursionExample2 {  \r\n', 0),
(12797, 1, 'static int count=0;  \r\n', 4),
(12798, 2, 'public int p(){  \r\n', 0),
(12799, 3, 'count++;  \r\n', 0),
(12800, 4, 'if(count<=5){  \r\n', 0),
(12801, 5, 'System.out.println("hello "+count);  \r\n', 0),
(12802, 6, 'public int p();  \r\n', 0),
(12803, 7, '}  \r\n', 0),
(12804, 8, '}  \r\n', 0),
(12805, 9, 'public static void main(String[] args) {  \r\n', 0),
(12806, 10, 'p();  \r\n', 0),
(12807, 11, '}  \r\n', 0),
(12808, 12, '}  ', 0),
(12809, 0, 'import java.awt.event.*;\n', 0),
(12810, 1, 'import java.awt.*;\n', 0),
(12811, 2, '\n', 0),
(12812, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(12813, 4, '\n', 0),
(12814, 5, '    private int mx, my;\n', 4),
(12815, 6, '    private Dimension size;\n', 8),
(12816, 7, '    private int onaroll;\n', 2),
(12817, 8, '\n', 0),
(12818, 9, '    public void init() {\n', 0),
(12819, 10, '        onaroll = 0;\n', 0),
(12820, 11, '        setSize(500, 500);\n', 0),
(12821, 12, '        size = getSize();\n', 0),
(12822, 13, '        addMouseListener(this);\n', 0),
(12823, 14, '        addMouseMotionListener(this);\n', 0),
(12824, 15, '        addComponentListener(this);\n', 0),
(12825, 16, '    }\n', 0),
(12826, 17, '\n', 0),
(12827, 18, '    public void update(Graphics g) {\n', 0),
(12828, 19, '        Dimension newSize = getSize();\n', 8),
(12829, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(12830, 21, '            g.setColor(getBackground());\n', 0),
(12831, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(12832, 23, '        } else {\n', 0),
(12833, 24, '            size = newSize;\n', 0),
(12834, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(12835, 26, '        } // Calculate new position\n', 0),
(12836, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(12837, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(12838, 29, '        paint(g);\n', 0),
(12839, 30, '    }\n', 0),
(12840, 31, '  \n', 0),
(12841, 32, '    public void paint(Graphics g) {\n', 0),
(12842, 33, '        g.setColor(Color.black);\n', 0),
(12843, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(12844, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(12845, 36, '    }\n', 0),
(12846, 37, '\n', 0),
(12847, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(12848, 39, '\n', 0),
(12849, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(12850, 41, '        e.consume();\n', 0),
(12851, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(12852, 43, '            repaint();\n', 0),
(12853, 44, '        }\n', 0),
(12854, 45, '    }\n', 0),
(12855, 46, '\n', 0),
(12856, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(12857, 48, '        int x = e.getX();\n', 0),
(12858, 49, '        int y = e.getY();\n', 0),
(12859, 50, '        e.consume();\n', 0),
(12860, 51, '        requestFocus();\n', 0),
(12861, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(12862, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(12863, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(12864, 55, '                case 0:\n', 0),
(12865, 56, '                    play(getCodeBase(), \n', 0),
(12866, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(12867, 58, '                    break;\n', 0),
(12868, 59, '                case 1:\n', 0),
(12869, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(12870, 61, '                    break;\n', 0),
(12871, 62, '                case 2:\n', 0),
(12872, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(12873, 64, '                    break;\n', 0),
(12874, 65, '                case 3:\n', 0),
(12875, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(12876, 67, '                    break;\n', 0),
(12877, 68, '                }\n', 0),
(12878, 69, '                onaroll++;\n', 0),
(12879, 70, '                if (onaroll > 5) {\n', 0),
(12880, 72, '                } else {\n', 0),
(12881, 74, '                }\n', 0),
(12882, 75, '            } else {   //first hit\n', 0),
(12883, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(12884, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(12885, 78, '                onaroll = 1;\n', 0),
(12886, 79, '            }\n', 0),
(12887, 80, '        } else {   //miss\n', 0),
(12888, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(12889, 82, '			\n', 0),
(12890, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(12891, 84, '            onaroll = 0;\n', 0),
(12892, 85, '        }\n', 0),
(12893, 86, '        repaint();\n', 0),
(12894, 87, '    }\n', 0),
(12895, 88, '\n', 0),
(12896, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(12897, 90, '\n', 0),
(12898, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(12899, 92, '        repaint();\n', 0),
(12900, 93, '    }\n', 0),
(12901, 94, '\n', 0),
(12902, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(12903, 96, '        repaint();\n', 0),
(12904, 97, '    }\n', 0),
(12905, 98, '\n', 0),
(12906, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(12907, 100, '\n', 0),
(12908, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(12909, 102, ' \n', 0),
(12910, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(12911, 104, ' \n', 0),
(12912, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(12913, 106, '        repaint();\n', 0),
(12914, 107, '    }\n', 0),
(12915, 108, ' \n', 0),
(12916, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(12917, 110, '        repaint();\n', 0),
(12918, 111, '    }\n', 0),
(12919, 112, '  \n', 0),
(12920, 113, '    public void destroy() {\n', 0),
(12921, 114, '        removeMouseListener(this);\n', 0),
(12922, 115, '        removeMouseMotionListener(this);\n', 0),
(12923, 116, '    }\n', 0),
(12924, 117, '\n', 0),
(12925, 118, '    public String getAppletInfo() {\n', 0),
(12926, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(12927, 120, '    }\n', 0),
(12928, 121, '}\n', 0),
(12929, 0, 'import java.awt.event.*;\n', 0),
(12930, 1, 'import java.awt.*;\n', 0),
(12931, 2, '\n', 0),
(12932, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(12933, 4, '\n', 0),
(12934, 5, '    private int mx, my;\n', 4),
(12935, 6, '    private Dimension size;\n', 8),
(12936, 7, '    private int onaroll;\n', 2),
(12937, 8, '\n', 0),
(12938, 9, '    public void init() {\n', 0),
(12939, 10, '        onaroll = 0;\n', 0),
(12940, 11, '        setSize(500, 500);\n', 0),
(12941, 12, '        size = getSize();\n', 0),
(12942, 13, '        addMouseListener(this);\n', 0),
(12943, 14, '        addMouseMotionListener(this);\n', 0),
(12944, 15, '        addComponentListener(this);\n', 0),
(12945, 16, '    }\n', 0),
(12946, 17, '\n', 0),
(12947, 18, '    public void update(Graphics g) {\n', 0),
(12948, 19, '        Dimension newSize = getSize();\n', 8),
(12949, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(12950, 21, '            g.setColor(getBackground());\n', 0),
(12951, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(12952, 23, '        } else {\n', 0),
(12953, 24, '            size = newSize;\n', 0),
(12954, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(12955, 26, '        } // Calculate new position\n', 0),
(12956, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(12957, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(12958, 29, '        paint(g);\n', 0),
(12959, 30, '    }\n', 0),
(12960, 31, '  \n', 0),
(12961, 32, '    public void paint(Graphics g) {\n', 0),
(12962, 33, '        g.setColor(Color.black);\n', 0),
(12963, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(12964, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(12965, 36, '    }\n', 0),
(12966, 37, '\n', 0),
(12967, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(12968, 39, '\n', 0),
(12969, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(12970, 41, '        e.consume();\n', 0),
(12971, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(12972, 43, '            repaint();\n', 0),
(12973, 44, '        }\n', 0),
(12974, 45, '    }\n', 0),
(12975, 46, '\n', 0),
(12976, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(12977, 48, '        int x = e.getX();\n', 0),
(12978, 49, '        int y = e.getY();\n', 0),
(12979, 50, '        e.consume();\n', 0),
(12980, 51, '        requestFocus();\n', 0),
(12981, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(12982, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(12983, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(12984, 55, '                case 0:\n', 0),
(12985, 56, '                    play(getCodeBase(), \n', 0),
(12986, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(12987, 58, '                    break;\n', 0),
(12988, 59, '                case 1:\n', 0),
(12989, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(12990, 61, '                    break;\n', 0),
(12991, 62, '                case 2:\n', 0),
(12992, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(12993, 64, '                    break;\n', 0),
(12994, 65, '                case 3:\n', 0),
(12995, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(12996, 67, '                    break;\n', 0),
(12997, 68, '                }\n', 0),
(12998, 69, '                onaroll++;\n', 0),
(12999, 70, '                if (onaroll > 5) {\n', 0),
(13000, 72, '                } else {\n', 0),
(13001, 74, '                }\n', 0),
(13002, 75, '            } else {   //first hit\n', 0),
(13003, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(13004, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(13005, 78, '                onaroll = 1;\n', 0),
(13006, 79, '            }\n', 0),
(13007, 80, '        } else {   //miss\n', 0),
(13008, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(13009, 82, '			\n', 0),
(13010, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(13011, 84, '            onaroll = 0;\n', 0),
(13012, 85, '        }\n', 0),
(13013, 86, '        repaint();\n', 0),
(13014, 87, '    }\n', 0),
(13015, 88, '\n', 0),
(13016, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(13017, 90, '\n', 0),
(13018, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(13019, 92, '        repaint();\n', 0),
(13020, 93, '    }\n', 0),
(13021, 94, '\n', 0),
(13022, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(13023, 96, '        repaint();\n', 0),
(13024, 97, '    }\n', 0),
(13025, 98, '\n', 0),
(13026, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(13027, 100, '\n', 0),
(13028, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(13029, 102, ' \n', 0),
(13030, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(13031, 104, ' \n', 0),
(13032, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(13033, 106, '        repaint();\n', 0),
(13034, 107, '    }\n', 0),
(13035, 108, ' \n', 0),
(13036, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(13037, 110, '        repaint();\n', 0),
(13038, 111, '    }\n', 0),
(13039, 112, '  \n', 0),
(13040, 113, '    public void destroy() {\n', 0),
(13041, 114, '        removeMouseListener(this);\n', 0),
(13042, 115, '        removeMouseMotionListener(this);\n', 0),
(13043, 116, '    }\n', 0),
(13044, 117, '\n', 0),
(13045, 118, '    public String getAppletInfo() {\n', 0),
(13046, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(13047, 120, '    }\n', 0),
(13048, 121, '}\n', 0),
(13049, 0, 'import java.util.Scanner;\r\n', 0),
(13050, 1, ' class Years{\r\n', 0),
(13051, 2, '   public int getYear(){\r\n', 0),
(13052, 3, '	int year;\r\n', 2),
(13053, 4, '	String enteredYear;\r\n', 2),
(13054, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(13055, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(13056, 7, '	enteredYear = sc.next();\r\n', 0),
(13057, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(13058, 9, '	return year;\r\n', 0),
(13059, 10, '   }\r\n', 0),
(13060, 11, ' }\r\n', 0),
(13061, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13062, 13, ' class Months extends Years{\r\n', 0),
(13063, 14, '   public int getMonth(){\r\n', 0),
(13064, 15, '	int month;\r\n', 2),
(13065, 16, '	String enteredMonthNumber;\r\n', 2),
(13066, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(13067, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(13068, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(13069, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(13070, 21, '	return month;\r\n', 0),
(13071, 22, '   }\r\n', 0),
(13072, 23, ' }\r\n', 0),
(13073, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13074, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(13075, 26, ' static int numDays = 0;\r\n', 4),
(13076, 27, ' public static void main(String[] args) {\r\n', 0),
(13077, 28, '   int year;\r\n', 2),
(13078, 29, '   Months m = new Months();\r\n', 0),
(13079, 30, '   int month = m.getMonth();\r\n', 0),
(13080, 31, '   \r\n', 0),
(13081, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(13082, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(13083, 34, '   }\r\n', 0),
(13084, 35, '   else {\r\n', 0),
(13085, 36, '    switch (month) {\r\n', 0),
(13086, 37, '      case 1:\r\n', 0),
(13087, 38, '      case 3:\r\n', 0),
(13088, 39, '      case 5:\r\n', 0),
(13089, 40, '      case 7:\r\n', 0),
(13090, 41, '      case 8:\r\n', 0),
(13091, 42, '      case 10:\r\n', 0),
(13092, 43, '      case 12:\r\n', 0),
(13093, 44, '        numDays = 31;\r\n', 0),
(13094, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(13095, 46, '        break;\r\n', 0),
(13096, 47, '      case 4:\r\n', 0),
(13097, 48, '      case 6:\r\n', 0),
(13098, 49, '      case 9:\r\n', 0),
(13099, 50, '      case 11:\r\n', 0),
(13100, 51, '       numDays = 30;\r\n', 0),
(13101, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(13102, 53, '       break;\r\n', 0),
(13103, 54, '      case 2:\r\n', 0),
(13104, 55, '       year = m.getYear();\r\n', 0),
(13105, 56, '       if(year < 1) {\r\n', 0),
(13106, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(13107, 58, '       }\r\n', 0),
(13108, 59, '       else{\r\n', 0),
(13109, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(13110, 61, '         numDays = 29;\r\n', 0),
(13111, 62, '		 if(year > 2020){\r\n', 0),
(13112, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(13113, 64, '         }\r\n', 0),
(13114, 65, '         else{\r\n', 0),
(13115, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(13116, 67, '         }\r\n', 0),
(13117, 68, '        }//if at line 61\r\n', 0),
(13118, 69, '        else{\r\n', 0),
(13119, 70, '         numDays = 28;\r\n', 0),
(13120, 71, '         if (year > 2020){\r\n', 0),
(13121, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(13122, 73, '         }\r\n', 0),
(13123, 74, '         else{\r\n', 0),
(13124, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(13125, 76, '         }\r\n', 0),
(13126, 77, '         break;  \r\n', 0),
(13127, 78, '        }//else at line 70\r\n', 0),
(13128, 79, '       }//else at line 60\r\n', 0),
(13129, 80, '    }//switch at line 37\r\n', 0),
(13130, 81, '   }//else at line 36\r\n', 0),
(13131, 82, '  }//method\r\n', 0),
(13132, 83, ' }//class', 0),
(13133, 0, 'class Pattern{ \r\n', 0),
(13134, 1, 'public static void main(String[] args) { \r\n', 0),
(13135, 2, '	 int rows = 5;\r\n', 2),
(13136, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(13137, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(13138, 5, '	 System.out.print(j + " "); \r\n', 0),
(13139, 6, '	 } \r\n', 0),
(13140, 7, '	 System.out.println(""); \r\n', 0),
(13141, 8, ' 	} \r\n', 0),
(13142, 9, ' 	} \r\n', 0),
(13143, 10, '} ', 0),
(13144, 0, 'import java.util.Scanner;\r\n', 0),
(13145, 1, ' class Years{\r\n', 0),
(13146, 2, '   public int getYear(){\r\n', 0),
(13147, 3, '	int year;\r\n', 2),
(13148, 4, '	String enteredYear;\r\n', 2),
(13149, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(13150, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(13151, 7, '	enteredYear = sc.next();\r\n', 0),
(13152, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(13153, 9, '	return year;\r\n', 0),
(13154, 10, '   }\r\n', 0),
(13155, 11, ' }\r\n', 0),
(13156, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13157, 13, ' class Months extends Years{\r\n', 0),
(13158, 14, '   public int getMonth(){\r\n', 0),
(13159, 15, '	int month;\r\n', 2),
(13160, 16, '	String enteredMonthNumber;\r\n', 2),
(13161, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(13162, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(13163, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(13164, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(13165, 21, '	return month;\r\n', 0),
(13166, 22, '   }\r\n', 0),
(13167, 23, ' }\r\n', 0),
(13168, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13169, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(13170, 26, ' static int numDays = 0;\r\n', 4),
(13171, 27, ' public static void main(String[] args) {\r\n', 0),
(13172, 28, '   int year;\r\n', 2),
(13173, 29, '   Months m = new Months();\r\n', 0),
(13174, 30, '   int month = m.getMonth();\r\n', 0),
(13175, 31, '   \r\n', 0),
(13176, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(13177, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(13178, 34, '   }\r\n', 0),
(13179, 35, '   else {\r\n', 0),
(13180, 36, '    switch (month) {\r\n', 0),
(13181, 37, '      case 1:\r\n', 0),
(13182, 38, '      case 3:\r\n', 0),
(13183, 39, '      case 5:\r\n', 0),
(13184, 40, '      case 7:\r\n', 0),
(13185, 41, '      case 8:\r\n', 0),
(13186, 42, '      case 10:\r\n', 0),
(13187, 43, '      case 12:\r\n', 0),
(13188, 44, '        numDays = 31;\r\n', 0),
(13189, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(13190, 46, '        break;\r\n', 0),
(13191, 47, '      case 4:\r\n', 0),
(13192, 48, '      case 6:\r\n', 0),
(13193, 49, '      case 9:\r\n', 0),
(13194, 50, '      case 11:\r\n', 0),
(13195, 51, '       numDays = 30;\r\n', 0),
(13196, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(13197, 53, '       break;\r\n', 0),
(13198, 54, '      case 2:\r\n', 0),
(13199, 55, '       year = m.getYear();\r\n', 0),
(13200, 56, '       if(year < 1) {\r\n', 0),
(13201, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(13202, 58, '       }\r\n', 0),
(13203, 59, '       else{\r\n', 0),
(13204, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(13205, 61, '         numDays = 29;\r\n', 0),
(13206, 62, '		 if(year > 2020){\r\n', 0),
(13207, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(13208, 64, '         }\r\n', 0),
(13209, 65, '         else{\r\n', 0),
(13210, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(13211, 67, '         }\r\n', 0),
(13212, 68, '        }//if at line 61\r\n', 0),
(13213, 69, '        else{\r\n', 0),
(13214, 70, '         numDays = 28;\r\n', 0),
(13215, 71, '         if (year > 2020){\r\n', 0),
(13216, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(13217, 73, '         }\r\n', 0),
(13218, 74, '         else{\r\n', 0),
(13219, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(13220, 76, '         }\r\n', 0),
(13221, 77, '         break;  \r\n', 0),
(13222, 78, '        }//else at line 70\r\n', 0),
(13223, 79, '       }//else at line 60\r\n', 0),
(13224, 80, '    }//switch at line 37\r\n', 0),
(13225, 81, '   }//else at line 36\r\n', 0),
(13226, 82, '  }//method\r\n', 0),
(13227, 83, ' }//class', 0),
(13228, 0, 'class HelloWorld { \r\n', 0),
(13229, 1, '	public static void main(String args[]) \r\n', 0),
(13230, 2, '	{ \r\n', 0),
(13231, 3, '		System.out.println("Hello World"); \r\n', 0),
(13232, 4, '	} \r\n', 0),
(13233, 5, '} \r\n', 0),
(13234, 0, 'import java.awt.event.*;\n', 0),
(13235, 1, 'import java.awt.*;\n', 0),
(13236, 2, '\n', 0),
(13237, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(13238, 4, '\n', 0),
(13239, 5, '    private int mx, my;\n', 4),
(13240, 6, '    private Dimension size;\n', 8),
(13241, 7, '    private int onaroll;\n', 2),
(13242, 8, '\n', 0),
(13243, 9, '    public void init() {\n', 0),
(13244, 10, '        onaroll = 0;\n', 0),
(13245, 11, '        setSize(500, 500);\n', 0),
(13246, 12, '        size = getSize();\n', 0),
(13247, 13, '        addMouseListener(this);\n', 0),
(13248, 14, '        addMouseMotionListener(this);\n', 0),
(13249, 15, '        addComponentListener(this);\n', 0),
(13250, 16, '    }\n', 0),
(13251, 17, '\n', 0),
(13252, 18, '    public void update(Graphics g) {\n', 0),
(13253, 19, '        Dimension newSize = getSize();\n', 8),
(13254, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(13255, 21, '            g.setColor(getBackground());\n', 0),
(13256, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(13257, 23, '        } else {\n', 0),
(13258, 24, '            size = newSize;\n', 0),
(13259, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(13260, 26, '        } // Calculate new position\n', 0),
(13261, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(13262, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(13263, 29, '        paint(g);\n', 0),
(13264, 30, '    }\n', 0),
(13265, 31, '  \n', 0),
(13266, 32, '    public void paint(Graphics g) {\n', 0),
(13267, 33, '        g.setColor(Color.black);\n', 0),
(13268, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(13269, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(13270, 36, '    }\n', 0),
(13271, 37, '\n', 0),
(13272, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(13273, 39, '\n', 0),
(13274, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(13275, 41, '        e.consume();\n', 0),
(13276, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(13277, 43, '            repaint();\n', 0),
(13278, 44, '        }\n', 0),
(13279, 45, '    }\n', 0),
(13280, 46, '\n', 0),
(13281, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(13282, 48, '        int x = e.getX();\n', 0),
(13283, 49, '        int y = e.getY();\n', 0),
(13284, 50, '        e.consume();\n', 0),
(13285, 51, '        requestFocus();\n', 0),
(13286, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(13287, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(13288, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(13289, 55, '                case 0:\n', 0),
(13290, 56, '                    play(getCodeBase(), \n', 0),
(13291, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(13292, 58, '                    break;\n', 0),
(13293, 59, '                case 1:\n', 0),
(13294, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(13295, 61, '                    break;\n', 0),
(13296, 62, '                case 2:\n', 0),
(13297, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(13298, 64, '                    break;\n', 0),
(13299, 65, '                case 3:\n', 0),
(13300, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(13301, 67, '                    break;\n', 0),
(13302, 68, '                }\n', 0),
(13303, 69, '                onaroll++;\n', 0),
(13304, 70, '                if (onaroll > 5) {\n', 0),
(13305, 72, '                } else {\n', 0),
(13306, 74, '                }\n', 0),
(13307, 75, '            } else {   //first hit\n', 0),
(13308, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(13309, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(13310, 78, '                onaroll = 1;\n', 0),
(13311, 79, '            }\n', 0),
(13312, 80, '        } else {   //miss\n', 0),
(13313, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(13314, 82, '			\n', 0),
(13315, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(13316, 84, '            onaroll = 0;\n', 0),
(13317, 85, '        }\n', 0),
(13318, 86, '        repaint();\n', 0),
(13319, 87, '    }\n', 0),
(13320, 88, '\n', 0),
(13321, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(13322, 90, '\n', 0),
(13323, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(13324, 92, '        repaint();\n', 0),
(13325, 93, '    }\n', 0),
(13326, 94, '\n', 0),
(13327, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(13328, 96, '        repaint();\n', 0),
(13329, 97, '    }\n', 0),
(13330, 98, '\n', 0),
(13331, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(13332, 100, '\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(13333, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(13334, 102, ' \n', 0),
(13335, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(13336, 104, ' \n', 0),
(13337, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(13338, 106, '        repaint();\n', 0),
(13339, 107, '    }\n', 0),
(13340, 108, ' \n', 0),
(13341, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(13342, 110, '        repaint();\n', 0),
(13343, 111, '    }\n', 0),
(13344, 112, '  \n', 0),
(13345, 113, '    public void destroy() {\n', 0),
(13346, 114, '        removeMouseListener(this);\n', 0),
(13347, 115, '        removeMouseMotionListener(this);\n', 0),
(13348, 116, '    }\n', 0),
(13349, 117, '\n', 0),
(13350, 118, '    public String getAppletInfo() {\n', 0),
(13351, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(13352, 120, '    }\n', 0),
(13353, 121, '}\n', 0),
(13354, 0, 'import java.awt.event.*;\n', 0),
(13355, 1, 'import java.awt.*;\n', 0),
(13356, 2, '\n', 0),
(13357, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(13358, 4, '\n', 0),
(13359, 5, '    private int mx, my;\n', 4),
(13360, 6, '    private Dimension size;\n', 8),
(13361, 7, '    private int onaroll;\n', 2),
(13362, 8, '\n', 0),
(13363, 9, '    public void init() {\n', 0),
(13364, 10, '        onaroll = 0;\n', 0),
(13365, 11, '        setSize(500, 500);\n', 0),
(13366, 12, '        size = getSize();\n', 0),
(13367, 13, '        addMouseListener(this);\n', 0),
(13368, 14, '        addMouseMotionListener(this);\n', 0),
(13369, 15, '        addComponentListener(this);\n', 0),
(13370, 16, '    }\n', 0),
(13371, 17, '\n', 0),
(13372, 18, '    public void update(Graphics g) {\n', 0),
(13373, 19, '        Dimension newSize = getSize();\n', 8),
(13374, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(13375, 21, '            g.setColor(getBackground());\n', 0),
(13376, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(13377, 23, '        } else {\n', 0),
(13378, 24, '            size = newSize;\n', 0),
(13379, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(13380, 26, '        } // Calculate new position\n', 0),
(13381, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(13382, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(13383, 29, '        paint(g);\n', 0),
(13384, 30, '    }\n', 0),
(13385, 31, '  \n', 0),
(13386, 32, '    public void paint(Graphics g) {\n', 0),
(13387, 33, '        g.setColor(Color.black);\n', 0),
(13388, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(13389, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(13390, 36, '    }\n', 0),
(13391, 37, '\n', 0),
(13392, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(13393, 39, '\n', 0),
(13394, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(13395, 41, '        e.consume();\n', 0),
(13396, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(13397, 43, '            repaint();\n', 0),
(13398, 44, '        }\n', 0),
(13399, 45, '    }\n', 0),
(13400, 46, '\n', 0),
(13401, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(13402, 48, '        int x = e.getX();\n', 0),
(13403, 49, '        int y = e.getY();\n', 0),
(13404, 50, '        e.consume();\n', 0),
(13405, 51, '        requestFocus();\n', 0),
(13406, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(13407, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(13408, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(13409, 55, '                case 0:\n', 0),
(13410, 56, '                    play(getCodeBase(), \n', 0),
(13411, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(13412, 58, '                    break;\n', 0),
(13413, 59, '                case 1:\n', 0),
(13414, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(13415, 61, '                    break;\n', 0),
(13416, 62, '                case 2:\n', 0),
(13417, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(13418, 64, '                    break;\n', 0),
(13419, 65, '                case 3:\n', 0),
(13420, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(13421, 67, '                    break;\n', 0),
(13422, 68, '                }\n', 0),
(13423, 69, '                onaroll++;\n', 0),
(13424, 70, '                if (onaroll > 5) {\n', 0),
(13425, 72, '                } else {\n', 0),
(13426, 74, '                }\n', 0),
(13427, 75, '            } else {   //first hit\n', 0),
(13428, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(13429, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(13430, 78, '                onaroll = 1;\n', 0),
(13431, 79, '            }\n', 0),
(13432, 80, '        } else {   //miss\n', 0),
(13433, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(13434, 82, '			\n', 0),
(13435, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(13436, 84, '            onaroll = 0;\n', 0),
(13437, 85, '        }\n', 0),
(13438, 86, '        repaint();\n', 0),
(13439, 87, '    }\n', 0),
(13440, 88, '\n', 0),
(13441, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(13442, 90, '\n', 0),
(13443, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(13444, 92, '        repaint();\n', 0),
(13445, 93, '    }\n', 0),
(13446, 94, '\n', 0),
(13447, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(13448, 96, '        repaint();\n', 0),
(13449, 97, '    }\n', 0),
(13450, 98, '\n', 0),
(13451, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(13452, 100, '\n', 0),
(13453, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(13454, 102, ' \n', 0),
(13455, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(13456, 104, ' \n', 0),
(13457, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(13458, 106, '        repaint();\n', 0),
(13459, 107, '    }\n', 0),
(13460, 108, ' \n', 0),
(13461, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(13462, 110, '        repaint();\n', 0),
(13463, 111, '    }\n', 0),
(13464, 112, '  \n', 0),
(13465, 113, '    public void destroy() {\n', 0),
(13466, 114, '        removeMouseListener(this);\n', 0),
(13467, 115, '        removeMouseMotionListener(this);\n', 0),
(13468, 116, '    }\n', 0),
(13469, 117, '\n', 0),
(13470, 118, '    public String getAppletInfo() {\n', 0),
(13471, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(13472, 120, '    }\n', 0),
(13473, 121, '}\n', 0),
(13474, 0, 'import java.util.Scanner;\r\n', 0),
(13475, 1, ' class Years{\r\n', 0),
(13476, 2, '   public int getYear(){\r\n', 0),
(13477, 3, '	int year;\r\n', 2),
(13478, 4, '	String enteredYear;\r\n', 2),
(13479, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(13480, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(13481, 7, '	enteredYear = sc.next();\r\n', 0),
(13482, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(13483, 9, '	return year;\r\n', 0),
(13484, 10, '   }\r\n', 0),
(13485, 11, ' }\r\n', 0),
(13486, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13487, 13, ' class Months extends Years{\r\n', 0),
(13488, 14, '   public int getMonth(){\r\n', 0),
(13489, 15, '	int month;\r\n', 2),
(13490, 16, '	String enteredMonthNumber;\r\n', 2),
(13491, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(13492, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(13493, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(13494, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(13495, 21, '	return month;\r\n', 0),
(13496, 22, '   }\r\n', 0),
(13497, 23, ' }\r\n', 0),
(13498, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13499, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(13500, 26, ' static int numDays = 0;\r\n', 4),
(13501, 27, ' public static void main(String[] args) {\r\n', 0),
(13502, 28, '   int year;\r\n', 2),
(13503, 29, '   Months m = new Months();\r\n', 0),
(13504, 30, '   int month = m.getMonth();\r\n', 0),
(13505, 31, '   \r\n', 0),
(13506, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(13507, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(13508, 34, '   }\r\n', 0),
(13509, 35, '   else {\r\n', 0),
(13510, 36, '    switch (month) {\r\n', 0),
(13511, 37, '      case 1:\r\n', 0),
(13512, 38, '      case 3:\r\n', 0),
(13513, 39, '      case 5:\r\n', 0),
(13514, 40, '      case 7:\r\n', 0),
(13515, 41, '      case 8:\r\n', 0),
(13516, 42, '      case 10:\r\n', 0),
(13517, 43, '      case 12:\r\n', 0),
(13518, 44, '        numDays = 31;\r\n', 0),
(13519, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(13520, 46, '        break;\r\n', 0),
(13521, 47, '      case 4:\r\n', 0),
(13522, 48, '      case 6:\r\n', 0),
(13523, 49, '      case 9:\r\n', 0),
(13524, 50, '      case 11:\r\n', 0),
(13525, 51, '       numDays = 30;\r\n', 0),
(13526, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(13527, 53, '       break;\r\n', 0),
(13528, 54, '      case 2:\r\n', 0),
(13529, 55, '       year = m.getYear();\r\n', 0),
(13530, 56, '       if(year < 1) {\r\n', 0),
(13531, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(13532, 58, '       }\r\n', 0),
(13533, 59, '       else{\r\n', 0),
(13534, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(13535, 61, '         numDays = 29;\r\n', 0),
(13536, 62, '		 if(year > 2020){\r\n', 0),
(13537, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(13538, 64, '         }\r\n', 0),
(13539, 65, '         else{\r\n', 0),
(13540, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(13541, 67, '         }\r\n', 0),
(13542, 68, '        }//if at line 61\r\n', 0),
(13543, 69, '        else{\r\n', 0),
(13544, 70, '         numDays = 28;\r\n', 0),
(13545, 71, '         if (year > 2020){\r\n', 0),
(13546, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(13547, 73, '         }\r\n', 0),
(13548, 74, '         else{\r\n', 0),
(13549, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(13550, 76, '         }\r\n', 0),
(13551, 77, '         break;  \r\n', 0),
(13552, 78, '        }//else at line 70\r\n', 0),
(13553, 79, '       }//else at line 60\r\n', 0),
(13554, 80, '    }//switch at line 37\r\n', 0),
(13555, 81, '   }//else at line 36\r\n', 0),
(13556, 82, '  }//method\r\n', 0),
(13557, 83, ' }//class', 0),
(13558, 0, 'public class RecursionExample2 {  \r\n', 0),
(13559, 1, 'static int count=0;  \r\n', 4),
(13560, 2, 'public int p(){  \r\n', 0),
(13561, 3, 'count++;  \r\n', 0),
(13562, 4, 'if(count<=5){  \r\n', 0),
(13563, 5, 'System.out.println("hello "+count);  \r\n', 0),
(13564, 6, 'public int p();  \r\n', 0),
(13565, 7, '}  \r\n', 0),
(13566, 8, '}  \r\n', 0),
(13567, 9, 'public static void main(String[] args) {  \r\n', 0),
(13568, 10, 'p();  \r\n', 0),
(13569, 11, '}  \r\n', 0),
(13570, 12, '}  ', 0),
(13571, 0, 'import java.awt.event.*;\n', 0),
(13572, 1, 'import java.awt.*;\n', 0),
(13573, 2, '\n', 0),
(13574, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(13575, 4, '\n', 0),
(13576, 5, '    private int mx, my;\n', 4),
(13577, 6, '    private Dimension size;\n', 8),
(13578, 7, '    private int onaroll;\n', 2),
(13579, 8, '\n', 0),
(13580, 9, '    public void init() {\n', 0),
(13581, 10, '        onaroll = 0;\n', 0),
(13582, 11, '        setSize(500, 500);\n', 0),
(13583, 12, '        size = getSize();\n', 0),
(13584, 13, '        addMouseListener(this);\n', 0),
(13585, 14, '        addMouseMotionListener(this);\n', 0),
(13586, 15, '        addComponentListener(this);\n', 0),
(13587, 16, '    }\n', 0),
(13588, 17, '\n', 0),
(13589, 18, '    public void update(Graphics g) {\n', 0),
(13590, 19, '        Dimension newSize = getSize();\n', 8),
(13591, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(13592, 21, '            g.setColor(getBackground());\n', 0),
(13593, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(13594, 23, '        } else {\n', 0),
(13595, 24, '            size = newSize;\n', 0),
(13596, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(13597, 26, '        } // Calculate new position\n', 0),
(13598, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(13599, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(13600, 29, '        paint(g);\n', 0),
(13601, 30, '    }\n', 0),
(13602, 31, '  \n', 0),
(13603, 32, '    public void paint(Graphics g) {\n', 0),
(13604, 33, '        g.setColor(Color.black);\n', 0),
(13605, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(13606, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(13607, 36, '    }\n', 0),
(13608, 37, '\n', 0),
(13609, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(13610, 39, '\n', 0),
(13611, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(13612, 41, '        e.consume();\n', 0),
(13613, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(13614, 43, '            repaint();\n', 0),
(13615, 44, '        }\n', 0),
(13616, 45, '    }\n', 0),
(13617, 46, '\n', 0),
(13618, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(13619, 48, '        int x = e.getX();\n', 0),
(13620, 49, '        int y = e.getY();\n', 0),
(13621, 50, '        e.consume();\n', 0),
(13622, 51, '        requestFocus();\n', 0),
(13623, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(13624, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(13625, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(13626, 55, '                case 0:\n', 0),
(13627, 56, '                    play(getCodeBase(), \n', 0),
(13628, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(13629, 58, '                    break;\n', 0),
(13630, 59, '                case 1:\n', 0),
(13631, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(13632, 61, '                    break;\n', 0),
(13633, 62, '                case 2:\n', 0),
(13634, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(13635, 64, '                    break;\n', 0),
(13636, 65, '                case 3:\n', 0),
(13637, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(13638, 67, '                    break;\n', 0),
(13639, 68, '                }\n', 0),
(13640, 69, '                onaroll++;\n', 0),
(13641, 70, '                if (onaroll > 5) {\n', 0),
(13642, 72, '                } else {\n', 0),
(13643, 74, '                }\n', 0),
(13644, 75, '            } else {   //first hit\n', 0),
(13645, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(13646, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(13647, 78, '                onaroll = 1;\n', 0),
(13648, 79, '            }\n', 0),
(13649, 80, '        } else {   //miss\n', 0),
(13650, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(13651, 82, '			\n', 0),
(13652, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(13653, 84, '            onaroll = 0;\n', 0),
(13654, 85, '        }\n', 0),
(13655, 86, '        repaint();\n', 0),
(13656, 87, '    }\n', 0),
(13657, 88, '\n', 0),
(13658, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(13659, 90, '\n', 0),
(13660, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(13661, 92, '        repaint();\n', 0),
(13662, 93, '    }\n', 0),
(13663, 94, '\n', 0),
(13664, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(13665, 96, '        repaint();\n', 0),
(13666, 97, '    }\n', 0),
(13667, 98, '\n', 0),
(13668, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(13669, 100, '\n', 0),
(13670, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(13671, 102, ' \n', 0),
(13672, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(13673, 104, ' \n', 0),
(13674, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(13675, 106, '        repaint();\n', 0),
(13676, 107, '    }\n', 0),
(13677, 108, ' \n', 0),
(13678, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(13679, 110, '        repaint();\n', 0),
(13680, 111, '    }\n', 0),
(13681, 112, '  \n', 0),
(13682, 113, '    public void destroy() {\n', 0),
(13683, 114, '        removeMouseListener(this);\n', 0),
(13684, 115, '        removeMouseMotionListener(this);\n', 0),
(13685, 116, '    }\n', 0),
(13686, 117, '\n', 0),
(13687, 118, '    public String getAppletInfo() {\n', 0),
(13688, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(13689, 120, '    }\n', 0),
(13690, 121, '}\n', 0),
(13691, 0, 'import java.awt.event.*;\n', 0),
(13692, 1, 'import java.awt.*;\n', 0),
(13693, 2, '\n', 0),
(13694, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(13695, 4, '\n', 0),
(13696, 5, '    private int mx, my;\n', 4),
(13697, 6, '    private Dimension size;\n', 8),
(13698, 7, '    private int onaroll;\n', 2),
(13699, 8, '\n', 0),
(13700, 9, '    public void init() {\n', 0),
(13701, 10, '        onaroll = 0;\n', 0),
(13702, 11, '        setSize(500, 500);\n', 0),
(13703, 12, '        size = getSize();\n', 0),
(13704, 13, '        addMouseListener(this);\n', 0),
(13705, 14, '        addMouseMotionListener(this);\n', 0),
(13706, 15, '        addComponentListener(this);\n', 0),
(13707, 16, '    }\n', 0),
(13708, 17, '\n', 0),
(13709, 18, '    public void update(Graphics g) {\n', 0),
(13710, 19, '        Dimension newSize = getSize();\n', 8),
(13711, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(13712, 21, '            g.setColor(getBackground());\n', 0),
(13713, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(13714, 23, '        } else {\n', 0),
(13715, 24, '            size = newSize;\n', 0),
(13716, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(13717, 26, '        } // Calculate new position\n', 0),
(13718, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(13719, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(13720, 29, '        paint(g);\n', 0),
(13721, 30, '    }\n', 0),
(13722, 31, '  \n', 0),
(13723, 32, '    public void paint(Graphics g) {\n', 0),
(13724, 33, '        g.setColor(Color.black);\n', 0),
(13725, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(13726, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(13727, 36, '    }\n', 0),
(13728, 37, '\n', 0),
(13729, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(13730, 39, '\n', 0),
(13731, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(13732, 41, '        e.consume();\n', 0),
(13733, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(13734, 43, '            repaint();\n', 0),
(13735, 44, '        }\n', 0),
(13736, 45, '    }\n', 0),
(13737, 46, '\n', 0),
(13738, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(13739, 48, '        int x = e.getX();\n', 0),
(13740, 49, '        int y = e.getY();\n', 0),
(13741, 50, '        e.consume();\n', 0),
(13742, 51, '        requestFocus();\n', 0),
(13743, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(13744, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(13745, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(13746, 55, '                case 0:\n', 0),
(13747, 56, '                    play(getCodeBase(), \n', 0),
(13748, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(13749, 58, '                    break;\n', 0),
(13750, 59, '                case 1:\n', 0),
(13751, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(13752, 61, '                    break;\n', 0),
(13753, 62, '                case 2:\n', 0),
(13754, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(13755, 64, '                    break;\n', 0),
(13756, 65, '                case 3:\n', 0),
(13757, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(13758, 67, '                    break;\n', 0),
(13759, 68, '                }\n', 0),
(13760, 69, '                onaroll++;\n', 0),
(13761, 70, '                if (onaroll > 5) {\n', 0),
(13762, 72, '                } else {\n', 0),
(13763, 74, '                }\n', 0),
(13764, 75, '            } else {   //first hit\n', 0),
(13765, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(13766, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(13767, 78, '                onaroll = 1;\n', 0),
(13768, 79, '            }\n', 0),
(13769, 80, '        } else {   //miss\n', 0),
(13770, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(13771, 82, '			\n', 0),
(13772, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(13773, 84, '            onaroll = 0;\n', 0),
(13774, 85, '        }\n', 0),
(13775, 86, '        repaint();\n', 0),
(13776, 87, '    }\n', 0),
(13777, 88, '\n', 0),
(13778, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(13779, 90, '\n', 0),
(13780, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(13781, 92, '        repaint();\n', 0),
(13782, 93, '    }\n', 0),
(13783, 94, '\n', 0),
(13784, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(13785, 96, '        repaint();\n', 0),
(13786, 97, '    }\n', 0),
(13787, 98, '\n', 0),
(13788, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(13789, 100, '\n', 0),
(13790, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(13791, 102, ' \n', 0),
(13792, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(13793, 104, ' \n', 0),
(13794, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(13795, 106, '        repaint();\n', 0),
(13796, 107, '    }\n', 0),
(13797, 108, ' \n', 0),
(13798, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(13799, 110, '        repaint();\n', 0),
(13800, 111, '    }\n', 0),
(13801, 112, '  \n', 0),
(13802, 113, '    public void destroy() {\n', 0),
(13803, 114, '        removeMouseListener(this);\n', 0),
(13804, 115, '        removeMouseMotionListener(this);\n', 0),
(13805, 116, '    }\n', 0),
(13806, 117, '\n', 0),
(13807, 118, '    public String getAppletInfo() {\n', 0),
(13808, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(13809, 120, '    }\n', 0),
(13810, 121, '}\n', 0),
(13811, 0, 'import java.util.Scanner;\r\n', 0),
(13812, 1, ' class Years{\r\n', 0),
(13813, 2, '   public int getYear(){\r\n', 0),
(13814, 3, '	int year;\r\n', 2),
(13815, 4, '	String enteredYear;\r\n', 2),
(13816, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(13817, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(13818, 7, '	enteredYear = sc.next();\r\n', 0),
(13819, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(13820, 9, '	return year;\r\n', 0),
(13821, 10, '   }\r\n', 0),
(13822, 11, ' }\r\n', 0),
(13823, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13824, 13, ' class Months extends Years{\r\n', 0),
(13825, 14, '   public int getMonth(){\r\n', 0),
(13826, 15, '	int month;\r\n', 2),
(13827, 16, '	String enteredMonthNumber;\r\n', 2),
(13828, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(13829, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(13830, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(13831, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(13832, 21, '	return month;\r\n', 0),
(13833, 22, '   }\r\n', 0),
(13834, 23, ' }\r\n', 0),
(13835, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13836, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(13837, 26, ' static int numDays = 0;\r\n', 4),
(13838, 27, ' public static void main(String[] args) {\r\n', 0),
(13839, 28, '   int year;\r\n', 2),
(13840, 29, '   Months m = new Months();\r\n', 0),
(13841, 30, '   int month = m.getMonth();\r\n', 0),
(13842, 31, '   \r\n', 0),
(13843, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(13844, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(13845, 34, '   }\r\n', 0),
(13846, 35, '   else {\r\n', 0),
(13847, 36, '    switch (month) {\r\n', 0),
(13848, 37, '      case 1:\r\n', 0),
(13849, 38, '      case 3:\r\n', 0),
(13850, 39, '      case 5:\r\n', 0),
(13851, 40, '      case 7:\r\n', 0),
(13852, 41, '      case 8:\r\n', 0),
(13853, 42, '      case 10:\r\n', 0),
(13854, 43, '      case 12:\r\n', 0),
(13855, 44, '        numDays = 31;\r\n', 0),
(13856, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(13857, 46, '        break;\r\n', 0),
(13858, 47, '      case 4:\r\n', 0),
(13859, 48, '      case 6:\r\n', 0),
(13860, 49, '      case 9:\r\n', 0),
(13861, 50, '      case 11:\r\n', 0),
(13862, 51, '       numDays = 30;\r\n', 0),
(13863, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(13864, 53, '       break;\r\n', 0),
(13865, 54, '      case 2:\r\n', 0),
(13866, 55, '       year = m.getYear();\r\n', 0),
(13867, 56, '       if(year < 1) {\r\n', 0),
(13868, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(13869, 58, '       }\r\n', 0),
(13870, 59, '       else{\r\n', 0),
(13871, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(13872, 61, '         numDays = 29;\r\n', 0),
(13873, 62, '		 if(year > 2020){\r\n', 0),
(13874, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(13875, 64, '         }\r\n', 0),
(13876, 65, '         else{\r\n', 0),
(13877, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(13878, 67, '         }\r\n', 0),
(13879, 68, '        }//if at line 61\r\n', 0),
(13880, 69, '        else{\r\n', 0),
(13881, 70, '         numDays = 28;\r\n', 0),
(13882, 71, '         if (year > 2020){\r\n', 0),
(13883, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(13884, 73, '         }\r\n', 0),
(13885, 74, '         else{\r\n', 0),
(13886, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(13887, 76, '         }\r\n', 0),
(13888, 77, '         break;  \r\n', 0),
(13889, 78, '        }//else at line 70\r\n', 0),
(13890, 79, '       }//else at line 60\r\n', 0),
(13891, 80, '    }//switch at line 37\r\n', 0),
(13892, 81, '   }//else at line 36\r\n', 0),
(13893, 82, '  }//method\r\n', 0),
(13894, 83, ' }//class', 0),
(13895, 0, 'class Pattern{ \r\n', 0),
(13896, 1, 'public static void main(String[] args) { \r\n', 0),
(13897, 2, '	 int rows = 5;\r\n', 2),
(13898, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(13899, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(13900, 5, '	 System.out.print(j + " "); \r\n', 0),
(13901, 6, '	 } \r\n', 0),
(13902, 7, '	 System.out.println(""); \r\n', 0),
(13903, 8, ' 	} \r\n', 0),
(13904, 9, ' 	} \r\n', 0),
(13905, 10, '} ', 0),
(13906, 0, 'import java.util.Scanner;\r\n', 0),
(13907, 1, ' class Years{\r\n', 0),
(13908, 2, '   public int getYear(){\r\n', 0),
(13909, 3, '	int year;\r\n', 2),
(13910, 4, '	String enteredYear;\r\n', 2),
(13911, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(13912, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(13913, 7, '	enteredYear = sc.next();\r\n', 0),
(13914, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(13915, 9, '	return year;\r\n', 0),
(13916, 10, '   }\r\n', 0),
(13917, 11, ' }\r\n', 0),
(13918, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13919, 13, ' class Months extends Years{\r\n', 0),
(13920, 14, '   public int getMonth(){\r\n', 0),
(13921, 15, '	int month;\r\n', 2),
(13922, 16, '	String enteredMonthNumber;\r\n', 2),
(13923, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(13924, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(13925, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(13926, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(13927, 21, '	return month;\r\n', 0),
(13928, 22, '   }\r\n', 0),
(13929, 23, ' }\r\n', 0),
(13930, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(13931, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(13932, 26, ' static int numDays = 0;\r\n', 4),
(13933, 27, ' public static void main(String[] args) {\r\n', 0),
(13934, 28, '   int year;\r\n', 2),
(13935, 29, '   Months m = new Months();\r\n', 0),
(13936, 30, '   int month = m.getMonth();\r\n', 0),
(13937, 31, '   \r\n', 0),
(13938, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(13939, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(13940, 34, '   }\r\n', 0),
(13941, 35, '   else {\r\n', 0),
(13942, 36, '    switch (month) {\r\n', 0),
(13943, 37, '      case 1:\r\n', 0),
(13944, 38, '      case 3:\r\n', 0),
(13945, 39, '      case 5:\r\n', 0),
(13946, 40, '      case 7:\r\n', 0),
(13947, 41, '      case 8:\r\n', 0),
(13948, 42, '      case 10:\r\n', 0),
(13949, 43, '      case 12:\r\n', 0),
(13950, 44, '        numDays = 31;\r\n', 0),
(13951, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(13952, 46, '        break;\r\n', 0),
(13953, 47, '      case 4:\r\n', 0),
(13954, 48, '      case 6:\r\n', 0),
(13955, 49, '      case 9:\r\n', 0),
(13956, 50, '      case 11:\r\n', 0),
(13957, 51, '       numDays = 30;\r\n', 0),
(13958, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(13959, 53, '       break;\r\n', 0),
(13960, 54, '      case 2:\r\n', 0),
(13961, 55, '       year = m.getYear();\r\n', 0),
(13962, 56, '       if(year < 1) {\r\n', 0),
(13963, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(13964, 58, '       }\r\n', 0),
(13965, 59, '       else{\r\n', 0),
(13966, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(13967, 61, '         numDays = 29;\r\n', 0),
(13968, 62, '		 if(year > 2020){\r\n', 0),
(13969, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(13970, 64, '         }\r\n', 0),
(13971, 65, '         else{\r\n', 0),
(13972, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(13973, 67, '         }\r\n', 0),
(13974, 68, '        }//if at line 61\r\n', 0),
(13975, 69, '        else{\r\n', 0),
(13976, 70, '         numDays = 28;\r\n', 0),
(13977, 71, '         if (year > 2020){\r\n', 0),
(13978, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(13979, 73, '         }\r\n', 0),
(13980, 74, '         else{\r\n', 0),
(13981, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(13982, 76, '         }\r\n', 0),
(13983, 77, '         break;  \r\n', 0),
(13984, 78, '        }//else at line 70\r\n', 0),
(13985, 79, '       }//else at line 60\r\n', 0),
(13986, 80, '    }//switch at line 37\r\n', 0),
(13987, 81, '   }//else at line 36\r\n', 0),
(13988, 82, '  }//method\r\n', 0),
(13989, 83, ' }//class', 0),
(13990, 0, 'class HelloWorld { \r\n', 0),
(13991, 1, '	public static void main(String args[]) \r\n', 0),
(13992, 2, '	{ \r\n', 0),
(13993, 3, '		System.out.println("Hello World"); \r\n', 0),
(13994, 4, '	} \r\n', 0),
(13995, 5, '} \r\n', 0),
(13996, 0, 'import java.awt.event.*;\n', 0),
(13997, 1, 'import java.awt.*;\n', 0),
(13998, 2, '\n', 0),
(13999, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(14000, 4, '\n', 0),
(14001, 5, '    private int mx, my;\n', 4),
(14002, 6, '    private Dimension size;\n', 8),
(14003, 7, '    private int onaroll;\n', 2),
(14004, 8, '\n', 0),
(14005, 9, '    public void init() {\n', 0),
(14006, 10, '        onaroll = 0;\n', 0),
(14007, 11, '        setSize(500, 500);\n', 0),
(14008, 12, '        size = getSize();\n', 0),
(14009, 13, '        addMouseListener(this);\n', 0),
(14010, 14, '        addMouseMotionListener(this);\n', 0),
(14011, 15, '        addComponentListener(this);\n', 0),
(14012, 16, '    }\n', 0),
(14013, 17, '\n', 0),
(14014, 18, '    public void update(Graphics g) {\n', 0),
(14015, 19, '        Dimension newSize = getSize();\n', 8),
(14016, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(14017, 21, '            g.setColor(getBackground());\n', 0),
(14018, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(14019, 23, '        } else {\n', 0),
(14020, 24, '            size = newSize;\n', 0),
(14021, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(14022, 26, '        } // Calculate new position\n', 0),
(14023, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(14024, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(14025, 29, '        paint(g);\n', 0),
(14026, 30, '    }\n', 0),
(14027, 31, '  \n', 0),
(14028, 32, '    public void paint(Graphics g) {\n', 0),
(14029, 33, '        g.setColor(Color.black);\n', 0),
(14030, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(14031, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(14032, 36, '    }\n', 0),
(14033, 37, '\n', 0),
(14034, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(14035, 39, '\n', 0),
(14036, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(14037, 41, '        e.consume();\n', 0),
(14038, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(14039, 43, '            repaint();\n', 0),
(14040, 44, '        }\n', 0),
(14041, 45, '    }\n', 0),
(14042, 46, '\n', 0),
(14043, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(14044, 48, '        int x = e.getX();\n', 0),
(14045, 49, '        int y = e.getY();\n', 0),
(14046, 50, '        e.consume();\n', 0),
(14047, 51, '        requestFocus();\n', 0),
(14048, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(14049, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(14050, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(14051, 55, '                case 0:\n', 0),
(14052, 56, '                    play(getCodeBase(), \n', 0),
(14053, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(14054, 58, '                    break;\n', 0),
(14055, 59, '                case 1:\n', 0),
(14056, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(14057, 61, '                    break;\n', 0),
(14058, 62, '                case 2:\n', 0),
(14059, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(14060, 64, '                    break;\n', 0),
(14061, 65, '                case 3:\n', 0),
(14062, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(14063, 67, '                    break;\n', 0),
(14064, 68, '                }\n', 0),
(14065, 69, '                onaroll++;\n', 0),
(14066, 70, '                if (onaroll > 5) {\n', 0),
(14067, 72, '                } else {\n', 0),
(14068, 74, '                }\n', 0),
(14069, 75, '            } else {   //first hit\n', 0),
(14070, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(14071, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(14072, 78, '                onaroll = 1;\n', 0),
(14073, 79, '            }\n', 0),
(14074, 80, '        } else {   //miss\n', 0),
(14075, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(14076, 82, '			\n', 0),
(14077, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(14078, 84, '            onaroll = 0;\n', 0),
(14079, 85, '        }\n', 0),
(14080, 86, '        repaint();\n', 0),
(14081, 87, '    }\n', 0),
(14082, 88, '\n', 0),
(14083, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(14084, 90, '\n', 0),
(14085, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(14086, 92, '        repaint();\n', 0),
(14087, 93, '    }\n', 0),
(14088, 94, '\n', 0),
(14089, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(14090, 96, '        repaint();\n', 0),
(14091, 97, '    }\n', 0),
(14092, 98, '\n', 0),
(14093, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(14094, 100, '\n', 0),
(14095, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(14096, 102, ' \n', 0),
(14097, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(14098, 104, ' \n', 0),
(14099, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(14100, 106, '        repaint();\n', 0),
(14101, 107, '    }\n', 0),
(14102, 108, ' \n', 0),
(14103, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(14104, 110, '        repaint();\n', 0),
(14105, 111, '    }\n', 0),
(14106, 112, '  \n', 0),
(14107, 113, '    public void destroy() {\n', 0),
(14108, 114, '        removeMouseListener(this);\n', 0),
(14109, 115, '        removeMouseMotionListener(this);\n', 0),
(14110, 116, '    }\n', 0),
(14111, 117, '\n', 0),
(14112, 118, '    public String getAppletInfo() {\n', 0),
(14113, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(14114, 120, '    }\n', 0),
(14115, 121, '}\n', 0),
(14116, 0, 'import java.awt.event.*;\n', 0),
(14117, 1, 'import java.awt.*;\n', 0),
(14118, 2, '\n', 0),
(14119, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(14120, 4, '\n', 0),
(14121, 5, '    private int mx, my;\n', 4),
(14122, 6, '    private Dimension size;\n', 8),
(14123, 7, '    private int onaroll;\n', 2),
(14124, 8, '\n', 0),
(14125, 9, '    public void init() {\n', 0),
(14126, 10, '        onaroll = 0;\n', 0),
(14127, 11, '        setSize(500, 500);\n', 0),
(14128, 12, '        size = getSize();\n', 0),
(14129, 13, '        addMouseListener(this);\n', 0),
(14130, 14, '        addMouseMotionListener(this);\n', 0),
(14131, 15, '        addComponentListener(this);\n', 0),
(14132, 16, '    }\n', 0),
(14133, 17, '\n', 0),
(14134, 18, '    public void update(Graphics g) {\n', 0),
(14135, 19, '        Dimension newSize = getSize();\n', 8),
(14136, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(14137, 21, '            g.setColor(getBackground());\n', 0),
(14138, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(14139, 23, '        } else {\n', 0),
(14140, 24, '            size = newSize;\n', 0),
(14141, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(14142, 26, '        } // Calculate new position\n', 0),
(14143, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(14144, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(14145, 29, '        paint(g);\n', 0),
(14146, 30, '    }\n', 0),
(14147, 31, '  \n', 0),
(14148, 32, '    public void paint(Graphics g) {\n', 0),
(14149, 33, '        g.setColor(Color.black);\n', 0),
(14150, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(14151, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(14152, 36, '    }\n', 0),
(14153, 37, '\n', 0),
(14154, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(14155, 39, '\n', 0),
(14156, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(14157, 41, '        e.consume();\n', 0),
(14158, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(14159, 43, '            repaint();\n', 0),
(14160, 44, '        }\n', 0),
(14161, 45, '    }\n', 0),
(14162, 46, '\n', 0),
(14163, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(14164, 48, '        int x = e.getX();\n', 0),
(14165, 49, '        int y = e.getY();\n', 0),
(14166, 50, '        e.consume();\n', 0),
(14167, 51, '        requestFocus();\n', 0),
(14168, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(14169, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(14170, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(14171, 55, '                case 0:\n', 0),
(14172, 56, '                    play(getCodeBase(), \n', 0),
(14173, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(14174, 58, '                    break;\n', 0),
(14175, 59, '                case 1:\n', 0),
(14176, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(14177, 61, '                    break;\n', 0),
(14178, 62, '                case 2:\n', 0),
(14179, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(14180, 64, '                    break;\n', 0),
(14181, 65, '                case 3:\n', 0),
(14182, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(14183, 67, '                    break;\n', 0),
(14184, 68, '                }\n', 0),
(14185, 69, '                onaroll++;\n', 0),
(14186, 70, '                if (onaroll > 5) {\n', 0),
(14187, 72, '                } else {\n', 0),
(14188, 74, '                }\n', 0),
(14189, 75, '            } else {   //first hit\n', 0),
(14190, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(14191, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(14192, 78, '                onaroll = 1;\n', 0),
(14193, 79, '            }\n', 0),
(14194, 80, '        } else {   //miss\n', 0),
(14195, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(14196, 82, '			\n', 0),
(14197, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(14198, 84, '            onaroll = 0;\n', 0),
(14199, 85, '        }\n', 0),
(14200, 86, '        repaint();\n', 0),
(14201, 87, '    }\n', 0),
(14202, 88, '\n', 0),
(14203, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(14204, 90, '\n', 0),
(14205, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(14206, 92, '        repaint();\n', 0),
(14207, 93, '    }\n', 0),
(14208, 94, '\n', 0),
(14209, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(14210, 96, '        repaint();\n', 0),
(14211, 97, '    }\n', 0),
(14212, 98, '\n', 0),
(14213, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(14214, 100, '\n', 0),
(14215, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(14216, 102, ' \n', 0),
(14217, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(14218, 104, ' \n', 0),
(14219, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(14220, 106, '        repaint();\n', 0),
(14221, 107, '    }\n', 0),
(14222, 108, ' \n', 0),
(14223, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(14224, 110, '        repaint();\n', 0),
(14225, 111, '    }\n', 0),
(14226, 112, '  \n', 0),
(14227, 113, '    public void destroy() {\n', 0),
(14228, 114, '        removeMouseListener(this);\n', 0),
(14229, 115, '        removeMouseMotionListener(this);\n', 0),
(14230, 116, '    }\n', 0),
(14231, 117, '\n', 0),
(14232, 118, '    public String getAppletInfo() {\n', 0),
(14233, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(14234, 120, '    }\n', 0),
(14235, 121, '}\n', 0),
(14236, 0, 'import java.util.Scanner;\r\n', 0),
(14237, 1, ' class Years{\r\n', 0),
(14238, 2, '   public int getYear(){\r\n', 0),
(14239, 3, '	int year;\r\n', 2),
(14240, 4, '	String enteredYear;\r\n', 2),
(14241, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(14242, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(14243, 7, '	enteredYear = sc.next();\r\n', 0),
(14244, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(14245, 9, '	return year;\r\n', 0),
(14246, 10, '   }\r\n', 0),
(14247, 11, ' }\r\n', 0),
(14248, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(14249, 13, ' class Months extends Years{\r\n', 0),
(14250, 14, '   public int getMonth(){\r\n', 0),
(14251, 15, '	int month;\r\n', 2),
(14252, 16, '	String enteredMonthNumber;\r\n', 2),
(14253, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(14254, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(14255, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(14256, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(14257, 21, '	return month;\r\n', 0),
(14258, 22, '   }\r\n', 0),
(14259, 23, ' }\r\n', 0),
(14260, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(14261, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(14262, 26, ' static int numDays = 0;\r\n', 4),
(14263, 27, ' public static void main(String[] args) {\r\n', 0),
(14264, 28, '   int year;\r\n', 2),
(14265, 29, '   Months m = new Months();\r\n', 0),
(14266, 30, '   int month = m.getMonth();\r\n', 0),
(14267, 31, '   \r\n', 0),
(14268, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(14269, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(14270, 34, '   }\r\n', 0),
(14271, 35, '   else {\r\n', 0),
(14272, 36, '    switch (month) {\r\n', 0),
(14273, 37, '      case 1:\r\n', 0),
(14274, 38, '      case 3:\r\n', 0),
(14275, 39, '      case 5:\r\n', 0),
(14276, 40, '      case 7:\r\n', 0),
(14277, 41, '      case 8:\r\n', 0),
(14278, 42, '      case 10:\r\n', 0),
(14279, 43, '      case 12:\r\n', 0),
(14280, 44, '        numDays = 31;\r\n', 0),
(14281, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(14282, 46, '        break;\r\n', 0),
(14283, 47, '      case 4:\r\n', 0),
(14284, 48, '      case 6:\r\n', 0),
(14285, 49, '      case 9:\r\n', 0),
(14286, 50, '      case 11:\r\n', 0),
(14287, 51, '       numDays = 30;\r\n', 0),
(14288, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(14289, 53, '       break;\r\n', 0),
(14290, 54, '      case 2:\r\n', 0),
(14291, 55, '       year = m.getYear();\r\n', 0),
(14292, 56, '       if(year < 1) {\r\n', 0),
(14293, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(14294, 58, '       }\r\n', 0),
(14295, 59, '       else{\r\n', 0),
(14296, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(14297, 61, '         numDays = 29;\r\n', 0),
(14298, 62, '		 if(year > 2020){\r\n', 0),
(14299, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(14300, 64, '         }\r\n', 0),
(14301, 65, '         else{\r\n', 0),
(14302, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(14303, 67, '         }\r\n', 0),
(14304, 68, '        }//if at line 61\r\n', 0),
(14305, 69, '        else{\r\n', 0),
(14306, 70, '         numDays = 28;\r\n', 0),
(14307, 71, '         if (year > 2020){\r\n', 0),
(14308, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(14309, 73, '         }\r\n', 0),
(14310, 74, '         else{\r\n', 0),
(14311, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(14312, 76, '         }\r\n', 0),
(14313, 77, '         break;  \r\n', 0),
(14314, 78, '        }//else at line 70\r\n', 0),
(14315, 79, '       }//else at line 60\r\n', 0),
(14316, 80, '    }//switch at line 37\r\n', 0),
(14317, 81, '   }//else at line 36\r\n', 0),
(14318, 82, '  }//method\r\n', 0),
(14319, 83, ' }//class', 0),
(14320, 0, 'public class RecursionExample2 {  \r\n', 0),
(14321, 1, 'static int count=0;  \r\n', 4),
(14322, 2, 'public int p(){  \r\n', 0),
(14323, 3, 'count++;  \r\n', 0),
(14324, 4, 'if(count<=5){  \r\n', 0),
(14325, 5, 'System.out.println("hello "+count);  \r\n', 0),
(14326, 6, 'public int p();  \r\n', 0),
(14327, 7, '}  \r\n', 0),
(14328, 8, '}  \r\n', 0),
(14329, 9, 'public static void main(String[] args) {  \r\n', 0),
(14330, 10, 'p();  \r\n', 0),
(14331, 11, '}  \r\n', 0),
(14332, 12, '}  ', 0),
(14333, 0, 'import java.awt.event.*;\n', 0),
(14334, 1, 'import java.awt.*;\n', 0),
(14335, 2, '\n', 0),
(14336, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(14337, 4, '\n', 0),
(14338, 5, '    private int mx, my;\n', 4),
(14339, 6, '    private Dimension size;\n', 8),
(14340, 7, '    private int onaroll;\n', 2),
(14341, 8, '\n', 0),
(14342, 9, '    public void init() {\n', 0),
(14343, 10, '        onaroll = 0;\n', 0),
(14344, 11, '        setSize(500, 500);\n', 0),
(14345, 12, '        size = getSize();\n', 0),
(14346, 13, '        addMouseListener(this);\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(14347, 14, '        addMouseMotionListener(this);\n', 0),
(14348, 15, '        addComponentListener(this);\n', 0),
(14349, 16, '    }\n', 0),
(14350, 17, '\n', 0),
(14351, 18, '    public void update(Graphics g) {\n', 0),
(14352, 19, '        Dimension newSize = getSize();\n', 8),
(14353, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(14354, 21, '            g.setColor(getBackground());\n', 0),
(14355, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(14356, 23, '        } else {\n', 0),
(14357, 24, '            size = newSize;\n', 0),
(14358, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(14359, 26, '        } // Calculate new position\n', 0),
(14360, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(14361, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(14362, 29, '        paint(g);\n', 0),
(14363, 30, '    }\n', 0),
(14364, 31, '  \n', 0),
(14365, 32, '    public void paint(Graphics g) {\n', 0),
(14366, 33, '        g.setColor(Color.black);\n', 0),
(14367, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(14368, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(14369, 36, '    }\n', 0),
(14370, 37, '\n', 0),
(14371, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(14372, 39, '\n', 0),
(14373, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(14374, 41, '        e.consume();\n', 0),
(14375, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(14376, 43, '            repaint();\n', 0),
(14377, 44, '        }\n', 0),
(14378, 45, '    }\n', 0),
(14379, 46, '\n', 0),
(14380, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(14381, 48, '        int x = e.getX();\n', 0),
(14382, 49, '        int y = e.getY();\n', 0),
(14383, 50, '        e.consume();\n', 0),
(14384, 51, '        requestFocus();\n', 0),
(14385, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(14386, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(14387, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(14388, 55, '                case 0:\n', 0),
(14389, 56, '                    play(getCodeBase(), \n', 0),
(14390, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(14391, 58, '                    break;\n', 0),
(14392, 59, '                case 1:\n', 0),
(14393, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(14394, 61, '                    break;\n', 0),
(14395, 62, '                case 2:\n', 0),
(14396, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(14397, 64, '                    break;\n', 0),
(14398, 65, '                case 3:\n', 0),
(14399, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(14400, 67, '                    break;\n', 0),
(14401, 68, '                }\n', 0),
(14402, 69, '                onaroll++;\n', 0),
(14403, 70, '                if (onaroll > 5) {\n', 0),
(14404, 72, '                } else {\n', 0),
(14405, 74, '                }\n', 0),
(14406, 75, '            } else {   //first hit\n', 0),
(14407, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(14408, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(14409, 78, '                onaroll = 1;\n', 0),
(14410, 79, '            }\n', 0),
(14411, 80, '        } else {   //miss\n', 0),
(14412, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(14413, 82, '			\n', 0),
(14414, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(14415, 84, '            onaroll = 0;\n', 0),
(14416, 85, '        }\n', 0),
(14417, 86, '        repaint();\n', 0),
(14418, 87, '    }\n', 0),
(14419, 88, '\n', 0),
(14420, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(14421, 90, '\n', 0),
(14422, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(14423, 92, '        repaint();\n', 0),
(14424, 93, '    }\n', 0),
(14425, 94, '\n', 0),
(14426, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(14427, 96, '        repaint();\n', 0),
(14428, 97, '    }\n', 0),
(14429, 98, '\n', 0),
(14430, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(14431, 100, '\n', 0),
(14432, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(14433, 102, ' \n', 0),
(14434, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(14435, 104, ' \n', 0),
(14436, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(14437, 106, '        repaint();\n', 0),
(14438, 107, '    }\n', 0),
(14439, 108, ' \n', 0),
(14440, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(14441, 110, '        repaint();\n', 0),
(14442, 111, '    }\n', 0),
(14443, 112, '  \n', 0),
(14444, 113, '    public void destroy() {\n', 0),
(14445, 114, '        removeMouseListener(this);\n', 0),
(14446, 115, '        removeMouseMotionListener(this);\n', 0),
(14447, 116, '    }\n', 0),
(14448, 117, '\n', 0),
(14449, 118, '    public String getAppletInfo() {\n', 0),
(14450, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(14451, 120, '    }\n', 0),
(14452, 121, '}\n', 0),
(14453, 0, 'import java.awt.event.*;\n', 0),
(14454, 1, 'import java.awt.*;\n', 0),
(14455, 2, '\n', 0),
(14456, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(14457, 4, '\n', 0),
(14458, 5, '    private int mx, my;\n', 4),
(14459, 6, '    private Dimension size;\n', 8),
(14460, 7, '    private int onaroll;\n', 2),
(14461, 8, '\n', 0),
(14462, 9, '    public void init() {\n', 0),
(14463, 10, '        onaroll = 0;\n', 0),
(14464, 11, '        setSize(500, 500);\n', 0),
(14465, 12, '        size = getSize();\n', 0),
(14466, 13, '        addMouseListener(this);\n', 0),
(14467, 14, '        addMouseMotionListener(this);\n', 0),
(14468, 15, '        addComponentListener(this);\n', 0),
(14469, 16, '    }\n', 0),
(14470, 17, '\n', 0),
(14471, 18, '    public void update(Graphics g) {\n', 0),
(14472, 19, '        Dimension newSize = getSize();\n', 8),
(14473, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(14474, 21, '            g.setColor(getBackground());\n', 0),
(14475, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(14476, 23, '        } else {\n', 0),
(14477, 24, '            size = newSize;\n', 0),
(14478, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(14479, 26, '        } // Calculate new position\n', 0),
(14480, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(14481, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(14482, 29, '        paint(g);\n', 0),
(14483, 30, '    }\n', 0),
(14484, 31, '  \n', 0),
(14485, 32, '    public void paint(Graphics g) {\n', 0),
(14486, 33, '        g.setColor(Color.black);\n', 0),
(14487, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(14488, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(14489, 36, '    }\n', 0),
(14490, 37, '\n', 0),
(14491, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(14492, 39, '\n', 0),
(14493, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(14494, 41, '        e.consume();\n', 0),
(14495, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(14496, 43, '            repaint();\n', 0),
(14497, 44, '        }\n', 0),
(14498, 45, '    }\n', 0),
(14499, 46, '\n', 0),
(14500, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(14501, 48, '        int x = e.getX();\n', 0),
(14502, 49, '        int y = e.getY();\n', 0),
(14503, 50, '        e.consume();\n', 0),
(14504, 51, '        requestFocus();\n', 0),
(14505, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(14506, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(14507, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(14508, 55, '                case 0:\n', 0),
(14509, 56, '                    play(getCodeBase(), \n', 0),
(14510, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(14511, 58, '                    break;\n', 0),
(14512, 59, '                case 1:\n', 0),
(14513, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(14514, 61, '                    break;\n', 0),
(14515, 62, '                case 2:\n', 0),
(14516, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(14517, 64, '                    break;\n', 0),
(14518, 65, '                case 3:\n', 0),
(14519, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(14520, 67, '                    break;\n', 0),
(14521, 68, '                }\n', 0),
(14522, 69, '                onaroll++;\n', 0),
(14523, 70, '                if (onaroll > 5) {\n', 0),
(14524, 72, '                } else {\n', 0),
(14525, 74, '                }\n', 0),
(14526, 75, '            } else {   //first hit\n', 0),
(14527, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(14528, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(14529, 78, '                onaroll = 1;\n', 0),
(14530, 79, '            }\n', 0),
(14531, 80, '        } else {   //miss\n', 0),
(14532, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(14533, 82, '			\n', 0),
(14534, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(14535, 84, '            onaroll = 0;\n', 0),
(14536, 85, '        }\n', 0),
(14537, 86, '        repaint();\n', 0),
(14538, 87, '    }\n', 0),
(14539, 88, '\n', 0),
(14540, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(14541, 90, '\n', 0),
(14542, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(14543, 92, '        repaint();\n', 0),
(14544, 93, '    }\n', 0),
(14545, 94, '\n', 0),
(14546, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(14547, 96, '        repaint();\n', 0),
(14548, 97, '    }\n', 0),
(14549, 98, '\n', 0),
(14550, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(14551, 100, '\n', 0),
(14552, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(14553, 102, ' \n', 0),
(14554, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(14555, 104, ' \n', 0),
(14556, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(14557, 106, '        repaint();\n', 0),
(14558, 107, '    }\n', 0),
(14559, 108, ' \n', 0),
(14560, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(14561, 110, '        repaint();\n', 0),
(14562, 111, '    }\n', 0),
(14563, 112, '  \n', 0),
(14564, 113, '    public void destroy() {\n', 0),
(14565, 114, '        removeMouseListener(this);\n', 0),
(14566, 115, '        removeMouseMotionListener(this);\n', 0),
(14567, 116, '    }\n', 0),
(14568, 117, '\n', 0),
(14569, 118, '    public String getAppletInfo() {\n', 0),
(14570, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(14571, 120, '    }\n', 0),
(14572, 121, '}\n', 0),
(14573, 0, 'import java.util.Scanner;\r\n', 0),
(14574, 1, ' class Years{\r\n', 0),
(14575, 2, '   public int getYear(){\r\n', 0),
(14576, 3, '	int year;\r\n', 2),
(14577, 4, '	String enteredYear;\r\n', 2),
(14578, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(14579, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(14580, 7, '	enteredYear = sc.next();\r\n', 0),
(14581, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(14582, 9, '	return year;\r\n', 0),
(14583, 10, '   }\r\n', 0),
(14584, 11, ' }\r\n', 0),
(14585, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(14586, 13, ' class Months extends Years{\r\n', 0),
(14587, 14, '   public int getMonth(){\r\n', 0),
(14588, 15, '	int month;\r\n', 2),
(14589, 16, '	String enteredMonthNumber;\r\n', 2),
(14590, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(14591, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(14592, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(14593, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(14594, 21, '	return month;\r\n', 0),
(14595, 22, '   }\r\n', 0),
(14596, 23, ' }\r\n', 0),
(14597, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(14598, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(14599, 26, ' static int numDays = 0;\r\n', 4),
(14600, 27, ' public static void main(String[] args) {\r\n', 0),
(14601, 28, '   int year;\r\n', 2),
(14602, 29, '   Months m = new Months();\r\n', 0),
(14603, 30, '   int month = m.getMonth();\r\n', 0),
(14604, 31, '   \r\n', 0),
(14605, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(14606, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(14607, 34, '   }\r\n', 0),
(14608, 35, '   else {\r\n', 0),
(14609, 36, '    switch (month) {\r\n', 0),
(14610, 37, '      case 1:\r\n', 0),
(14611, 38, '      case 3:\r\n', 0),
(14612, 39, '      case 5:\r\n', 0),
(14613, 40, '      case 7:\r\n', 0),
(14614, 41, '      case 8:\r\n', 0),
(14615, 42, '      case 10:\r\n', 0),
(14616, 43, '      case 12:\r\n', 0),
(14617, 44, '        numDays = 31;\r\n', 0),
(14618, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(14619, 46, '        break;\r\n', 0),
(14620, 47, '      case 4:\r\n', 0),
(14621, 48, '      case 6:\r\n', 0),
(14622, 49, '      case 9:\r\n', 0),
(14623, 50, '      case 11:\r\n', 0),
(14624, 51, '       numDays = 30;\r\n', 0),
(14625, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(14626, 53, '       break;\r\n', 0),
(14627, 54, '      case 2:\r\n', 0),
(14628, 55, '       year = m.getYear();\r\n', 0),
(14629, 56, '       if(year < 1) {\r\n', 0),
(14630, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(14631, 58, '       }\r\n', 0),
(14632, 59, '       else{\r\n', 0),
(14633, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(14634, 61, '         numDays = 29;\r\n', 0),
(14635, 62, '		 if(year > 2020){\r\n', 0),
(14636, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(14637, 64, '         }\r\n', 0),
(14638, 65, '         else{\r\n', 0),
(14639, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(14640, 67, '         }\r\n', 0),
(14641, 68, '        }//if at line 61\r\n', 0),
(14642, 69, '        else{\r\n', 0),
(14643, 70, '         numDays = 28;\r\n', 0),
(14644, 71, '         if (year > 2020){\r\n', 0),
(14645, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(14646, 73, '         }\r\n', 0),
(14647, 74, '         else{\r\n', 0),
(14648, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(14649, 76, '         }\r\n', 0),
(14650, 77, '         break;  \r\n', 0),
(14651, 78, '        }//else at line 70\r\n', 0),
(14652, 79, '       }//else at line 60\r\n', 0),
(14653, 80, '    }//switch at line 37\r\n', 0),
(14654, 81, '   }//else at line 36\r\n', 0),
(14655, 82, '  }//method\r\n', 0),
(14656, 83, ' }//class', 0),
(14657, 0, 'class Pattern{ \r\n', 0),
(14658, 1, 'public static void main(String[] args) { \r\n', 0),
(14659, 2, '	 int rows = 5;\r\n', 2),
(14660, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(14661, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(14662, 5, '	 System.out.print(j + " "); \r\n', 0),
(14663, 6, '	 } \r\n', 0),
(14664, 7, '	 System.out.println(""); \r\n', 0),
(14665, 8, ' 	} \r\n', 0),
(14666, 9, ' 	} \r\n', 0),
(14667, 10, '} ', 0),
(14668, 0, 'import java.util.Scanner;\r\n', 0),
(14669, 1, ' class Years{\r\n', 0),
(14670, 2, '   public int getYear(){\r\n', 0),
(14671, 3, '	int year;\r\n', 2),
(14672, 4, '	String enteredYear;\r\n', 2),
(14673, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(14674, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(14675, 7, '	enteredYear = sc.next();\r\n', 0),
(14676, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(14677, 9, '	return year;\r\n', 0),
(14678, 10, '   }\r\n', 0),
(14679, 11, ' }\r\n', 0),
(14680, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(14681, 13, ' class Months extends Years{\r\n', 0),
(14682, 14, '   public int getMonth(){\r\n', 0),
(14683, 15, '	int month;\r\n', 2),
(14684, 16, '	String enteredMonthNumber;\r\n', 2),
(14685, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(14686, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(14687, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(14688, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(14689, 21, '	return month;\r\n', 0),
(14690, 22, '   }\r\n', 0),
(14691, 23, ' }\r\n', 0),
(14692, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(14693, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(14694, 26, ' static int numDays = 0;\r\n', 4),
(14695, 27, ' public static void main(String[] args) {\r\n', 0),
(14696, 28, '   int year;\r\n', 2),
(14697, 29, '   Months m = new Months();\r\n', 0),
(14698, 30, '   int month = m.getMonth();\r\n', 0),
(14699, 31, '   \r\n', 0),
(14700, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(14701, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(14702, 34, '   }\r\n', 0),
(14703, 35, '   else {\r\n', 0),
(14704, 36, '    switch (month) {\r\n', 0),
(14705, 37, '      case 1:\r\n', 0),
(14706, 38, '      case 3:\r\n', 0),
(14707, 39, '      case 5:\r\n', 0),
(14708, 40, '      case 7:\r\n', 0),
(14709, 41, '      case 8:\r\n', 0),
(14710, 42, '      case 10:\r\n', 0),
(14711, 43, '      case 12:\r\n', 0),
(14712, 44, '        numDays = 31;\r\n', 0),
(14713, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(14714, 46, '        break;\r\n', 0),
(14715, 47, '      case 4:\r\n', 0),
(14716, 48, '      case 6:\r\n', 0),
(14717, 49, '      case 9:\r\n', 0),
(14718, 50, '      case 11:\r\n', 0),
(14719, 51, '       numDays = 30;\r\n', 0),
(14720, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(14721, 53, '       break;\r\n', 0),
(14722, 54, '      case 2:\r\n', 0),
(14723, 55, '       year = m.getYear();\r\n', 0),
(14724, 56, '       if(year < 1) {\r\n', 0),
(14725, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(14726, 58, '       }\r\n', 0),
(14727, 59, '       else{\r\n', 0),
(14728, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(14729, 61, '         numDays = 29;\r\n', 0),
(14730, 62, '		 if(year > 2020){\r\n', 0),
(14731, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(14732, 64, '         }\r\n', 0),
(14733, 65, '         else{\r\n', 0),
(14734, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(14735, 67, '         }\r\n', 0),
(14736, 68, '        }//if at line 61\r\n', 0),
(14737, 69, '        else{\r\n', 0),
(14738, 70, '         numDays = 28;\r\n', 0),
(14739, 71, '         if (year > 2020){\r\n', 0),
(14740, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(14741, 73, '         }\r\n', 0),
(14742, 74, '         else{\r\n', 0),
(14743, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(14744, 76, '         }\r\n', 0),
(14745, 77, '         break;  \r\n', 0),
(14746, 78, '        }//else at line 70\r\n', 0),
(14747, 79, '       }//else at line 60\r\n', 0),
(14748, 80, '    }//switch at line 37\r\n', 0),
(14749, 81, '   }//else at line 36\r\n', 0),
(14750, 82, '  }//method\r\n', 0),
(14751, 83, ' }//class', 0),
(14752, 0, 'class HelloWorld { \r\n', 0),
(14753, 1, '	public static void main(String args[]) \r\n', 0),
(14754, 2, '	{ \r\n', 0),
(14755, 3, '		System.out.println("Hello World"); \r\n', 0),
(14756, 4, '	} \r\n', 0),
(14757, 5, '} \r\n', 0),
(14758, 0, 'import java.awt.event.*;\n', 0),
(14759, 1, 'import java.awt.*;\n', 0),
(14760, 2, '\n', 0),
(14761, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(14762, 4, '\n', 0),
(14763, 5, '    private int mx, my;\n', 4),
(14764, 6, '    private Dimension size;\n', 8),
(14765, 7, '    private int onaroll;\n', 2),
(14766, 8, '\n', 0),
(14767, 9, '    public void init() {\n', 0),
(14768, 10, '        onaroll = 0;\n', 0),
(14769, 11, '        setSize(500, 500);\n', 0),
(14770, 12, '        size = getSize();\n', 0),
(14771, 13, '        addMouseListener(this);\n', 0),
(14772, 14, '        addMouseMotionListener(this);\n', 0),
(14773, 15, '        addComponentListener(this);\n', 0),
(14774, 16, '    }\n', 0),
(14775, 17, '\n', 0),
(14776, 18, '    public void update(Graphics g) {\n', 0),
(14777, 19, '        Dimension newSize = getSize();\n', 8),
(14778, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(14779, 21, '            g.setColor(getBackground());\n', 0),
(14780, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(14781, 23, '        } else {\n', 0),
(14782, 24, '            size = newSize;\n', 0),
(14783, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(14784, 26, '        } // Calculate new position\n', 0),
(14785, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(14786, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(14787, 29, '        paint(g);\n', 0),
(14788, 30, '    }\n', 0),
(14789, 31, '  \n', 0),
(14790, 32, '    public void paint(Graphics g) {\n', 0),
(14791, 33, '        g.setColor(Color.black);\n', 0),
(14792, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(14793, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(14794, 36, '    }\n', 0),
(14795, 37, '\n', 0),
(14796, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(14797, 39, '\n', 0),
(14798, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(14799, 41, '        e.consume();\n', 0),
(14800, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(14801, 43, '            repaint();\n', 0),
(14802, 44, '        }\n', 0),
(14803, 45, '    }\n', 0),
(14804, 46, '\n', 0),
(14805, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(14806, 48, '        int x = e.getX();\n', 0),
(14807, 49, '        int y = e.getY();\n', 0),
(14808, 50, '        e.consume();\n', 0),
(14809, 51, '        requestFocus();\n', 0),
(14810, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(14811, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(14812, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(14813, 55, '                case 0:\n', 0),
(14814, 56, '                    play(getCodeBase(), \n', 0),
(14815, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(14816, 58, '                    break;\n', 0),
(14817, 59, '                case 1:\n', 0),
(14818, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(14819, 61, '                    break;\n', 0),
(14820, 62, '                case 2:\n', 0),
(14821, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(14822, 64, '                    break;\n', 0),
(14823, 65, '                case 3:\n', 0),
(14824, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(14825, 67, '                    break;\n', 0),
(14826, 68, '                }\n', 0),
(14827, 69, '                onaroll++;\n', 0),
(14828, 70, '                if (onaroll > 5) {\n', 0),
(14829, 72, '                } else {\n', 0),
(14830, 74, '                }\n', 0),
(14831, 75, '            } else {   //first hit\n', 0),
(14832, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(14833, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(14834, 78, '                onaroll = 1;\n', 0),
(14835, 79, '            }\n', 0),
(14836, 80, '        } else {   //miss\n', 0),
(14837, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(14838, 82, '			\n', 0),
(14839, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(14840, 84, '            onaroll = 0;\n', 0),
(14841, 85, '        }\n', 0),
(14842, 86, '        repaint();\n', 0),
(14843, 87, '    }\n', 0),
(14844, 88, '\n', 0),
(14845, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(14846, 90, '\n', 0),
(14847, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(14848, 92, '        repaint();\n', 0),
(14849, 93, '    }\n', 0),
(14850, 94, '\n', 0),
(14851, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(14852, 96, '        repaint();\n', 0),
(14853, 97, '    }\n', 0),
(14854, 98, '\n', 0),
(14855, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(14856, 100, '\n', 0),
(14857, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(14858, 102, ' \n', 0),
(14859, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(14860, 104, ' \n', 0),
(14861, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(14862, 106, '        repaint();\n', 0),
(14863, 107, '    }\n', 0),
(14864, 108, ' \n', 0),
(14865, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(14866, 110, '        repaint();\n', 0),
(14867, 111, '    }\n', 0),
(14868, 112, '  \n', 0),
(14869, 113, '    public void destroy() {\n', 0),
(14870, 114, '        removeMouseListener(this);\n', 0),
(14871, 115, '        removeMouseMotionListener(this);\n', 0),
(14872, 116, '    }\n', 0),
(14873, 117, '\n', 0),
(14874, 118, '    public String getAppletInfo() {\n', 0),
(14875, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(14876, 120, '    }\n', 0),
(14877, 121, '}\n', 0),
(14878, 0, 'import java.awt.event.*;\n', 0),
(14879, 1, 'import java.awt.*;\n', 0),
(14880, 2, '\n', 0),
(14881, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(14882, 4, '\n', 0),
(14883, 5, '    private int mx, my;\n', 4),
(14884, 6, '    private Dimension size;\n', 8),
(14885, 7, '    private int onaroll;\n', 2),
(14886, 8, '\n', 0),
(14887, 9, '    public void init() {\n', 0),
(14888, 10, '        onaroll = 0;\n', 0),
(14889, 11, '        setSize(500, 500);\n', 0),
(14890, 12, '        size = getSize();\n', 0),
(14891, 13, '        addMouseListener(this);\n', 0),
(14892, 14, '        addMouseMotionListener(this);\n', 0),
(14893, 15, '        addComponentListener(this);\n', 0),
(14894, 16, '    }\n', 0),
(14895, 17, '\n', 0),
(14896, 18, '    public void update(Graphics g) {\n', 0),
(14897, 19, '        Dimension newSize = getSize();\n', 8),
(14898, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(14899, 21, '            g.setColor(getBackground());\n', 0),
(14900, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(14901, 23, '        } else {\n', 0),
(14902, 24, '            size = newSize;\n', 0),
(14903, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(14904, 26, '        } // Calculate new position\n', 0),
(14905, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(14906, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(14907, 29, '        paint(g);\n', 0),
(14908, 30, '    }\n', 0),
(14909, 31, '  \n', 0),
(14910, 32, '    public void paint(Graphics g) {\n', 0),
(14911, 33, '        g.setColor(Color.black);\n', 0),
(14912, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(14913, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(14914, 36, '    }\n', 0),
(14915, 37, '\n', 0),
(14916, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(14917, 39, '\n', 0),
(14918, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(14919, 41, '        e.consume();\n', 0),
(14920, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(14921, 43, '            repaint();\n', 0),
(14922, 44, '        }\n', 0),
(14923, 45, '    }\n', 0),
(14924, 46, '\n', 0),
(14925, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(14926, 48, '        int x = e.getX();\n', 0),
(14927, 49, '        int y = e.getY();\n', 0),
(14928, 50, '        e.consume();\n', 0),
(14929, 51, '        requestFocus();\n', 0),
(14930, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(14931, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(14932, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(14933, 55, '                case 0:\n', 0),
(14934, 56, '                    play(getCodeBase(), \n', 0),
(14935, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(14936, 58, '                    break;\n', 0),
(14937, 59, '                case 1:\n', 0),
(14938, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(14939, 61, '                    break;\n', 0),
(14940, 62, '                case 2:\n', 0),
(14941, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(14942, 64, '                    break;\n', 0),
(14943, 65, '                case 3:\n', 0),
(14944, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(14945, 67, '                    break;\n', 0),
(14946, 68, '                }\n', 0),
(14947, 69, '                onaroll++;\n', 0),
(14948, 70, '                if (onaroll > 5) {\n', 0),
(14949, 72, '                } else {\n', 0),
(14950, 74, '                }\n', 0),
(14951, 75, '            } else {   //first hit\n', 0),
(14952, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(14953, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(14954, 78, '                onaroll = 1;\n', 0),
(14955, 79, '            }\n', 0),
(14956, 80, '        } else {   //miss\n', 0),
(14957, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(14958, 82, '			\n', 0),
(14959, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(14960, 84, '            onaroll = 0;\n', 0),
(14961, 85, '        }\n', 0),
(14962, 86, '        repaint();\n', 0),
(14963, 87, '    }\n', 0),
(14964, 88, '\n', 0),
(14965, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(14966, 90, '\n', 0),
(14967, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(14968, 92, '        repaint();\n', 0),
(14969, 93, '    }\n', 0),
(14970, 94, '\n', 0),
(14971, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(14972, 96, '        repaint();\n', 0),
(14973, 97, '    }\n', 0),
(14974, 98, '\n', 0),
(14975, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(14976, 100, '\n', 0),
(14977, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(14978, 102, ' \n', 0),
(14979, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(14980, 104, ' \n', 0),
(14981, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(14982, 106, '        repaint();\n', 0),
(14983, 107, '    }\n', 0),
(14984, 108, ' \n', 0),
(14985, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(14986, 110, '        repaint();\n', 0),
(14987, 111, '    }\n', 0),
(14988, 112, '  \n', 0),
(14989, 113, '    public void destroy() {\n', 0),
(14990, 114, '        removeMouseListener(this);\n', 0),
(14991, 115, '        removeMouseMotionListener(this);\n', 0),
(14992, 116, '    }\n', 0),
(14993, 117, '\n', 0),
(14994, 118, '    public String getAppletInfo() {\n', 0),
(14995, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(14996, 120, '    }\n', 0),
(14997, 121, '}\n', 0),
(14998, 0, 'import java.util.Scanner;\r\n', 0),
(14999, 1, ' class Years{\r\n', 0),
(15000, 2, '   public int getYear(){\r\n', 0),
(15001, 3, '	int year;\r\n', 2),
(15002, 4, '	String enteredYear;\r\n', 2),
(15003, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(15004, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(15005, 7, '	enteredYear = sc.next();\r\n', 0),
(15006, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(15007, 9, '	return year;\r\n', 0),
(15008, 10, '   }\r\n', 0),
(15009, 11, ' }\r\n', 0),
(15010, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(15011, 13, ' class Months extends Years{\r\n', 0),
(15012, 14, '   public int getMonth(){\r\n', 0),
(15013, 15, '	int month;\r\n', 2),
(15014, 16, '	String enteredMonthNumber;\r\n', 2),
(15015, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(15016, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(15017, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(15018, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(15019, 21, '	return month;\r\n', 0),
(15020, 22, '   }\r\n', 0),
(15021, 23, ' }\r\n', 0),
(15022, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(15023, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(15024, 26, ' static int numDays = 0;\r\n', 4),
(15025, 27, ' public static void main(String[] args) {\r\n', 0),
(15026, 28, '   int year;\r\n', 2),
(15027, 29, '   Months m = new Months();\r\n', 0),
(15028, 30, '   int month = m.getMonth();\r\n', 0),
(15029, 31, '   \r\n', 0),
(15030, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(15031, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(15032, 34, '   }\r\n', 0),
(15033, 35, '   else {\r\n', 0),
(15034, 36, '    switch (month) {\r\n', 0),
(15035, 37, '      case 1:\r\n', 0),
(15036, 38, '      case 3:\r\n', 0),
(15037, 39, '      case 5:\r\n', 0),
(15038, 40, '      case 7:\r\n', 0),
(15039, 41, '      case 8:\r\n', 0),
(15040, 42, '      case 10:\r\n', 0),
(15041, 43, '      case 12:\r\n', 0),
(15042, 44, '        numDays = 31;\r\n', 0),
(15043, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(15044, 46, '        break;\r\n', 0),
(15045, 47, '      case 4:\r\n', 0),
(15046, 48, '      case 6:\r\n', 0),
(15047, 49, '      case 9:\r\n', 0),
(15048, 50, '      case 11:\r\n', 0),
(15049, 51, '       numDays = 30;\r\n', 0),
(15050, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(15051, 53, '       break;\r\n', 0),
(15052, 54, '      case 2:\r\n', 0),
(15053, 55, '       year = m.getYear();\r\n', 0),
(15054, 56, '       if(year < 1) {\r\n', 0),
(15055, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(15056, 58, '       }\r\n', 0),
(15057, 59, '       else{\r\n', 0),
(15058, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(15059, 61, '         numDays = 29;\r\n', 0),
(15060, 62, '		 if(year > 2020){\r\n', 0),
(15061, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(15062, 64, '         }\r\n', 0),
(15063, 65, '         else{\r\n', 0),
(15064, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(15065, 67, '         }\r\n', 0),
(15066, 68, '        }//if at line 61\r\n', 0),
(15067, 69, '        else{\r\n', 0),
(15068, 70, '         numDays = 28;\r\n', 0),
(15069, 71, '         if (year > 2020){\r\n', 0),
(15070, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(15071, 73, '         }\r\n', 0),
(15072, 74, '         else{\r\n', 0),
(15073, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(15074, 76, '         }\r\n', 0),
(15075, 77, '         break;  \r\n', 0),
(15076, 78, '        }//else at line 70\r\n', 0),
(15077, 79, '       }//else at line 60\r\n', 0),
(15078, 80, '    }//switch at line 37\r\n', 0),
(15079, 81, '   }//else at line 36\r\n', 0),
(15080, 82, '  }//method\r\n', 0),
(15081, 83, ' }//class', 0),
(15082, 0, 'public class RecursionExample2 {  \r\n', 0),
(15083, 1, 'static int count=0;  \r\n', 4),
(15084, 2, 'public int p(){  \r\n', 0),
(15085, 3, 'count++;  \r\n', 0),
(15086, 4, 'if(count<=5){  \r\n', 0),
(15087, 5, 'System.out.println("hello "+count);  \r\n', 0),
(15088, 6, 'public int p();  \r\n', 0),
(15089, 7, '}  \r\n', 0),
(15090, 8, '}  \r\n', 0),
(15091, 9, 'public static void main(String[] args) {  \r\n', 0),
(15092, 10, 'p();  \r\n', 0),
(15093, 11, '}  \r\n', 0),
(15094, 12, '}  ', 0),
(15095, 0, 'import java.awt.event.*;\n', 0),
(15096, 1, 'import java.awt.*;\n', 0),
(15097, 2, '\n', 0),
(15098, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(15099, 4, '\n', 0),
(15100, 5, '    private int mx, my;\n', 4),
(15101, 6, '    private Dimension size;\n', 8),
(15102, 7, '    private int onaroll;\n', 2),
(15103, 8, '\n', 0),
(15104, 9, '    public void init() {\n', 0),
(15105, 10, '        onaroll = 0;\n', 0),
(15106, 11, '        setSize(500, 500);\n', 0),
(15107, 12, '        size = getSize();\n', 0),
(15108, 13, '        addMouseListener(this);\n', 0),
(15109, 14, '        addMouseMotionListener(this);\n', 0),
(15110, 15, '        addComponentListener(this);\n', 0),
(15111, 16, '    }\n', 0),
(15112, 17, '\n', 0),
(15113, 18, '    public void update(Graphics g) {\n', 0),
(15114, 19, '        Dimension newSize = getSize();\n', 8),
(15115, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(15116, 21, '            g.setColor(getBackground());\n', 0),
(15117, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(15118, 23, '        } else {\n', 0),
(15119, 24, '            size = newSize;\n', 0),
(15120, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(15121, 26, '        } // Calculate new position\n', 0),
(15122, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(15123, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(15124, 29, '        paint(g);\n', 0),
(15125, 30, '    }\n', 0),
(15126, 31, '  \n', 0),
(15127, 32, '    public void paint(Graphics g) {\n', 0),
(15128, 33, '        g.setColor(Color.black);\n', 0),
(15129, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(15130, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(15131, 36, '    }\n', 0),
(15132, 37, '\n', 0),
(15133, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(15134, 39, '\n', 0),
(15135, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(15136, 41, '        e.consume();\n', 0),
(15137, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(15138, 43, '            repaint();\n', 0),
(15139, 44, '        }\n', 0),
(15140, 45, '    }\n', 0),
(15141, 46, '\n', 0),
(15142, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(15143, 48, '        int x = e.getX();\n', 0),
(15144, 49, '        int y = e.getY();\n', 0),
(15145, 50, '        e.consume();\n', 0),
(15146, 51, '        requestFocus();\n', 0),
(15147, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(15148, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(15149, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(15150, 55, '                case 0:\n', 0),
(15151, 56, '                    play(getCodeBase(), \n', 0),
(15152, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(15153, 58, '                    break;\n', 0),
(15154, 59, '                case 1:\n', 0),
(15155, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(15156, 61, '                    break;\n', 0),
(15157, 62, '                case 2:\n', 0),
(15158, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(15159, 64, '                    break;\n', 0),
(15160, 65, '                case 3:\n', 0),
(15161, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(15162, 67, '                    break;\n', 0),
(15163, 68, '                }\n', 0),
(15164, 69, '                onaroll++;\n', 0),
(15165, 70, '                if (onaroll > 5) {\n', 0),
(15166, 72, '                } else {\n', 0),
(15167, 74, '                }\n', 0),
(15168, 75, '            } else {   //first hit\n', 0),
(15169, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(15170, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(15171, 78, '                onaroll = 1;\n', 0),
(15172, 79, '            }\n', 0),
(15173, 80, '        } else {   //miss\n', 0),
(15174, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(15175, 82, '			\n', 0),
(15176, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(15177, 84, '            onaroll = 0;\n', 0),
(15178, 85, '        }\n', 0),
(15179, 86, '        repaint();\n', 0),
(15180, 87, '    }\n', 0),
(15181, 88, '\n', 0),
(15182, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(15183, 90, '\n', 0),
(15184, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(15185, 92, '        repaint();\n', 0),
(15186, 93, '    }\n', 0),
(15187, 94, '\n', 0),
(15188, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(15189, 96, '        repaint();\n', 0),
(15190, 97, '    }\n', 0),
(15191, 98, '\n', 0),
(15192, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(15193, 100, '\n', 0),
(15194, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(15195, 102, ' \n', 0),
(15196, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(15197, 104, ' \n', 0),
(15198, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(15199, 106, '        repaint();\n', 0),
(15200, 107, '    }\n', 0),
(15201, 108, ' \n', 0),
(15202, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(15203, 110, '        repaint();\n', 0),
(15204, 111, '    }\n', 0),
(15205, 112, '  \n', 0),
(15206, 113, '    public void destroy() {\n', 0),
(15207, 114, '        removeMouseListener(this);\n', 0),
(15208, 115, '        removeMouseMotionListener(this);\n', 0),
(15209, 116, '    }\n', 0),
(15210, 117, '\n', 0),
(15211, 118, '    public String getAppletInfo() {\n', 0),
(15212, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(15213, 120, '    }\n', 0),
(15214, 121, '}\n', 0),
(15215, 0, 'import java.awt.event.*;\n', 0),
(15216, 1, 'import java.awt.*;\n', 0),
(15217, 2, '\n', 0),
(15218, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(15219, 4, '\n', 0),
(15220, 5, '    private int mx, my;\n', 4),
(15221, 6, '    private Dimension size;\n', 8),
(15222, 7, '    private int onaroll;\n', 2),
(15223, 8, '\n', 0),
(15224, 9, '    public void init() {\n', 0),
(15225, 10, '        onaroll = 0;\n', 0),
(15226, 11, '        setSize(500, 500);\n', 0),
(15227, 12, '        size = getSize();\n', 0),
(15228, 13, '        addMouseListener(this);\n', 0),
(15229, 14, '        addMouseMotionListener(this);\n', 0),
(15230, 15, '        addComponentListener(this);\n', 0),
(15231, 16, '    }\n', 0),
(15232, 17, '\n', 0),
(15233, 18, '    public void update(Graphics g) {\n', 0),
(15234, 19, '        Dimension newSize = getSize();\n', 8),
(15235, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(15236, 21, '            g.setColor(getBackground());\n', 0),
(15237, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(15238, 23, '        } else {\n', 0),
(15239, 24, '            size = newSize;\n', 0),
(15240, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(15241, 26, '        } // Calculate new position\n', 0),
(15242, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(15243, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(15244, 29, '        paint(g);\n', 0),
(15245, 30, '    }\n', 0),
(15246, 31, '  \n', 0),
(15247, 32, '    public void paint(Graphics g) {\n', 0),
(15248, 33, '        g.setColor(Color.black);\n', 0),
(15249, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(15250, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(15251, 36, '    }\n', 0),
(15252, 37, '\n', 0),
(15253, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(15254, 39, '\n', 0),
(15255, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(15256, 41, '        e.consume();\n', 0),
(15257, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(15258, 43, '            repaint();\n', 0),
(15259, 44, '        }\n', 0),
(15260, 45, '    }\n', 0),
(15261, 46, '\n', 0),
(15262, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(15263, 48, '        int x = e.getX();\n', 0),
(15264, 49, '        int y = e.getY();\n', 0),
(15265, 50, '        e.consume();\n', 0),
(15266, 51, '        requestFocus();\n', 0),
(15267, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(15268, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(15269, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(15270, 55, '                case 0:\n', 0),
(15271, 56, '                    play(getCodeBase(), \n', 0),
(15272, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(15273, 58, '                    break;\n', 0),
(15274, 59, '                case 1:\n', 0),
(15275, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(15276, 61, '                    break;\n', 0),
(15277, 62, '                case 2:\n', 0),
(15278, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(15279, 64, '                    break;\n', 0),
(15280, 65, '                case 3:\n', 0),
(15281, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(15282, 67, '                    break;\n', 0),
(15283, 68, '                }\n', 0),
(15284, 69, '                onaroll++;\n', 0),
(15285, 70, '                if (onaroll > 5) {\n', 0),
(15286, 72, '                } else {\n', 0),
(15287, 74, '                }\n', 0),
(15288, 75, '            } else {   //first hit\n', 0),
(15289, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(15290, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(15291, 78, '                onaroll = 1;\n', 0),
(15292, 79, '            }\n', 0),
(15293, 80, '        } else {   //miss\n', 0),
(15294, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(15295, 82, '			\n', 0),
(15296, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(15297, 84, '            onaroll = 0;\n', 0),
(15298, 85, '        }\n', 0),
(15299, 86, '        repaint();\n', 0),
(15300, 87, '    }\n', 0),
(15301, 88, '\n', 0),
(15302, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(15303, 90, '\n', 0),
(15304, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(15305, 92, '        repaint();\n', 0),
(15306, 93, '    }\n', 0),
(15307, 94, '\n', 0),
(15308, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(15309, 96, '        repaint();\n', 0),
(15310, 97, '    }\n', 0),
(15311, 98, '\n', 0),
(15312, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(15313, 100, '\n', 0),
(15314, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(15315, 102, ' \n', 0),
(15316, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(15317, 104, ' \n', 0),
(15318, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(15319, 106, '        repaint();\n', 0),
(15320, 107, '    }\n', 0),
(15321, 108, ' \n', 0),
(15322, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(15323, 110, '        repaint();\n', 0),
(15324, 111, '    }\n', 0),
(15325, 112, '  \n', 0),
(15326, 113, '    public void destroy() {\n', 0),
(15327, 114, '        removeMouseListener(this);\n', 0),
(15328, 115, '        removeMouseMotionListener(this);\n', 0),
(15329, 116, '    }\n', 0),
(15330, 117, '\n', 0),
(15331, 118, '    public String getAppletInfo() {\n', 0),
(15332, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(15333, 120, '    }\n', 0),
(15334, 121, '}\n', 0),
(15335, 0, 'import java.util.Scanner;\r\n', 0),
(15336, 1, ' class Years{\r\n', 0),
(15337, 2, '   public int getYear(){\r\n', 0),
(15338, 3, '	int year;\r\n', 2),
(15339, 4, '	String enteredYear;\r\n', 2),
(15340, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(15341, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(15342, 7, '	enteredYear = sc.next();\r\n', 0),
(15343, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(15344, 9, '	return year;\r\n', 0),
(15345, 10, '   }\r\n', 0),
(15346, 11, ' }\r\n', 0),
(15347, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(15348, 13, ' class Months extends Years{\r\n', 0),
(15349, 14, '   public int getMonth(){\r\n', 0),
(15350, 15, '	int month;\r\n', 2),
(15351, 16, '	String enteredMonthNumber;\r\n', 2),
(15352, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(15353, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(15354, 19, '	enteredMonthNumber = sc.next();\r\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(15355, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(15356, 21, '	return month;\r\n', 0),
(15357, 22, '   }\r\n', 0),
(15358, 23, ' }\r\n', 0),
(15359, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(15360, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(15361, 26, ' static int numDays = 0;\r\n', 4),
(15362, 27, ' public static void main(String[] args) {\r\n', 0),
(15363, 28, '   int year;\r\n', 2),
(15364, 29, '   Months m = new Months();\r\n', 0),
(15365, 30, '   int month = m.getMonth();\r\n', 0),
(15366, 31, '   \r\n', 0),
(15367, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(15368, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(15369, 34, '   }\r\n', 0),
(15370, 35, '   else {\r\n', 0),
(15371, 36, '    switch (month) {\r\n', 0),
(15372, 37, '      case 1:\r\n', 0),
(15373, 38, '      case 3:\r\n', 0),
(15374, 39, '      case 5:\r\n', 0),
(15375, 40, '      case 7:\r\n', 0),
(15376, 41, '      case 8:\r\n', 0),
(15377, 42, '      case 10:\r\n', 0),
(15378, 43, '      case 12:\r\n', 0),
(15379, 44, '        numDays = 31;\r\n', 0),
(15380, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(15381, 46, '        break;\r\n', 0),
(15382, 47, '      case 4:\r\n', 0),
(15383, 48, '      case 6:\r\n', 0),
(15384, 49, '      case 9:\r\n', 0),
(15385, 50, '      case 11:\r\n', 0),
(15386, 51, '       numDays = 30;\r\n', 0),
(15387, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(15388, 53, '       break;\r\n', 0),
(15389, 54, '      case 2:\r\n', 0),
(15390, 55, '       year = m.getYear();\r\n', 0),
(15391, 56, '       if(year < 1) {\r\n', 0),
(15392, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(15393, 58, '       }\r\n', 0),
(15394, 59, '       else{\r\n', 0),
(15395, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(15396, 61, '         numDays = 29;\r\n', 0),
(15397, 62, '		 if(year > 2020){\r\n', 0),
(15398, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(15399, 64, '         }\r\n', 0),
(15400, 65, '         else{\r\n', 0),
(15401, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(15402, 67, '         }\r\n', 0),
(15403, 68, '        }//if at line 61\r\n', 0),
(15404, 69, '        else{\r\n', 0),
(15405, 70, '         numDays = 28;\r\n', 0),
(15406, 71, '         if (year > 2020){\r\n', 0),
(15407, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(15408, 73, '         }\r\n', 0),
(15409, 74, '         else{\r\n', 0),
(15410, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(15411, 76, '         }\r\n', 0),
(15412, 77, '         break;  \r\n', 0),
(15413, 78, '        }//else at line 70\r\n', 0),
(15414, 79, '       }//else at line 60\r\n', 0),
(15415, 80, '    }//switch at line 37\r\n', 0),
(15416, 81, '   }//else at line 36\r\n', 0),
(15417, 82, '  }//method\r\n', 0),
(15418, 83, ' }//class', 0),
(15419, 0, 'class Pattern{ \r\n', 0),
(15420, 1, 'public static void main(String[] args) { \r\n', 0),
(15421, 2, '	 int rows = 5;\r\n', 2),
(15422, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(15423, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(15424, 5, '	 System.out.print(j + " "); \r\n', 0),
(15425, 6, '	 } \r\n', 0),
(15426, 7, '	 System.out.println(""); \r\n', 0),
(15427, 8, ' 	} \r\n', 0),
(15428, 9, ' 	} \r\n', 0),
(15429, 10, '} ', 0),
(15430, 0, 'import java.util.Scanner;\r\n', 0),
(15431, 1, ' class Years{\r\n', 0),
(15432, 2, '   public int getYear(){\r\n', 0),
(15433, 3, '	int year;\r\n', 2),
(15434, 4, '	String enteredYear;\r\n', 2),
(15435, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(15436, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(15437, 7, '	enteredYear = sc.next();\r\n', 0),
(15438, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(15439, 9, '	return year;\r\n', 0),
(15440, 10, '   }\r\n', 0),
(15441, 11, ' }\r\n', 0),
(15442, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(15443, 13, ' class Months extends Years{\r\n', 0),
(15444, 14, '   public int getMonth(){\r\n', 0),
(15445, 15, '	int month;\r\n', 2),
(15446, 16, '	String enteredMonthNumber;\r\n', 2),
(15447, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(15448, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(15449, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(15450, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(15451, 21, '	return month;\r\n', 0),
(15452, 22, '   }\r\n', 0),
(15453, 23, ' }\r\n', 0),
(15454, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(15455, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(15456, 26, ' static int numDays = 0;\r\n', 4),
(15457, 27, ' public static void main(String[] args) {\r\n', 0),
(15458, 28, '   int year;\r\n', 2),
(15459, 29, '   Months m = new Months();\r\n', 0),
(15460, 30, '   int month = m.getMonth();\r\n', 0),
(15461, 31, '   \r\n', 0),
(15462, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(15463, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(15464, 34, '   }\r\n', 0),
(15465, 35, '   else {\r\n', 0),
(15466, 36, '    switch (month) {\r\n', 0),
(15467, 37, '      case 1:\r\n', 0),
(15468, 38, '      case 3:\r\n', 0),
(15469, 39, '      case 5:\r\n', 0),
(15470, 40, '      case 7:\r\n', 0),
(15471, 41, '      case 8:\r\n', 0),
(15472, 42, '      case 10:\r\n', 0),
(15473, 43, '      case 12:\r\n', 0),
(15474, 44, '        numDays = 31;\r\n', 0),
(15475, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(15476, 46, '        break;\r\n', 0),
(15477, 47, '      case 4:\r\n', 0),
(15478, 48, '      case 6:\r\n', 0),
(15479, 49, '      case 9:\r\n', 0),
(15480, 50, '      case 11:\r\n', 0),
(15481, 51, '       numDays = 30;\r\n', 0),
(15482, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(15483, 53, '       break;\r\n', 0),
(15484, 54, '      case 2:\r\n', 0),
(15485, 55, '       year = m.getYear();\r\n', 0),
(15486, 56, '       if(year < 1) {\r\n', 0),
(15487, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(15488, 58, '       }\r\n', 0),
(15489, 59, '       else{\r\n', 0),
(15490, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(15491, 61, '         numDays = 29;\r\n', 0),
(15492, 62, '		 if(year > 2020){\r\n', 0),
(15493, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(15494, 64, '         }\r\n', 0),
(15495, 65, '         else{\r\n', 0),
(15496, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(15497, 67, '         }\r\n', 0),
(15498, 68, '        }//if at line 61\r\n', 0),
(15499, 69, '        else{\r\n', 0),
(15500, 70, '         numDays = 28;\r\n', 0),
(15501, 71, '         if (year > 2020){\r\n', 0),
(15502, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(15503, 73, '         }\r\n', 0),
(15504, 74, '         else{\r\n', 0),
(15505, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(15506, 76, '         }\r\n', 0),
(15507, 77, '         break;  \r\n', 0),
(15508, 78, '        }//else at line 70\r\n', 0),
(15509, 79, '       }//else at line 60\r\n', 0),
(15510, 80, '    }//switch at line 37\r\n', 0),
(15511, 81, '   }//else at line 36\r\n', 0),
(15512, 82, '  }//method\r\n', 0),
(15513, 83, ' }//class', 0),
(15514, 0, 'class HelloWorld { \r\n', 0),
(15515, 1, '	public static void main(String args[]) \r\n', 0),
(15516, 2, '	{ \r\n', 0),
(15517, 3, '		System.out.println("Hello World"); \r\n', 0),
(15518, 4, '	} \r\n', 0),
(15519, 5, '} \r\n', 0),
(15520, 0, 'import java.awt.event.*;\n', 0),
(15521, 1, 'import java.awt.*;\n', 0),
(15522, 2, '\n', 0),
(15523, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(15524, 4, '\n', 0),
(15525, 5, '    private int mx, my;\n', 4),
(15526, 6, '    private Dimension size;\n', 8),
(15527, 7, '    private int onaroll;\n', 2),
(15528, 8, '\n', 0),
(15529, 9, '    public void init() {\n', 0),
(15530, 10, '        onaroll = 0;\n', 0),
(15531, 11, '        setSize(500, 500);\n', 0),
(15532, 12, '        size = getSize();\n', 0),
(15533, 13, '        addMouseListener(this);\n', 0),
(15534, 14, '        addMouseMotionListener(this);\n', 0),
(15535, 15, '        addComponentListener(this);\n', 0),
(15536, 16, '    }\n', 0),
(15537, 17, '\n', 0),
(15538, 18, '    public void update(Graphics g) {\n', 0),
(15539, 19, '        Dimension newSize = getSize();\n', 8),
(15540, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(15541, 21, '            g.setColor(getBackground());\n', 0),
(15542, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(15543, 23, '        } else {\n', 0),
(15544, 24, '            size = newSize;\n', 0),
(15545, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(15546, 26, '        } // Calculate new position\n', 0),
(15547, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(15548, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(15549, 29, '        paint(g);\n', 0),
(15550, 30, '    }\n', 0),
(15551, 31, '  \n', 0),
(15552, 32, '    public void paint(Graphics g) {\n', 0),
(15553, 33, '        g.setColor(Color.black);\n', 0),
(15554, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(15555, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(15556, 36, '    }\n', 0),
(15557, 37, '\n', 0),
(15558, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(15559, 39, '\n', 0),
(15560, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(15561, 41, '        e.consume();\n', 0),
(15562, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(15563, 43, '            repaint();\n', 0),
(15564, 44, '        }\n', 0),
(15565, 45, '    }\n', 0),
(15566, 46, '\n', 0),
(15567, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(15568, 48, '        int x = e.getX();\n', 0),
(15569, 49, '        int y = e.getY();\n', 0),
(15570, 50, '        e.consume();\n', 0),
(15571, 51, '        requestFocus();\n', 0),
(15572, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(15573, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(15574, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(15575, 55, '                case 0:\n', 0),
(15576, 56, '                    play(getCodeBase(), \n', 0),
(15577, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(15578, 58, '                    break;\n', 0),
(15579, 59, '                case 1:\n', 0),
(15580, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(15581, 61, '                    break;\n', 0),
(15582, 62, '                case 2:\n', 0),
(15583, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(15584, 64, '                    break;\n', 0),
(15585, 65, '                case 3:\n', 0),
(15586, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(15587, 67, '                    break;\n', 0),
(15588, 68, '                }\n', 0),
(15589, 69, '                onaroll++;\n', 0),
(15590, 70, '                if (onaroll > 5) {\n', 0),
(15591, 72, '                } else {\n', 0),
(15592, 74, '                }\n', 0),
(15593, 75, '            } else {   //first hit\n', 0),
(15594, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(15595, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(15596, 78, '                onaroll = 1;\n', 0),
(15597, 79, '            }\n', 0),
(15598, 80, '        } else {   //miss\n', 0),
(15599, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(15600, 82, '			\n', 0),
(15601, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(15602, 84, '            onaroll = 0;\n', 0),
(15603, 85, '        }\n', 0),
(15604, 86, '        repaint();\n', 0),
(15605, 87, '    }\n', 0),
(15606, 88, '\n', 0),
(15607, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(15608, 90, '\n', 0),
(15609, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(15610, 92, '        repaint();\n', 0),
(15611, 93, '    }\n', 0),
(15612, 94, '\n', 0),
(15613, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(15614, 96, '        repaint();\n', 0),
(15615, 97, '    }\n', 0),
(15616, 98, '\n', 0),
(15617, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(15618, 100, '\n', 0),
(15619, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(15620, 102, ' \n', 0),
(15621, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(15622, 104, ' \n', 0),
(15623, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(15624, 106, '        repaint();\n', 0),
(15625, 107, '    }\n', 0),
(15626, 108, ' \n', 0),
(15627, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(15628, 110, '        repaint();\n', 0),
(15629, 111, '    }\n', 0),
(15630, 112, '  \n', 0),
(15631, 113, '    public void destroy() {\n', 0),
(15632, 114, '        removeMouseListener(this);\n', 0),
(15633, 115, '        removeMouseMotionListener(this);\n', 0),
(15634, 116, '    }\n', 0),
(15635, 117, '\n', 0),
(15636, 118, '    public String getAppletInfo() {\n', 0),
(15637, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(15638, 120, '    }\n', 0),
(15639, 121, '}\n', 0),
(15640, 0, 'import java.awt.event.*;\n', 0),
(15641, 1, 'import java.awt.*;\n', 0),
(15642, 2, '\n', 0),
(15643, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(15644, 4, '\n', 0),
(15645, 5, '    private int mx, my;\n', 4),
(15646, 6, '    private Dimension size;\n', 8),
(15647, 7, '    private int onaroll;\n', 2),
(15648, 8, '\n', 0),
(15649, 9, '    public void init() {\n', 0),
(15650, 10, '        onaroll = 0;\n', 0),
(15651, 11, '        setSize(500, 500);\n', 0),
(15652, 12, '        size = getSize();\n', 0),
(15653, 13, '        addMouseListener(this);\n', 0),
(15654, 14, '        addMouseMotionListener(this);\n', 0),
(15655, 15, '        addComponentListener(this);\n', 0),
(15656, 16, '    }\n', 0),
(15657, 17, '\n', 0),
(15658, 18, '    public void update(Graphics g) {\n', 0),
(15659, 19, '        Dimension newSize = getSize();\n', 8),
(15660, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(15661, 21, '            g.setColor(getBackground());\n', 0),
(15662, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(15663, 23, '        } else {\n', 0),
(15664, 24, '            size = newSize;\n', 0),
(15665, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(15666, 26, '        } // Calculate new position\n', 0),
(15667, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(15668, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(15669, 29, '        paint(g);\n', 0),
(15670, 30, '    }\n', 0),
(15671, 31, '  \n', 0),
(15672, 32, '    public void paint(Graphics g) {\n', 0),
(15673, 33, '        g.setColor(Color.black);\n', 0),
(15674, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(15675, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(15676, 36, '    }\n', 0),
(15677, 37, '\n', 0),
(15678, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(15679, 39, '\n', 0),
(15680, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(15681, 41, '        e.consume();\n', 0),
(15682, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(15683, 43, '            repaint();\n', 0),
(15684, 44, '        }\n', 0),
(15685, 45, '    }\n', 0),
(15686, 46, '\n', 0),
(15687, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(15688, 48, '        int x = e.getX();\n', 0),
(15689, 49, '        int y = e.getY();\n', 0),
(15690, 50, '        e.consume();\n', 0),
(15691, 51, '        requestFocus();\n', 0),
(15692, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(15693, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(15694, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(15695, 55, '                case 0:\n', 0),
(15696, 56, '                    play(getCodeBase(), \n', 0),
(15697, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(15698, 58, '                    break;\n', 0),
(15699, 59, '                case 1:\n', 0),
(15700, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(15701, 61, '                    break;\n', 0),
(15702, 62, '                case 2:\n', 0),
(15703, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(15704, 64, '                    break;\n', 0),
(15705, 65, '                case 3:\n', 0),
(15706, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(15707, 67, '                    break;\n', 0),
(15708, 68, '                }\n', 0),
(15709, 69, '                onaroll++;\n', 0),
(15710, 70, '                if (onaroll > 5) {\n', 0),
(15711, 72, '                } else {\n', 0),
(15712, 74, '                }\n', 0),
(15713, 75, '            } else {   //first hit\n', 0),
(15714, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(15715, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(15716, 78, '                onaroll = 1;\n', 0),
(15717, 79, '            }\n', 0),
(15718, 80, '        } else {   //miss\n', 0),
(15719, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(15720, 82, '			\n', 0),
(15721, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(15722, 84, '            onaroll = 0;\n', 0),
(15723, 85, '        }\n', 0),
(15724, 86, '        repaint();\n', 0),
(15725, 87, '    }\n', 0),
(15726, 88, '\n', 0),
(15727, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(15728, 90, '\n', 0),
(15729, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(15730, 92, '        repaint();\n', 0),
(15731, 93, '    }\n', 0),
(15732, 94, '\n', 0),
(15733, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(15734, 96, '        repaint();\n', 0),
(15735, 97, '    }\n', 0),
(15736, 98, '\n', 0),
(15737, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(15738, 100, '\n', 0),
(15739, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(15740, 102, ' \n', 0),
(15741, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(15742, 104, ' \n', 0),
(15743, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(15744, 106, '        repaint();\n', 0),
(15745, 107, '    }\n', 0),
(15746, 108, ' \n', 0),
(15747, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(15748, 110, '        repaint();\n', 0),
(15749, 111, '    }\n', 0),
(15750, 112, '  \n', 0),
(15751, 113, '    public void destroy() {\n', 0),
(15752, 114, '        removeMouseListener(this);\n', 0),
(15753, 115, '        removeMouseMotionListener(this);\n', 0),
(15754, 116, '    }\n', 0),
(15755, 117, '\n', 0),
(15756, 118, '    public String getAppletInfo() {\n', 0),
(15757, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(15758, 120, '    }\n', 0),
(15759, 121, '}\n', 0),
(15760, 0, 'import java.util.Scanner;\r\n', 0),
(15761, 1, ' class Years{\r\n', 0),
(15762, 2, '   public int getYear(){\r\n', 0),
(15763, 3, '	int year;\r\n', 2),
(15764, 4, '	String enteredYear;\r\n', 2),
(15765, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(15766, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(15767, 7, '	enteredYear = sc.next();\r\n', 0),
(15768, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(15769, 9, '	return year;\r\n', 0),
(15770, 10, '   }\r\n', 0),
(15771, 11, ' }\r\n', 0),
(15772, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(15773, 13, ' class Months extends Years{\r\n', 0),
(15774, 14, '   public int getMonth(){\r\n', 0),
(15775, 15, '	int month;\r\n', 2),
(15776, 16, '	String enteredMonthNumber;\r\n', 2),
(15777, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(15778, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(15779, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(15780, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(15781, 21, '	return month;\r\n', 0),
(15782, 22, '   }\r\n', 0),
(15783, 23, ' }\r\n', 0),
(15784, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(15785, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(15786, 26, ' static int numDays = 0;\r\n', 4),
(15787, 27, ' public static void main(String[] args) {\r\n', 0),
(15788, 28, '   int year;\r\n', 2),
(15789, 29, '   Months m = new Months();\r\n', 0),
(15790, 30, '   int month = m.getMonth();\r\n', 0),
(15791, 31, '   \r\n', 0),
(15792, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(15793, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(15794, 34, '   }\r\n', 0),
(15795, 35, '   else {\r\n', 0),
(15796, 36, '    switch (month) {\r\n', 0),
(15797, 37, '      case 1:\r\n', 0),
(15798, 38, '      case 3:\r\n', 0),
(15799, 39, '      case 5:\r\n', 0),
(15800, 40, '      case 7:\r\n', 0),
(15801, 41, '      case 8:\r\n', 0),
(15802, 42, '      case 10:\r\n', 0),
(15803, 43, '      case 12:\r\n', 0),
(15804, 44, '        numDays = 31;\r\n', 0),
(15805, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(15806, 46, '        break;\r\n', 0),
(15807, 47, '      case 4:\r\n', 0),
(15808, 48, '      case 6:\r\n', 0),
(15809, 49, '      case 9:\r\n', 0),
(15810, 50, '      case 11:\r\n', 0),
(15811, 51, '       numDays = 30;\r\n', 0),
(15812, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(15813, 53, '       break;\r\n', 0),
(15814, 54, '      case 2:\r\n', 0),
(15815, 55, '       year = m.getYear();\r\n', 0),
(15816, 56, '       if(year < 1) {\r\n', 0),
(15817, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(15818, 58, '       }\r\n', 0),
(15819, 59, '       else{\r\n', 0),
(15820, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(15821, 61, '         numDays = 29;\r\n', 0),
(15822, 62, '		 if(year > 2020){\r\n', 0),
(15823, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(15824, 64, '         }\r\n', 0),
(15825, 65, '         else{\r\n', 0),
(15826, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(15827, 67, '         }\r\n', 0),
(15828, 68, '        }//if at line 61\r\n', 0),
(15829, 69, '        else{\r\n', 0),
(15830, 70, '         numDays = 28;\r\n', 0),
(15831, 71, '         if (year > 2020){\r\n', 0),
(15832, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(15833, 73, '         }\r\n', 0),
(15834, 74, '         else{\r\n', 0),
(15835, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(15836, 76, '         }\r\n', 0),
(15837, 77, '         break;  \r\n', 0),
(15838, 78, '        }//else at line 70\r\n', 0),
(15839, 79, '       }//else at line 60\r\n', 0),
(15840, 80, '    }//switch at line 37\r\n', 0),
(15841, 81, '   }//else at line 36\r\n', 0),
(15842, 82, '  }//method\r\n', 0),
(15843, 83, ' }//class', 0),
(15844, 0, 'public class RecursionExample2 {  \r\n', 0),
(15845, 1, 'static int count=0;  \r\n', 4),
(15846, 2, 'public int p(){  \r\n', 0),
(15847, 3, 'count++;  \r\n', 0),
(15848, 4, 'if(count<=5){  \r\n', 0),
(15849, 5, 'System.out.println("hello "+count);  \r\n', 0),
(15850, 6, 'public int p();  \r\n', 0),
(15851, 7, '}  \r\n', 0),
(15852, 8, '}  \r\n', 0),
(15853, 9, 'public static void main(String[] args) {  \r\n', 0),
(15854, 10, 'p();  \r\n', 0),
(15855, 11, '}  \r\n', 0),
(15856, 12, '}  ', 0),
(15857, 0, 'import java.awt.event.*;\n', 0),
(15858, 1, 'import java.awt.*;\n', 0),
(15859, 2, '\n', 0),
(15860, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(15861, 4, '\n', 0),
(15862, 5, '    private int mx, my;\n', 4),
(15863, 6, '    private Dimension size;\n', 8),
(15864, 7, '    private int onaroll;\n', 2),
(15865, 8, '\n', 0),
(15866, 9, '    public void init() {\n', 0),
(15867, 10, '        onaroll = 0;\n', 0),
(15868, 11, '        setSize(500, 500);\n', 0),
(15869, 12, '        size = getSize();\n', 0),
(15870, 13, '        addMouseListener(this);\n', 0),
(15871, 14, '        addMouseMotionListener(this);\n', 0),
(15872, 15, '        addComponentListener(this);\n', 0),
(15873, 16, '    }\n', 0),
(15874, 17, '\n', 0),
(15875, 18, '    public void update(Graphics g) {\n', 0),
(15876, 19, '        Dimension newSize = getSize();\n', 8),
(15877, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(15878, 21, '            g.setColor(getBackground());\n', 0),
(15879, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(15880, 23, '        } else {\n', 0),
(15881, 24, '            size = newSize;\n', 0),
(15882, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(15883, 26, '        } // Calculate new position\n', 0),
(15884, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(15885, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(15886, 29, '        paint(g);\n', 0),
(15887, 30, '    }\n', 0),
(15888, 31, '  \n', 0),
(15889, 32, '    public void paint(Graphics g) {\n', 0),
(15890, 33, '        g.setColor(Color.black);\n', 0),
(15891, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(15892, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(15893, 36, '    }\n', 0),
(15894, 37, '\n', 0),
(15895, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(15896, 39, '\n', 0),
(15897, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(15898, 41, '        e.consume();\n', 0),
(15899, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(15900, 43, '            repaint();\n', 0),
(15901, 44, '        }\n', 0),
(15902, 45, '    }\n', 0),
(15903, 46, '\n', 0),
(15904, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(15905, 48, '        int x = e.getX();\n', 0),
(15906, 49, '        int y = e.getY();\n', 0),
(15907, 50, '        e.consume();\n', 0),
(15908, 51, '        requestFocus();\n', 0),
(15909, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(15910, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(15911, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(15912, 55, '                case 0:\n', 0),
(15913, 56, '                    play(getCodeBase(), \n', 0),
(15914, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(15915, 58, '                    break;\n', 0),
(15916, 59, '                case 1:\n', 0),
(15917, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(15918, 61, '                    break;\n', 0),
(15919, 62, '                case 2:\n', 0),
(15920, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(15921, 64, '                    break;\n', 0),
(15922, 65, '                case 3:\n', 0),
(15923, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(15924, 67, '                    break;\n', 0),
(15925, 68, '                }\n', 0),
(15926, 69, '                onaroll++;\n', 0),
(15927, 70, '                if (onaroll > 5) {\n', 0),
(15928, 72, '                } else {\n', 0),
(15929, 74, '                }\n', 0),
(15930, 75, '            } else {   //first hit\n', 0),
(15931, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(15932, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(15933, 78, '                onaroll = 1;\n', 0),
(15934, 79, '            }\n', 0),
(15935, 80, '        } else {   //miss\n', 0),
(15936, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(15937, 82, '			\n', 0),
(15938, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(15939, 84, '            onaroll = 0;\n', 0),
(15940, 85, '        }\n', 0),
(15941, 86, '        repaint();\n', 0),
(15942, 87, '    }\n', 0),
(15943, 88, '\n', 0),
(15944, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(15945, 90, '\n', 0),
(15946, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(15947, 92, '        repaint();\n', 0),
(15948, 93, '    }\n', 0),
(15949, 94, '\n', 0),
(15950, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(15951, 96, '        repaint();\n', 0),
(15952, 97, '    }\n', 0),
(15953, 98, '\n', 0),
(15954, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(15955, 100, '\n', 0),
(15956, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(15957, 102, ' \n', 0),
(15958, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(15959, 104, ' \n', 0),
(15960, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(15961, 106, '        repaint();\n', 0),
(15962, 107, '    }\n', 0),
(15963, 108, ' \n', 0),
(15964, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(15965, 110, '        repaint();\n', 0),
(15966, 111, '    }\n', 0),
(15967, 112, '  \n', 0),
(15968, 113, '    public void destroy() {\n', 0),
(15969, 114, '        removeMouseListener(this);\n', 0),
(15970, 115, '        removeMouseMotionListener(this);\n', 0),
(15971, 116, '    }\n', 0),
(15972, 117, '\n', 0),
(15973, 118, '    public String getAppletInfo() {\n', 0),
(15974, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(15975, 120, '    }\n', 0),
(15976, 121, '}\n', 0),
(15977, 0, 'import java.awt.event.*;\n', 0),
(15978, 1, 'import java.awt.*;\n', 0),
(15979, 2, '\n', 0),
(15980, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(15981, 4, '\n', 0),
(15982, 5, '    private int mx, my;\n', 4),
(15983, 6, '    private Dimension size;\n', 8),
(15984, 7, '    private int onaroll;\n', 2),
(15985, 8, '\n', 0),
(15986, 9, '    public void init() {\n', 0),
(15987, 10, '        onaroll = 0;\n', 0),
(15988, 11, '        setSize(500, 500);\n', 0),
(15989, 12, '        size = getSize();\n', 0),
(15990, 13, '        addMouseListener(this);\n', 0),
(15991, 14, '        addMouseMotionListener(this);\n', 0),
(15992, 15, '        addComponentListener(this);\n', 0),
(15993, 16, '    }\n', 0),
(15994, 17, '\n', 0),
(15995, 18, '    public void update(Graphics g) {\n', 0),
(15996, 19, '        Dimension newSize = getSize();\n', 8),
(15997, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(15998, 21, '            g.setColor(getBackground());\n', 0),
(15999, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(16000, 23, '        } else {\n', 0),
(16001, 24, '            size = newSize;\n', 0),
(16002, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(16003, 26, '        } // Calculate new position\n', 0),
(16004, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(16005, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(16006, 29, '        paint(g);\n', 0),
(16007, 30, '    }\n', 0),
(16008, 31, '  \n', 0),
(16009, 32, '    public void paint(Graphics g) {\n', 0),
(16010, 33, '        g.setColor(Color.black);\n', 0),
(16011, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(16012, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(16013, 36, '    }\n', 0),
(16014, 37, '\n', 0),
(16015, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(16016, 39, '\n', 0),
(16017, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(16018, 41, '        e.consume();\n', 0),
(16019, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(16020, 43, '            repaint();\n', 0),
(16021, 44, '        }\n', 0),
(16022, 45, '    }\n', 0),
(16023, 46, '\n', 0),
(16024, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(16025, 48, '        int x = e.getX();\n', 0),
(16026, 49, '        int y = e.getY();\n', 0),
(16027, 50, '        e.consume();\n', 0),
(16028, 51, '        requestFocus();\n', 0),
(16029, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(16030, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(16031, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(16032, 55, '                case 0:\n', 0),
(16033, 56, '                    play(getCodeBase(), \n', 0),
(16034, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(16035, 58, '                    break;\n', 0),
(16036, 59, '                case 1:\n', 0),
(16037, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(16038, 61, '                    break;\n', 0),
(16039, 62, '                case 2:\n', 0),
(16040, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(16041, 64, '                    break;\n', 0),
(16042, 65, '                case 3:\n', 0),
(16043, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(16044, 67, '                    break;\n', 0),
(16045, 68, '                }\n', 0),
(16046, 69, '                onaroll++;\n', 0),
(16047, 70, '                if (onaroll > 5) {\n', 0),
(16048, 72, '                } else {\n', 0),
(16049, 74, '                }\n', 0),
(16050, 75, '            } else {   //first hit\n', 0),
(16051, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(16052, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(16053, 78, '                onaroll = 1;\n', 0),
(16054, 79, '            }\n', 0),
(16055, 80, '        } else {   //miss\n', 0),
(16056, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(16057, 82, '			\n', 0),
(16058, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(16059, 84, '            onaroll = 0;\n', 0),
(16060, 85, '        }\n', 0),
(16061, 86, '        repaint();\n', 0),
(16062, 87, '    }\n', 0),
(16063, 88, '\n', 0),
(16064, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(16065, 90, '\n', 0),
(16066, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(16067, 92, '        repaint();\n', 0),
(16068, 93, '    }\n', 0),
(16069, 94, '\n', 0),
(16070, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(16071, 96, '        repaint();\n', 0),
(16072, 97, '    }\n', 0),
(16073, 98, '\n', 0),
(16074, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(16075, 100, '\n', 0),
(16076, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(16077, 102, ' \n', 0),
(16078, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(16079, 104, ' \n', 0),
(16080, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(16081, 106, '        repaint();\n', 0),
(16082, 107, '    }\n', 0),
(16083, 108, ' \n', 0),
(16084, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(16085, 110, '        repaint();\n', 0),
(16086, 111, '    }\n', 0),
(16087, 112, '  \n', 0),
(16088, 113, '    public void destroy() {\n', 0),
(16089, 114, '        removeMouseListener(this);\n', 0),
(16090, 115, '        removeMouseMotionListener(this);\n', 0),
(16091, 116, '    }\n', 0),
(16092, 117, '\n', 0),
(16093, 118, '    public String getAppletInfo() {\n', 0),
(16094, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(16095, 120, '    }\n', 0),
(16096, 121, '}\n', 0),
(16097, 0, 'import java.util.Scanner;\r\n', 0),
(16098, 1, ' class Years{\r\n', 0),
(16099, 2, '   public int getYear(){\r\n', 0),
(16100, 3, '	int year;\r\n', 2),
(16101, 4, '	String enteredYear;\r\n', 2),
(16102, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(16103, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(16104, 7, '	enteredYear = sc.next();\r\n', 0),
(16105, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(16106, 9, '	return year;\r\n', 0),
(16107, 10, '   }\r\n', 0),
(16108, 11, ' }\r\n', 0),
(16109, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(16110, 13, ' class Months extends Years{\r\n', 0),
(16111, 14, '   public int getMonth(){\r\n', 0),
(16112, 15, '	int month;\r\n', 2),
(16113, 16, '	String enteredMonthNumber;\r\n', 2),
(16114, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(16115, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(16116, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(16117, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(16118, 21, '	return month;\r\n', 0),
(16119, 22, '   }\r\n', 0),
(16120, 23, ' }\r\n', 0),
(16121, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(16122, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(16123, 26, ' static int numDays = 0;\r\n', 4),
(16124, 27, ' public static void main(String[] args) {\r\n', 0),
(16125, 28, '   int year;\r\n', 2),
(16126, 29, '   Months m = new Months();\r\n', 0),
(16127, 30, '   int month = m.getMonth();\r\n', 0),
(16128, 31, '   \r\n', 0),
(16129, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(16130, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(16131, 34, '   }\r\n', 0),
(16132, 35, '   else {\r\n', 0),
(16133, 36, '    switch (month) {\r\n', 0),
(16134, 37, '      case 1:\r\n', 0),
(16135, 38, '      case 3:\r\n', 0),
(16136, 39, '      case 5:\r\n', 0),
(16137, 40, '      case 7:\r\n', 0),
(16138, 41, '      case 8:\r\n', 0),
(16139, 42, '      case 10:\r\n', 0),
(16140, 43, '      case 12:\r\n', 0),
(16141, 44, '        numDays = 31;\r\n', 0),
(16142, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(16143, 46, '        break;\r\n', 0),
(16144, 47, '      case 4:\r\n', 0),
(16145, 48, '      case 6:\r\n', 0),
(16146, 49, '      case 9:\r\n', 0),
(16147, 50, '      case 11:\r\n', 0),
(16148, 51, '       numDays = 30;\r\n', 0),
(16149, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(16150, 53, '       break;\r\n', 0),
(16151, 54, '      case 2:\r\n', 0),
(16152, 55, '       year = m.getYear();\r\n', 0),
(16153, 56, '       if(year < 1) {\r\n', 0),
(16154, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(16155, 58, '       }\r\n', 0),
(16156, 59, '       else{\r\n', 0),
(16157, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(16158, 61, '         numDays = 29;\r\n', 0),
(16159, 62, '		 if(year > 2020){\r\n', 0),
(16160, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(16161, 64, '         }\r\n', 0),
(16162, 65, '         else{\r\n', 0),
(16163, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(16164, 67, '         }\r\n', 0),
(16165, 68, '        }//if at line 61\r\n', 0),
(16166, 69, '        else{\r\n', 0),
(16167, 70, '         numDays = 28;\r\n', 0),
(16168, 71, '         if (year > 2020){\r\n', 0),
(16169, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(16170, 73, '         }\r\n', 0),
(16171, 74, '         else{\r\n', 0),
(16172, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(16173, 76, '         }\r\n', 0),
(16174, 77, '         break;  \r\n', 0),
(16175, 78, '        }//else at line 70\r\n', 0),
(16176, 79, '       }//else at line 60\r\n', 0),
(16177, 80, '    }//switch at line 37\r\n', 0),
(16178, 81, '   }//else at line 36\r\n', 0),
(16179, 82, '  }//method\r\n', 0),
(16180, 83, ' }//class', 0),
(16181, 0, 'class Pattern{ \r\n', 0),
(16182, 1, 'public static void main(String[] args) { \r\n', 0),
(16183, 2, '	 int rows = 5;\r\n', 2),
(16184, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(16185, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(16186, 5, '	 System.out.print(j + " "); \r\n', 0),
(16187, 6, '	 } \r\n', 0),
(16188, 7, '	 System.out.println(""); \r\n', 0),
(16189, 8, ' 	} \r\n', 0),
(16190, 9, ' 	} \r\n', 0),
(16191, 10, '} ', 0),
(16192, 0, 'import java.util.Scanner;\r\n', 0),
(16193, 1, ' class Years{\r\n', 0),
(16194, 2, '   public int getYear(){\r\n', 0),
(16195, 3, '	int year;\r\n', 2),
(16196, 4, '	String enteredYear;\r\n', 2),
(16197, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(16198, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(16199, 7, '	enteredYear = sc.next();\r\n', 0),
(16200, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(16201, 9, '	return year;\r\n', 0),
(16202, 10, '   }\r\n', 0),
(16203, 11, ' }\r\n', 0),
(16204, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(16205, 13, ' class Months extends Years{\r\n', 0),
(16206, 14, '   public int getMonth(){\r\n', 0),
(16207, 15, '	int month;\r\n', 2),
(16208, 16, '	String enteredMonthNumber;\r\n', 2),
(16209, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(16210, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(16211, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(16212, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(16213, 21, '	return month;\r\n', 0),
(16214, 22, '   }\r\n', 0),
(16215, 23, ' }\r\n', 0),
(16216, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(16217, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(16218, 26, ' static int numDays = 0;\r\n', 4),
(16219, 27, ' public static void main(String[] args) {\r\n', 0),
(16220, 28, '   int year;\r\n', 2),
(16221, 29, '   Months m = new Months();\r\n', 0),
(16222, 30, '   int month = m.getMonth();\r\n', 0),
(16223, 31, '   \r\n', 0),
(16224, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(16225, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(16226, 34, '   }\r\n', 0),
(16227, 35, '   else {\r\n', 0),
(16228, 36, '    switch (month) {\r\n', 0),
(16229, 37, '      case 1:\r\n', 0),
(16230, 38, '      case 3:\r\n', 0),
(16231, 39, '      case 5:\r\n', 0),
(16232, 40, '      case 7:\r\n', 0),
(16233, 41, '      case 8:\r\n', 0),
(16234, 42, '      case 10:\r\n', 0),
(16235, 43, '      case 12:\r\n', 0),
(16236, 44, '        numDays = 31;\r\n', 0),
(16237, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(16238, 46, '        break;\r\n', 0),
(16239, 47, '      case 4:\r\n', 0),
(16240, 48, '      case 6:\r\n', 0),
(16241, 49, '      case 9:\r\n', 0),
(16242, 50, '      case 11:\r\n', 0),
(16243, 51, '       numDays = 30;\r\n', 0),
(16244, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(16245, 53, '       break;\r\n', 0),
(16246, 54, '      case 2:\r\n', 0),
(16247, 55, '       year = m.getYear();\r\n', 0),
(16248, 56, '       if(year < 1) {\r\n', 0),
(16249, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(16250, 58, '       }\r\n', 0),
(16251, 59, '       else{\r\n', 0),
(16252, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(16253, 61, '         numDays = 29;\r\n', 0),
(16254, 62, '		 if(year > 2020){\r\n', 0),
(16255, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(16256, 64, '         }\r\n', 0),
(16257, 65, '         else{\r\n', 0),
(16258, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(16259, 67, '         }\r\n', 0),
(16260, 68, '        }//if at line 61\r\n', 0),
(16261, 69, '        else{\r\n', 0),
(16262, 70, '         numDays = 28;\r\n', 0),
(16263, 71, '         if (year > 2020){\r\n', 0),
(16264, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(16265, 73, '         }\r\n', 0),
(16266, 74, '         else{\r\n', 0),
(16267, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(16268, 76, '         }\r\n', 0),
(16269, 77, '         break;  \r\n', 0),
(16270, 78, '        }//else at line 70\r\n', 0),
(16271, 79, '       }//else at line 60\r\n', 0),
(16272, 80, '    }//switch at line 37\r\n', 0),
(16273, 81, '   }//else at line 36\r\n', 0),
(16274, 82, '  }//method\r\n', 0),
(16275, 83, ' }//class', 0),
(16276, 0, 'class HelloWorld { \r\n', 0),
(16277, 1, '	public static void main(String args[]) \r\n', 0),
(16278, 2, '	{ \r\n', 0),
(16279, 3, '		System.out.println("Hello World"); \r\n', 0),
(16280, 4, '	} \r\n', 0),
(16281, 5, '} \r\n', 0),
(16282, 0, 'import java.awt.event.*;\n', 0),
(16283, 1, 'import java.awt.*;\n', 0),
(16284, 2, '\n', 0),
(16285, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(16286, 4, '\n', 0),
(16287, 5, '    private int mx, my;\n', 4),
(16288, 6, '    private Dimension size;\n', 8),
(16289, 7, '    private int onaroll;\n', 2),
(16290, 8, '\n', 0),
(16291, 9, '    public void init() {\n', 0),
(16292, 10, '        onaroll = 0;\n', 0),
(16293, 11, '        setSize(500, 500);\n', 0),
(16294, 12, '        size = getSize();\n', 0),
(16295, 13, '        addMouseListener(this);\n', 0),
(16296, 14, '        addMouseMotionListener(this);\n', 0),
(16297, 15, '        addComponentListener(this);\n', 0),
(16298, 16, '    }\n', 0),
(16299, 17, '\n', 0),
(16300, 18, '    public void update(Graphics g) {\n', 0),
(16301, 19, '        Dimension newSize = getSize();\n', 8),
(16302, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(16303, 21, '            g.setColor(getBackground());\n', 0),
(16304, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(16305, 23, '        } else {\n', 0),
(16306, 24, '            size = newSize;\n', 0),
(16307, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(16308, 26, '        } // Calculate new position\n', 0),
(16309, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(16310, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(16311, 29, '        paint(g);\n', 0),
(16312, 30, '    }\n', 0),
(16313, 31, '  \n', 0),
(16314, 32, '    public void paint(Graphics g) {\n', 0),
(16315, 33, '        g.setColor(Color.black);\n', 0),
(16316, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(16317, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(16318, 36, '    }\n', 0),
(16319, 37, '\n', 0),
(16320, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(16321, 39, '\n', 0),
(16322, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(16323, 41, '        e.consume();\n', 0),
(16324, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(16325, 43, '            repaint();\n', 0),
(16326, 44, '        }\n', 0),
(16327, 45, '    }\n', 0),
(16328, 46, '\n', 0),
(16329, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(16330, 48, '        int x = e.getX();\n', 0),
(16331, 49, '        int y = e.getY();\n', 0),
(16332, 50, '        e.consume();\n', 0),
(16333, 51, '        requestFocus();\n', 0),
(16334, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(16335, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(16336, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(16337, 55, '                case 0:\n', 0),
(16338, 56, '                    play(getCodeBase(), \n', 0),
(16339, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(16340, 58, '                    break;\n', 0),
(16341, 59, '                case 1:\n', 0),
(16342, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(16343, 61, '                    break;\n', 0),
(16344, 62, '                case 2:\n', 0),
(16345, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(16346, 64, '                    break;\n', 0),
(16347, 65, '                case 3:\n', 0),
(16348, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(16349, 67, '                    break;\n', 0),
(16350, 68, '                }\n', 0),
(16351, 69, '                onaroll++;\n', 0),
(16352, 70, '                if (onaroll > 5) {\n', 0),
(16353, 72, '                } else {\n', 0),
(16354, 74, '                }\n', 0),
(16355, 75, '            } else {   //first hit\n', 0),
(16356, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(16357, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(16358, 78, '                onaroll = 1;\n', 0),
(16359, 79, '            }\n', 0),
(16360, 80, '        } else {   //miss\n', 0),
(16361, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(16362, 82, '			\n', 0),
(16363, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(16364, 84, '            onaroll = 0;\n', 0),
(16365, 85, '        }\n', 0),
(16366, 86, '        repaint();\n', 0),
(16367, 87, '    }\n', 0),
(16368, 88, '\n', 0),
(16369, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(16370, 90, '\n', 0),
(16371, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(16372, 92, '        repaint();\n', 0),
(16373, 93, '    }\n', 0),
(16374, 94, '\n', 0),
(16375, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(16376, 96, '        repaint();\n', 0),
(16377, 97, '    }\n', 0),
(16378, 98, '\n', 0),
(16379, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(16380, 100, '\n', 0),
(16381, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(16382, 102, ' \n', 0),
(16383, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(16384, 104, ' \n', 0),
(16385, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(16386, 106, '        repaint();\n', 0),
(16387, 107, '    }\n', 0),
(16388, 108, ' \n', 0),
(16389, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(16390, 110, '        repaint();\n', 0),
(16391, 111, '    }\n', 0),
(16392, 112, '  \n', 0),
(16393, 113, '    public void destroy() {\n', 0),
(16394, 114, '        removeMouseListener(this);\n', 0),
(16395, 115, '        removeMouseMotionListener(this);\n', 0),
(16396, 116, '    }\n', 0),
(16397, 117, '\n', 0),
(16398, 118, '    public String getAppletInfo() {\n', 0),
(16399, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(16400, 120, '    }\n', 0),
(16401, 121, '}\n', 0),
(16402, 0, 'import java.awt.event.*;\n', 0),
(16403, 1, 'import java.awt.*;\n', 0),
(16404, 2, '\n', 0),
(16405, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(16406, 4, '\n', 0),
(16407, 5, '    private int mx, my;\n', 4),
(16408, 6, '    private Dimension size;\n', 8),
(16409, 7, '    private int onaroll;\n', 2),
(16410, 8, '\n', 0),
(16411, 9, '    public void init() {\n', 0),
(16412, 10, '        onaroll = 0;\n', 0),
(16413, 11, '        setSize(500, 500);\n', 0),
(16414, 12, '        size = getSize();\n', 0),
(16415, 13, '        addMouseListener(this);\n', 0),
(16416, 14, '        addMouseMotionListener(this);\n', 0),
(16417, 15, '        addComponentListener(this);\n', 0),
(16418, 16, '    }\n', 0),
(16419, 17, '\n', 0),
(16420, 18, '    public void update(Graphics g) {\n', 0),
(16421, 19, '        Dimension newSize = getSize();\n', 8),
(16422, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(16423, 21, '            g.setColor(getBackground());\n', 0),
(16424, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(16425, 23, '        } else {\n', 0),
(16426, 24, '            size = newSize;\n', 0),
(16427, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(16428, 26, '        } // Calculate new position\n', 0),
(16429, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(16430, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(16431, 29, '        paint(g);\n', 0),
(16432, 30, '    }\n', 0),
(16433, 31, '  \n', 0),
(16434, 32, '    public void paint(Graphics g) {\n', 0),
(16435, 33, '        g.setColor(Color.black);\n', 0),
(16436, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(16437, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(16438, 36, '    }\n', 0),
(16439, 37, '\n', 0),
(16440, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(16441, 39, '\n', 0),
(16442, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(16443, 41, '        e.consume();\n', 0),
(16444, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(16445, 43, '            repaint();\n', 0),
(16446, 44, '        }\n', 0),
(16447, 45, '    }\n', 0),
(16448, 46, '\n', 0),
(16449, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(16450, 48, '        int x = e.getX();\n', 0),
(16451, 49, '        int y = e.getY();\n', 0),
(16452, 50, '        e.consume();\n', 0),
(16453, 51, '        requestFocus();\n', 0),
(16454, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(16455, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(16456, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(16457, 55, '                case 0:\n', 0),
(16458, 56, '                    play(getCodeBase(), \n', 0),
(16459, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(16460, 58, '                    break;\n', 0),
(16461, 59, '                case 1:\n', 0),
(16462, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(16463, 61, '                    break;\n', 0),
(16464, 62, '                case 2:\n', 0),
(16465, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(16466, 64, '                    break;\n', 0),
(16467, 65, '                case 3:\n', 0),
(16468, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(16469, 67, '                    break;\n', 0),
(16470, 68, '                }\n', 0),
(16471, 69, '                onaroll++;\n', 0),
(16472, 70, '                if (onaroll > 5) {\n', 0),
(16473, 72, '                } else {\n', 0),
(16474, 74, '                }\n', 0),
(16475, 75, '            } else {   //first hit\n', 0),
(16476, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(16477, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(16478, 78, '                onaroll = 1;\n', 0),
(16479, 79, '            }\n', 0),
(16480, 80, '        } else {   //miss\n', 0),
(16481, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(16482, 82, '			\n', 0),
(16483, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(16484, 84, '            onaroll = 0;\n', 0),
(16485, 85, '        }\n', 0),
(16486, 86, '        repaint();\n', 0),
(16487, 87, '    }\n', 0),
(16488, 88, '\n', 0),
(16489, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(16490, 90, '\n', 0),
(16491, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(16492, 92, '        repaint();\n', 0),
(16493, 93, '    }\n', 0),
(16494, 94, '\n', 0),
(16495, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(16496, 96, '        repaint();\n', 0),
(16497, 97, '    }\n', 0),
(16498, 98, '\n', 0),
(16499, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(16500, 100, '\n', 0),
(16501, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(16502, 102, ' \n', 0),
(16503, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(16504, 104, ' \n', 0),
(16505, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(16506, 106, '        repaint();\n', 0),
(16507, 107, '    }\n', 0),
(16508, 108, ' \n', 0),
(16509, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(16510, 110, '        repaint();\n', 0),
(16511, 111, '    }\n', 0),
(16512, 112, '  \n', 0),
(16513, 113, '    public void destroy() {\n', 0),
(16514, 114, '        removeMouseListener(this);\n', 0),
(16515, 115, '        removeMouseMotionListener(this);\n', 0),
(16516, 116, '    }\n', 0),
(16517, 117, '\n', 0),
(16518, 118, '    public String getAppletInfo() {\n', 0),
(16519, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(16520, 120, '    }\n', 0),
(16521, 121, '}\n', 0),
(16522, 0, 'import java.util.Scanner;\r\n', 0),
(16523, 1, ' class Years{\r\n', 0),
(16524, 2, '   public int getYear(){\r\n', 0),
(16525, 3, '	int year;\r\n', 2),
(16526, 4, '	String enteredYear;\r\n', 2),
(16527, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(16528, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(16529, 7, '	enteredYear = sc.next();\r\n', 0),
(16530, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(16531, 9, '	return year;\r\n', 0),
(16532, 10, '   }\r\n', 0),
(16533, 11, ' }\r\n', 0),
(16534, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(16535, 13, ' class Months extends Years{\r\n', 0),
(16536, 14, '   public int getMonth(){\r\n', 0),
(16537, 15, '	int month;\r\n', 2),
(16538, 16, '	String enteredMonthNumber;\r\n', 2),
(16539, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(16540, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(16541, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(16542, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(16543, 21, '	return month;\r\n', 0),
(16544, 22, '   }\r\n', 0),
(16545, 23, ' }\r\n', 0),
(16546, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(16547, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(16548, 26, ' static int numDays = 0;\r\n', 4),
(16549, 27, ' public static void main(String[] args) {\r\n', 0),
(16550, 28, '   int year;\r\n', 2),
(16551, 29, '   Months m = new Months();\r\n', 0),
(16552, 30, '   int month = m.getMonth();\r\n', 0),
(16553, 31, '   \r\n', 0),
(16554, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(16555, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(16556, 34, '   }\r\n', 0),
(16557, 35, '   else {\r\n', 0),
(16558, 36, '    switch (month) {\r\n', 0),
(16559, 37, '      case 1:\r\n', 0),
(16560, 38, '      case 3:\r\n', 0),
(16561, 39, '      case 5:\r\n', 0),
(16562, 40, '      case 7:\r\n', 0),
(16563, 41, '      case 8:\r\n', 0),
(16564, 42, '      case 10:\r\n', 0),
(16565, 43, '      case 12:\r\n', 0),
(16566, 44, '        numDays = 31;\r\n', 0),
(16567, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(16568, 46, '        break;\r\n', 0),
(16569, 47, '      case 4:\r\n', 0),
(16570, 48, '      case 6:\r\n', 0),
(16571, 49, '      case 9:\r\n', 0),
(16572, 50, '      case 11:\r\n', 0),
(16573, 51, '       numDays = 30;\r\n', 0),
(16574, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(16575, 53, '       break;\r\n', 0),
(16576, 54, '      case 2:\r\n', 0),
(16577, 55, '       year = m.getYear();\r\n', 0),
(16578, 56, '       if(year < 1) {\r\n', 0),
(16579, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(16580, 58, '       }\r\n', 0),
(16581, 59, '       else{\r\n', 0),
(16582, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(16583, 61, '         numDays = 29;\r\n', 0),
(16584, 62, '		 if(year > 2020){\r\n', 0),
(16585, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(16586, 64, '         }\r\n', 0),
(16587, 65, '         else{\r\n', 0),
(16588, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(16589, 67, '         }\r\n', 0),
(16590, 68, '        }//if at line 61\r\n', 0),
(16591, 69, '        else{\r\n', 0),
(16592, 70, '         numDays = 28;\r\n', 0),
(16593, 71, '         if (year > 2020){\r\n', 0),
(16594, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(16595, 73, '         }\r\n', 0),
(16596, 74, '         else{\r\n', 0),
(16597, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(16598, 76, '         }\r\n', 0),
(16599, 77, '         break;  \r\n', 0),
(16600, 78, '        }//else at line 70\r\n', 0),
(16601, 79, '       }//else at line 60\r\n', 0),
(16602, 80, '    }//switch at line 37\r\n', 0),
(16603, 81, '   }//else at line 36\r\n', 0),
(16604, 82, '  }//method\r\n', 0),
(16605, 83, ' }//class', 0),
(16606, 0, 'public class RecursionExample2 {  \r\n', 0),
(16607, 1, 'static int count=0;  \r\n', 4),
(16608, 2, 'public int p(){  \r\n', 0),
(16609, 3, 'count++;  \r\n', 0),
(16610, 4, 'if(count<=5){  \r\n', 0),
(16611, 5, 'System.out.println("hello "+count);  \r\n', 0),
(16612, 6, 'public int p();  \r\n', 0),
(16613, 7, '}  \r\n', 0),
(16614, 8, '}  \r\n', 0),
(16615, 9, 'public static void main(String[] args) {  \r\n', 0),
(16616, 10, 'p();  \r\n', 0),
(16617, 11, '}  \r\n', 0),
(16618, 12, '}  ', 0),
(16619, 0, 'import java.awt.event.*;\n', 0),
(16620, 1, 'import java.awt.*;\n', 0),
(16621, 2, '\n', 0),
(16622, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(16623, 4, '\n', 0),
(16624, 5, '    private int mx, my;\n', 4),
(16625, 6, '    private Dimension size;\n', 8),
(16626, 7, '    private int onaroll;\n', 2),
(16627, 8, '\n', 0),
(16628, 9, '    public void init() {\n', 0),
(16629, 10, '        onaroll = 0;\n', 0),
(16630, 11, '        setSize(500, 500);\n', 0),
(16631, 12, '        size = getSize();\n', 0),
(16632, 13, '        addMouseListener(this);\n', 0),
(16633, 14, '        addMouseMotionListener(this);\n', 0),
(16634, 15, '        addComponentListener(this);\n', 0),
(16635, 16, '    }\n', 0),
(16636, 17, '\n', 0),
(16637, 18, '    public void update(Graphics g) {\n', 0),
(16638, 19, '        Dimension newSize = getSize();\n', 8),
(16639, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(16640, 21, '            g.setColor(getBackground());\n', 0),
(16641, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(16642, 23, '        } else {\n', 0),
(16643, 24, '            size = newSize;\n', 0),
(16644, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(16645, 26, '        } // Calculate new position\n', 0),
(16646, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(16647, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(16648, 29, '        paint(g);\n', 0),
(16649, 30, '    }\n', 0),
(16650, 31, '  \n', 0),
(16651, 32, '    public void paint(Graphics g) {\n', 0),
(16652, 33, '        g.setColor(Color.black);\n', 0),
(16653, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(16654, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(16655, 36, '    }\n', 0),
(16656, 37, '\n', 0),
(16657, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(16658, 39, '\n', 0),
(16659, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(16660, 41, '        e.consume();\n', 0),
(16661, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(16662, 43, '            repaint();\n', 0),
(16663, 44, '        }\n', 0),
(16664, 45, '    }\n', 0),
(16665, 46, '\n', 0),
(16666, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(16667, 48, '        int x = e.getX();\n', 0),
(16668, 49, '        int y = e.getY();\n', 0),
(16669, 50, '        e.consume();\n', 0),
(16670, 51, '        requestFocus();\n', 0),
(16671, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(16672, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(16673, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(16674, 55, '                case 0:\n', 0),
(16675, 56, '                    play(getCodeBase(), \n', 0),
(16676, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(16677, 58, '                    break;\n', 0),
(16678, 59, '                case 1:\n', 0),
(16679, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(16680, 61, '                    break;\n', 0),
(16681, 62, '                case 2:\n', 0),
(16682, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(16683, 64, '                    break;\n', 0),
(16684, 65, '                case 3:\n', 0),
(16685, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(16686, 67, '                    break;\n', 0),
(16687, 68, '                }\n', 0),
(16688, 69, '                onaroll++;\n', 0),
(16689, 70, '                if (onaroll > 5) {\n', 0),
(16690, 72, '                } else {\n', 0),
(16691, 74, '                }\n', 0),
(16692, 75, '            } else {   //first hit\n', 0),
(16693, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(16694, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(16695, 78, '                onaroll = 1;\n', 0),
(16696, 79, '            }\n', 0),
(16697, 80, '        } else {   //miss\n', 0),
(16698, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(16699, 82, '			\n', 0),
(16700, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(16701, 84, '            onaroll = 0;\n', 0),
(16702, 85, '        }\n', 0),
(16703, 86, '        repaint();\n', 0),
(16704, 87, '    }\n', 0),
(16705, 88, '\n', 0),
(16706, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(16707, 90, '\n', 0),
(16708, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(16709, 92, '        repaint();\n', 0),
(16710, 93, '    }\n', 0),
(16711, 94, '\n', 0),
(16712, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(16713, 96, '        repaint();\n', 0),
(16714, 97, '    }\n', 0),
(16715, 98, '\n', 0),
(16716, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(16717, 100, '\n', 0),
(16718, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(16719, 102, ' \n', 0),
(16720, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(16721, 104, ' \n', 0),
(16722, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(16723, 106, '        repaint();\n', 0),
(16724, 107, '    }\n', 0),
(16725, 108, ' \n', 0),
(16726, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(16727, 110, '        repaint();\n', 0),
(16728, 111, '    }\n', 0),
(16729, 112, '  \n', 0),
(16730, 113, '    public void destroy() {\n', 0),
(16731, 114, '        removeMouseListener(this);\n', 0),
(16732, 115, '        removeMouseMotionListener(this);\n', 0),
(16733, 116, '    }\n', 0),
(16734, 117, '\n', 0),
(16735, 118, '    public String getAppletInfo() {\n', 0),
(16736, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(16737, 120, '    }\n', 0),
(16738, 121, '}\n', 0),
(16739, 0, 'import java.awt.event.*;\n', 0),
(16740, 1, 'import java.awt.*;\n', 0),
(16741, 2, '\n', 0),
(16742, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(16743, 4, '\n', 0),
(16744, 5, '    private int mx, my;\n', 4),
(16745, 6, '    private Dimension size;\n', 8),
(16746, 7, '    private int onaroll;\n', 2),
(16747, 8, '\n', 0),
(16748, 9, '    public void init() {\n', 0),
(16749, 10, '        onaroll = 0;\n', 0),
(16750, 11, '        setSize(500, 500);\n', 0),
(16751, 12, '        size = getSize();\n', 0),
(16752, 13, '        addMouseListener(this);\n', 0),
(16753, 14, '        addMouseMotionListener(this);\n', 0),
(16754, 15, '        addComponentListener(this);\n', 0),
(16755, 16, '    }\n', 0),
(16756, 17, '\n', 0),
(16757, 18, '    public void update(Graphics g) {\n', 0),
(16758, 19, '        Dimension newSize = getSize();\n', 8),
(16759, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(16760, 21, '            g.setColor(getBackground());\n', 0),
(16761, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(16762, 23, '        } else {\n', 0),
(16763, 24, '            size = newSize;\n', 0),
(16764, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(16765, 26, '        } // Calculate new position\n', 0),
(16766, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(16767, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(16768, 29, '        paint(g);\n', 0),
(16769, 30, '    }\n', 0),
(16770, 31, '  \n', 0),
(16771, 32, '    public void paint(Graphics g) {\n', 0),
(16772, 33, '        g.setColor(Color.black);\n', 0),
(16773, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(16774, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(16775, 36, '    }\n', 0),
(16776, 37, '\n', 0),
(16777, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(16778, 39, '\n', 0),
(16779, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(16780, 41, '        e.consume();\n', 0),
(16781, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(16782, 43, '            repaint();\n', 0),
(16783, 44, '        }\n', 0),
(16784, 45, '    }\n', 0),
(16785, 46, '\n', 0),
(16786, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(16787, 48, '        int x = e.getX();\n', 0),
(16788, 49, '        int y = e.getY();\n', 0),
(16789, 50, '        e.consume();\n', 0),
(16790, 51, '        requestFocus();\n', 0),
(16791, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(16792, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(16793, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(16794, 55, '                case 0:\n', 0),
(16795, 56, '                    play(getCodeBase(), \n', 0),
(16796, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(16797, 58, '                    break;\n', 0),
(16798, 59, '                case 1:\n', 0),
(16799, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(16800, 61, '                    break;\n', 0),
(16801, 62, '                case 2:\n', 0),
(16802, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(16803, 64, '                    break;\n', 0),
(16804, 65, '                case 3:\n', 0),
(16805, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(16806, 67, '                    break;\n', 0),
(16807, 68, '                }\n', 0),
(16808, 69, '                onaroll++;\n', 0),
(16809, 70, '                if (onaroll > 5) {\n', 0),
(16810, 72, '                } else {\n', 0),
(16811, 74, '                }\n', 0),
(16812, 75, '            } else {   //first hit\n', 0),
(16813, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(16814, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(16815, 78, '                onaroll = 1;\n', 0),
(16816, 79, '            }\n', 0),
(16817, 80, '        } else {   //miss\n', 0),
(16818, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(16819, 82, '			\n', 0),
(16820, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(16821, 84, '            onaroll = 0;\n', 0),
(16822, 85, '        }\n', 0),
(16823, 86, '        repaint();\n', 0),
(16824, 87, '    }\n', 0),
(16825, 88, '\n', 0),
(16826, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(16827, 90, '\n', 0),
(16828, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(16829, 92, '        repaint();\n', 0),
(16830, 93, '    }\n', 0),
(16831, 94, '\n', 0),
(16832, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(16833, 96, '        repaint();\n', 0),
(16834, 97, '    }\n', 0),
(16835, 98, '\n', 0),
(16836, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(16837, 100, '\n', 0),
(16838, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(16839, 102, ' \n', 0),
(16840, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(16841, 104, ' \n', 0),
(16842, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(16843, 106, '        repaint();\n', 0),
(16844, 107, '    }\n', 0),
(16845, 108, ' \n', 0),
(16846, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(16847, 110, '        repaint();\n', 0),
(16848, 111, '    }\n', 0),
(16849, 112, '  \n', 0),
(16850, 113, '    public void destroy() {\n', 0),
(16851, 114, '        removeMouseListener(this);\n', 0),
(16852, 115, '        removeMouseMotionListener(this);\n', 0),
(16853, 116, '    }\n', 0),
(16854, 117, '\n', 0),
(16855, 118, '    public String getAppletInfo() {\n', 0),
(16856, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(16857, 120, '    }\n', 0),
(16858, 121, '}\n', 0),
(16859, 0, 'import java.util.Scanner;\r\n', 0),
(16860, 1, ' class Years{\r\n', 0),
(16861, 2, '   public int getYear(){\r\n', 0),
(16862, 3, '	int year;\r\n', 2),
(16863, 4, '	String enteredYear;\r\n', 2),
(16864, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(16865, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(16866, 7, '	enteredYear = sc.next();\r\n', 0),
(16867, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(16868, 9, '	return year;\r\n', 0),
(16869, 10, '   }\r\n', 0),
(16870, 11, ' }\r\n', 0),
(16871, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(16872, 13, ' class Months extends Years{\r\n', 0),
(16873, 14, '   public int getMonth(){\r\n', 0),
(16874, 15, '	int month;\r\n', 2),
(16875, 16, '	String enteredMonthNumber;\r\n', 2),
(16876, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(16877, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(16878, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(16879, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(16880, 21, '	return month;\r\n', 0),
(16881, 22, '   }\r\n', 0),
(16882, 23, ' }\r\n', 0),
(16883, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(16884, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(16885, 26, ' static int numDays = 0;\r\n', 4),
(16886, 27, ' public static void main(String[] args) {\r\n', 0),
(16887, 28, '   int year;\r\n', 2),
(16888, 29, '   Months m = new Months();\r\n', 0),
(16889, 30, '   int month = m.getMonth();\r\n', 0),
(16890, 31, '   \r\n', 0),
(16891, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(16892, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(16893, 34, '   }\r\n', 0),
(16894, 35, '   else {\r\n', 0),
(16895, 36, '    switch (month) {\r\n', 0),
(16896, 37, '      case 1:\r\n', 0),
(16897, 38, '      case 3:\r\n', 0),
(16898, 39, '      case 5:\r\n', 0),
(16899, 40, '      case 7:\r\n', 0),
(16900, 41, '      case 8:\r\n', 0),
(16901, 42, '      case 10:\r\n', 0),
(16902, 43, '      case 12:\r\n', 0),
(16903, 44, '        numDays = 31;\r\n', 0),
(16904, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(16905, 46, '        break;\r\n', 0),
(16906, 47, '      case 4:\r\n', 0),
(16907, 48, '      case 6:\r\n', 0),
(16908, 49, '      case 9:\r\n', 0),
(16909, 50, '      case 11:\r\n', 0),
(16910, 51, '       numDays = 30;\r\n', 0),
(16911, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(16912, 53, '       break;\r\n', 0),
(16913, 54, '      case 2:\r\n', 0),
(16914, 55, '       year = m.getYear();\r\n', 0),
(16915, 56, '       if(year < 1) {\r\n', 0),
(16916, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(16917, 58, '       }\r\n', 0),
(16918, 59, '       else{\r\n', 0),
(16919, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(16920, 61, '         numDays = 29;\r\n', 0),
(16921, 62, '		 if(year > 2020){\r\n', 0),
(16922, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(16923, 64, '         }\r\n', 0),
(16924, 65, '         else{\r\n', 0),
(16925, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(16926, 67, '         }\r\n', 0),
(16927, 68, '        }//if at line 61\r\n', 0),
(16928, 69, '        else{\r\n', 0),
(16929, 70, '         numDays = 28;\r\n', 0),
(16930, 71, '         if (year > 2020){\r\n', 0),
(16931, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(16932, 73, '         }\r\n', 0),
(16933, 74, '         else{\r\n', 0),
(16934, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(16935, 76, '         }\r\n', 0),
(16936, 77, '         break;  \r\n', 0),
(16937, 78, '        }//else at line 70\r\n', 0),
(16938, 79, '       }//else at line 60\r\n', 0),
(16939, 80, '    }//switch at line 37\r\n', 0),
(16940, 81, '   }//else at line 36\r\n', 0),
(16941, 82, '  }//method\r\n', 0),
(16942, 83, ' }//class', 0),
(16943, 0, 'class Pattern{ \r\n', 0),
(16944, 1, 'public static void main(String[] args) { \r\n', 0),
(16945, 2, '	 int rows = 5;\r\n', 2),
(16946, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(16947, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(16948, 5, '	 System.out.print(j + " "); \r\n', 0),
(16949, 6, '	 } \r\n', 0),
(16950, 7, '	 System.out.println(""); \r\n', 0),
(16951, 8, ' 	} \r\n', 0),
(16952, 9, ' 	} \r\n', 0),
(16953, 10, '} ', 0),
(16954, 0, 'import java.util.Scanner;\r\n', 0),
(16955, 1, ' class Years{\r\n', 0),
(16956, 2, '   public int getYear(){\r\n', 0),
(16957, 3, '	int year;\r\n', 2),
(16958, 4, '	String enteredYear;\r\n', 2),
(16959, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(16960, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(16961, 7, '	enteredYear = sc.next();\r\n', 0),
(16962, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(16963, 9, '	return year;\r\n', 0),
(16964, 10, '   }\r\n', 0),
(16965, 11, ' }\r\n', 0),
(16966, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(16967, 13, ' class Months extends Years{\r\n', 0),
(16968, 14, '   public int getMonth(){\r\n', 0),
(16969, 15, '	int month;\r\n', 2),
(16970, 16, '	String enteredMonthNumber;\r\n', 2),
(16971, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(16972, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(16973, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(16974, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(16975, 21, '	return month;\r\n', 0),
(16976, 22, '   }\r\n', 0),
(16977, 23, ' }\r\n', 0),
(16978, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(16979, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(16980, 26, ' static int numDays = 0;\r\n', 4),
(16981, 27, ' public static void main(String[] args) {\r\n', 0),
(16982, 28, '   int year;\r\n', 2),
(16983, 29, '   Months m = new Months();\r\n', 0),
(16984, 30, '   int month = m.getMonth();\r\n', 0),
(16985, 31, '   \r\n', 0),
(16986, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(16987, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(16988, 34, '   }\r\n', 0),
(16989, 35, '   else {\r\n', 0),
(16990, 36, '    switch (month) {\r\n', 0),
(16991, 37, '      case 1:\r\n', 0),
(16992, 38, '      case 3:\r\n', 0),
(16993, 39, '      case 5:\r\n', 0),
(16994, 40, '      case 7:\r\n', 0),
(16995, 41, '      case 8:\r\n', 0),
(16996, 42, '      case 10:\r\n', 0),
(16997, 43, '      case 12:\r\n', 0),
(16998, 44, '        numDays = 31;\r\n', 0),
(16999, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(17000, 46, '        break;\r\n', 0),
(17001, 47, '      case 4:\r\n', 0),
(17002, 48, '      case 6:\r\n', 0),
(17003, 49, '      case 9:\r\n', 0),
(17004, 50, '      case 11:\r\n', 0),
(17005, 51, '       numDays = 30;\r\n', 0),
(17006, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(17007, 53, '       break;\r\n', 0),
(17008, 54, '      case 2:\r\n', 0),
(17009, 55, '       year = m.getYear();\r\n', 0),
(17010, 56, '       if(year < 1) {\r\n', 0),
(17011, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(17012, 58, '       }\r\n', 0),
(17013, 59, '       else{\r\n', 0),
(17014, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(17015, 61, '         numDays = 29;\r\n', 0),
(17016, 62, '		 if(year > 2020){\r\n', 0),
(17017, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(17018, 64, '         }\r\n', 0),
(17019, 65, '         else{\r\n', 0),
(17020, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(17021, 67, '         }\r\n', 0),
(17022, 68, '        }//if at line 61\r\n', 0),
(17023, 69, '        else{\r\n', 0),
(17024, 70, '         numDays = 28;\r\n', 0),
(17025, 71, '         if (year > 2020){\r\n', 0),
(17026, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(17027, 73, '         }\r\n', 0),
(17028, 74, '         else{\r\n', 0),
(17029, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(17030, 76, '         }\r\n', 0),
(17031, 77, '         break;  \r\n', 0),
(17032, 78, '        }//else at line 70\r\n', 0),
(17033, 79, '       }//else at line 60\r\n', 0),
(17034, 80, '    }//switch at line 37\r\n', 0),
(17035, 81, '   }//else at line 36\r\n', 0),
(17036, 82, '  }//method\r\n', 0),
(17037, 83, ' }//class', 0),
(17038, 0, 'class HelloWorld { \r\n', 0),
(17039, 1, '	public static void main(String args[]) \r\n', 0),
(17040, 2, '	{ \r\n', 0),
(17041, 3, '		System.out.println("Hello World"); \r\n', 0),
(17042, 4, '	} \r\n', 0),
(17043, 5, '} \r\n', 0),
(17044, 0, 'import java.awt.event.*;\n', 0),
(17045, 1, 'import java.awt.*;\n', 0),
(17046, 2, '\n', 0),
(17047, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(17048, 4, '\n', 0),
(17049, 5, '    private int mx, my;\n', 4),
(17050, 6, '    private Dimension size;\n', 8),
(17051, 7, '    private int onaroll;\n', 2),
(17052, 8, '\n', 0),
(17053, 9, '    public void init() {\n', 0),
(17054, 10, '        onaroll = 0;\n', 0),
(17055, 11, '        setSize(500, 500);\n', 0),
(17056, 12, '        size = getSize();\n', 0),
(17057, 13, '        addMouseListener(this);\n', 0),
(17058, 14, '        addMouseMotionListener(this);\n', 0),
(17059, 15, '        addComponentListener(this);\n', 0),
(17060, 16, '    }\n', 0),
(17061, 17, '\n', 0),
(17062, 18, '    public void update(Graphics g) {\n', 0),
(17063, 19, '        Dimension newSize = getSize();\n', 8),
(17064, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(17065, 21, '            g.setColor(getBackground());\n', 0),
(17066, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(17067, 23, '        } else {\n', 0),
(17068, 24, '            size = newSize;\n', 0),
(17069, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(17070, 26, '        } // Calculate new position\n', 0),
(17071, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(17072, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(17073, 29, '        paint(g);\n', 0),
(17074, 30, '    }\n', 0),
(17075, 31, '  \n', 0),
(17076, 32, '    public void paint(Graphics g) {\n', 0),
(17077, 33, '        g.setColor(Color.black);\n', 0),
(17078, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(17079, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(17080, 36, '    }\n', 0),
(17081, 37, '\n', 0),
(17082, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(17083, 39, '\n', 0),
(17084, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(17085, 41, '        e.consume();\n', 0),
(17086, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(17087, 43, '            repaint();\n', 0),
(17088, 44, '        }\n', 0),
(17089, 45, '    }\n', 0),
(17090, 46, '\n', 0),
(17091, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(17092, 48, '        int x = e.getX();\n', 0),
(17093, 49, '        int y = e.getY();\n', 0),
(17094, 50, '        e.consume();\n', 0),
(17095, 51, '        requestFocus();\n', 0),
(17096, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(17097, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(17098, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(17099, 55, '                case 0:\n', 0),
(17100, 56, '                    play(getCodeBase(), \n', 0),
(17101, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(17102, 58, '                    break;\n', 0),
(17103, 59, '                case 1:\n', 0),
(17104, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(17105, 61, '                    break;\n', 0),
(17106, 62, '                case 2:\n', 0),
(17107, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(17108, 64, '                    break;\n', 0),
(17109, 65, '                case 3:\n', 0),
(17110, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(17111, 67, '                    break;\n', 0),
(17112, 68, '                }\n', 0),
(17113, 69, '                onaroll++;\n', 0),
(17114, 70, '                if (onaroll > 5) {\n', 0),
(17115, 72, '                } else {\n', 0),
(17116, 74, '                }\n', 0),
(17117, 75, '            } else {   //first hit\n', 0),
(17118, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(17119, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(17120, 78, '                onaroll = 1;\n', 0),
(17121, 79, '            }\n', 0),
(17122, 80, '        } else {   //miss\n', 0),
(17123, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(17124, 82, '			\n', 0),
(17125, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(17126, 84, '            onaroll = 0;\n', 0),
(17127, 85, '        }\n', 0),
(17128, 86, '        repaint();\n', 0),
(17129, 87, '    }\n', 0),
(17130, 88, '\n', 0),
(17131, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(17132, 90, '\n', 0),
(17133, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(17134, 92, '        repaint();\n', 0),
(17135, 93, '    }\n', 0),
(17136, 94, '\n', 0),
(17137, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(17138, 96, '        repaint();\n', 0),
(17139, 97, '    }\n', 0),
(17140, 98, '\n', 0),
(17141, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(17142, 100, '\n', 0),
(17143, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(17144, 102, ' \n', 0),
(17145, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(17146, 104, ' \n', 0),
(17147, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(17148, 106, '        repaint();\n', 0),
(17149, 107, '    }\n', 0),
(17150, 108, ' \n', 0),
(17151, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(17152, 110, '        repaint();\n', 0),
(17153, 111, '    }\n', 0),
(17154, 112, '  \n', 0),
(17155, 113, '    public void destroy() {\n', 0),
(17156, 114, '        removeMouseListener(this);\n', 0),
(17157, 115, '        removeMouseMotionListener(this);\n', 0),
(17158, 116, '    }\n', 0),
(17159, 117, '\n', 0),
(17160, 118, '    public String getAppletInfo() {\n', 0),
(17161, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(17162, 120, '    }\n', 0),
(17163, 121, '}\n', 0),
(17164, 0, 'import java.awt.event.*;\n', 0),
(17165, 1, 'import java.awt.*;\n', 0),
(17166, 2, '\n', 0),
(17167, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(17168, 4, '\n', 0),
(17169, 5, '    private int mx, my;\n', 4),
(17170, 6, '    private Dimension size;\n', 8),
(17171, 7, '    private int onaroll;\n', 2),
(17172, 8, '\n', 0),
(17173, 9, '    public void init() {\n', 0),
(17174, 10, '        onaroll = 0;\n', 0),
(17175, 11, '        setSize(500, 500);\n', 0),
(17176, 12, '        size = getSize();\n', 0),
(17177, 13, '        addMouseListener(this);\n', 0),
(17178, 14, '        addMouseMotionListener(this);\n', 0),
(17179, 15, '        addComponentListener(this);\n', 0),
(17180, 16, '    }\n', 0),
(17181, 17, '\n', 0),
(17182, 18, '    public void update(Graphics g) {\n', 0),
(17183, 19, '        Dimension newSize = getSize();\n', 8),
(17184, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(17185, 21, '            g.setColor(getBackground());\n', 0),
(17186, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(17187, 23, '        } else {\n', 0),
(17188, 24, '            size = newSize;\n', 0),
(17189, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(17190, 26, '        } // Calculate new position\n', 0),
(17191, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(17192, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(17193, 29, '        paint(g);\n', 0),
(17194, 30, '    }\n', 0),
(17195, 31, '  \n', 0),
(17196, 32, '    public void paint(Graphics g) {\n', 0),
(17197, 33, '        g.setColor(Color.black);\n', 0),
(17198, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(17199, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(17200, 36, '    }\n', 0),
(17201, 37, '\n', 0),
(17202, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(17203, 39, '\n', 0),
(17204, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(17205, 41, '        e.consume();\n', 0),
(17206, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(17207, 43, '            repaint();\n', 0),
(17208, 44, '        }\n', 0),
(17209, 45, '    }\n', 0),
(17210, 46, '\n', 0),
(17211, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(17212, 48, '        int x = e.getX();\n', 0),
(17213, 49, '        int y = e.getY();\n', 0),
(17214, 50, '        e.consume();\n', 0),
(17215, 51, '        requestFocus();\n', 0),
(17216, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(17217, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(17218, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(17219, 55, '                case 0:\n', 0),
(17220, 56, '                    play(getCodeBase(), \n', 0),
(17221, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(17222, 58, '                    break;\n', 0),
(17223, 59, '                case 1:\n', 0),
(17224, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(17225, 61, '                    break;\n', 0),
(17226, 62, '                case 2:\n', 0),
(17227, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(17228, 64, '                    break;\n', 0),
(17229, 65, '                case 3:\n', 0),
(17230, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(17231, 67, '                    break;\n', 0),
(17232, 68, '                }\n', 0),
(17233, 69, '                onaroll++;\n', 0),
(17234, 70, '                if (onaroll > 5) {\n', 0),
(17235, 72, '                } else {\n', 0),
(17236, 74, '                }\n', 0),
(17237, 75, '            } else {   //first hit\n', 0),
(17238, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(17239, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(17240, 78, '                onaroll = 1;\n', 0),
(17241, 79, '            }\n', 0),
(17242, 80, '        } else {   //miss\n', 0),
(17243, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(17244, 82, '			\n', 0),
(17245, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(17246, 84, '            onaroll = 0;\n', 0),
(17247, 85, '        }\n', 0),
(17248, 86, '        repaint();\n', 0),
(17249, 87, '    }\n', 0),
(17250, 88, '\n', 0),
(17251, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(17252, 90, '\n', 0),
(17253, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(17254, 92, '        repaint();\n', 0),
(17255, 93, '    }\n', 0),
(17256, 94, '\n', 0),
(17257, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(17258, 96, '        repaint();\n', 0),
(17259, 97, '    }\n', 0),
(17260, 98, '\n', 0),
(17261, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(17262, 100, '\n', 0),
(17263, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(17264, 102, ' \n', 0),
(17265, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(17266, 104, ' \n', 0),
(17267, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(17268, 106, '        repaint();\n', 0),
(17269, 107, '    }\n', 0),
(17270, 108, ' \n', 0),
(17271, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(17272, 110, '        repaint();\n', 0),
(17273, 111, '    }\n', 0),
(17274, 112, '  \n', 0),
(17275, 113, '    public void destroy() {\n', 0),
(17276, 114, '        removeMouseListener(this);\n', 0),
(17277, 115, '        removeMouseMotionListener(this);\n', 0),
(17278, 116, '    }\n', 0),
(17279, 117, '\n', 0),
(17280, 118, '    public String getAppletInfo() {\n', 0),
(17281, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(17282, 120, '    }\n', 0),
(17283, 121, '}\n', 0),
(17284, 0, 'import java.util.Scanner;\r\n', 0),
(17285, 1, ' class Years{\r\n', 0),
(17286, 2, '   public int getYear(){\r\n', 0),
(17287, 3, '	int year;\r\n', 2),
(17288, 4, '	String enteredYear;\r\n', 2),
(17289, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(17290, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(17291, 7, '	enteredYear = sc.next();\r\n', 0),
(17292, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(17293, 9, '	return year;\r\n', 0),
(17294, 10, '   }\r\n', 0),
(17295, 11, ' }\r\n', 0),
(17296, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(17297, 13, ' class Months extends Years{\r\n', 0),
(17298, 14, '   public int getMonth(){\r\n', 0),
(17299, 15, '	int month;\r\n', 2),
(17300, 16, '	String enteredMonthNumber;\r\n', 2),
(17301, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(17302, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(17303, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(17304, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(17305, 21, '	return month;\r\n', 0),
(17306, 22, '   }\r\n', 0),
(17307, 23, ' }\r\n', 0),
(17308, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(17309, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(17310, 26, ' static int numDays = 0;\r\n', 4),
(17311, 27, ' public static void main(String[] args) {\r\n', 0),
(17312, 28, '   int year;\r\n', 2),
(17313, 29, '   Months m = new Months();\r\n', 0),
(17314, 30, '   int month = m.getMonth();\r\n', 0),
(17315, 31, '   \r\n', 0),
(17316, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(17317, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(17318, 34, '   }\r\n', 0),
(17319, 35, '   else {\r\n', 0),
(17320, 36, '    switch (month) {\r\n', 0),
(17321, 37, '      case 1:\r\n', 0),
(17322, 38, '      case 3:\r\n', 0),
(17323, 39, '      case 5:\r\n', 0),
(17324, 40, '      case 7:\r\n', 0),
(17325, 41, '      case 8:\r\n', 0),
(17326, 42, '      case 10:\r\n', 0),
(17327, 43, '      case 12:\r\n', 0),
(17328, 44, '        numDays = 31;\r\n', 0),
(17329, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(17330, 46, '        break;\r\n', 0),
(17331, 47, '      case 4:\r\n', 0),
(17332, 48, '      case 6:\r\n', 0),
(17333, 49, '      case 9:\r\n', 0),
(17334, 50, '      case 11:\r\n', 0),
(17335, 51, '       numDays = 30;\r\n', 0),
(17336, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(17337, 53, '       break;\r\n', 0),
(17338, 54, '      case 2:\r\n', 0),
(17339, 55, '       year = m.getYear();\r\n', 0),
(17340, 56, '       if(year < 1) {\r\n', 0),
(17341, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(17342, 58, '       }\r\n', 0),
(17343, 59, '       else{\r\n', 0),
(17344, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(17345, 61, '         numDays = 29;\r\n', 0),
(17346, 62, '		 if(year > 2020){\r\n', 0),
(17347, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(17348, 64, '         }\r\n', 0),
(17349, 65, '         else{\r\n', 0),
(17350, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(17351, 67, '         }\r\n', 0),
(17352, 68, '        }//if at line 61\r\n', 0),
(17353, 69, '        else{\r\n', 0),
(17354, 70, '         numDays = 28;\r\n', 0),
(17355, 71, '         if (year > 2020){\r\n', 0),
(17356, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(17357, 73, '         }\r\n', 0),
(17358, 74, '         else{\r\n', 0),
(17359, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(17360, 76, '         }\r\n', 0),
(17361, 77, '         break;  \r\n', 0),
(17362, 78, '        }//else at line 70\r\n', 0),
(17363, 79, '       }//else at line 60\r\n', 0),
(17364, 80, '    }//switch at line 37\r\n', 0),
(17365, 81, '   }//else at line 36\r\n', 0),
(17366, 82, '  }//method\r\n', 0),
(17367, 83, ' }//class', 0),
(17368, 0, 'public class RecursionExample2 {  \r\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(17369, 1, 'static int count=0;  \r\n', 4),
(17370, 2, 'public int p(){  \r\n', 0),
(17371, 3, 'count++;  \r\n', 0),
(17372, 4, 'if(count<=5){  \r\n', 0),
(17373, 5, 'System.out.println("hello "+count);  \r\n', 0),
(17374, 6, 'public int p();  \r\n', 0),
(17375, 7, '}  \r\n', 0),
(17376, 8, '}  \r\n', 0),
(17377, 9, 'public static void main(String[] args) {  \r\n', 0),
(17378, 10, 'p();  \r\n', 0),
(17379, 11, '}  \r\n', 0),
(17380, 12, '}  ', 0),
(17381, 0, 'import java.awt.event.*;\n', 0),
(17382, 1, 'import java.awt.*;\n', 0),
(17383, 2, '\n', 0),
(17384, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(17385, 4, '\n', 0),
(17386, 5, '    private int mx, my;\n', 4),
(17387, 6, '    private Dimension size;\n', 8),
(17388, 7, '    private int onaroll;\n', 2),
(17389, 8, '\n', 0),
(17390, 9, '    public void init() {\n', 0),
(17391, 10, '        onaroll = 0;\n', 0),
(17392, 11, '        setSize(500, 500);\n', 0),
(17393, 12, '        size = getSize();\n', 0),
(17394, 13, '        addMouseListener(this);\n', 0),
(17395, 14, '        addMouseMotionListener(this);\n', 0),
(17396, 15, '        addComponentListener(this);\n', 0),
(17397, 16, '    }\n', 0),
(17398, 17, '\n', 0),
(17399, 18, '    public void update(Graphics g) {\n', 0),
(17400, 19, '        Dimension newSize = getSize();\n', 8),
(17401, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(17402, 21, '            g.setColor(getBackground());\n', 0),
(17403, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(17404, 23, '        } else {\n', 0),
(17405, 24, '            size = newSize;\n', 0),
(17406, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(17407, 26, '        } // Calculate new position\n', 0),
(17408, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(17409, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(17410, 29, '        paint(g);\n', 0),
(17411, 30, '    }\n', 0),
(17412, 31, '  \n', 0),
(17413, 32, '    public void paint(Graphics g) {\n', 0),
(17414, 33, '        g.setColor(Color.black);\n', 0),
(17415, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(17416, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(17417, 36, '    }\n', 0),
(17418, 37, '\n', 0),
(17419, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(17420, 39, '\n', 0),
(17421, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(17422, 41, '        e.consume();\n', 0),
(17423, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(17424, 43, '            repaint();\n', 0),
(17425, 44, '        }\n', 0),
(17426, 45, '    }\n', 0),
(17427, 46, '\n', 0),
(17428, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(17429, 48, '        int x = e.getX();\n', 0),
(17430, 49, '        int y = e.getY();\n', 0),
(17431, 50, '        e.consume();\n', 0),
(17432, 51, '        requestFocus();\n', 0),
(17433, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(17434, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(17435, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(17436, 55, '                case 0:\n', 0),
(17437, 56, '                    play(getCodeBase(), \n', 0),
(17438, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(17439, 58, '                    break;\n', 0),
(17440, 59, '                case 1:\n', 0),
(17441, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(17442, 61, '                    break;\n', 0),
(17443, 62, '                case 2:\n', 0),
(17444, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(17445, 64, '                    break;\n', 0),
(17446, 65, '                case 3:\n', 0),
(17447, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(17448, 67, '                    break;\n', 0),
(17449, 68, '                }\n', 0),
(17450, 69, '                onaroll++;\n', 0),
(17451, 70, '                if (onaroll > 5) {\n', 0),
(17452, 72, '                } else {\n', 0),
(17453, 74, '                }\n', 0),
(17454, 75, '            } else {   //first hit\n', 0),
(17455, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(17456, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(17457, 78, '                onaroll = 1;\n', 0),
(17458, 79, '            }\n', 0),
(17459, 80, '        } else {   //miss\n', 0),
(17460, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(17461, 82, '			\n', 0),
(17462, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(17463, 84, '            onaroll = 0;\n', 0),
(17464, 85, '        }\n', 0),
(17465, 86, '        repaint();\n', 0),
(17466, 87, '    }\n', 0),
(17467, 88, '\n', 0),
(17468, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(17469, 90, '\n', 0),
(17470, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(17471, 92, '        repaint();\n', 0),
(17472, 93, '    }\n', 0),
(17473, 94, '\n', 0),
(17474, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(17475, 96, '        repaint();\n', 0),
(17476, 97, '    }\n', 0),
(17477, 98, '\n', 0),
(17478, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(17479, 100, '\n', 0),
(17480, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(17481, 102, ' \n', 0),
(17482, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(17483, 104, ' \n', 0),
(17484, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(17485, 106, '        repaint();\n', 0),
(17486, 107, '    }\n', 0),
(17487, 108, ' \n', 0),
(17488, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(17489, 110, '        repaint();\n', 0),
(17490, 111, '    }\n', 0),
(17491, 112, '  \n', 0),
(17492, 113, '    public void destroy() {\n', 0),
(17493, 114, '        removeMouseListener(this);\n', 0),
(17494, 115, '        removeMouseMotionListener(this);\n', 0),
(17495, 116, '    }\n', 0),
(17496, 117, '\n', 0),
(17497, 118, '    public String getAppletInfo() {\n', 0),
(17498, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(17499, 120, '    }\n', 0),
(17500, 121, '}\n', 0),
(17501, 0, 'import java.awt.event.*;\n', 0),
(17502, 1, 'import java.awt.*;\n', 0),
(17503, 2, '\n', 0),
(17504, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(17505, 4, '\n', 0),
(17506, 5, '    private int mx, my;\n', 4),
(17507, 6, '    private Dimension size;\n', 8),
(17508, 7, '    private int onaroll;\n', 2),
(17509, 8, '\n', 0),
(17510, 9, '    public void init() {\n', 0),
(17511, 10, '        onaroll = 0;\n', 0),
(17512, 11, '        setSize(500, 500);\n', 0),
(17513, 12, '        size = getSize();\n', 0),
(17514, 13, '        addMouseListener(this);\n', 0),
(17515, 14, '        addMouseMotionListener(this);\n', 0),
(17516, 15, '        addComponentListener(this);\n', 0),
(17517, 16, '    }\n', 0),
(17518, 17, '\n', 0),
(17519, 18, '    public void update(Graphics g) {\n', 0),
(17520, 19, '        Dimension newSize = getSize();\n', 8),
(17521, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(17522, 21, '            g.setColor(getBackground());\n', 0),
(17523, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(17524, 23, '        } else {\n', 0),
(17525, 24, '            size = newSize;\n', 0),
(17526, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(17527, 26, '        } // Calculate new position\n', 0),
(17528, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(17529, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(17530, 29, '        paint(g);\n', 0),
(17531, 30, '    }\n', 0),
(17532, 31, '  \n', 0),
(17533, 32, '    public void paint(Graphics g) {\n', 0),
(17534, 33, '        g.setColor(Color.black);\n', 0),
(17535, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(17536, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(17537, 36, '    }\n', 0),
(17538, 37, '\n', 0),
(17539, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(17540, 39, '\n', 0),
(17541, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(17542, 41, '        e.consume();\n', 0),
(17543, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(17544, 43, '            repaint();\n', 0),
(17545, 44, '        }\n', 0),
(17546, 45, '    }\n', 0),
(17547, 46, '\n', 0),
(17548, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(17549, 48, '        int x = e.getX();\n', 0),
(17550, 49, '        int y = e.getY();\n', 0),
(17551, 50, '        e.consume();\n', 0),
(17552, 51, '        requestFocus();\n', 0),
(17553, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(17554, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(17555, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(17556, 55, '                case 0:\n', 0),
(17557, 56, '                    play(getCodeBase(), \n', 0),
(17558, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(17559, 58, '                    break;\n', 0),
(17560, 59, '                case 1:\n', 0),
(17561, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(17562, 61, '                    break;\n', 0),
(17563, 62, '                case 2:\n', 0),
(17564, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(17565, 64, '                    break;\n', 0),
(17566, 65, '                case 3:\n', 0),
(17567, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(17568, 67, '                    break;\n', 0),
(17569, 68, '                }\n', 0),
(17570, 69, '                onaroll++;\n', 0),
(17571, 70, '                if (onaroll > 5) {\n', 0),
(17572, 72, '                } else {\n', 0),
(17573, 74, '                }\n', 0),
(17574, 75, '            } else {   //first hit\n', 0),
(17575, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(17576, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(17577, 78, '                onaroll = 1;\n', 0),
(17578, 79, '            }\n', 0),
(17579, 80, '        } else {   //miss\n', 0),
(17580, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(17581, 82, '			\n', 0),
(17582, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(17583, 84, '            onaroll = 0;\n', 0),
(17584, 85, '        }\n', 0),
(17585, 86, '        repaint();\n', 0),
(17586, 87, '    }\n', 0),
(17587, 88, '\n', 0),
(17588, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(17589, 90, '\n', 0),
(17590, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(17591, 92, '        repaint();\n', 0),
(17592, 93, '    }\n', 0),
(17593, 94, '\n', 0),
(17594, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(17595, 96, '        repaint();\n', 0),
(17596, 97, '    }\n', 0),
(17597, 98, '\n', 0),
(17598, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(17599, 100, '\n', 0),
(17600, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(17601, 102, ' \n', 0),
(17602, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(17603, 104, ' \n', 0),
(17604, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(17605, 106, '        repaint();\n', 0),
(17606, 107, '    }\n', 0),
(17607, 108, ' \n', 0),
(17608, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(17609, 110, '        repaint();\n', 0),
(17610, 111, '    }\n', 0),
(17611, 112, '  \n', 0),
(17612, 113, '    public void destroy() {\n', 0),
(17613, 114, '        removeMouseListener(this);\n', 0),
(17614, 115, '        removeMouseMotionListener(this);\n', 0),
(17615, 116, '    }\n', 0),
(17616, 117, '\n', 0),
(17617, 118, '    public String getAppletInfo() {\n', 0),
(17618, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(17619, 120, '    }\n', 0),
(17620, 121, '}\n', 0),
(17621, 0, 'import java.util.Scanner;\r\n', 0),
(17622, 1, ' class Years{\r\n', 0),
(17623, 2, '   public int getYear(){\r\n', 0),
(17624, 3, '	int year;\r\n', 2),
(17625, 4, '	String enteredYear;\r\n', 2),
(17626, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(17627, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(17628, 7, '	enteredYear = sc.next();\r\n', 0),
(17629, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(17630, 9, '	return year;\r\n', 0),
(17631, 10, '   }\r\n', 0),
(17632, 11, ' }\r\n', 0),
(17633, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(17634, 13, ' class Months extends Years{\r\n', 0),
(17635, 14, '   public int getMonth(){\r\n', 0),
(17636, 15, '	int month;\r\n', 2),
(17637, 16, '	String enteredMonthNumber;\r\n', 2),
(17638, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(17639, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(17640, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(17641, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(17642, 21, '	return month;\r\n', 0),
(17643, 22, '   }\r\n', 0),
(17644, 23, ' }\r\n', 0),
(17645, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(17646, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(17647, 26, ' static int numDays = 0;\r\n', 4),
(17648, 27, ' public static void main(String[] args) {\r\n', 0),
(17649, 28, '   int year;\r\n', 2),
(17650, 29, '   Months m = new Months();\r\n', 0),
(17651, 30, '   int month = m.getMonth();\r\n', 0),
(17652, 31, '   \r\n', 0),
(17653, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(17654, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(17655, 34, '   }\r\n', 0),
(17656, 35, '   else {\r\n', 0),
(17657, 36, '    switch (month) {\r\n', 0),
(17658, 37, '      case 1:\r\n', 0),
(17659, 38, '      case 3:\r\n', 0),
(17660, 39, '      case 5:\r\n', 0),
(17661, 40, '      case 7:\r\n', 0),
(17662, 41, '      case 8:\r\n', 0),
(17663, 42, '      case 10:\r\n', 0),
(17664, 43, '      case 12:\r\n', 0),
(17665, 44, '        numDays = 31;\r\n', 0),
(17666, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(17667, 46, '        break;\r\n', 0),
(17668, 47, '      case 4:\r\n', 0),
(17669, 48, '      case 6:\r\n', 0),
(17670, 49, '      case 9:\r\n', 0),
(17671, 50, '      case 11:\r\n', 0),
(17672, 51, '       numDays = 30;\r\n', 0),
(17673, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(17674, 53, '       break;\r\n', 0),
(17675, 54, '      case 2:\r\n', 0),
(17676, 55, '       year = m.getYear();\r\n', 0),
(17677, 56, '       if(year < 1) {\r\n', 0),
(17678, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(17679, 58, '       }\r\n', 0),
(17680, 59, '       else{\r\n', 0),
(17681, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(17682, 61, '         numDays = 29;\r\n', 0),
(17683, 62, '		 if(year > 2020){\r\n', 0),
(17684, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(17685, 64, '         }\r\n', 0),
(17686, 65, '         else{\r\n', 0),
(17687, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(17688, 67, '         }\r\n', 0),
(17689, 68, '        }//if at line 61\r\n', 0),
(17690, 69, '        else{\r\n', 0),
(17691, 70, '         numDays = 28;\r\n', 0),
(17692, 71, '         if (year > 2020){\r\n', 0),
(17693, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(17694, 73, '         }\r\n', 0),
(17695, 74, '         else{\r\n', 0),
(17696, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(17697, 76, '         }\r\n', 0),
(17698, 77, '         break;  \r\n', 0),
(17699, 78, '        }//else at line 70\r\n', 0),
(17700, 79, '       }//else at line 60\r\n', 0),
(17701, 80, '    }//switch at line 37\r\n', 0),
(17702, 81, '   }//else at line 36\r\n', 0),
(17703, 82, '  }//method\r\n', 0),
(17704, 83, ' }//class', 0),
(17705, 0, 'class Pattern{ \r\n', 0),
(17706, 1, 'public static void main(String[] args) { \r\n', 0),
(17707, 2, '	 int rows = 5;\r\n', 2),
(17708, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(17709, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(17710, 5, '	 System.out.print(j + " "); \r\n', 0),
(17711, 6, '	 } \r\n', 0),
(17712, 7, '	 System.out.println(""); \r\n', 0),
(17713, 8, ' 	} \r\n', 0),
(17714, 9, ' 	} \r\n', 0),
(17715, 10, '} ', 0),
(17716, 0, 'import java.util.Scanner;\r\n', 0),
(17717, 1, ' class Years{\r\n', 0),
(17718, 2, '   public int getYear(){\r\n', 0),
(17719, 3, '	int year;\r\n', 2),
(17720, 4, '	String enteredYear;\r\n', 2),
(17721, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(17722, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(17723, 7, '	enteredYear = sc.next();\r\n', 0),
(17724, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(17725, 9, '	return year;\r\n', 0),
(17726, 10, '   }\r\n', 0),
(17727, 11, ' }\r\n', 0),
(17728, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(17729, 13, ' class Months extends Years{\r\n', 0),
(17730, 14, '   public int getMonth(){\r\n', 0),
(17731, 15, '	int month;\r\n', 2),
(17732, 16, '	String enteredMonthNumber;\r\n', 2),
(17733, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(17734, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(17735, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(17736, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(17737, 21, '	return month;\r\n', 0),
(17738, 22, '   }\r\n', 0),
(17739, 23, ' }\r\n', 0),
(17740, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(17741, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(17742, 26, ' static int numDays = 0;\r\n', 4),
(17743, 27, ' public static void main(String[] args) {\r\n', 0),
(17744, 28, '   int year;\r\n', 2),
(17745, 29, '   Months m = new Months();\r\n', 0),
(17746, 30, '   int month = m.getMonth();\r\n', 0),
(17747, 31, '   \r\n', 0),
(17748, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(17749, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(17750, 34, '   }\r\n', 0),
(17751, 35, '   else {\r\n', 0),
(17752, 36, '    switch (month) {\r\n', 0),
(17753, 37, '      case 1:\r\n', 0),
(17754, 38, '      case 3:\r\n', 0),
(17755, 39, '      case 5:\r\n', 0),
(17756, 40, '      case 7:\r\n', 0),
(17757, 41, '      case 8:\r\n', 0),
(17758, 42, '      case 10:\r\n', 0),
(17759, 43, '      case 12:\r\n', 0),
(17760, 44, '        numDays = 31;\r\n', 0),
(17761, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(17762, 46, '        break;\r\n', 0),
(17763, 47, '      case 4:\r\n', 0),
(17764, 48, '      case 6:\r\n', 0),
(17765, 49, '      case 9:\r\n', 0),
(17766, 50, '      case 11:\r\n', 0),
(17767, 51, '       numDays = 30;\r\n', 0),
(17768, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(17769, 53, '       break;\r\n', 0),
(17770, 54, '      case 2:\r\n', 0),
(17771, 55, '       year = m.getYear();\r\n', 0),
(17772, 56, '       if(year < 1) {\r\n', 0),
(17773, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(17774, 58, '       }\r\n', 0),
(17775, 59, '       else{\r\n', 0),
(17776, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(17777, 61, '         numDays = 29;\r\n', 0),
(17778, 62, '		 if(year > 2020){\r\n', 0),
(17779, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(17780, 64, '         }\r\n', 0),
(17781, 65, '         else{\r\n', 0),
(17782, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(17783, 67, '         }\r\n', 0),
(17784, 68, '        }//if at line 61\r\n', 0),
(17785, 69, '        else{\r\n', 0),
(17786, 70, '         numDays = 28;\r\n', 0),
(17787, 71, '         if (year > 2020){\r\n', 0),
(17788, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(17789, 73, '         }\r\n', 0),
(17790, 74, '         else{\r\n', 0),
(17791, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(17792, 76, '         }\r\n', 0),
(17793, 77, '         break;  \r\n', 0),
(17794, 78, '        }//else at line 70\r\n', 0),
(17795, 79, '       }//else at line 60\r\n', 0),
(17796, 80, '    }//switch at line 37\r\n', 0),
(17797, 81, '   }//else at line 36\r\n', 0),
(17798, 82, '  }//method\r\n', 0),
(17799, 83, ' }//class', 0),
(17800, 0, 'class HelloWorld { \r\n', 0),
(17801, 1, '	public static void main(String args[]) \r\n', 0),
(17802, 2, '	{ \r\n', 0),
(17803, 3, '		System.out.println("Hello World"); \r\n', 0),
(17804, 4, '	} \r\n', 0),
(17805, 5, '} \r\n', 0),
(17806, 0, 'import java.awt.event.*;\n', 0),
(17807, 1, 'import java.awt.*;\n', 0),
(17808, 2, '\n', 0),
(17809, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(17810, 4, '\n', 0),
(17811, 5, '    private int mx, my;\n', 4),
(17812, 6, '    private Dimension size;\n', 8),
(17813, 7, '    private int onaroll;\n', 2),
(17814, 8, '\n', 0),
(17815, 9, '    public void init() {\n', 0),
(17816, 10, '        onaroll = 0;\n', 0),
(17817, 11, '        setSize(500, 500);\n', 0),
(17818, 12, '        size = getSize();\n', 0),
(17819, 13, '        addMouseListener(this);\n', 0),
(17820, 14, '        addMouseMotionListener(this);\n', 0),
(17821, 15, '        addComponentListener(this);\n', 0),
(17822, 16, '    }\n', 0),
(17823, 17, '\n', 0),
(17824, 18, '    public void update(Graphics g) {\n', 0),
(17825, 19, '        Dimension newSize = getSize();\n', 8),
(17826, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(17827, 21, '            g.setColor(getBackground());\n', 0),
(17828, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(17829, 23, '        } else {\n', 0),
(17830, 24, '            size = newSize;\n', 0),
(17831, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(17832, 26, '        } // Calculate new position\n', 0),
(17833, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(17834, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(17835, 29, '        paint(g);\n', 0),
(17836, 30, '    }\n', 0),
(17837, 31, '  \n', 0),
(17838, 32, '    public void paint(Graphics g) {\n', 0),
(17839, 33, '        g.setColor(Color.black);\n', 0),
(17840, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(17841, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(17842, 36, '    }\n', 0),
(17843, 37, '\n', 0),
(17844, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(17845, 39, '\n', 0),
(17846, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(17847, 41, '        e.consume();\n', 0),
(17848, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(17849, 43, '            repaint();\n', 0),
(17850, 44, '        }\n', 0),
(17851, 45, '    }\n', 0),
(17852, 46, '\n', 0),
(17853, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(17854, 48, '        int x = e.getX();\n', 0),
(17855, 49, '        int y = e.getY();\n', 0),
(17856, 50, '        e.consume();\n', 0),
(17857, 51, '        requestFocus();\n', 0),
(17858, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(17859, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(17860, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(17861, 55, '                case 0:\n', 0),
(17862, 56, '                    play(getCodeBase(), \n', 0),
(17863, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(17864, 58, '                    break;\n', 0),
(17865, 59, '                case 1:\n', 0),
(17866, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(17867, 61, '                    break;\n', 0),
(17868, 62, '                case 2:\n', 0),
(17869, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(17870, 64, '                    break;\n', 0),
(17871, 65, '                case 3:\n', 0),
(17872, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(17873, 67, '                    break;\n', 0),
(17874, 68, '                }\n', 0),
(17875, 69, '                onaroll++;\n', 0),
(17876, 70, '                if (onaroll > 5) {\n', 0),
(17877, 72, '                } else {\n', 0),
(17878, 74, '                }\n', 0),
(17879, 75, '            } else {   //first hit\n', 0),
(17880, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(17881, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(17882, 78, '                onaroll = 1;\n', 0),
(17883, 79, '            }\n', 0),
(17884, 80, '        } else {   //miss\n', 0),
(17885, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(17886, 82, '			\n', 0),
(17887, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(17888, 84, '            onaroll = 0;\n', 0),
(17889, 85, '        }\n', 0),
(17890, 86, '        repaint();\n', 0),
(17891, 87, '    }\n', 0),
(17892, 88, '\n', 0),
(17893, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(17894, 90, '\n', 0),
(17895, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(17896, 92, '        repaint();\n', 0),
(17897, 93, '    }\n', 0),
(17898, 94, '\n', 0),
(17899, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(17900, 96, '        repaint();\n', 0),
(17901, 97, '    }\n', 0),
(17902, 98, '\n', 0),
(17903, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(17904, 100, '\n', 0),
(17905, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(17906, 102, ' \n', 0),
(17907, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(17908, 104, ' \n', 0),
(17909, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(17910, 106, '        repaint();\n', 0),
(17911, 107, '    }\n', 0),
(17912, 108, ' \n', 0),
(17913, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(17914, 110, '        repaint();\n', 0),
(17915, 111, '    }\n', 0),
(17916, 112, '  \n', 0),
(17917, 113, '    public void destroy() {\n', 0),
(17918, 114, '        removeMouseListener(this);\n', 0),
(17919, 115, '        removeMouseMotionListener(this);\n', 0),
(17920, 116, '    }\n', 0),
(17921, 117, '\n', 0),
(17922, 118, '    public String getAppletInfo() {\n', 0),
(17923, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(17924, 120, '    }\n', 0),
(17925, 121, '}\n', 0),
(17926, 0, 'import java.awt.event.*;\n', 0),
(17927, 1, 'import java.awt.*;\n', 0),
(17928, 2, '\n', 0),
(17929, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(17930, 4, '\n', 0),
(17931, 5, '    private int mx, my;\n', 4),
(17932, 6, '    private Dimension size;\n', 8),
(17933, 7, '    private int onaroll;\n', 2),
(17934, 8, '\n', 0),
(17935, 9, '    public void init() {\n', 0),
(17936, 10, '        onaroll = 0;\n', 0),
(17937, 11, '        setSize(500, 500);\n', 0),
(17938, 12, '        size = getSize();\n', 0),
(17939, 13, '        addMouseListener(this);\n', 0),
(17940, 14, '        addMouseMotionListener(this);\n', 0),
(17941, 15, '        addComponentListener(this);\n', 0),
(17942, 16, '    }\n', 0),
(17943, 17, '\n', 0),
(17944, 18, '    public void update(Graphics g) {\n', 0),
(17945, 19, '        Dimension newSize = getSize();\n', 8),
(17946, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(17947, 21, '            g.setColor(getBackground());\n', 0),
(17948, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(17949, 23, '        } else {\n', 0),
(17950, 24, '            size = newSize;\n', 0),
(17951, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(17952, 26, '        } // Calculate new position\n', 0),
(17953, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(17954, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(17955, 29, '        paint(g);\n', 0),
(17956, 30, '    }\n', 0),
(17957, 31, '  \n', 0),
(17958, 32, '    public void paint(Graphics g) {\n', 0),
(17959, 33, '        g.setColor(Color.black);\n', 0),
(17960, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(17961, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(17962, 36, '    }\n', 0),
(17963, 37, '\n', 0),
(17964, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(17965, 39, '\n', 0),
(17966, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(17967, 41, '        e.consume();\n', 0),
(17968, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(17969, 43, '            repaint();\n', 0),
(17970, 44, '        }\n', 0),
(17971, 45, '    }\n', 0),
(17972, 46, '\n', 0),
(17973, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(17974, 48, '        int x = e.getX();\n', 0),
(17975, 49, '        int y = e.getY();\n', 0),
(17976, 50, '        e.consume();\n', 0),
(17977, 51, '        requestFocus();\n', 0),
(17978, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(17979, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(17980, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(17981, 55, '                case 0:\n', 0),
(17982, 56, '                    play(getCodeBase(), \n', 0),
(17983, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(17984, 58, '                    break;\n', 0),
(17985, 59, '                case 1:\n', 0),
(17986, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(17987, 61, '                    break;\n', 0),
(17988, 62, '                case 2:\n', 0),
(17989, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(17990, 64, '                    break;\n', 0),
(17991, 65, '                case 3:\n', 0),
(17992, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(17993, 67, '                    break;\n', 0),
(17994, 68, '                }\n', 0),
(17995, 69, '                onaroll++;\n', 0),
(17996, 70, '                if (onaroll > 5) {\n', 0),
(17997, 72, '                } else {\n', 0),
(17998, 74, '                }\n', 0),
(17999, 75, '            } else {   //first hit\n', 0),
(18000, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(18001, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(18002, 78, '                onaroll = 1;\n', 0),
(18003, 79, '            }\n', 0),
(18004, 80, '        } else {   //miss\n', 0),
(18005, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(18006, 82, '			\n', 0),
(18007, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(18008, 84, '            onaroll = 0;\n', 0),
(18009, 85, '        }\n', 0),
(18010, 86, '        repaint();\n', 0),
(18011, 87, '    }\n', 0),
(18012, 88, '\n', 0),
(18013, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(18014, 90, '\n', 0),
(18015, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(18016, 92, '        repaint();\n', 0),
(18017, 93, '    }\n', 0),
(18018, 94, '\n', 0),
(18019, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(18020, 96, '        repaint();\n', 0),
(18021, 97, '    }\n', 0),
(18022, 98, '\n', 0),
(18023, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(18024, 100, '\n', 0),
(18025, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(18026, 102, ' \n', 0),
(18027, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(18028, 104, ' \n', 0),
(18029, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(18030, 106, '        repaint();\n', 0),
(18031, 107, '    }\n', 0),
(18032, 108, ' \n', 0),
(18033, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(18034, 110, '        repaint();\n', 0),
(18035, 111, '    }\n', 0),
(18036, 112, '  \n', 0),
(18037, 113, '    public void destroy() {\n', 0),
(18038, 114, '        removeMouseListener(this);\n', 0),
(18039, 115, '        removeMouseMotionListener(this);\n', 0),
(18040, 116, '    }\n', 0),
(18041, 117, '\n', 0),
(18042, 118, '    public String getAppletInfo() {\n', 0),
(18043, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(18044, 120, '    }\n', 0),
(18045, 121, '}\n', 0),
(18046, 0, 'import java.util.Scanner;\r\n', 0),
(18047, 1, ' class Years{\r\n', 0),
(18048, 2, '   public int getYear(){\r\n', 0),
(18049, 3, '	int year;\r\n', 2),
(18050, 4, '	String enteredYear;\r\n', 2),
(18051, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(18052, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(18053, 7, '	enteredYear = sc.next();\r\n', 0),
(18054, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(18055, 9, '	return year;\r\n', 0),
(18056, 10, '   }\r\n', 0),
(18057, 11, ' }\r\n', 0),
(18058, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(18059, 13, ' class Months extends Years{\r\n', 0),
(18060, 14, '   public int getMonth(){\r\n', 0),
(18061, 15, '	int month;\r\n', 2),
(18062, 16, '	String enteredMonthNumber;\r\n', 2),
(18063, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(18064, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(18065, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(18066, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(18067, 21, '	return month;\r\n', 0),
(18068, 22, '   }\r\n', 0),
(18069, 23, ' }\r\n', 0),
(18070, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(18071, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(18072, 26, ' static int numDays = 0;\r\n', 4),
(18073, 27, ' public static void main(String[] args) {\r\n', 0),
(18074, 28, '   int year;\r\n', 2),
(18075, 29, '   Months m = new Months();\r\n', 0),
(18076, 30, '   int month = m.getMonth();\r\n', 0),
(18077, 31, '   \r\n', 0),
(18078, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(18079, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(18080, 34, '   }\r\n', 0),
(18081, 35, '   else {\r\n', 0),
(18082, 36, '    switch (month) {\r\n', 0),
(18083, 37, '      case 1:\r\n', 0),
(18084, 38, '      case 3:\r\n', 0),
(18085, 39, '      case 5:\r\n', 0),
(18086, 40, '      case 7:\r\n', 0),
(18087, 41, '      case 8:\r\n', 0),
(18088, 42, '      case 10:\r\n', 0),
(18089, 43, '      case 12:\r\n', 0),
(18090, 44, '        numDays = 31;\r\n', 0),
(18091, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(18092, 46, '        break;\r\n', 0),
(18093, 47, '      case 4:\r\n', 0),
(18094, 48, '      case 6:\r\n', 0),
(18095, 49, '      case 9:\r\n', 0),
(18096, 50, '      case 11:\r\n', 0),
(18097, 51, '       numDays = 30;\r\n', 0),
(18098, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(18099, 53, '       break;\r\n', 0),
(18100, 54, '      case 2:\r\n', 0),
(18101, 55, '       year = m.getYear();\r\n', 0),
(18102, 56, '       if(year < 1) {\r\n', 0),
(18103, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(18104, 58, '       }\r\n', 0),
(18105, 59, '       else{\r\n', 0),
(18106, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(18107, 61, '         numDays = 29;\r\n', 0),
(18108, 62, '		 if(year > 2020){\r\n', 0),
(18109, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(18110, 64, '         }\r\n', 0),
(18111, 65, '         else{\r\n', 0),
(18112, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(18113, 67, '         }\r\n', 0),
(18114, 68, '        }//if at line 61\r\n', 0),
(18115, 69, '        else{\r\n', 0),
(18116, 70, '         numDays = 28;\r\n', 0),
(18117, 71, '         if (year > 2020){\r\n', 0),
(18118, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(18119, 73, '         }\r\n', 0),
(18120, 74, '         else{\r\n', 0),
(18121, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(18122, 76, '         }\r\n', 0),
(18123, 77, '         break;  \r\n', 0),
(18124, 78, '        }//else at line 70\r\n', 0),
(18125, 79, '       }//else at line 60\r\n', 0),
(18126, 80, '    }//switch at line 37\r\n', 0),
(18127, 81, '   }//else at line 36\r\n', 0),
(18128, 82, '  }//method\r\n', 0),
(18129, 83, ' }//class', 0),
(18130, 0, 'public class RecursionExample2 {  \r\n', 0),
(18131, 1, 'static int count=0;  \r\n', 4),
(18132, 2, 'public int p(){  \r\n', 0),
(18133, 3, 'count++;  \r\n', 0),
(18134, 4, 'if(count<=5){  \r\n', 0),
(18135, 5, 'System.out.println("hello "+count);  \r\n', 0),
(18136, 6, 'public int p();  \r\n', 0),
(18137, 7, '}  \r\n', 0),
(18138, 8, '}  \r\n', 0),
(18139, 9, 'public static void main(String[] args) {  \r\n', 0),
(18140, 10, 'p();  \r\n', 0),
(18141, 11, '}  \r\n', 0),
(18142, 12, '}  ', 0),
(18143, 0, 'import java.awt.event.*;\n', 0),
(18144, 1, 'import java.awt.*;\n', 0),
(18145, 2, '\n', 0),
(18146, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(18147, 4, '\n', 0),
(18148, 5, '    private int mx, my;\n', 4),
(18149, 6, '    private Dimension size;\n', 8),
(18150, 7, '    private int onaroll;\n', 2),
(18151, 8, '\n', 0),
(18152, 9, '    public void init() {\n', 0),
(18153, 10, '        onaroll = 0;\n', 0),
(18154, 11, '        setSize(500, 500);\n', 0),
(18155, 12, '        size = getSize();\n', 0),
(18156, 13, '        addMouseListener(this);\n', 0),
(18157, 14, '        addMouseMotionListener(this);\n', 0),
(18158, 15, '        addComponentListener(this);\n', 0),
(18159, 16, '    }\n', 0),
(18160, 17, '\n', 0),
(18161, 18, '    public void update(Graphics g) {\n', 0),
(18162, 19, '        Dimension newSize = getSize();\n', 8),
(18163, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(18164, 21, '            g.setColor(getBackground());\n', 0),
(18165, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(18166, 23, '        } else {\n', 0),
(18167, 24, '            size = newSize;\n', 0),
(18168, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(18169, 26, '        } // Calculate new position\n', 0),
(18170, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(18171, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(18172, 29, '        paint(g);\n', 0),
(18173, 30, '    }\n', 0),
(18174, 31, '  \n', 0),
(18175, 32, '    public void paint(Graphics g) {\n', 0),
(18176, 33, '        g.setColor(Color.black);\n', 0),
(18177, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(18178, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(18179, 36, '    }\n', 0),
(18180, 37, '\n', 0),
(18181, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(18182, 39, '\n', 0),
(18183, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(18184, 41, '        e.consume();\n', 0),
(18185, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(18186, 43, '            repaint();\n', 0),
(18187, 44, '        }\n', 0),
(18188, 45, '    }\n', 0),
(18189, 46, '\n', 0),
(18190, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(18191, 48, '        int x = e.getX();\n', 0),
(18192, 49, '        int y = e.getY();\n', 0),
(18193, 50, '        e.consume();\n', 0),
(18194, 51, '        requestFocus();\n', 0),
(18195, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(18196, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(18197, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(18198, 55, '                case 0:\n', 0),
(18199, 56, '                    play(getCodeBase(), \n', 0),
(18200, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(18201, 58, '                    break;\n', 0),
(18202, 59, '                case 1:\n', 0),
(18203, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(18204, 61, '                    break;\n', 0),
(18205, 62, '                case 2:\n', 0),
(18206, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(18207, 64, '                    break;\n', 0),
(18208, 65, '                case 3:\n', 0),
(18209, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(18210, 67, '                    break;\n', 0),
(18211, 68, '                }\n', 0),
(18212, 69, '                onaroll++;\n', 0),
(18213, 70, '                if (onaroll > 5) {\n', 0),
(18214, 72, '                } else {\n', 0),
(18215, 74, '                }\n', 0),
(18216, 75, '            } else {   //first hit\n', 0),
(18217, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(18218, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(18219, 78, '                onaroll = 1;\n', 0),
(18220, 79, '            }\n', 0),
(18221, 80, '        } else {   //miss\n', 0),
(18222, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(18223, 82, '			\n', 0),
(18224, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(18225, 84, '            onaroll = 0;\n', 0),
(18226, 85, '        }\n', 0),
(18227, 86, '        repaint();\n', 0),
(18228, 87, '    }\n', 0),
(18229, 88, '\n', 0),
(18230, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(18231, 90, '\n', 0),
(18232, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(18233, 92, '        repaint();\n', 0),
(18234, 93, '    }\n', 0),
(18235, 94, '\n', 0),
(18236, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(18237, 96, '        repaint();\n', 0),
(18238, 97, '    }\n', 0),
(18239, 98, '\n', 0),
(18240, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(18241, 100, '\n', 0),
(18242, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(18243, 102, ' \n', 0),
(18244, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(18245, 104, ' \n', 0),
(18246, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(18247, 106, '        repaint();\n', 0),
(18248, 107, '    }\n', 0),
(18249, 108, ' \n', 0),
(18250, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(18251, 110, '        repaint();\n', 0),
(18252, 111, '    }\n', 0),
(18253, 112, '  \n', 0),
(18254, 113, '    public void destroy() {\n', 0),
(18255, 114, '        removeMouseListener(this);\n', 0),
(18256, 115, '        removeMouseMotionListener(this);\n', 0),
(18257, 116, '    }\n', 0),
(18258, 117, '\n', 0),
(18259, 118, '    public String getAppletInfo() {\n', 0),
(18260, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(18261, 120, '    }\n', 0),
(18262, 121, '}\n', 0),
(18263, 0, 'import java.awt.event.*;\n', 0),
(18264, 1, 'import java.awt.*;\n', 0),
(18265, 2, '\n', 0),
(18266, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(18267, 4, '\n', 0),
(18268, 5, '    private int mx, my;\n', 4),
(18269, 6, '    private Dimension size;\n', 8),
(18270, 7, '    private int onaroll;\n', 2),
(18271, 8, '\n', 0),
(18272, 9, '    public void init() {\n', 0),
(18273, 10, '        onaroll = 0;\n', 0),
(18274, 11, '        setSize(500, 500);\n', 0),
(18275, 12, '        size = getSize();\n', 0),
(18276, 13, '        addMouseListener(this);\n', 0),
(18277, 14, '        addMouseMotionListener(this);\n', 0),
(18278, 15, '        addComponentListener(this);\n', 0),
(18279, 16, '    }\n', 0),
(18280, 17, '\n', 0),
(18281, 18, '    public void update(Graphics g) {\n', 0),
(18282, 19, '        Dimension newSize = getSize();\n', 8),
(18283, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(18284, 21, '            g.setColor(getBackground());\n', 0),
(18285, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(18286, 23, '        } else {\n', 0),
(18287, 24, '            size = newSize;\n', 0),
(18288, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(18289, 26, '        } // Calculate new position\n', 0),
(18290, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(18291, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(18292, 29, '        paint(g);\n', 0),
(18293, 30, '    }\n', 0),
(18294, 31, '  \n', 0),
(18295, 32, '    public void paint(Graphics g) {\n', 0),
(18296, 33, '        g.setColor(Color.black);\n', 0),
(18297, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(18298, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(18299, 36, '    }\n', 0),
(18300, 37, '\n', 0),
(18301, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(18302, 39, '\n', 0),
(18303, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(18304, 41, '        e.consume();\n', 0),
(18305, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(18306, 43, '            repaint();\n', 0),
(18307, 44, '        }\n', 0),
(18308, 45, '    }\n', 0),
(18309, 46, '\n', 0),
(18310, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(18311, 48, '        int x = e.getX();\n', 0),
(18312, 49, '        int y = e.getY();\n', 0),
(18313, 50, '        e.consume();\n', 0),
(18314, 51, '        requestFocus();\n', 0),
(18315, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(18316, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(18317, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(18318, 55, '                case 0:\n', 0),
(18319, 56, '                    play(getCodeBase(), \n', 0),
(18320, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(18321, 58, '                    break;\n', 0),
(18322, 59, '                case 1:\n', 0),
(18323, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(18324, 61, '                    break;\n', 0),
(18325, 62, '                case 2:\n', 0),
(18326, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(18327, 64, '                    break;\n', 0),
(18328, 65, '                case 3:\n', 0),
(18329, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(18330, 67, '                    break;\n', 0),
(18331, 68, '                }\n', 0),
(18332, 69, '                onaroll++;\n', 0),
(18333, 70, '                if (onaroll > 5) {\n', 0),
(18334, 72, '                } else {\n', 0),
(18335, 74, '                }\n', 0),
(18336, 75, '            } else {   //first hit\n', 0),
(18337, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(18338, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(18339, 78, '                onaroll = 1;\n', 0),
(18340, 79, '            }\n', 0),
(18341, 80, '        } else {   //miss\n', 0),
(18342, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(18343, 82, '			\n', 0),
(18344, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(18345, 84, '            onaroll = 0;\n', 0),
(18346, 85, '        }\n', 0),
(18347, 86, '        repaint();\n', 0),
(18348, 87, '    }\n', 0),
(18349, 88, '\n', 0),
(18350, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(18351, 90, '\n', 0),
(18352, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(18353, 92, '        repaint();\n', 0),
(18354, 93, '    }\n', 0),
(18355, 94, '\n', 0),
(18356, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(18357, 96, '        repaint();\n', 0),
(18358, 97, '    }\n', 0),
(18359, 98, '\n', 0),
(18360, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(18361, 100, '\n', 0),
(18362, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(18363, 102, ' \n', 0),
(18364, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(18365, 104, ' \n', 0),
(18366, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(18367, 106, '        repaint();\n', 0),
(18368, 107, '    }\n', 0),
(18369, 108, ' \n', 0),
(18370, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(18371, 110, '        repaint();\n', 0),
(18372, 111, '    }\n', 0),
(18373, 112, '  \n', 0),
(18374, 113, '    public void destroy() {\n', 0),
(18375, 114, '        removeMouseListener(this);\n', 0),
(18376, 115, '        removeMouseMotionListener(this);\n', 0),
(18377, 116, '    }\n', 0),
(18378, 117, '\n', 0),
(18379, 118, '    public String getAppletInfo() {\n', 0),
(18380, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(18381, 120, '    }\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(18382, 121, '}\n', 0),
(18383, 0, 'import java.util.Scanner;\r\n', 0),
(18384, 1, 'Scanner;\r\n', 0),
(18385, 2, 'xxg Scanner;\r\n', 0),
(18386, 3, ' class Years{\r\n', 0),
(18387, 4, '   public int getYear(){\r\n', 0),
(18388, 5, '	int year;\r\n', 2),
(18389, 6, '	String enteredYear;\r\n', 2),
(18390, 7, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(18391, 8, '	System.out.println("Enter the year as a number :");\r\n', 0),
(18392, 9, '  enteredYear = sc.next();\r\n', 0),
(18393, 10, '  getYear();\r\n', 0),
(18394, 11, '  Scanner =0;\r\n', 0),
(18395, 12, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(18396, 13, '	return year;\r\n', 0),
(18397, 14, '   }\r\n', 0),
(18398, 15, ' }\r\n', 0),
(18399, 16, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(18400, 17, ' class Months extends Years{\r\n', 0),
(18401, 18, '   public int getMonth(){\r\n', 0),
(18402, 19, '	int month;\r\n', 2),
(18403, 20, '	String enteredMonthNumber;\r\n', 2),
(18404, 21, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(18405, 22, '	System.out.println("Enter the month number :");\r\n', 0),
(18406, 23, '	enteredMonthNumber = sc.next();\r\n', 0),
(18407, 24, '  month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(18408, 25, '  getMonth();\r\n', 0),
(18409, 26, '  getYear(Scanner);\r\n', 0),
(18410, 27, '  Months(getYear());\r\n', 0),
(18411, 28, '	return month;\r\n', 0),
(18412, 29, '   }\r\n', 0),
(18413, 30, ' }\r\n', 0),
(18414, 31, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(18415, 32, 'class DaysPerMonth extends Months{ \r\n', 0),
(18416, 33, ' static int numDays = 0;\r\n', 4),
(18417, 34, ' public static void main(String[] args) {\r\n', 0),
(18418, 35, '   int year;\r\n', 2),
(18419, 36, '   Months m = new Months();\r\n', 0),
(18420, 37, '   int month = m.getMonth();\r\n', 0),
(18421, 38, '   Scanner =0;\r\n', 0),
(18422, 39, '   if((month < 1) || (month > 12)){ \r\n', 0),
(18423, 40, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(18424, 41, '   }\r\n', 0),
(18425, 42, '   else {\r\n', 0),
(18426, 43, '    switch (month) {\r\n', 0),
(18427, 44, '      case 1:\r\n', 0),
(18428, 45, '      case 3:\r\n', 0),
(18429, 46, '      case 5:\r\n', 0),
(18430, 47, '      case 7:\r\n', 0),
(18431, 48, '      case 8:\r\n', 0),
(18432, 49, '      case 10:\r\n', 0),
(18433, 50, '      case 12:\r\n', 0),
(18434, 51, '        numDays = 31;\r\n', 0),
(18435, 52, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(18436, 53, '        break;\r\n', 0),
(18437, 54, '      case 4:\r\n', 0),
(18438, 55, '      case 6:\r\n', 0),
(18439, 56, '      case 9:\r\n', 0),
(18440, 57, '      case 11:\r\n', 0),
(18441, 58, '       numDays = 30;\r\n', 0),
(18442, 59, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(18443, 60, '       break;\r\n', 0),
(18444, 61, '      case 2:\r\n', 0),
(18445, 62, '       year = m.getYear();\r\n', 0),
(18446, 63, '       if(year < 1) {\r\n', 0),
(18447, 64, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(18448, 65, '       }\r\n', 0),
(18449, 66, '       else{\r\n', 0),
(18450, 67, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(18451, 68, '         numDays = 29;\r\n', 0),
(18452, 69, '		 if(year > 2020){\r\n', 0),
(18453, 70, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(18454, 71, '         }\r\n', 0),
(18455, 72, '         else{\r\n', 0),
(18456, 73, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(18457, 74, '         }\r\n', 0),
(18458, 75, '        }\r\n', 0),
(18459, 76, '        else{\r\n', 0),
(18460, 77, '         numDays = 28;\r\n', 0),
(18461, 78, '         if (year > 2020){\r\n', 0),
(18462, 79, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(18463, 80, '         }\r\n', 0),
(18464, 81, '         else{\r\n', 0),
(18465, 82, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(18466, 83, '         }\r\n', 0),
(18467, 84, '         break;  \r\n', 0),
(18468, 85, '        }//else at line 70\r\n', 0),
(18469, 86, '       }//else at line 60\r\n', 0),
(18470, 87, '    }\r\n', 0),
(18471, 88, '   }//else at line 36\r\n', 0),
(18472, 89, '  }//method\r\n', 0),
(18473, 90, ' }//class', 0),
(18474, 0, 'class Pattern{ \r\n', 0),
(18475, 1, 'public static void main(String[] args) { \r\n', 0),
(18476, 2, '	 int rows = 5;\r\n', 2),
(18477, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(18478, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(18479, 5, '	 System.out.print(j + " "); \r\n', 0),
(18480, 6, '	 } \r\n', 0),
(18481, 7, '	 System.out.println(""); \r\n', 0),
(18482, 8, ' 	} \r\n', 0),
(18483, 9, ' 	} \r\n', 0),
(18484, 10, '} ', 0),
(18485, 0, 'import java.util.Scanner;\r\n', 0),
(18486, 1, 'Scanner;\r\n', 0),
(18487, 2, 'xxg Scanner;\r\n', 0),
(18488, 3, ' class Years{\r\n', 0),
(18489, 4, '   public int getYear(){\r\n', 0),
(18490, 5, '	int year;\r\n', 2),
(18491, 6, '	String enteredYear;\r\n', 2),
(18492, 7, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(18493, 8, '	System.out.println("Enter the year as a number :");\r\n', 0),
(18494, 9, '  enteredYear = sc.next();\r\n', 0),
(18495, 10, '  getYear();\r\n', 0),
(18496, 11, '  Scanner =0;\r\n', 0),
(18497, 12, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(18498, 13, '	return year;\r\n', 0),
(18499, 14, '   }\r\n', 0),
(18500, 15, ' }\r\n', 0),
(18501, 16, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(18502, 17, ' class Months extends Years{\r\n', 0),
(18503, 18, '   public int getMonth(){\r\n', 0),
(18504, 19, '	int month;\r\n', 2),
(18505, 20, '	String enteredMonthNumber;\r\n', 2),
(18506, 21, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(18507, 22, '	System.out.println("Enter the month number :");\r\n', 0),
(18508, 23, '	enteredMonthNumber = sc.next();\r\n', 0),
(18509, 24, '  month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(18510, 25, '  getMonth();\r\n', 0),
(18511, 26, '  getYear(Scanner);\r\n', 0),
(18512, 27, '  Months(getYear());\r\n', 0),
(18513, 28, '	return month;\r\n', 0),
(18514, 29, '   }\r\n', 0),
(18515, 30, ' }\r\n', 0),
(18516, 31, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(18517, 32, 'class DaysPerMonth extends Months{ \r\n', 0),
(18518, 33, ' static int numDays = 0;\r\n', 4),
(18519, 34, ' public static void main(String[] args) {\r\n', 0),
(18520, 35, '   int year;\r\n', 2),
(18521, 36, '   Months m = new Months();\r\n', 0),
(18522, 37, '   int month = m.getMonth();\r\n', 0),
(18523, 38, '   Scanner =0;\r\n', 0),
(18524, 39, '   if((month < 1) || (month > 12)){ \r\n', 0),
(18525, 40, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(18526, 41, '   }\r\n', 0),
(18527, 42, '   else {\r\n', 0),
(18528, 43, '    switch (month) {\r\n', 0),
(18529, 44, '      case 1:\r\n', 0),
(18530, 45, '      case 3:\r\n', 0),
(18531, 46, '      case 5:\r\n', 0),
(18532, 47, '      case 7:\r\n', 0),
(18533, 48, '      case 8:\r\n', 0),
(18534, 49, '      case 10:\r\n', 0),
(18535, 50, '      case 12:\r\n', 0),
(18536, 51, '        numDays = 31;\r\n', 0),
(18537, 52, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(18538, 53, '        break;\r\n', 0),
(18539, 54, '      case 4:\r\n', 0),
(18540, 55, '      case 6:\r\n', 0),
(18541, 56, '      case 9:\r\n', 0),
(18542, 57, '      case 11:\r\n', 0),
(18543, 58, '       numDays = 30;\r\n', 0),
(18544, 59, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(18545, 60, '       break;\r\n', 0),
(18546, 61, '      case 2:\r\n', 0),
(18547, 62, '       year = m.getYear();\r\n', 0),
(18548, 63, '       if(year < 1) {\r\n', 0),
(18549, 64, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(18550, 65, '       }\r\n', 0),
(18551, 66, '       else{\r\n', 0),
(18552, 67, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(18553, 68, '         numDays = 29;\r\n', 0),
(18554, 69, '		 if(year > 2020){\r\n', 0),
(18555, 70, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(18556, 71, '         }\r\n', 0),
(18557, 72, '         else{\r\n', 0),
(18558, 73, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(18559, 74, '         }\r\n', 0),
(18560, 75, '        }\r\n', 0),
(18561, 76, '        else{\r\n', 0),
(18562, 77, '         numDays = 28;\r\n', 0),
(18563, 78, '         if (year > 2020){\r\n', 0),
(18564, 79, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(18565, 80, '         }\r\n', 0),
(18566, 81, '         else{\r\n', 0),
(18567, 82, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(18568, 83, '         }\r\n', 0),
(18569, 84, '         break;  \r\n', 0),
(18570, 85, '        }//else at line 70\r\n', 0),
(18571, 86, '       }//else at line 60\r\n', 0),
(18572, 87, '    }\r\n', 0),
(18573, 88, '   }//else at line 36\r\n', 0),
(18574, 89, '  }//method\r\n', 0),
(18575, 90, ' }//class', 0),
(18576, 0, 'class HelloWorld { \r\n', 0),
(18577, 1, '	public static void main(String args[]) \r\n', 0),
(18578, 2, '	{ \r\n', 0),
(18579, 3, '		System.out.println("Hello World"); \r\n', 0),
(18580, 4, '	} \r\n', 0),
(18581, 5, '} \r\n', 0),
(18582, 0, 'import java.awt.event.*;\n', 0),
(18583, 1, 'import java.awt.*;\n', 0),
(18584, 2, '\n', 0),
(18585, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(18586, 4, '\n', 0),
(18587, 5, '    private int mx, my;\n', 4),
(18588, 6, '    private Dimension size;\n', 8),
(18589, 7, '    private int onaroll;\n', 2),
(18590, 8, '\n', 0),
(18591, 9, '    public void init() {\n', 0),
(18592, 10, '        onaroll = 0;\n', 0),
(18593, 11, '        setSize(500, 500);\n', 0),
(18594, 12, '        size = getSize();\n', 0),
(18595, 13, '        addMouseListener(this);\n', 0),
(18596, 14, '        addMouseMotionListener(this);\n', 0),
(18597, 15, '        addComponentListener(this);\n', 0),
(18598, 16, '    }\n', 0),
(18599, 17, '\n', 0),
(18600, 18, '    public void update(Graphics g) {\n', 0),
(18601, 19, '        Dimension newSize = getSize();\n', 8),
(18602, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(18603, 21, '            g.setColor(getBackground());\n', 0),
(18604, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(18605, 23, '        } else {\n', 0),
(18606, 24, '            size = newSize;\n', 0),
(18607, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(18608, 26, '        } // Calculate new position\n', 0),
(18609, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(18610, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(18611, 29, '        paint(g);\n', 0),
(18612, 30, '    }\n', 0),
(18613, 31, '  \n', 0),
(18614, 32, '    public void paint(Graphics g) {\n', 0),
(18615, 33, '        g.setColor(Color.black);\n', 0),
(18616, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(18617, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(18618, 36, '    }\n', 0),
(18619, 37, '\n', 0),
(18620, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(18621, 39, '\n', 0),
(18622, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(18623, 41, '        e.consume();\n', 0),
(18624, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(18625, 43, '            repaint();\n', 0),
(18626, 44, '        }\n', 0),
(18627, 45, '    }\n', 0),
(18628, 46, '\n', 0),
(18629, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(18630, 48, '        int x = e.getX();\n', 0),
(18631, 49, '        int y = e.getY();\n', 0),
(18632, 50, '        e.consume();\n', 0),
(18633, 51, '        requestFocus();\n', 0),
(18634, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(18635, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(18636, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(18637, 55, '                case 0:\n', 0),
(18638, 56, '                    play(getCodeBase(), \n', 0),
(18639, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(18640, 58, '                    break;\n', 0),
(18641, 59, '                case 1:\n', 0),
(18642, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(18643, 61, '                    break;\n', 0),
(18644, 62, '                case 2:\n', 0),
(18645, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(18646, 64, '                    break;\n', 0),
(18647, 65, '                case 3:\n', 0),
(18648, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(18649, 67, '                    break;\n', 0),
(18650, 68, '                }\n', 0),
(18651, 69, '                onaroll++;\n', 0),
(18652, 70, '                if (onaroll > 5) {\n', 0),
(18653, 72, '                } else {\n', 0),
(18654, 74, '                }\n', 0),
(18655, 75, '            } else {   //first hit\n', 0),
(18656, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(18657, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(18658, 78, '                onaroll = 1;\n', 0),
(18659, 79, '            }\n', 0),
(18660, 80, '        } else {   //miss\n', 0),
(18661, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(18662, 82, '			\n', 0),
(18663, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(18664, 84, '            onaroll = 0;\n', 0),
(18665, 85, '        }\n', 0),
(18666, 86, '        repaint();\n', 0),
(18667, 87, '    }\n', 0),
(18668, 88, '\n', 0),
(18669, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(18670, 90, '\n', 0),
(18671, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(18672, 92, '        repaint();\n', 0),
(18673, 93, '    }\n', 0),
(18674, 94, '\n', 0),
(18675, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(18676, 96, '        repaint();\n', 0),
(18677, 97, '    }\n', 0),
(18678, 98, '\n', 0),
(18679, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(18680, 100, '\n', 0),
(18681, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(18682, 102, ' \n', 0),
(18683, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(18684, 104, ' \n', 0),
(18685, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(18686, 106, '        repaint();\n', 0),
(18687, 107, '    }\n', 0),
(18688, 108, ' \n', 0),
(18689, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(18690, 110, '        repaint();\n', 0),
(18691, 111, '    }\n', 0),
(18692, 112, '  \n', 0),
(18693, 113, '    public void destroy() {\n', 0),
(18694, 114, '        removeMouseListener(this);\n', 0),
(18695, 115, '        removeMouseMotionListener(this);\n', 0),
(18696, 116, '    }\n', 0),
(18697, 117, '\n', 0),
(18698, 118, '    public String getAppletInfo() {\n', 0),
(18699, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(18700, 120, '    }\n', 0),
(18701, 121, '}\n', 0),
(18702, 0, 'import java.awt.event.*;\n', 0),
(18703, 1, 'import java.awt.*;\n', 0),
(18704, 2, '\n', 0),
(18705, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(18706, 4, '\n', 0),
(18707, 5, '    private int mx, my;\n', 4),
(18708, 6, '    private Dimension size;\n', 8),
(18709, 7, '    private int onaroll;\n', 2),
(18710, 8, '\n', 0),
(18711, 9, '    public void init() {\n', 0),
(18712, 10, '        onaroll = 0;\n', 0),
(18713, 11, '        setSize(500, 500);\n', 0),
(18714, 12, '        size = getSize();\n', 0),
(18715, 13, '        addMouseListener(this);\n', 0),
(18716, 14, '        addMouseMotionListener(this);\n', 0),
(18717, 15, '        addComponentListener(this);\n', 0),
(18718, 16, '    }\n', 0),
(18719, 17, '\n', 0),
(18720, 18, '    public void update(Graphics g) {\n', 0),
(18721, 19, '        Dimension newSize = getSize();\n', 8),
(18722, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(18723, 21, '            g.setColor(getBackground());\n', 0),
(18724, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(18725, 23, '        } else {\n', 0),
(18726, 24, '            size = newSize;\n', 0),
(18727, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(18728, 26, '        } // Calculate new position\n', 0),
(18729, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(18730, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(18731, 29, '        paint(g);\n', 0),
(18732, 30, '    }\n', 0),
(18733, 31, '  \n', 0),
(18734, 32, '    public void paint(Graphics g) {\n', 0),
(18735, 33, '        g.setColor(Color.black);\n', 0),
(18736, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(18737, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(18738, 36, '    }\n', 0),
(18739, 37, '\n', 0),
(18740, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(18741, 39, '\n', 0),
(18742, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(18743, 41, '        e.consume();\n', 0),
(18744, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(18745, 43, '            repaint();\n', 0),
(18746, 44, '        }\n', 0),
(18747, 45, '    }\n', 0),
(18748, 46, '\n', 0),
(18749, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(18750, 48, '        int x = e.getX();\n', 0),
(18751, 49, '        int y = e.getY();\n', 0),
(18752, 50, '        e.consume();\n', 0),
(18753, 51, '        requestFocus();\n', 0),
(18754, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(18755, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(18756, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(18757, 55, '                case 0:\n', 0),
(18758, 56, '                    play(getCodeBase(), \n', 0),
(18759, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(18760, 58, '                    break;\n', 0),
(18761, 59, '                case 1:\n', 0),
(18762, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(18763, 61, '                    break;\n', 0),
(18764, 62, '                case 2:\n', 0),
(18765, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(18766, 64, '                    break;\n', 0),
(18767, 65, '                case 3:\n', 0),
(18768, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(18769, 67, '                    break;\n', 0),
(18770, 68, '                }\n', 0),
(18771, 69, '                onaroll++;\n', 0),
(18772, 70, '                if (onaroll > 5) {\n', 0),
(18773, 72, '                } else {\n', 0),
(18774, 74, '                }\n', 0),
(18775, 75, '            } else {   //first hit\n', 0),
(18776, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(18777, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(18778, 78, '                onaroll = 1;\n', 0),
(18779, 79, '            }\n', 0),
(18780, 80, '        } else {   //miss\n', 0),
(18781, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(18782, 82, '			\n', 0),
(18783, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(18784, 84, '            onaroll = 0;\n', 0),
(18785, 85, '        }\n', 0),
(18786, 86, '        repaint();\n', 0),
(18787, 87, '    }\n', 0),
(18788, 88, '\n', 0),
(18789, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(18790, 90, '\n', 0),
(18791, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(18792, 92, '        repaint();\n', 0),
(18793, 93, '    }\n', 0),
(18794, 94, '\n', 0),
(18795, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(18796, 96, '        repaint();\n', 0),
(18797, 97, '    }\n', 0),
(18798, 98, '\n', 0),
(18799, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(18800, 100, '\n', 0),
(18801, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(18802, 102, ' \n', 0),
(18803, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(18804, 104, ' \n', 0),
(18805, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(18806, 106, '        repaint();\n', 0),
(18807, 107, '    }\n', 0),
(18808, 108, ' \n', 0),
(18809, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(18810, 110, '        repaint();\n', 0),
(18811, 111, '    }\n', 0),
(18812, 112, '  \n', 0),
(18813, 113, '    public void destroy() {\n', 0),
(18814, 114, '        removeMouseListener(this);\n', 0),
(18815, 115, '        removeMouseMotionListener(this);\n', 0),
(18816, 116, '    }\n', 0),
(18817, 117, '\n', 0),
(18818, 118, '    public String getAppletInfo() {\n', 0),
(18819, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(18820, 120, '    }\n', 0),
(18821, 121, '}\n', 0),
(18822, 0, 'import java.util.Scanner;\r\n', 0),
(18823, 1, ' class Years{\r\n', 0),
(18824, 2, '   public int getYear(){\r\n', 0),
(18825, 3, '	int year;\r\n', 2),
(18826, 4, '	String enteredYear;\r\n', 2),
(18827, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(18828, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(18829, 7, '	enteredYear = sc.next();\r\n', 0),
(18830, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(18831, 9, '	return year;\r\n', 0),
(18832, 10, '   }\r\n', 0),
(18833, 11, ' }\r\n', 0),
(18834, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(18835, 13, ' class Months extends Years{\r\n', 0),
(18836, 14, '   public int getMonth(){\r\n', 0),
(18837, 15, '	int month;\r\n', 2),
(18838, 16, '	String enteredMonthNumber;\r\n', 2),
(18839, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(18840, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(18841, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(18842, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(18843, 21, '	return month;\r\n', 0),
(18844, 22, '   }\r\n', 0),
(18845, 23, ' }\r\n', 0),
(18846, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(18847, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(18848, 26, ' static int numDays = 0;\r\n', 4),
(18849, 27, ' public static void main(String[] args) {\r\n', 0),
(18850, 28, '   int year;\r\n', 2),
(18851, 29, '   Months m = new Months();\r\n', 0),
(18852, 30, '   int month = m.getMonth();\r\n', 0),
(18853, 31, '   \r\n', 0),
(18854, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(18855, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(18856, 34, '   }\r\n', 0),
(18857, 35, '   else {\r\n', 0),
(18858, 36, '    switch (month) {\r\n', 0),
(18859, 37, '      case 1:\r\n', 0),
(18860, 38, '      case 3:\r\n', 0),
(18861, 39, '      case 5:\r\n', 0),
(18862, 40, '      case 7:\r\n', 0),
(18863, 41, '      case 8:\r\n', 0),
(18864, 42, '      case 10:\r\n', 0),
(18865, 43, '      case 12:\r\n', 0),
(18866, 44, '        numDays = 31;\r\n', 0),
(18867, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(18868, 46, '        break;\r\n', 0),
(18869, 47, '      case 4:\r\n', 0),
(18870, 48, '      case 6:\r\n', 0),
(18871, 49, '      case 9:\r\n', 0),
(18872, 50, '      case 11:\r\n', 0),
(18873, 51, '       numDays = 30;\r\n', 0),
(18874, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(18875, 53, '       break;\r\n', 0),
(18876, 54, '      case 2:\r\n', 0),
(18877, 55, '       year = m.getYear();\r\n', 0),
(18878, 56, '       if(year < 1) {\r\n', 0),
(18879, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(18880, 58, '       }\r\n', 0),
(18881, 59, '       else{\r\n', 0),
(18882, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(18883, 61, '         numDays = 29;\r\n', 0),
(18884, 62, '		 if(year > 2020){\r\n', 0),
(18885, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(18886, 64, '         }\r\n', 0),
(18887, 65, '         else{\r\n', 0),
(18888, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(18889, 67, '         }\r\n', 0),
(18890, 68, '        }//if at line 61\r\n', 0),
(18891, 69, '        else{\r\n', 0),
(18892, 70, '         numDays = 28;\r\n', 0),
(18893, 71, '         if (year > 2020){\r\n', 0),
(18894, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(18895, 73, '         }\r\n', 0),
(18896, 74, '         else{\r\n', 0),
(18897, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(18898, 76, '         }\r\n', 0),
(18899, 77, '         break;  \r\n', 0),
(18900, 78, '        }//else at line 70\r\n', 0),
(18901, 79, '       }//else at line 60\r\n', 0),
(18902, 80, '    }//switch at line 37\r\n', 0),
(18903, 81, '   }//else at line 36\r\n', 0),
(18904, 82, '  }//method\r\n', 0),
(18905, 83, ' }//class', 0),
(18906, 0, 'import java.util.Scanner;\r\n', 0),
(18907, 1, ' class Years{\r\n', 0),
(18908, 2, '   public int getYear(){\r\n', 0),
(18909, 3, '	int year;\r\n', 2),
(18910, 4, '	String enteredYear;\r\n', 2),
(18911, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(18912, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(18913, 7, '	enteredYear = sc.next();\r\n', 0),
(18914, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(18915, 9, '	return year;\r\n', 0),
(18916, 10, '   }\r\n', 0),
(18917, 11, ' }\r\n', 0),
(18918, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(18919, 13, ' class Months extends Years{\r\n', 0),
(18920, 14, '   public int getMonth(){\r\n', 0),
(18921, 15, '	int month;\r\n', 2),
(18922, 16, '	String enteredMonthNumber;\r\n', 2),
(18923, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(18924, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(18925, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(18926, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(18927, 21, '	return month;\r\n', 0),
(18928, 22, '   }\r\n', 0),
(18929, 23, ' }\r\n', 0),
(18930, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(18931, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(18932, 26, ' static int numDays = 0;\r\n', 3),
(18933, 27, ' public static void main(String[] args) {\r\n', 0),
(18934, 28, '   int year;\r\n', 2),
(18935, 29, '   Months m = new Months();\r\n', 0),
(18936, 30, '   int month = m.getMonth();\r\n', 0),
(18937, 31, '   \r\n', 0),
(18938, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(18939, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(18940, 34, '   }\r\n', 0),
(18941, 35, '   else {\r\n', 0),
(18942, 36, '    switch (month) {\r\n', 0),
(18943, 37, '      case 1:\r\n', 0),
(18944, 38, '      case 3:\r\n', 0),
(18945, 39, '      case 5:\r\n', 0),
(18946, 40, '      case 7:\r\n', 0),
(18947, 41, '      case 8:\r\n', 0),
(18948, 42, '      case 10:\r\n', 0),
(18949, 43, '      case 12:\r\n', 0),
(18950, 44, '        numDays = 31;\r\n', 0),
(18951, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(18952, 46, '        break;\r\n', 0),
(18953, 47, '      case 4:\r\n', 0),
(18954, 48, '      case 6:\r\n', 0),
(18955, 49, '      case 9:\r\n', 0),
(18956, 50, '      case 11:\r\n', 0),
(18957, 51, '       numDays = 30;\r\n', 0),
(18958, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(18959, 53, '       break;\r\n', 0),
(18960, 54, '      case 2:\r\n', 0),
(18961, 55, '       year = m.getYear();\r\n', 0),
(18962, 56, '       if(year < 1) {\r\n', 0),
(18963, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(18964, 58, '       }\r\n', 0),
(18965, 59, '       else{\r\n', 0),
(18966, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(18967, 61, '         numDays = 29;\r\n', 0),
(18968, 62, '		 if(year > 2020){\r\n', 0),
(18969, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(18970, 64, '         }\r\n', 0),
(18971, 65, '         else{\r\n', 0),
(18972, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(18973, 67, '         }\r\n', 0),
(18974, 68, '        }//if at line 61\r\n', 0),
(18975, 69, '        else{\r\n', 0),
(18976, 70, '         numDays = 28;\r\n', 0),
(18977, 71, '         if (year > 2020){\r\n', 0),
(18978, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(18979, 73, '         }\r\n', 0),
(18980, 74, '         else{\r\n', 0),
(18981, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(18982, 76, '         }\r\n', 0),
(18983, 77, '         break;  \r\n', 0),
(18984, 78, '        }//else at line 70\r\n', 0),
(18985, 79, '       }//else at line 60\r\n', 0),
(18986, 80, '    }//switch at line 37\r\n', 0),
(18987, 81, '   }//else at line 36\r\n', 0),
(18988, 82, '  }//method\r\n', 0),
(18989, 83, ' }//class', 0),
(18990, 0, 'public class RecursionExample2 {  \r\n', 0),
(18991, 1, 'static int count=0;  \r\n', 3),
(18992, 2, 'public int p(){  \r\n', 0),
(18993, 3, 'count++;  \r\n', 0),
(18994, 4, 'if(count<=5){  \r\n', 0),
(18995, 5, 'System.out.println("hello "+count);  \r\n', 0),
(18996, 6, 'public int p();  \r\n', 0),
(18997, 7, '}  \r\n', 0),
(18998, 8, '}  \r\n', 0),
(18999, 9, 'public static void main(String[] args) {  \r\n', 0),
(19000, 10, 'p();  \r\n', 0),
(19001, 11, '}  \r\n', 0),
(19002, 12, '}  ', 0),
(19003, 0, 'import java.awt.event.*;\n', 0),
(19004, 1, 'import java.awt.*;\n', 0),
(19005, 2, '\n', 0),
(19006, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(19007, 4, '\n', 0),
(19008, 5, '    private int mx, my;\n', 4),
(19009, 6, '    private Dimension size;\n', 6),
(19010, 7, '    private int onaroll;\n', 2),
(19011, 8, '\n', 0),
(19012, 9, '    public void init() {\n', 0),
(19013, 10, '        onaroll = 0;\n', 0),
(19014, 11, '        setSize(500, 500);\n', 0),
(19015, 12, '        size = getSize();\n', 0),
(19016, 13, '        addMouseListener(this);\n', 0),
(19017, 14, '        addMouseMotionListener(this);\n', 0),
(19018, 15, '        addComponentListener(this);\n', 0),
(19019, 16, '    }\n', 0),
(19020, 17, '\n', 0),
(19021, 18, '    public void update(Graphics g) {\n', 0),
(19022, 19, '        Dimension newSize = getSize();\n', 6),
(19023, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(19024, 21, '            g.setColor(getBackground());\n', 0),
(19025, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(19026, 23, '        } else {\n', 0),
(19027, 24, '            size = newSize;\n', 0),
(19028, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(19029, 26, '        } // Calculate new position\n', 0),
(19030, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(19031, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(19032, 29, '        paint(g);\n', 0),
(19033, 30, '    }\n', 0),
(19034, 31, '  \n', 0),
(19035, 32, '    public void paint(Graphics g) {\n', 0),
(19036, 33, '        g.setColor(Color.black);\n', 0),
(19037, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(19038, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(19039, 36, '    }\n', 0),
(19040, 37, '\n', 0),
(19041, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(19042, 39, '\n', 0),
(19043, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(19044, 41, '        e.consume();\n', 0),
(19045, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(19046, 43, '            repaint();\n', 0),
(19047, 44, '        }\n', 0),
(19048, 45, '    }\n', 0),
(19049, 46, '\n', 0),
(19050, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(19051, 48, '        int x = e.getX();\n', 0),
(19052, 49, '        int y = e.getY();\n', 0),
(19053, 50, '        e.consume();\n', 0),
(19054, 51, '        requestFocus();\n', 0),
(19055, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(19056, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(19057, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(19058, 55, '                case 0:\n', 0),
(19059, 56, '                    play(getCodeBase(), \n', 0),
(19060, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(19061, 58, '                    break;\n', 0),
(19062, 59, '                case 1:\n', 0),
(19063, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(19064, 61, '                    break;\n', 0),
(19065, 62, '                case 2:\n', 0),
(19066, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(19067, 64, '                    break;\n', 0),
(19068, 65, '                case 3:\n', 0),
(19069, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(19070, 67, '                    break;\n', 0),
(19071, 68, '                }\n', 0),
(19072, 69, '                onaroll++;\n', 0),
(19073, 70, '                if (onaroll > 5) {\n', 0),
(19074, 72, '                } else {\n', 0),
(19075, 74, '                }\n', 0),
(19076, 75, '            } else {   //first hit\n', 0),
(19077, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(19078, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(19079, 78, '                onaroll = 1;\n', 0),
(19080, 79, '            }\n', 0),
(19081, 80, '        } else {   //miss\n', 0),
(19082, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(19083, 82, '			\n', 0),
(19084, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(19085, 84, '            onaroll = 0;\n', 0),
(19086, 85, '        }\n', 0),
(19087, 86, '        repaint();\n', 0),
(19088, 87, '    }\n', 0),
(19089, 88, '\n', 0),
(19090, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(19091, 90, '\n', 0),
(19092, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(19093, 92, '        repaint();\n', 0),
(19094, 93, '    }\n', 0),
(19095, 94, '\n', 0),
(19096, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(19097, 96, '        repaint();\n', 0),
(19098, 97, '    }\n', 0),
(19099, 98, '\n', 0),
(19100, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(19101, 100, '\n', 0),
(19102, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(19103, 102, ' \n', 0),
(19104, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(19105, 104, ' \n', 0),
(19106, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(19107, 106, '        repaint();\n', 0),
(19108, 107, '    }\n', 0),
(19109, 108, ' \n', 0),
(19110, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(19111, 110, '        repaint();\n', 0),
(19112, 111, '    }\n', 0),
(19113, 112, '  \n', 0),
(19114, 113, '    public void destroy() {\n', 0),
(19115, 114, '        removeMouseListener(this);\n', 0),
(19116, 115, '        removeMouseMotionListener(this);\n', 0),
(19117, 116, '    }\n', 0),
(19118, 117, '\n', 0),
(19119, 118, '    public String getAppletInfo() {\n', 0),
(19120, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(19121, 120, '    }\n', 0),
(19122, 121, '}\n', 0),
(19123, 0, 'import java.awt.event.*;\n', 0),
(19124, 1, 'import java.awt.*;\n', 0),
(19125, 2, '\n', 0),
(19126, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(19127, 4, '\n', 0),
(19128, 5, '    private int mx, my;\n', 4),
(19129, 6, '    private Dimension size;\n', 6),
(19130, 7, '    private int onaroll;\n', 2),
(19131, 8, '\n', 0),
(19132, 9, '    public void init() {\n', 0),
(19133, 10, '        onaroll = 0;\n', 0),
(19134, 11, '        setSize(500, 500);\n', 0),
(19135, 12, '        size = getSize();\n', 0),
(19136, 13, '        addMouseListener(this);\n', 0),
(19137, 14, '        addMouseMotionListener(this);\n', 0),
(19138, 15, '        addComponentListener(this);\n', 0),
(19139, 16, '    }\n', 0),
(19140, 17, '\n', 0),
(19141, 18, '    public void update(Graphics g) {\n', 0),
(19142, 19, '        Dimension newSize = getSize();\n', 6),
(19143, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(19144, 21, '            g.setColor(getBackground());\n', 0),
(19145, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(19146, 23, '        } else {\n', 0),
(19147, 24, '            size = newSize;\n', 0),
(19148, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(19149, 26, '        } // Calculate new position\n', 0),
(19150, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(19151, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(19152, 29, '        paint(g);\n', 0),
(19153, 30, '    }\n', 0),
(19154, 31, '  \n', 0),
(19155, 32, '    public void paint(Graphics g) {\n', 0),
(19156, 33, '        g.setColor(Color.black);\n', 0),
(19157, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(19158, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(19159, 36, '    }\n', 0),
(19160, 37, '\n', 0),
(19161, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(19162, 39, '\n', 0),
(19163, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(19164, 41, '        e.consume();\n', 0),
(19165, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(19166, 43, '            repaint();\n', 0),
(19167, 44, '        }\n', 0),
(19168, 45, '    }\n', 0),
(19169, 46, '\n', 0),
(19170, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(19171, 48, '        int x = e.getX();\n', 0),
(19172, 49, '        int y = e.getY();\n', 0),
(19173, 50, '        e.consume();\n', 0),
(19174, 51, '        requestFocus();\n', 0),
(19175, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(19176, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(19177, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(19178, 55, '                case 0:\n', 0),
(19179, 56, '                    play(getCodeBase(), \n', 0),
(19180, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(19181, 58, '                    break;\n', 0),
(19182, 59, '                case 1:\n', 0),
(19183, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(19184, 61, '                    break;\n', 0),
(19185, 62, '                case 2:\n', 0),
(19186, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(19187, 64, '                    break;\n', 0),
(19188, 65, '                case 3:\n', 0),
(19189, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(19190, 67, '                    break;\n', 0),
(19191, 68, '                }\n', 0),
(19192, 69, '                onaroll++;\n', 0),
(19193, 70, '                if (onaroll > 5) {\n', 0),
(19194, 72, '                } else {\n', 0),
(19195, 74, '                }\n', 0),
(19196, 75, '            } else {   //first hit\n', 0),
(19197, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(19198, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(19199, 78, '                onaroll = 1;\n', 0),
(19200, 79, '            }\n', 0),
(19201, 80, '        } else {   //miss\n', 0),
(19202, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(19203, 82, '			\n', 0),
(19204, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(19205, 84, '            onaroll = 0;\n', 0),
(19206, 85, '        }\n', 0),
(19207, 86, '        repaint();\n', 0),
(19208, 87, '    }\n', 0),
(19209, 88, '\n', 0),
(19210, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(19211, 90, '\n', 0),
(19212, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(19213, 92, '        repaint();\n', 0),
(19214, 93, '    }\n', 0),
(19215, 94, '\n', 0),
(19216, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(19217, 96, '        repaint();\n', 0),
(19218, 97, '    }\n', 0),
(19219, 98, '\n', 0),
(19220, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(19221, 100, '\n', 0),
(19222, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(19223, 102, ' \n', 0),
(19224, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(19225, 104, ' \n', 0),
(19226, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(19227, 106, '        repaint();\n', 0),
(19228, 107, '    }\n', 0),
(19229, 108, ' \n', 0),
(19230, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(19231, 110, '        repaint();\n', 0),
(19232, 111, '    }\n', 0),
(19233, 112, '  \n', 0),
(19234, 113, '    public void destroy() {\n', 0),
(19235, 114, '        removeMouseListener(this);\n', 0),
(19236, 115, '        removeMouseMotionListener(this);\n', 0),
(19237, 116, '    }\n', 0),
(19238, 117, '\n', 0),
(19239, 118, '    public String getAppletInfo() {\n', 0),
(19240, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(19241, 120, '    }\n', 0),
(19242, 121, '}\n', 0),
(19243, 0, 'import java.util.Scanner;\r\n', 0),
(19244, 1, 'Scanner;\r\n', 0),
(19245, 2, 'xxg Scanner;\r\n', 0),
(19246, 3, ' class Years{\r\n', 0),
(19247, 4, '   public int getYear(){\r\n', 0),
(19248, 5, '	int year;\r\n', 2),
(19249, 6, '	String enteredYear;\r\n', 2),
(19250, 7, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(19251, 8, '	System.out.println("Enter the year as a number :");\r\n', 0),
(19252, 9, '  enteredYear = sc.next();\r\n', 0),
(19253, 10, '  getYear();\r\n', 0),
(19254, 11, '  Scanner =0;\r\n', 0),
(19255, 12, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(19256, 13, '	return year;\r\n', 0),
(19257, 14, '   }\r\n', 0),
(19258, 15, ' }\r\n', 0),
(19259, 16, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(19260, 17, ' class Months extends Years{\r\n', 0),
(19261, 18, '   public int getMonth(){\r\n', 0),
(19262, 19, '	int month;\r\n', 2),
(19263, 20, '	String enteredMonthNumber;\r\n', 2),
(19264, 21, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(19265, 22, '	System.out.println("Enter the month number :");\r\n', 0),
(19266, 23, '	enteredMonthNumber = sc.next();\r\n', 0),
(19267, 24, '  month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(19268, 25, '  getMonth();\r\n', 0),
(19269, 26, '  getYear(Scanner);\r\n', 0),
(19270, 27, '  Months(getYear());\r\n', 0),
(19271, 28, '	return month;\r\n', 0),
(19272, 29, '   }\r\n', 0),
(19273, 30, ' }\r\n', 0),
(19274, 31, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(19275, 32, 'class DaysPerMonth extends Months{ \r\n', 0),
(19276, 33, ' static int numDays = 0;\r\n', 3),
(19277, 34, ' public static void main(String[] args) {\r\n', 0),
(19278, 35, '   int year;\r\n', 2),
(19279, 36, '   Months m = new Months();\r\n', 0),
(19280, 37, '   int month = m.getMonth();\r\n', 0),
(19281, 38, '   Scanner =0;\r\n', 0),
(19282, 39, '   if((month < 1) || (month > 12)){ \r\n', 0),
(19283, 40, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(19284, 41, '   }\r\n', 0),
(19285, 42, '   else {\r\n', 0),
(19286, 43, '    switch (month) {\r\n', 0),
(19287, 44, '      case 1:\r\n', 0),
(19288, 45, '      case 3:\r\n', 0),
(19289, 46, '      case 5:\r\n', 0),
(19290, 47, '      case 7:\r\n', 0),
(19291, 48, '      case 8:\r\n', 0),
(19292, 49, '      case 10:\r\n', 0),
(19293, 50, '      case 12:\r\n', 0),
(19294, 51, '        numDays = 31;\r\n', 0),
(19295, 52, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(19296, 53, '        break;\r\n', 0),
(19297, 54, '      case 4:\r\n', 0),
(19298, 55, '      case 6:\r\n', 0),
(19299, 56, '      case 9:\r\n', 0),
(19300, 57, '      case 11:\r\n', 0),
(19301, 58, '       numDays = 30;\r\n', 0),
(19302, 59, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(19303, 60, '       break;\r\n', 0),
(19304, 61, '      case 2:\r\n', 0),
(19305, 62, '       year = m.getYear();\r\n', 0),
(19306, 63, '       if(year < 1) {\r\n', 0),
(19307, 64, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(19308, 65, '       }\r\n', 0),
(19309, 66, '       else{\r\n', 0),
(19310, 67, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(19311, 68, '         numDays = 29;\r\n', 0),
(19312, 69, '		 if(year > 2020){\r\n', 0),
(19313, 70, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(19314, 71, '         }\r\n', 0),
(19315, 72, '         else{\r\n', 0),
(19316, 73, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(19317, 74, '         }\r\n', 0),
(19318, 75, '        }\r\n', 0),
(19319, 76, '        else{\r\n', 0),
(19320, 77, '         numDays = 28;\r\n', 0),
(19321, 78, '         if (year > 2020){\r\n', 0),
(19322, 79, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(19323, 80, '         }\r\n', 0),
(19324, 81, '         else{\r\n', 0),
(19325, 82, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(19326, 83, '         }\r\n', 0),
(19327, 84, '         break;  \r\n', 0),
(19328, 85, '        }//else at line 70\r\n', 0),
(19329, 86, '       }//else at line 60\r\n', 0),
(19330, 87, '    }\r\n', 0),
(19331, 88, '   }//else at line 36\r\n', 0),
(19332, 89, '  }//method\r\n', 0),
(19333, 90, ' }//class', 0),
(19334, 0, 'class Pattern{ \r\n', 0),
(19335, 1, 'public static void main(String[] args) { \r\n', 0),
(19336, 2, '	 int rows = 5;\r\n', 2),
(19337, 3, '	 for(int i = 1; i <= rows; ++i) { \r\n', 0),
(19338, 4, '	 for(int j = 1; j <= i; ++j) { \r\n', 0),
(19339, 5, '	 System.out.print(j + " "); \r\n', 0),
(19340, 6, '	 } \r\n', 0),
(19341, 7, '	 System.out.println(""); \r\n', 0),
(19342, 8, ' 	} \r\n', 0),
(19343, 9, ' 	} \r\n', 0),
(19344, 10, '} ', 0),
(19345, 0, 'import java.util.Scanner;\r\n', 0),
(19346, 1, 'Scanner;\r\n', 0),
(19347, 2, 'xxg Scanner;\r\n', 0),
(19348, 3, ' class Years{\r\n', 0),
(19349, 4, '   public int getYear(){\r\n', 0),
(19350, 5, '	int year;\r\n', 2),
(19351, 6, '	String enteredYear;\r\n', 2),
(19352, 7, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(19353, 8, '	System.out.println("Enter the year as a number :");\r\n', 0),
(19354, 9, '  enteredYear = sc.next();\r\n', 0),
(19355, 10, '  getYear();\r\n', 0),
(19356, 11, '  Scanner =0;\r\n', 0),
(19357, 12, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(19358, 13, '	return year;\r\n', 0),
(19359, 14, '   }\r\n', 0),
(19360, 15, ' }\r\n', 0),
(19361, 16, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(19362, 17, ' class Months extends Years{\r\n', 0),
(19363, 18, '   public int getMonth(){\r\n', 0),
(19364, 19, '	int month;\r\n', 2),
(19365, 20, '	String enteredMonthNumber;\r\n', 2),
(19366, 21, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(19367, 22, '	System.out.println("Enter the month number :");\r\n', 0),
(19368, 23, '	enteredMonthNumber = sc.next();\r\n', 0),
(19369, 24, '  month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(19370, 25, '  getMonth();\r\n', 0),
(19371, 26, '  getYear(Scanner);\r\n', 0),
(19372, 27, '  Months(getYear());\r\n', 0),
(19373, 28, '	return month;\r\n', 0),
(19374, 29, '   }\r\n', 0),
(19375, 30, ' }\r\n', 0),
(19376, 31, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(19377, 32, 'class DaysPerMonth extends Months{ \r\n', 0),
(19378, 33, ' static int numDays = 0;\r\n', 3),
(19379, 34, ' public static void main(String[] args) {\r\n', 0),
(19380, 35, '   int year;\r\n', 2),
(19381, 36, '   Months m = new Months();\r\n', 0),
(19382, 37, '   int month = m.getMonth();\r\n', 0),
(19383, 38, '   Scanner =0;\r\n', 0),
(19384, 39, '   if((month < 1) || (month > 12)){ \r\n', 0),
(19385, 40, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(19386, 41, '   }\r\n', 0),
(19387, 42, '   else {\r\n', 0),
(19388, 43, '    switch (month) {\r\n', 0),
(19389, 44, '      case 1:\r\n', 0),
(19390, 45, '      case 3:\r\n', 0),
(19391, 46, '      case 5:\r\n', 0),
(19392, 47, '      case 7:\r\n', 0),
(19393, 48, '      case 8:\r\n', 0),
(19394, 49, '      case 10:\r\n', 0),
(19395, 50, '      case 12:\r\n', 0),
(19396, 51, '        numDays = 31;\r\n', 0);
INSERT INTO `variable` (`id`, `line_num`, `line`, `cv`) VALUES
(19397, 52, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(19398, 53, '        break;\r\n', 0),
(19399, 54, '      case 4:\r\n', 0),
(19400, 55, '      case 6:\r\n', 0),
(19401, 56, '      case 9:\r\n', 0),
(19402, 57, '      case 11:\r\n', 0),
(19403, 58, '       numDays = 30;\r\n', 0),
(19404, 59, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(19405, 60, '       break;\r\n', 0),
(19406, 61, '      case 2:\r\n', 0),
(19407, 62, '       year = m.getYear();\r\n', 0),
(19408, 63, '       if(year < 1) {\r\n', 0),
(19409, 64, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(19410, 65, '       }\r\n', 0),
(19411, 66, '       else{\r\n', 0),
(19412, 67, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(19413, 68, '         numDays = 29;\r\n', 0),
(19414, 69, '		 if(year > 2020){\r\n', 0),
(19415, 70, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(19416, 71, '         }\r\n', 0),
(19417, 72, '         else{\r\n', 0),
(19418, 73, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(19419, 74, '         }\r\n', 0),
(19420, 75, '        }\r\n', 0),
(19421, 76, '        else{\r\n', 0),
(19422, 77, '         numDays = 28;\r\n', 0),
(19423, 78, '         if (year > 2020){\r\n', 0),
(19424, 79, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(19425, 80, '         }\r\n', 0),
(19426, 81, '         else{\r\n', 0),
(19427, 82, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(19428, 83, '         }\r\n', 0),
(19429, 84, '         break;  \r\n', 0),
(19430, 85, '        }//else at line 70\r\n', 0),
(19431, 86, '       }//else at line 60\r\n', 0),
(19432, 87, '    }\r\n', 0),
(19433, 88, '   }//else at line 36\r\n', 0),
(19434, 89, '  }//method\r\n', 0),
(19435, 90, ' }//class', 0),
(19436, 0, 'class HelloWorld { \r\n', 0),
(19437, 1, '	public static void main(String args[]) \r\n', 0),
(19438, 2, '	{ \r\n', 0),
(19439, 3, '		System.out.println("Hello World"); \r\n', 0),
(19440, 4, '	} \r\n', 0),
(19441, 5, '} \r\n', 0),
(19442, 0, 'import java.awt.event.*;\n', 0),
(19443, 1, 'import java.awt.*;\n', 0),
(19444, 2, '\n', 0),
(19445, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(19446, 4, '\n', 0),
(19447, 5, '    private int mx, my;\n', 4),
(19448, 6, '    private Dimension size;\n', 6),
(19449, 7, '    private int onaroll;\n', 2),
(19450, 8, '\n', 0),
(19451, 9, '    public void init() {\n', 0),
(19452, 10, '        onaroll = 0;\n', 0),
(19453, 11, '        setSize(500, 500);\n', 0),
(19454, 12, '        size = getSize();\n', 0),
(19455, 13, '        addMouseListener(this);\n', 0),
(19456, 14, '        addMouseMotionListener(this);\n', 0),
(19457, 15, '        addComponentListener(this);\n', 0),
(19458, 16, '    }\n', 0),
(19459, 17, '\n', 0),
(19460, 18, '    public void update(Graphics g) {\n', 0),
(19461, 19, '        Dimension newSize = getSize();\n', 6),
(19462, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(19463, 21, '            g.setColor(getBackground());\n', 0),
(19464, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(19465, 23, '        } else {\n', 0),
(19466, 24, '            size = newSize;\n', 0),
(19467, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(19468, 26, '        } // Calculate new position\n', 0),
(19469, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(19470, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(19471, 29, '        paint(g);\n', 0),
(19472, 30, '    }\n', 0),
(19473, 31, '  \n', 0),
(19474, 32, '    public void paint(Graphics g) {\n', 0),
(19475, 33, '        g.setColor(Color.black);\n', 0),
(19476, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(19477, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(19478, 36, '    }\n', 0),
(19479, 37, '\n', 0),
(19480, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(19481, 39, '\n', 0),
(19482, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(19483, 41, '        e.consume();\n', 0),
(19484, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(19485, 43, '            repaint();\n', 0),
(19486, 44, '        }\n', 0),
(19487, 45, '    }\n', 0),
(19488, 46, '\n', 0),
(19489, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(19490, 48, '        int x = e.getX();\n', 0),
(19491, 49, '        int y = e.getY();\n', 0),
(19492, 50, '        e.consume();\n', 0),
(19493, 51, '        requestFocus();\n', 0),
(19494, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(19495, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(19496, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(19497, 55, '                case 0:\n', 0),
(19498, 56, '                    play(getCodeBase(), \n', 0),
(19499, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(19500, 58, '                    break;\n', 0),
(19501, 59, '                case 1:\n', 0),
(19502, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(19503, 61, '                    break;\n', 0),
(19504, 62, '                case 2:\n', 0),
(19505, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(19506, 64, '                    break;\n', 0),
(19507, 65, '                case 3:\n', 0),
(19508, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(19509, 67, '                    break;\n', 0),
(19510, 68, '                }\n', 0),
(19511, 69, '                onaroll++;\n', 0),
(19512, 70, '                if (onaroll > 5) {\n', 0),
(19513, 72, '                } else {\n', 0),
(19514, 74, '                }\n', 0),
(19515, 75, '            } else {   //first hit\n', 0),
(19516, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(19517, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(19518, 78, '                onaroll = 1;\n', 0),
(19519, 79, '            }\n', 0),
(19520, 80, '        } else {   //miss\n', 0),
(19521, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(19522, 82, '			\n', 0),
(19523, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(19524, 84, '            onaroll = 0;\n', 0),
(19525, 85, '        }\n', 0),
(19526, 86, '        repaint();\n', 0),
(19527, 87, '    }\n', 0),
(19528, 88, '\n', 0),
(19529, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(19530, 90, '\n', 0),
(19531, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(19532, 92, '        repaint();\n', 0),
(19533, 93, '    }\n', 0),
(19534, 94, '\n', 0),
(19535, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(19536, 96, '        repaint();\n', 0),
(19537, 97, '    }\n', 0),
(19538, 98, '\n', 0),
(19539, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(19540, 100, '\n', 0),
(19541, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(19542, 102, ' \n', 0),
(19543, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(19544, 104, ' \n', 0),
(19545, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(19546, 106, '        repaint();\n', 0),
(19547, 107, '    }\n', 0),
(19548, 108, ' \n', 0),
(19549, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(19550, 110, '        repaint();\n', 0),
(19551, 111, '    }\n', 0),
(19552, 112, '  \n', 0),
(19553, 113, '    public void destroy() {\n', 0),
(19554, 114, '        removeMouseListener(this);\n', 0),
(19555, 115, '        removeMouseMotionListener(this);\n', 0),
(19556, 116, '    }\n', 0),
(19557, 117, '\n', 0),
(19558, 118, '    public String getAppletInfo() {\n', 0),
(19559, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(19560, 120, '    }\n', 0),
(19561, 121, '}\n', 0),
(19562, 0, 'import java.awt.event.*;\n', 0),
(19563, 1, 'import java.awt.*;\n', 0),
(19564, 2, '\n', 0),
(19565, 3, 'public class JumpingBox extends java.applet.Applet implements MouseListener, MouseMotionListener, ComponentListener {\n', 0),
(19566, 4, '\n', 0),
(19567, 5, '    private int mx, my;\n', 4),
(19568, 6, '    private Dimension size;\n', 6),
(19569, 7, '    private int onaroll;\n', 2),
(19570, 8, '\n', 0),
(19571, 9, '    public void init() {\n', 0),
(19572, 10, '        onaroll = 0;\n', 0),
(19573, 11, '        setSize(500, 500);\n', 0),
(19574, 12, '        size = getSize();\n', 0),
(19575, 13, '        addMouseListener(this);\n', 0),
(19576, 14, '        addMouseMotionListener(this);\n', 0),
(19577, 15, '        addComponentListener(this);\n', 0),
(19578, 16, '    }\n', 0),
(19579, 17, '\n', 0),
(19580, 18, '    public void update(Graphics g) {\n', 0),
(19581, 19, '        Dimension newSize = getSize();\n', 6),
(19582, 20, '        if (size.equals(newSize)) { // Erase old box\n', 0),
(19583, 21, '            g.setColor(getBackground());\n', 0),
(19584, 22, '            g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(19585, 23, '        } else {\n', 0),
(19586, 24, '            size = newSize;\n', 0),
(19587, 25, '            g.clearRect(0, 0, size.width, size.height);\n', 0),
(19588, 26, '        } // Calculate new position\n', 0),
(19589, 27, '        mx = (int) (Math.random() * 1000) % (size.width - (size.width / 10));\n', 0),
(19590, 28, '        my = (int) (Math.random() * 1000) % (size.height - (size.height / 10));\n', 0),
(19591, 29, '        paint(g);\n', 0),
(19592, 30, '    }\n', 0),
(19593, 31, '  \n', 0),
(19594, 32, '    public void paint(Graphics g) {\n', 0),
(19595, 33, '        g.setColor(Color.black);\n', 0),
(19596, 34, '        g.drawRect(0, 0, size.width - 1, size.height - 1);\n', 0),
(19597, 35, '        g.drawRect(mx, my, (size.width / 10) - 1,(size.height / 10) - 1);\n', 0),
(19598, 36, '    }\n', 0),
(19599, 37, '\n', 0),
(19600, 38, '    public void mouseDragged(MouseEvent e) {}\n', 0),
(19601, 39, '\n', 0),
(19602, 40, '    public void mouseMoved(MouseEvent e) {\n', 0),
(19603, 41, '        e.consume();\n', 0),
(19604, 42, '        if ((e.getX() % 3 == 0) && (e.getY() % 3 == 0)) {\n', 0),
(19605, 43, '            repaint();\n', 0),
(19606, 44, '        }\n', 0),
(19607, 45, '    }\n', 0),
(19608, 46, '\n', 0),
(19609, 47, '    public void mousePressed(MouseEvent e) {\n', 0),
(19610, 48, '        int x = e.getX();\n', 0),
(19611, 49, '        int y = e.getY();\n', 0),
(19612, 50, '        e.consume();\n', 0),
(19613, 51, '        requestFocus();\n', 0),
(19614, 52, '        if (mx < x && x < mx + getSize().width / 10 - 1 && my < y && y < my + getSize().height / 10 - 1) {  //determine if hit\n', 0),
(19615, 53, '            if (onaroll > 0) {   //not first hit\n', 0),
(19616, 54, '                switch (onaroll%4) {   //play a sound\n', 0),
(19617, 55, '                case 0:\n', 0),
(19618, 56, '                    play(getCodeBase(), \n', 0),
(19619, 57, '                         "sounds/tiptoe.thru.the.tulips.au");\n', 0),
(19620, 58, '                    break;\n', 0),
(19621, 59, '                case 1:\n', 0),
(19622, 60, '                    play(getCodeBase(), "sounds/danger.au");\n', 0),
(19623, 61, '                    break;\n', 0),
(19624, 62, '                case 2:\n', 0),
(19625, 63, '                    play(getCodeBase(), "sounds/adapt-or-die.au");\n', 0),
(19626, 64, '                    break;\n', 0),
(19627, 65, '                case 3:\n', 0),
(19628, 66, '                    play(getCodeBase(), "sounds/cannot.be.completed.au");\n', 0),
(19629, 67, '                    break;\n', 0),
(19630, 68, '                }\n', 0),
(19631, 69, '                onaroll++;\n', 0),
(19632, 70, '                if (onaroll > 5) {\n', 0),
(19633, 72, '                } else {\n', 0),
(19634, 74, '                }\n', 0),
(19635, 75, '            } else {   //first hit\n', 0),
(19636, 76, '                getAppletContext().showStatus("HIT IT AGAIN! AGAIN!");\n', 0),
(19637, 77, '                play(getCodeBase(), "sounds/that.hurts.au");\n', 0),
(19638, 78, '                onaroll = 1;\n', 0),
(19639, 79, '            }\n', 0),
(19640, 80, '        } else {   //miss\n', 0),
(19641, 81, '            getAppletContext().showStatus("You hit nothing at (" + x + ", " + y + "), exactly");\n', 0),
(19642, 82, '			\n', 0),
(19643, 83, '            play(getCodeBase(), "sounds/thin.bell.au");\n', 0),
(19644, 84, '            onaroll = 0;\n', 0),
(19645, 85, '        }\n', 0),
(19646, 86, '        repaint();\n', 0),
(19647, 87, '    }\n', 0),
(19648, 88, '\n', 0),
(19649, 89, '    public void mouseReleased(MouseEvent e) {}\n', 0),
(19650, 90, '\n', 0),
(19651, 91, '    public void mouseEntered(MouseEvent e) {\n', 0),
(19652, 92, '        repaint();\n', 0),
(19653, 93, '    }\n', 0),
(19654, 94, '\n', 0),
(19655, 95, '    public void mouseExited(MouseEvent e) {\n', 0),
(19656, 96, '        repaint();\n', 0),
(19657, 97, '    }\n', 0),
(19658, 98, '\n', 0),
(19659, 99, '    public void mouseClicked(MouseEvent e) {}\n', 0),
(19660, 100, '\n', 0),
(19661, 101, '    public void componentHidden(ComponentEvent e) {}\n', 0),
(19662, 102, ' \n', 0),
(19663, 103, '    public void componentMoved(ComponentEvent e) {}\n', 0),
(19664, 104, ' \n', 0),
(19665, 105, '    public void componentResized(ComponentEvent e) {\n', 0),
(19666, 106, '        repaint();\n', 0),
(19667, 107, '    }\n', 0),
(19668, 108, ' \n', 0),
(19669, 109, '    public void componentShown(ComponentEvent e) {\n', 0),
(19670, 110, '        repaint();\n', 0),
(19671, 111, '    }\n', 0),
(19672, 112, '  \n', 0),
(19673, 113, '    public void destroy() {\n', 0),
(19674, 114, '        removeMouseListener(this);\n', 0),
(19675, 115, '        removeMouseMotionListener(this);\n', 0),
(19676, 116, '    }\n', 0),
(19677, 117, '\n', 0),
(19678, 118, '    public String getAppletInfo() {\n', 0),
(19679, 119, '        return "Title: JumpingBox\n" + "Author: Anonymous";\n', 0),
(19680, 120, '    }\n', 0),
(19681, 121, '}\n', 0),
(19682, 0, 'import java.util.Scanner;\r\n', 0),
(19683, 1, ' class Years{\r\n', 0),
(19684, 2, '   public int getYear(){\r\n', 0),
(19685, 3, '	int year;\r\n', 2),
(19686, 4, '	String enteredYear;\r\n', 2),
(19687, 5, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(19688, 6, '	System.out.println("Enter the year as a number :");\r\n', 0),
(19689, 7, '	enteredYear = sc.next();\r\n', 0),
(19690, 8, '	year = Integer.parseInt(enteredYear);\r\n', 0),
(19691, 9, '	return year;\r\n', 0),
(19692, 10, '   }\r\n', 0),
(19693, 11, ' }\r\n', 0),
(19694, 12, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(19695, 13, ' class Months extends Years{\r\n', 0),
(19696, 14, '   public int getMonth(){\r\n', 0),
(19697, 15, '	int month;\r\n', 2),
(19698, 16, '	String enteredMonthNumber;\r\n', 2),
(19699, 17, '	Scanner sc = new Scanner(System.in);\r\n', 0),
(19700, 18, '	System.out.println("Enter the month number :");\r\n', 0),
(19701, 19, '	enteredMonthNumber = sc.next();\r\n', 0),
(19702, 20, '	month = Integer.parseInt(enteredMonthNumber);\r\n', 0),
(19703, 21, '	return month;\r\n', 0),
(19704, 22, '   }\r\n', 0),
(19705, 23, ' }\r\n', 0),
(19706, 24, '//------------------------------------------------------------------------------------------------------------------------------------\r\n', 0),
(19707, 25, 'class DaysPerMonth extends Months{ \r\n', 0),
(19708, 26, ' static int numDays = 0;\r\n', 3),
(19709, 27, ' public static void main(String[] args) {\r\n', 0),
(19710, 28, '   int year;\r\n', 2),
(19711, 29, '   Months m = new Months();\r\n', 0),
(19712, 30, '   int month = m.getMonth();\r\n', 0),
(19713, 31, '   \r\n', 0),
(19714, 32, '   if((month < 1) || (month > 12)){ \r\n', 0),
(19715, 33, '     System.out.println("Kindly enter a number between 0 to 13.");\r\n', 0),
(19716, 34, '   }\r\n', 0),
(19717, 35, '   else {\r\n', 0),
(19718, 36, '    switch (month) {\r\n', 0),
(19719, 37, '      case 1:\r\n', 0),
(19720, 38, '      case 3:\r\n', 0),
(19721, 39, '      case 5:\r\n', 0),
(19722, 40, '      case 7:\r\n', 0),
(19723, 41, '      case 8:\r\n', 0),
(19724, 42, '      case 10:\r\n', 0),
(19725, 43, '      case 12:\r\n', 0),
(19726, 44, '        numDays = 31;\r\n', 0),
(19727, 45, '        System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(19728, 46, '        break;\r\n', 0),
(19729, 47, '      case 4:\r\n', 0),
(19730, 48, '      case 6:\r\n', 0),
(19731, 49, '      case 9:\r\n', 0),
(19732, 50, '      case 11:\r\n', 0),
(19733, 51, '       numDays = 30;\r\n', 0),
(19734, 52, '       System.out.println("Month " + month + " consists of " + numDays + " days.");\r\n', 0),
(19735, 53, '       break;\r\n', 0),
(19736, 54, '      case 2:\r\n', 0),
(19737, 55, '       year = m.getYear();\r\n', 0),
(19738, 56, '       if(year < 1) {\r\n', 0),
(19739, 57, '        System.out.println("Kindly enter a valid year.");\r\n', 0),
(19740, 58, '       }\r\n', 0),
(19741, 59, '       else{\r\n', 0),
(19742, 60, '        if(((year % 4 == 0) &&  !(year % 100 == 0)) || (year % 400 == 0)){\r\n', 0),
(19743, 61, '         numDays = 29;\r\n', 0),
(19744, 62, '		 if(year > 2020){\r\n', 0),
(19745, 63, '		  System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(19746, 64, '         }\r\n', 0),
(19747, 65, '         else{\r\n', 0),
(19748, 66, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(19749, 67, '         }\r\n', 0),
(19750, 68, '        }//if at line 61\r\n', 0),
(19751, 69, '        else{\r\n', 0),
(19752, 70, '         numDays = 28;\r\n', 0),
(19753, 71, '         if (year > 2020){\r\n', 0),
(19754, 72, '          System.out.println("In year " + year + " month " + month + " will consist of " + numDays + " days.");\r\n', 0),
(19755, 73, '         }\r\n', 0),
(19756, 74, '         else{\r\n', 0),
(19757, 75, '          System.out.println("In year " + year + " month " + month + " has consisted of " + numDays + " days.");\r\n', 0),
(19758, 76, '         }\r\n', 0),
(19759, 77, '         break;  \r\n', 0),
(19760, 78, '        }//else at line 70\r\n', 0),
(19761, 79, '       }//else at line 60\r\n', 0),
(19762, 80, '    }//switch at line 37\r\n', 0),
(19763, 81, '   }//else at line 36\r\n', 0),
(19764, 82, '  }//method\r\n', 0),
(19765, 83, ' }//class', 0);

-- --------------------------------------------------------

--
-- Table structure for table `variableweigths`
--

CREATE TABLE IF NOT EXISTS `variableweigths` (
  `v_id` int(11) NOT NULL AUTO_INCREMENT,
  `g_variables` int(11) NOT NULL,
  `l_variables` int(11) NOT NULL,
  `p_data_types` int(11) NOT NULL,
  `c_data_types` int(11) NOT NULL,
  PRIMARY KEY (`v_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=3 ;

--
-- Dumping data for table `variableweigths`
--

INSERT INTO `variableweigths` (`v_id`, `g_variables`, `l_variables`, `p_data_types`, `c_data_types`) VALUES
(1, 2, 4, 2, 5),
(2, 2, 3, 4, 5);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
